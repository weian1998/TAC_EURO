//>>built
require({cache:{
'Sage/TaskPane/_BaseTaskPaneTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/_BaseTaskPaneTasklet", [
    'Sage/UI/Dialogs',
    'dojo/i18n!./nls/_BaseTaskPaneTasklet',
    'dojo/_base/declare'
],
function (Dialogs, i18nStrings, declare) {
    var _baseTaskPaneTasklet = declare('Sage.TaskPane._BaseTaskPaneTasklet', null, {
        currentEntityId: '',
        currentEntityTableName: '',
        currentEntityType: '',
        contextService: null,
        selectedRecordActionCallback: '',
        selectionContainer: '_hfSelections',

        //begin localization
        selectRecordsTitle: 'Invalid Selection',
        selectRecords: 'Please select a record before continuing.',
        selectSingleRecord: 'Please select a single record before continuing.',
        noRecordsSelectedProcessAll: 'No records selected. The full group, ${0} record(s), will be processed.  Proceed?',
        invalidSelectionTitle: 'Invalid Selection',
        errorSelectionInfo: 'There was an error retrieving information about the selected records.',
        errorNoData: 'No data available.',
        yesButtonText: 'Yes',
        noButtonText: 'No',
        salesLogixPageTitle: 'SalesLogix',
        //end localization

        constructor: function (args) {
            dojo.mixin(this, args);
            dojo.mixin(this, i18nStrings);
        },
        getSelectionInfo: function () {
            try {
                return Sage.Utility.getSelectionInfo();
            }
            catch (e) {
                Dialogs.alert(this.errorNoData);
                return null;
            }
        },
        //Allows the selected records to be processed before the code-behind action called from javascript.  In the case
        //of CopyProfile, the ItemCommand server-side event is also called when the user clicks on the CopyProfile link.  That is 
        //where the CopyProfile dialog is prepared and launched.
        prepareSelectedRecords: function (callback) {
            //store the passed-in callback method in a variable so that it can be accessed by other methods.
            //this was done because ExtJs only has an asynchronous confirm dialog so we needed a way to
            //have a callback method (from the confirm prompt) call another callback method.  The confirm
            //dialog callback only takes a single parameter that is the user's button selection on the dialog.
            this.selectedRecordActionCallback = callback;
            var self = this;
            try {
                this.selectionInfo = this.getSelectionInfo();
            }
            catch (e) {
                Dialogs.showInfo(this.errorNoData);
            }

            if (this.selectionInfo.selectionCount == 0 && this.selectionInfo.recordCount > 0) {
                var dialogBody = dojo.string.substitute(this.noRecordsSelectedProcessAll, [this.selectionInfo.recordCount]);
                Dialogs.raiseQueryDialog(
                    this.salesLogixPageTitle,
                    dialogBody,
                    function (result) {
                        self.storeAllSelectionsOrCancel(result, self.selectionInfo);
                    },
                    this.yesButtonText,
                    this.noButtonText
                );
            }
            else {
                if (this.selectionInfo.recordCount > 0) {
                    this.saveSelections(this.selectedRecordActionCallback, this.selectionInfo);
                } else {
                    Dialogs.showInfo(this.errorNoData);
                }
            }
        },
        storeAllSelectionsOrCancel: function (agree, selectionInfo) {
            if (agree) {
                selectionInfo.mode = "selectAll";
                this.saveSelections(this.selectedRecordActionCallback, selectionInfo);
            }
            else {
                var selections = dojo.byId([this.clientId, this.selectionContainer].join(''));
                if (selections) {
                    selections.value = "cancel";
                }
            }
        },
        saveSelections: function (callback, selectionInfo) {
            if (selectionInfo != null) {
                var svc = Sage.Services.getService("SelectionContextService");
                svc.setSelectionContext(selectionInfo.key, selectionInfo, callback);
                var selections = dojo.byId([this.clientId, this.selectionContainer].join(''));
                if (selections) {
                    selections.value = selectionInfo.key;
                }
            }
        },
        verifySelection: function (selectionInfo) {
            if (selectionInfo != null) {
                return (selectionInfo.selectionCount != 0);
            }
            return false;
        },
        verifySingleSelection: function (selectionInfo) {
            if (selectionInfo != null) {
                return (selectionInfo.selectionCount === 1);
            }
            return false;
        },
        getCurrentEntity: function () {
            if (Sage.Services.hasService("ClientEntityContext")) {
                this.contextService = Sage.Services.getService("ClientEntityContext");
                this.context = this.contextService.getContext();
                this.currentEntityId = this.context.EntityId;
                this.currentEntityType = this.context.EntityType;
                this.currentEntityTableName = this.context.EntityTableName;
            }
        },
        setSelectionCount: function () {
            try {
                var panel = dijit.byId('list');
                if (panel) {
                    dojo.byId("selectionCount").text(panel.getTotalSelectionCount());
                }
            }
            catch (e) {
            }
        },
        getSelectionCount: function () {
            return Sage.Services.getService("ClientGroupContext").getContext().CurrentGroupCount;
        }
    });
    return _baseTaskPaneTasklet;
});
},
'Sage/UI/Columns/OwnerType':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/OwnerType", [
    'dojo/i18n',
    'dojo/i18n!../nls/OwnerType',
    'dojo/_base/declare'
],
function (i18n, nlsResource, declare) {
    var widget = declare('Sage.UI.Columns.OwnerType', dojox.grid.cells._Base, {
        constructor: function(){
            var resource = i18n.getLocalization('Sage.UI', 'OwnerType');
            dojo.mixin(this, resource);
            this.inherited(arguments);
        },
        formatter: function(val, index) {
            var ownerTypes = { 
                'G': this.teamText,
                'D': this.departmentText,
                'S': this.systemText,
                'U': this.userText
            };
            return ownerTypes[val] ? Sage.Utility.htmlEncode(ownerTypes[val]) : val;
        },
        styles: 'text-align: right;'
    });

return widget;
});
},
'Sage/Utility/File/nls/FallbackFilePicker':function(){
﻿define("Sage/Utility/File/nls/FallbackFilePicker", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        addLibraryFileText: 'Add Library File',
        attachFileText: 'Attach File',
        descriptionText: 'Description',
        uploadFileText: 'Attachment',
        okText: 'OK',
        cancelText: 'Cancel',
        invalidContext: 'The file(s) cannot be uploaded outside of the Sales Library.',
        fileTooLargeError: 'The file upload attempt was aborted because the file was too large.',
        pleaseSelectFile: 'Please select a file first.',
        slxErrorIdInfo: 'SalesLogix Error Id: '
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/nls/Boolean':function(){
define("Sage/UI/nls/Boolean", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            yesText: 'Yes',
            noText: 'No'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/Dashboard':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/Dashboard", [
        'dojo/i18n',
        'dojox/grid/DataGrid',
        'Sage/Groups/GroupManager',
        'Sage/UI/Dialogs',
        'dojo/data/ItemFileReadStore',
        'Sage/UI/Controls/_DialogHelpIconMixin',
		'dojo/i18n!./nls/Dashboard',
        'dojo/i18n!../UI/Dashboard/nls/WidgetDefinition',
        'dojo/i18n!dijit/nls/common'
],
function (i18n, DataGrid, GroupManager, Dialogs, ItemFileReadStore, _DialogHelpIconMixin, Dashboard, WidgetDefinition, CommonResource) {
    Sage.namespace('Utility.Dashboard');
    dojo.mixin(Sage.Utility.Dashboard, {
        // Promotes the current group to a 'Group List' widget on the Dashbaord.
        promoteGroupToDashboard: function () {
            var widgetOptions = '<Widget name="Group List" family="System"><options><name>Group List</name><title>{0}</title><entity>{1}</entity><resource>{7}</resource><groupname>{2}</groupname><limit>{3}</limit><visiblerows>{6}</visiblerows><datasource>slxdata.ashx/slx/crm/-/analytics?entity=Sage.Entity.Interfaces.I{4}&amp;groupname={5}</datasource></options></Widget>';

            var dialogContent = new Simplate(['<div>',
                '<div">{%= $.headerText %}</div>',
                '<div id="{%= $.id %}-grid" style="width:auto;height:150px;"></div>',
                '<div align="right"><button data-dojo-type="dijit.form.Button" type="submit" class="okButton" ',
            //TODO: Add button bar feature to a Sage.UI.Dialogs option.
                'style="margin-top:5px;" data-dojo-props="onClick:function(){dijit.byId(\'promoteDialog\').promote();}"',
                '>{%= $.okText %}</button>',
                '<button data-dojo-type="dijit.form.Button" type="button" class="cancelButton" ',
            //TODO: Add button bar feature to a Sage.UI.Dialogs option.
                'style="margin-top:5px; margin-left:10px;" data-dojo-props="onClick:function(){dijit.byId(\'promoteDialog\').hide();}"',
                '>{%= $.cancelText %}</button></div>',
                '</div> ']);

            var dialog = null;
            if (dijit.byId('promoteDialog')) {
                dialog = dijit.byId('promoteDialog');
            }
            else {
                dialog = new dijit.Dialog({
                    id: 'promoteDialog',
                    title: MasterPageLinks.PromoteTitle,
                    promote: function (a, b, c) {
                        var cgi = GroupManager.GetCurrentGroupInfo();
                        var groupGrid = dijit.byId('promoteDialog-grid');
                        var items = groupGrid.selection.getSelected();                       
                        if (items.length === 0) {
                            Dialogs.showInfo(MasterPageLinks.PromotePageNoneSelected, MasterPageLinks.PromoteTitle);
                            return;
                        }
                        else {
                            var pagesList = [],
                                unlocalizedName = items[0].Name,
                                tabEntity = dijit.byId(cgi.Id);

                            if (WidgetDefinition.My_Dashboard == items[0].Name) {
                                unlocalizedName = 'My Dashboard';
                            }
                            else if (WidgetDefinition.Sales == items[0].Name) {
                                unlocalizedName = 'Sales';
                            }

                            var widgetstring = String.format(widgetOptions, tabEntity ? tabEntity.title : cgi.Name, "Sage.Entity.Interfaces.I" + cgi.Entity,
                                cgi.Name, 10, $('<div/>').text(cgi.Entity).html(), $('<div/>').text(cgi.Name).html(), 10, cgi.Entity);

                            dojo.xhrPost({
                                url: String.format("slxdata.ashx/slx/crm/-/dashboard/page?action=addwidget&name={0}&family={1}",
                                    encodeURIComponent(unlocalizedName),
                                    encodeURIComponent(items[0].Family)
                                ),
                                headers: { 'Content-Type': 'application/json' },
                                postData: widgetstring,
                                error: function (request, status, error) {
                                    Dialogs.showInfo(MasterPageLinks.Warning, request.responseText);
                                },
                                load: function (data, status) {
                                    Dialogs.showInfo(String.format(MasterPageLinks.PromotionNotification, items[0].Name, tabEntity ? tabEntity.title : cgi.Name));
                                    if (typeof callback === "function") callback(data, status);
                                }
                            });
                        }
                        //Our link is in a Repeater so there is a postback happening each time the dialog is launched.
                        //Destroy recursive to start over and avoid any dom corruption.        
                        this.destroyRecursive();
                    }
                });

                dojo.mixin(dialog, new _DialogHelpIconMixin());
                dialog.createHelpIconByTopic("PromoteGroup");
            }
            var grid = null;
            grid = new DataGrid({
                id: 'promoteDialog-grid',
                structure: [
                { field: 'Name', name: Dashboard.pageText, width: '200px' }
            ],
                selectionMode: 'single',
                height: '100px'
            }, document.createElement('div'));

            var onHide = function () {
                dojo.disconnect(hideEvent);

                setTimeout((function (dialog) {
                    return function () {
                        dialog.destroyDescendants();
                        dialog.destroy(false);
                    };
                })(dialog), 1);
            };         

            var hideEvent = dojo.connect(dialog, "hide", this, onHide);

            dojo.xhrGet({
                url: "slxdata.ashx/slx/crm/-/dashboard/page",
                cache: false,
                preventCache: true,
                handleAs: 'json',
                load: function (data, xhr) {
                    var storeData = { items: data };
                    var gridStore = new ItemFileReadStore({
                        data: storeData
                    });
                    dialog.set('content', dialogContent.apply({
                        id: dialog.id,
                        okText: CommonResource.buttonOk,
                        cancelText: CommonResource.buttonCancel,
                        headerText: MasterPageLinks.PromoteDescription
                    }));
                    dialog.show();
                    dojo.place(grid.domNode, 'promoteDialog-grid', 'replace');
                    grid.setStore(gridStore);
                },
                error: function (e) {
                    alert(MasterPageLinks.Warning + e.responseText);
                    if (console.log) {
                        console.log(e);
                    }
                }
            });
        }
    });

    return Sage.Utility.Dashboard;
});
},
'Sage/Services/nls/ActivityService':function(){
define("Sage/Services/nls/ActivityService", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            txtErrorActionMsg:'I\'m sorry, the action was not successful an error occurred.',
            txtActivity:'activity',
            txtActivities:'activities',
            txtActionDeleteActivites: 'Delete Activities',
            txtActionDeleteActivitiesQuestion: 'Only activities that you have permission to delete will be deleted. <P> Are you sure you want to delete the {0} selected {1}?',
            txtAlarm:'alarm',
            txtAlarms:'alarms',
            txtActionSnoozeAlarm:'Snooze Alarm',
            txtActionSnoozeQuestion: 'Are you sure you want to snooze the {0} selected {1} for {2} ?',
            txtActionSnoozeAllQuestion:'Are you sure you want to snooze all {0} for {1} ?',
            txtActionDismissAlarms:'Dismiss Alarms',
            txtActionDismissAlarmsQuestion:'Are you sure you want to dismiss the {0} selected {1}?',
            txtEvent:'event',
            txtEvents:'events',
            txtActionDeleteEvents: 'Delete Events',
            txtActionDeleteEventsQuestion:'Only events that you have permission to delete will be deleted. <P> Are you sure you want to delete the {0} selected {1}?',
            txtConfirmation:'confirmation',
            txtConfirmations:'confirmations',
            txtActionAcceptConfirmations:'Accept Confirmations',
            txtActionAcceptConfirmQuestion: 'Are you sure you want to accept the {0} selected {1}? This action can only be performed on New or Chnaged confirmations. All others will be ignored.',
            txtDeclineConfirmations:'Decline Confirmations',
            txtActionDeclineConfrimQuestion: 'Are you sure you want to decline the {0} selected {1}? This action can only be performed on New or Chnaged confirmations. All others will be ignored.',
            txtActionRemoveConfirmations:'Delete Confirmations',
            txtActionRemoveConfirmationsQuestion: 'Are you sure you want to delete the {0} selected {1}? This action can only be performed on Leader, Declined or Deleted confirmations. All others will be ignored.',
            txtLiteratureRequest:'literature request',
            txtLiteratureRequests:'literature requests',
            txtActionDeleteLiteratureRequests:'Delete Literature Requests',
            txtActionDeleteLiteratureRequestsQuestion:'Only literature request that you have permission to delete will be deleted. <P> Are you sure you want to delete the {0} selected {1}?'
         }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Controls/nls/CopyToClipboard':function(){
define("Sage/UI/Controls/nls/CopyToClipboard", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            closeText: 'Close',
            dialogTitle: 'Copy Text To Clipboard',
            helpText: 'Select desired text and press Control-C (Command-C on Mac) to copy to your clipboard.',
            textTab: 'Text',
            sourceTab: 'Source'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Dashboard/WidgetDefinition':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/WidgetDefinition", [
       'Sage/UI/widgetEditorLookup',
       'Sage/UI/EditorContainer',
       'dijit/form/ValidationTextBox',
       'dijit/form/NumberTextBox',
       'dijit/form/FilteringSelect',
       'dojo/data/ItemFileReadStore',
       "dojo/data/ItemFileWriteStore",
       'dojox/grid/DataGrid',
       "dojo/i18n",
       'dojo/i18n!./nls/WidgetDefinition'
],
function (widgetEditorLookup, editorContainer, validationTextBox, numberTextBox, filteringSelect, itemFileReadStore, itemFileWriteStore, dataGrid, i18n) {
    return function (def, callback) {
        if (!def.type) { def.type = 'BaseWidget'; }
        require(['Sage/UI/Dashboard/' + def.type], function (T){
          // Require the type, pass it back to the caller
          callback(new T(def));
        });
    };
});




},
'url:Sage/UI/Controls/templates/DropDownSelectPickList.html':"<div>\r\n    <select id=\"${id}-Select\" data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" dojoAttachPoint=\"comboBox\" value=\"${value}\" dojoAttachEvent=\"onBlur: _onBlur,onChange:_onChange\">\r\n    </select>\r\n</div>\r\n",
'url:Sage/MainView/ActivityMgr/templates/HistoryEditor.html':"﻿\r\n[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"historyDialog\" title=\"\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onDlgHide\">',\r\n        '<div class=\"activity-dialog\">',  //body\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\">',\r\n                '<select label=\"{%= $.regardingText %}\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_pk_Regarding\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Regarding\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                '<div dojoType=\"Sage.UI.Controls.TextBox\" shouldPublishMarkDirty=\"false\" label=\"{%= $.locationText %}\" id=\"{%= $.id %}_tb_Location\" dojoAttachPoint=\"tb_Location\" maxLength=\"255\" ></div>',\r\n            '</div>', //first tablecontainer 1 col\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\">',\r\n                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_CompletetdDate\" dojoAttachPoint=\"dtp_completedDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.completedDateText %}\"></div>',\r\n                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_StartDate\" dojoAttachPoint=\"dtp_startDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.startTimeText %}\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_Timeless\" dojoAttachPoint=\"cb_Timeless\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"cb_Timeless\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                 '<div dojoType=\"Sage.UI.Controls.DurationSelect\" shouldPublishMarkDirty=\"false\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_Duration\" dojoAttachPoint=\"sel_Duration\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    \r\n                '</div>',\r\n            '</div>', //second tablecontainer 2 col\r\n\r\n            '<div dojoType=\"dijit.layout.TabContainer\" id=\"{%= $.id %}_tc_EditHistory\"  dojoAttachPoint=\"tc_EditHistory\" class=\"tab-container\">',\r\n/*  General Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_General\" title=\"{%= $.tabNameGeneralText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_General\">',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"result_Section\" class=\"bottom-border-section\">',\r\n                        '<select label=\"{%= $.resultText %}\" id=\"{%= $.id %}_tb_Result\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Result\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"4\" labelWidth=\"4\" baseClass=\"contact-lead-radios\" >',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.contactText %}\" value=\"contact\" id=\"{%= $.id %}_rdo_Contact\" dojoAttachPoint=\"rdo_Contact\" dojoAttachEvent=\"onChange:_setContactLeadVisibility\" checked=\"true\" />',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.leadText %}\" value=\"lead\" id=\"{%= $.id %}_rdo_Lead\" dojoAttachPoint=\"rdo_Lead\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"contactContainer\" baseClass=\"bottom-border-section\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_ContactLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.opportunityText %}\" dojoAttachPoint=\"container_OppLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.accountText %}\" dojoAttachPoint=\"container_AccountLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.ticketText %}\" dojoAttachPoint=\"container_TicketLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"leadContainer\"  baseClass=\"bottom-border-section\" class=\"display-none\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_LeadLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<input dojoType=\"dijit.form.TextBox\" id=\"{%= $.id %}_tb_LeadCompanyName\" label=\"{%= $.companyText %}\" dojoAttachPoint=\"tb_LeadCompanyName\" readonly=\"true\" />',\r\n                    '</div>',                       \r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\"  class=\"bottom-border-section\">',\r\n                        '<select label=\"{%= $.categoryText %}\" id=\"{%= $.id %}_pk_Category\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Category\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"  style=\"width: {%= 472 - $.labelWidth %}px;\" ></select>', \r\n                         '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.leaderText %}\" dojoAttachPoint=\"container_LeaderLup\" class=\"remove-padding lookup-container\" style=\"width: {%= 472 - $.labelWidth %}px;\"></div>',\r\n                         '<select label=\"{%= $.priorityText %}\" id=\"{%= $.id %}_pk_Priority\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Priority\" canEditText=\"true\" itemMustExist=\"false\" pickListName=\"Priorities\" sort=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',                          \r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\"  class=\"valigntop\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_Notes\" label=\"{%= $.notesText %}\" dojoAttachPoint=\"ta_Notes\" class=\"notes-text\" ></textarea>',\r\n                    '</div>',\r\n                '</div>',  // end general tab\r\n\r\n              /* Attachments Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Attachments\" title=\"{%= $.tabNameAttachmentsText %}\" class=\"tabContent\" dojoAttachPoint=\"cp_Attachments\" dojoAttachEvent=\"onShow:_showAttachmentsTab\">',\r\n                    '<div id=\"{%= $.id %}_attachmentsGridPlaceholder\" dojoAttachPoint=\"_attachmentGridPlaceholder\" style=\"width:100%;height:100%;\" ></div>',\r\n                '</div>',  //end attachments tab\r\n            '</div>', //end tab container\r\n            '<table class=\"button-bar\">',\r\n                '<col width=\"50%\" /><col width=\"50%\" />',\r\n                 '<tr>',\r\n                    '<td class=\"alignleft\">',\r\n                        //followUp section\r\n                        '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"followUp_Section\" >',\r\n                            '<select label=\"{%= $.followupText %}\" id=\"{%= $.id %}_followUpSelect\" dojoType=\"dijit.form.ComboBox\" dojoAttachPoint=\"sel_Followup\">',\r\n                                '<option value=\"none\" selected=\"selected\">{%= $.noneText %}</option>',\r\n                                '<option value=\"atPhoneCall\">{%= Sage.Utility.Activity.getActivityTypeName(\"atPhoneCall\") %}</option>',\r\n                                '<option value=\"atAppointment\">{%= Sage.Utility.Activity.getActivityTypeName(\"atAppointment\") %}</option>',\r\n                                '<option value=\"atToDo\">{%= Sage.Utility.Activity.getActivityTypeName(\"atToDo\") %}</option>',\r\n                            '</select>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_ck_coAttachments\" dojoAttachPoint=\"ck_coAttachments\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coAttachments\">{%= $.carryOverAttachmentsText %}</label>',\r\n                            '</div>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_ck_coNotes\" dojoAttachPoint=\"ck_coNotes\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coNotes\">{%= $.carryOverNotesText %}</label>',\r\n                            '</div>',\r\n                        '</div>',//end followUp section                         \r\n                    '</td>',\r\n                    '<td class=\"alignright valignbottom\" rowspan=\"2\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btnDelete\" name=\"btn_Delete\" dojoAttachPoint=\"btn_Delete\" dojoAttachEvent=\"onClick:_deleteClick\">{%= $.deleteText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $. cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                   '<td class=\"alignleft\">',\r\n                      '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledBy\"></div>',\r\n                   '</td>',                 \r\n                '</tr>',\r\n            '</table>',\r\n        '</div>', //body\r\n    '</div>',  //dialog\r\n'</div>' //root node\r\n]\r\n",
'Sage/UI/SDataLookup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
/*
sample config object for renderMode 5 ...
 {
    id: 'ProdLookup',
    btnToolTip: 'Lookup Product',
    dialogButtonText: 'Add Product',
    displayMode: 5, //$ {qf control . LookupDisplayMode}  When adding other dijit templates, 
        need to convert control to use enum values
    dialogTitle: 'Product Lookup',
    structure: [
    {
        defaultCell: { width: 12, editable: false, styles: 'text-align: right;' },
        cells: [
        {
            name: 'Family',
            field: 'Family',
            displayField: 'Family',
            sortable: true,
            width: 15
        },
        {
            name: 'Name',
            field: 'Name',
            displayField: 'Name',
            sortable: true,
            width: 15
        },
        {
            name: 'Price',
            field: 'Price',
            displayField: 'Price',
            sortable: true,
            width: 15
        },
        {
            name: 'Program',
            field: 'Program',
            displayField: 'Program',
            sortable: true,
            width: 15
        }
    ]
    }], storeOptions: {
        resourceKind: 'products'
    },
    gridOptions: {
        selectionMode: 'Single',
        rowsPerPage: 15
    },
    doSelected: function (items) {
        var grid = dijit.byId('OppProducts');
        if (grid && grid.store) {
            grid.store.newItem({ onComplete: function (oppProduct) {
                var i;
                for (i = 0; i < items.length; i += 1) {
                    var newEntity = {};
                    var item = items[i];

                    oppProduct.Opportunity = { $key: Sage.Utility.getCurrentEntityId() };
                    //Set item to the product before destroying the key                           
                    oppProduct.Product = {};
                    delete item.index;
                    Sage.Utility.extend(oppProduct.Product, item);
                    //Clean up the item
                    delete item.$key;
                    delete item.$name;
                    delete item.$url;

                    Sage.Utility.extend(true, newEntity, oppProduct, item);
                    grid.store.saveNewEntity(newEntity, function (entity) { this._refresh(); }, function () { }, grid);
                }
            }
            });
        }
    }
}
*/
define("Sage/UI/SDataLookup", [
        'dojo/_base/html',
        'dojox/grid/DataGrid',
        'dijit/Dialog',
        'dijit/form/Button',
        'Sage/UI/ComboBox',
        'Sage/Data/BaseSDataStore',
        'Sage/UI/ConditionManager',
        'Sage/Utility',
        'Sage/_Templated',
        'Sage/UI/Columns/DateTime',
        'Sage/UI/Columns/Phone',
        'Sage/UI/Columns/PickList',
        'dijit/_Widget',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/lang',
        'dojo/i18n!./nls/SDataLookup',
        'dojo/_base/declare'
],
function (html, DataGrid, Dialog, Button, ComboBox, BaseSDataStore, ConditionManager, Utility, _Templated, DateTime, Phone, PickList, _Widget, DialogHelpIconMixin, dojoLang, nlsResource, declare) {
    //dojo.requireLocalization("Sage.UI", "SDataLookup");
    (function () {

        if (!Utility) {
            Sage.namespace("Utility");
        }
        //TODO: Move to Sage.Utility
        Utility.addToListUnique = function (item, list) {
            for (var i = 0; i < list.length; i++) {
                if (item === list[i]) {
                    return;
                }
            }
            list.push(item);
        };

        Utility.SDataLookupChildObjectFormatter = function (opts) {
            console.warn("Deprecated: Utility.SDataLookupChildObjectFormatter. Use: Sage.Utility.SDataLookup.ChildObjectFormatter");
            var feedItem = opts.grid.grid._by_idx[opts.rowIdx].item,
                res,
                i;

            if (!feedItem || !feedItem[opts.childentity] || feedItem[opts.childentity].$resources.length === 0) {
                return dojo.string.substitute('<div style="text-indent:16px">${0}</div>', [opts.value || '&nbsp;']);
            }

            opts.value = opts.value || '&nbsp;';
            res = [];
            if (opts.includeButton) {
                res.push(dojo.string.substitute([
                    '<input type=button id="SOPshow${1}" style="height:16px;width:14px;border:0;background:transparent;vertical-align:top" onclick="dojo.query(\'.SOProw${1}\').style({display:\'\'});dojo.query(\'#SOPshow${1}\').style({display:\'none\'});dojo.query(\'#SOPhide${1}\').style({display:\'\'})" value="+">',
                    '<input type=button id="SOPhide${1}" style="display:none;height:16px;width:14px;border:0;background:transparent;vertical-align:top" onclick="dojo.query(\'.SOProw${1}\').style({display:\'none\'});dojo.query(\'#SOPshow${1}\').style({display:\'\'});dojo.query(\'#SOPhide${1}\').style({display:\'none\'})" value="-"> '
                    ].join(''), [opts.value, opts.rowIdx]));
            }

            res.push(dojo.string.substitute('${0}<div class=SOProw${1} style="display:none">', [opts.value, opts.rowIdx]));
            for (i = 0; i < feedItem[opts.childentity].$resources.length; i++) {
                res.push(dojo.string.substitute('<div style="text-indent:2em">${0}</div>', [feedItem[opts.childentity].$resources[i][opts.fieldName] || '&nbsp;']));
            }

            res.push("</div>");
            return res.join('');
        };
    } ());

    var widget = declare("Sage.UI.SDataLookup", [_Widget, _Templated], {
        config: null,
        grid: null,
        sdataStore: null,
        conditionMgr: null,
        structure: null,
        displayMode: 5,
        lookupDialog: null,
        dialogTitle: '',
        dialogWidth: 675,
        dialogHeight: 500,
        seedOnRowEntity: false,
        seedOnRelatedEntity: '',
        seedProperty: '',
        seedValue: '',
        overrideSeedValueOnSearch: false,
        preFilters: null,
        initializeLookup: true,
        rowEntityId: '',
        relatedEntityId: '',
        returnObject: true,
        addEmptyListItem: false,
        fields: null, //this.fields,
        query: null,
        // Id of the calling object.  Usage: To return data in doSelected.
        callerId: null,
        //    name: '',
        //    field: '', 
        widgetsInTemplate: true,
        storeOptions: null,
        gridOptions: null,
        sortColumn: '',
        //Reference enum for Display Mode 
        displayModes: {
            'DropDownList': 0,
            'Dialog': 1,
            'HyperText': 2,
            'Text': 3,
            'ButtonOnly': 4,
            'ButtonOnlyClient': 5
        },
        btnIcon: 'images/icons/plus_16x16.gif',
        isModal: false,
        //i18n strings:
        cancelText: 'Cancel',
        closeText: 'Close',
        loadingText: 'Loading...',
        noDataText: 'No records returned',
        _initialized: false,
        //end i18n strings.
        _addCondHandle: null,
        _removeCondHandle: null,
        _originalQueryConditions: '',
        id: 'lookupControl',

        dialogContent: new Simplate(['<div >',
            '<div style="padding:5px;" id="{%= $.id %}-Condition-container"></div>',
            '<div id="{%= $.id %}-Grid-container" style="width:auto;height:{%= $.gridHeight %}px;"></div>',
            '<div class="lookupButtonWrapper">',
            '{% if($.dialogButtonText){ %}',
                '<button data-dojo-type="dijit.form.Button" type="button" id="{%= $.id %}-GridSelectButton" ',
                    'onClick="dijit.byId(\'{%= $.id %}\').getGridSelections(); ">',
                    '{%= $.dialogButtonText %} </button>',
            '{% } %}',
                '<button data-dojo-type="dijit.form.Button" type="button" id="{%= $.id %}-CloseButton" ',
                    'onClick="dijit.byId(\'{%= $.id %}-Dialog\').hide();">{%= $.hideText %}</button>',
            '</div>',
            '</div> ']),
        constructor: function () {
            this.gridOptions = {};
            this.storeOptions = {
                pagesize: 15,
                include: [],
                select: ['Id'], //what about composite keys?....  <---<<<   <---<<<
                orderby: ''
            };

            this.preFilters = [];

            this.query = {};
            this.config = {};
            this.fields = [];
            this.structure = [];
            this.grid = [];
            this.sdataStore = [];
        },
        postMixInProperties: function () {
            var cells,
                i,
                storeOptions,
                gridOptions;

            this._initialized = false;
            dojoLang.mixin(this, dojo.i18n.getLocalization("Sage.UI", "SDataLookup"));
            if (typeof this.displayMode === 'string') {
                this.displayMode = this.displayModes[this.displayMode];
            }

            // Fix column types coming in from JSON. The cell/structure type must be a constructor.
            if (this.structure && this.structure[0] && this.structure[0].cells) {
                cells = this.structure[0].cells;
                for (i = 0; i < cells.length; i++) {
                    if (cells[i] && cells[i].type && (typeof cells[i].type === 'string')) {
                        switch (cells[i].type) {
                            case 'Sage.UI.Columns.DateTime':
                                cells[i].type = DateTime;
                                break;
                            case 'Sage.UI.Columns.Phone':
                                cells[i].type = Phone;
                                break;
                            case 'Sage.UI.Columns.PickList':
                                cells[i].type = PickList;
                                break;
                            default:
                                delete cells[i].type;
                                break;
                        }
                    }
                }
            }

            //Mixin any default options that are needed but were not included in the setup
            storeOptions = {
                pagesize: 15,
                include: [],
                orderby: '',
                select: ['Id'] //what about composite keys?....  <---<<<   <---<<<            
            };

            //If we are in Mode 0, drop down list, extend the grid query options directly onto the store.
            if (this.displayMode === 0) {
                this.initSDataStore();
                this.buildSDataStoreQueryConditions();
            }
            //Else add them to the lookup level query.
            //Do we need this else block?????
            else {
                if (typeof this.gridOptions.contextualCondition === 'function') {
                    this.query = { fn: this.gridOptions.contextualCondition, scope: this };
                } else if (typeof this.gridOptions.contextualCondition === 'object') {
                    if (this.gridOptions.contextualCondition.fn) {
                        this.ensureValue(this.gridOptions.contextualCondition, 'scope', this);
                        this.query = this.gridOptions.contextualCondition;
                    }
                }

                this.buildSDataStoreQueryForSeeding();
            }

            gridOptions = {
                rowsPerPage: 15,
                loadingMessage: this.loadingText,
                noDataMessage: this.noDataText,
                query: this.query
            };

            this._originalQueryConditions = this.query.conditions;

            this.storeOptions = Utility.extend(true, storeOptions, this.storeOptions);
            this.gridOptions = Utility.extend(false, gridOptions, this.gridOptions);

            // Set the widgetTemplate here so we can select the appropriate template for the selected display mode.
            this.widgetTemplate = new Simplate(this.setTemplate(this.displayMode));
        },
        setTemplate: function (mode) {
            //TODO: Move templates to Sage.Templates

            //TODO: Code review. 
            //  store="dijit.byId(\'{%= $.id %}\').sdataStore"
            // VS.
            // store="sdataStore"
            var tplMode0 = [
                    '<div id="{%= $.id %}" style="width:inherit;" > ',
                    '<select style="width:inherit;"  id="{%= $.id %}_select" searchAttr="{%= $.field %}" labelAttr="{%= $.field %}" ',
                    ' dojoAttachPoint="focusNode" autoComplete="true" required="{%= $.required %}" data-dojo-type="Sage.UI.ComboBox" value="{%= $.setSelectedValue() %}" ',
                    ' store="dijit.byId(\'{%= $.id %}\').sdataStore" name="{%= $.field %}">',
                    '</select>',
                    '</div>'
                ],
                tplMode5 = ['<img style="cursor: pointer; padding-right: 4px;" ',
                    ' onclick="dijit.byId(\'{%= $.id %}\').showLookup();" ',
                    'src="{%= $.btnIcon %}" alt="{%= $.btnToolTip %}" title="{%= $.btnToolTip %}" >'];
            switch (mode) {
                case 0:
                    return tplMode0;
                case 5:
                    return tplMode5;
                default:
                    return tplMode5;
            }
        },
        initDialog: function () {
            this.initConditionManager();
            this.initSDataStore();
            this._setQueryForLoad();
            this.initGrid(this.initializeLookup);
        },
        _setQueryForLoad: function () {
            var condQuery = this.conditionMgr.getConditionsAsUrlWhereString(),
                seededQuery = this._originalQueryConditions,
                newQuery = '',
                queryParts = [];

            queryParts.push(condQuery);
            queryParts.push(seededQuery);

            // filter out empty items
            queryParts = dojo.filter(queryParts, function (item, index, array) {
                return item && item !== '';
            });

            newQuery = queryParts.join(' and ');

            if (newQuery) {
                this.gridOptions.query.conditions = newQuery;
            }
        },
        _setQueryForSearch: function () {
            var condQuery = this.conditionMgr.getConditionsAsUrlWhereString(),
                existingQuery = this._originalQueryConditions, // seeded query or existing query passed in via query
                newQuery = '',
                queryParts = [];

            if (this.isSeeded() && this.overrideSeedValueOnSearch === false) {
                queryParts.push(condQuery);
                queryParts.push(existingQuery);
            } else {
                if (this.isSeeded()) {
                    // discard the seed, override is true
                    queryParts.push(condQuery);
                } else {
                    // We are not seeded, add condition query and existing query if any
                    queryParts.push(condQuery);
                    queryParts.push(existingQuery);
                }
            }

            // filter out empty items
            queryParts = dojo.filter(queryParts, function (item, index, array) {
                return item && item !== '';
            });

            newQuery = queryParts.join(' and ');

            this.gridOptions.query.conditions = newQuery;
        },
        doLookup: function () {
            this.grid.destroy(false);
            this._setQueryForSearch();
            this.initGrid(true);
        },
        setSelectedValue: function () {
            var retVal = (this.value !== null) ? this.value : '',
                fieldPath,
                fieldValue,
                i;

            if (this.returnObject && this.value !== null) {
                // The field could be serveral positions in length.
                //Extract the field value from the object by walking the sdata relationship path.
                fieldPath = this.field.split('.');
                fieldValue = this.value;
                for (i = 0; i < fieldPath.length; i++) {
                    if (fieldValue) {
                        fieldValue = fieldValue[fieldPath[i]];
                    }
                }

                retVal = fieldValue;
            }

            return retVal;
        },
        getGridSelections: function () {
            var items = this.grid.selection.getSelected();

            if (items.length <= 0 && this.grid._by_idx.length === 1) {
                items.push(this.grid._by_idx[0].item);
            }

            if (items.length === 0) {
                return;
            }

            this.doSelected(items);
            this.grid.selection.deselectAll();
        },
        initConditionManager: function () {
            var addToFieldsUnique,
                cols,
                fields,
                fieldName,
                displayName,
                propertyType,
                pickListName,
                i,
                cell,
                opts,
                self,
                index,
                filter,
                field,
                op,
                value,
                visible;

            if (this.conditionMgr) {
                return;
            }

            addToFieldsUnique = function (fieldName, displayName, propertyType, pickListName, pickListStorageMode, list) {
                var i;
                for (i = 0; i < list.length; i++) {
                    if (fieldName === list[i].fieldname) {
                        return;
                    }
                }
                list.push({ fieldName: fieldName, displayName: displayName, propertyType: propertyType, pickListName: pickListName, pickListStorageMode: pickListStorageMode });
            };

            cols = this.structure[0];
            fields = this.fields;

            for (i = 0; i < cols.cells.length; i++) {
                if (cols.cells[i].excludeFromFilters !== true) {
                    if (cols.cells[i].field) {
                        cell = cols.cells[i];
                        fieldName = cell.field;
                        propertyType = cell.propertyType;
                        displayName = cell.displayField || cell.name;
                        pickListName = cell.pickListName;
                        pickListStorageMode = cell.pickListStorageMode;
                        addToFieldsUnique(fieldName, displayName, propertyType, pickListName, pickListStorageMode, fields);
                    }
                }
            }

            opts = {
                fields: fields,
                fieldNameProperty: 'fieldName',
                fieldDisplayNameProperty: 'displayName',
                fieldTypeProperty: 'propertyType',
                id: this.id + '-ConditionManager'
            };

            this.conditionMgr = new ConditionManager(opts);
            self = this;

            this._addCondHandle = dojo.subscribe('onAddLookupCondition', self, function (mgr) {
                this._increaseDialogHeight();
            });

            this._removeCondHandle = dojo.subscribe('onRemoveLookupCondition', self, function (mgr) {
                this._decreaseDialogHeight();
            });

            // Leave first condition empty
            if (this.preFilters.length > 0) {
                this.conditionMgr.setFirstConditionValue('', '=', '');
            }

            // Add conditions here for preFilter
            for (index = 0; index < this.preFilters.length; index++) {
                filter = this.preFilters[index];
                field = filter.propertyName.trim();
                op = filter.conditionOperator.trim();
                value = filter.filterValue.trim();
                visible = filter.visible;

                this.conditionMgr.addCondition(field, op, value, visible);

                if (visible) {
                    this._increaseDialogHeight();
                }
            }

            dojo.place(this.conditionMgr.domNode, dojo.byId(this.id + '-Condition-container'), 'only');
            this._doSearchConnection = dojo.connect(this.conditionMgr, 'onDoSearch', this, 'doLookup');
        },
        _increaseDialogHeight: function () {
            if (this.dialogHeight) {
                this.dialogHeight += 30;
                dojo.style([this.id, '-Dialog'].join(''), 'height', this.dialogHeight + 'px');
            }
        },
        _decreaseDialogHeight: function () {
            if (this.dialogHeight) {
                this.dialogHeight -= 30;
                dojo.style([this.id, '-Dialog'].join(''), 'height', this.dialogHeight + 'px');
            }
        },
        onDoubleClick: function (event) {
            this.getGridSelections(); // fires onSelected
            if (this.lookupDialog) {
                //this.lookupDialog.hide();
            }
        },
        initGrid: function (autoStartup) {
            //Create
            var lookupGrid = dijit.byId([this.id, '-Grid'].join(''));
            if (!lookupGrid) {
                this.gridOptions.store = this.sdataStore;
                this.gridOptions.structure = this.structure;
                this.gridOptions.id = [this.id, '-Grid'].join('');
                this.grid = new DataGrid(this.gridOptions);
                this.grid.canSort = function (index) {
                    var cols = this.structure[0];
                    return cols.cells[Math.abs(index) - 1].sortable;
                };

                dojo.connect(this.grid, 'onDblClick', this, this.onDoubleClick);
                dojo.place(this.grid.domNode, [this.id, '-Grid-container'].join(''), 'only');

                if (autoStartup) {
                    this.grid.startup();
                }
                else {
                    this.grid.query.conditions = "Id like '_hack_'";
                    this.grid.startup();
                }
            }
            //Reuse - but only if the query conditions are different
            else {
                if (this.query.conditions !== lookupGrid.query.conditions) {
                    lookupGrid.destroy();
                    this.initGrid(autoStartup);
                } else {
                    this.grid = lookupGrid;
                }
            }
        },
        initSDataStore: function () {
            var cols = this.structure[0],
            sel = this.storeOptions.select || [],
            inc = this.storeOptions.include || [],
            field,
            i,
            parts,
            combined,
            p;

            for (i = 0; i < cols.cells.length; i++) {
                if (cols.cells[i].field) {
                    field = cols.cells[i].field;
                    if (cols.cells[i].displayField) {
                        field = field + '.' + cols.cells[i].displayField;
                    }

                    Utility.addToListUnique(field.replace(/\./g, '/'), sel);

                    if (cols.cells[i].field.indexOf('.') > 0) {
                        parts = cols.cells[i].field.split('.');
                        combined = '';
                        for (p = 0; p < parts.length - 1; p++) {
                            combined += parts[p];
                            Utility.addToListUnique(combined, inc);
                            combined += '/';
                        }
                    }
                }
            }
            //Update the include and selects with additional items.
            this.storeOptions.include = inc;
            this.storeOptions.select = sel;
            //create the data store
            this.sdataStore = new BaseSDataStore(this.storeOptions);
        },
        isSeeded: function () {
            var seeded = (this.seedValue && this.seedValue !== '' && this.seedProperty !== '');
            return seeded;
        },
        buildSDataStoreQueryForSeeding: function () {
            var newQuery,
                seedQuery,
                existingQuery;

            if (this.isSeeded()) {
                seedQuery = dojo.string.substitute('${0} eq "${1}"', [this.seedProperty, this.seedValue]);
                existingQuery = this.query.conditions;

                if (existingQuery && existingQuery !== '') {
                    newQuery = existingQuery + ' and ' + seedQuery;
                } else {
                    newQuery = seedQuery;
                }

                this.sdataStore.query = {
                    conditions: newQuery
                };

                this.query.conditions = newQuery;
            }
        },
        buildSDataStoreQueryConditions: function () {
            var queryFunc;

            //Set seed values in query conditions
            if (this.seedOnRowEntity) {
                this.sdataStore.directQuery = dojo.string.substitute('Id eq "${0}"', [this.rowEntityId]);
            }

            if (this.seedOnRelatedEntity !== '') {
                this.sdataStore.directQuery = {
                    conditions: dojo.string.substitute(' ${0}.Id eq "${1}" ', [this.seedOnRelatedEntity, this.relatedEntityId])
                };
            }

            // Check if there is a conditional where/contextual condition attached to the grid options.
            // If display mode is 0, then there is no grid in this first interation.
            // Future interations will include a grid in line.
            if (typeof this.gridOptions.contextualCondition === 'function') {
                queryFunc = { fn: this.gridOptions.contextualCondition, scope: this };
                this.sdataStore.directQuery = Utility.extend(true, this.sdataStore.directQuery, queryFunc);
            }
        },
        //Not used
        render: function () {
            dojo.place(this.domNode, this.renderTo);
        },
        canShowLookup: function () {
            if (typeof this.gridOptions.contextualShow === 'function') {
                return this.gridOptions.contextualShow();
            }
            return { result: true, reason: '' };
        },
        showLookup: function () {
            var sError = 'The lookup cannot be displayed because one or more conditions have not been met.',
                oCanShowLookup = this.canShowLookup(),
                self = this,
                dHeight,
                dWidth,
                hideText = '';

            if (typeof oCanShowLookup !== 'object') {
                Sage.UI.Dialogs.showError('The call to the function canShowLookup() returned an invalid result.');
                return;
            }
            if (typeof oCanShowLookup.result === 'boolean' && oCanShowLookup.result) {
                dHeight = (self.dialogHeight > 0) ? self.dialogHeight : 450;
                dWidth = (self.dialogWidth > 0) ? self.dialogWidth : 700;
                self.lookupDialog = dijit.byId([self.id, '-Dialog'].join(''));
                if (!self.lookupDialog) {
                    self.lookupDialog = new Dialog({
                        title: self.dialogTitle,
                        id: [self.id, '-Dialog'].join(''),
                        style: ['height:', dHeight, 'px;width:', dWidth, 'px;'].join(''),
                        refreshOnShow: false,
                        _onKey: this._onKey
                    });

                    self.dialogHeight = dHeight;
                    self.dialogWidth = dWidth;

                    // If dialog is modal, we want the hide button to display "Cancel", otherwise "Close"
                    if (self.isModal) {
                        hideText = self.cancelText;
                    } else {
                        hideText = self.closeText;
                    }

                    // Calculate the grid height by subtracting the height of the other dialog elements from the dialog height: dheight-125.
                    self.lookupDialog.set("content", self.dialogContent.apply({ hideText: hideText, dialogButtonText: self.dialogButtonText, id: self.id, gridHeight: dHeight - 150 }));

                    // Create help icon
                    dojoLang.mixin(self.lookupDialog, new DialogHelpIconMixin());
                    self.lookupDialog.createHelpIconByTopic('findlookup');
                }
                else {
                    // self.dialogHeight is null on refresh, which causes the dialog to not grow when adding conditions
                    self.dialogHeight = dHeight;
                    dojo.style([self.id, '-Dialog'].join(''), 'height', dHeight + 'px');
                }

                self.lookupDialog.show();
                if (!this.isModal) {
                    dojo.destroy([self.id, '-Dialog_underlay'].join(''));
                }

                //Position the dialog just below the main header.
                dojo.style([self.id, '-Dialog'].join(''), 'top', '60px');
                dojo.style([self.id, '-Dialog'].join(''), 'left', '300px');

                self.initDialog();
            }
            else {
                if (typeof oCanShowLookup.reason === 'string' && oCanShowLookup.reason.length !== 0) {
                    sError = oCanShowLookup.reason;
                }
                Sage.UI.Dialogs.showError(sError);
            }
        },
        doSelected: function (items) {
            //do nothing, this is here as a placeholder for consumers to add custom handling for this event.
        },
        _onKey: function (/*Event*/evt) {
            //summary:
            // An override to the Dialog _onKey that allows the Lookup control to function as a modeless dialog.  
            // Future implementations will see this feature as a mixin class available to any dialog class.
            // modality: modal, modeless
            // (modality === 'modeless') ? dijit.byId('dijit_DialogUnderlay_0').hide(); 
            // OR
            //  dojo.destroy(self.id + '-Dialog_underlay');        
            var self = this,
                args = arguments;
            dojo.query('*', this.domNode).forEach(function (node, index, arr) {
                if (node === evt.target) {
                    //We are inside the dialog. Call the inherited.
                    self.inherited(args);
                }
            });
        },
        destroy: function () {
            var dialog = dijit.byId([this.id, '-Dialog'].join(''));

            if (this.btnIcon) {
                dojo.destroy(this.btnIcon);
            }

            dojo.disconnect(this._doSearchConnection);
            dojo.unsubscribe(this._addCondHandle);
            dojo.unsubscribe(this._removeCondHandle);

            if (this.conditionMgr) {
                this.conditionMgr.destroy(false);
            }

            if (dialog) {
                dialog.uninitialize();
            }

            this.inherited(arguments);
        }
    });

    return widget;
});

},
'Sage/UI/EditorContainer':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/EditorContainer", [
        "dojo/i18n",
        'dijit/form/Button',
        'dojo/_base/declare'
],
function (i18n, button, declare) {
    //dojo.requireLocalization("dijit", "common");
    var widget = declare('Sage.UI.EditorContainer', null, {
        constructor: function (config) {
            dojo.safeMixin(this, config);
            dojo.mixin(this, i18n.getLocalization("dijit", "common"));
        },
        textCell: new Simplate('<td class="editor-text">{%= $[0] %}</td>'),
        textCellWithLoading: new Simplate('<td class="editor-text">{%= $.label %}<span style="display:none; float:right;" id="{%= $.id %}_loading">{%= $.loadingLabel %}</span></td>'),
        ctrlCell: new Simplate('<td class="editor-ctrl">{%= $[0] %}</td>'),
        rowTpl: new Simplate('<tr>{%= $.cells %}</tr>'),
        btnRow: new Simplate('<tr><td></td><td id="{%= $.id %}_editor_tools"><table width="100%"><tr><td id="{%= $.id %}_custom_tools" align="left"></td><td align="right">{%= $.btn %}</td></tr></table></td></tr>'),
        tableTpl: new Simplate([
            '<table class="editor-table">',
            '<tbody>{%= $.rows %}</tbody></table>'
        ]),
        // add the listeners after parsing
        btnOk: new Simplate([
            '<button style="align:right;" data-dojo-type="dijit.form.Button" type="button"',
            ' id="{%= $.id %}_btnOK" title="{%= $.buttonOk %}">{%= $.buttonOk %}</button>'
        ]),
        btnCancel: new Simplate([
            '<button style="align:right;" data-dojo-type="dijit.form.Button" type="button"',
            ' id="{%= $.id %}_btnCancel" title="{%= $.buttonCancel %}">{%= $.buttonCancel %}</button>'
        ]),
        doTemplate: function () {
            // cycle through editorFields and put
            // the markup together
            var _rows = [];
            // TODO if order is a problem use Sage.Iterator
            for (var p in this.rows) {
                if (this.rows.hasOwnProperty(p)) {
                    var _cells = [];
                    if(this.rows[p].loading) {
                        _cells.push(this.textCellWithLoading.apply({label: this.rows[p].title, id: this._pcid, loadingLabel: this.rows[p].loading}),
                            this.ctrlCell.apply([this.rows[p].control]));
                    }
                    else {
                    _cells.push(this.textCell.apply([this.rows[p].title]),
                        this.ctrlCell.apply([this.rows[p].control]));
                    }
                    _rows.push(this.rowTpl.apply({ cells: _cells.join('') }));
                }
            }
            // push in the buttons
            var btns = [
                this.btnOk.apply({
                    id: this._pcid,
                    buttonOk: this.buttonOk
                }),
                this.btnCancel.apply({
                    id: this._pcid,
                    buttonCancel: this.buttonCancel
                })
            ];
            _rows.push(this.btnRow.apply({ btn: btns.join(''), id: this._pcid }));
            return this.tableTpl.apply({ rows: _rows.join('') });
        }
    });
    
    return widget;
});
},
'Sage/QuickForms/Design/FormDesigner':function(){
define("Sage/QuickForms/Design/FormDesigner", [
    'dojo/string',
    'dojo/topic',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dijit/_WidgetBase',
    './ControlDesignerRegistry',
    './RowDesigner',
    './ColumnDesigner',
    './Editors/FormBasicPropertyEditor',
    './Editors/FormAdvancedPropertyEditor',
    './Editors/FormUsagesPropertyEditor',
    'dojo/i18n!./nls/FormDesigner'
], function(
    string,
    topic,
    declare,
    lang,
    array,
    _WidgetBase,
    ControlDesignerRegistry,
    RowDesigner,
    ColumnDesigner,
    FormBasicPropertyEditor,
    FormAdvancedPropertyEditor,
    FormUsagesPropertyEditor,
    localization
) {
    /* todo: non visible designers should not need to inherit from _WidgetBase, but require full attribute support, more than Stateful provides */
    return declare('Sage.QuickForms.Design.FormDesigner', [_WidgetBase], {
        /**
         * The bound entry (from SData) pertaining to the QuickForm.
         */
        entry: null,
        editors: [
            FormBasicPropertyEditor,
            FormAdvancedPropertyEditor,
            FormUsagesPropertyEditor
        ],

        helpTopicName: 'Form_properties',

        _controls: null,
        _rows: null,
        _columns: null,

        displayNameText: 'Form',

        constructor: function() {
            lang.mixin(this, localization);
        },
        uninitialize: function() {
            this.inherited(arguments);

            array.forEach(this._controls, function(designer) { designer.destroyRecursive(); });
            array.forEach(this._rows, function(designer) { designer.destroyRecursive(); });
            array.forEach(this._columns, function(designer) { designer.destroyRecursive(); });
        },
        set: function(name, value) {
            var result = this.inherited(arguments);

            var names = this._getAttrNames(name),
                setter = this[names.s];

            if (lang.isFunction(setter))
            {
                topic.publish('/quickforms/design/designerModified', this, name, value, result, this);
            }

            return result;
        },
        _getNameAttr: function() {
            return lang.getObject('entity.Name', false, this.entry);
        },
        _setNameAttr: function(value) {
            lang.setObject('entity.Name', value, this.entry);
        },
        _getDescriptionAttr: function() {
            return lang.getObject('entity.Description', false, this.entry);
        },
        _setDescriptionAttr: function(value) {
            lang.setObject('entity.Description', value, this.entry);
        },
        _getActiveControlAttr: function() {
            return lang.getObject('entity.ActiveControl', false, this.entry);
        },
        _setActiveControlAttr: function(value) {
            lang.setObject('entity.ActiveControl', value, this.entry);
        },
        _getUseEntityNameAsTitleAttr: function() {
            return lang.getObject('entity.UseEntityNameAsTitle', false, this.entry);
        },
        _setUseEntityNameAsTitleAttr: function(value) {
            lang.setObject('entity.UseEntityNameAsTitle', value, this.entry);
        },
        _getEtagAttr: function() {
            return lang.getObject('etag', false, this.entry);
        },
        _setEtagAttr: function(value) {
            lang.setObject('etag', value, this.entry);
        },
        _getRowsAttr: function() {
            return this._rows || (this._rows = this._createRowDesigners());
        },
        _getRowCountAttr: function() {
            return this.get('rows').length;
        },
        _createRowDesigners: function() {
            var raw = lang.getObject('entity.Rows', false, this.entry),
                designers = [];

            array.forEach(raw, function(row, index) {
                var designer = new RowDesigner({
                    entry: row,
                    form: this,
                    index: index
                });

                designers.push(designer);
            }, this);

            return designers;
        },
        _getColumnsAttr: function() {
            return this._columns || (this._columns = this._createColumnDesigners());
        },
        _getColumnCountAttr: function() {
            return this.get('columns').length;
        },
        _createColumnDesigners: function() {
            var raw = lang.getObject('entity.Columns', false, this.entry),
                designers = [];

            array.forEach(raw, function(column, index) {
                var designer = new ColumnDesigner({
                    entry: column,
                    form: this,
                    index: index
                });

                designers.push(designer);
            }, this);

            return designers;
        },
        _getControlsAttr: function() {
            return this._controls || (this._controls = this._createControlDesigners());
        },
        _createControlDesigners: function() {
            var raw = lang.getObject('entity.Controls', false, this.entry),
                designers = [];

            array.forEach(raw, function(control) {
                var ctor = ControlDesignerRegistry.getDesignerFor(control);
                if (ctor)
                {
                    var designer = new ctor({
                        entry: control,
                        form: this
                    });

                    designers.push(designer);
                }
                else
                {
                    throw new Error('Could not find designer for type: "' + control['$type'] + '".');
                }
            }, this);

            return designers;
        },
        addControl: function(designer) {
            var designers = this.get('controls'),
                raw = lang.getObject('entity.Controls', false, this.entry) || [];

            designers.push(designer);
            raw.push(designer.get('entry'));

            lang.setObject('entity.Controls', raw, this.entry);
        },
        addRow: function(designer, at) {
            var designers = this.get('rows'),
                raw = lang.getObject('entity.Rows', false, this.entry) || [];

            designer.index = at || designer.index || designers.length;

            for (var i = designer.index; i < designers.length; i++) designers[i].index += 1;

            designers.splice(designer.index, 0, designer);
            raw.splice(designer.index, 0, designer.get('entry'));

            lang.setObject('entity.Rows', raw, this.entry);
        },
        removeRow: function(at) {
            var designers = this.get('rows'),
                raw = lang.getObject('entity.Rows', false, this.entry) || [];

            for (var i = at; i < designers.length; i++) designers[i].index -= 1;

            designers.splice(at, 1);
            raw.splice(at, 1);
        },
        addColumn: function(designer, at) {
            var designers = this.get('columns'),
                raw = lang.getObject('entity.Columns', false, this.entry) || [];

            designer.index = at || designer.index || designers.length;

            for (var i = designer.index; i < designers.length; i++) designers[i].index += 1;

            designers.splice(designer.index, 0, designer);
            raw.splice(designer.index, 0, designer.get('entry'));

            lang.setObject('entity.Columns', raw, this.entry);
        },
        removeColumn: function(at) {
            var designers = this.get('columns'),
                raw = lang.getObject('entity.Columns', false, this.entry) || [];

            for (var i = at; i < designers.length; i++) designers[i].index -= 1;

            designers.splice(at, 1);
            raw.splice(at, 1);
        },
        createUniqueId: function(desired) {
            var lookup = {},
                next = desired,
                count = 1;
            array.forEach(this.get('controls'), function(designer) {
                var id = designer.get('controlId');
                if (next == id)
                {
                    do { next = desired + count++; } while (lookup[next]);
                }
                lookup[id] = true;
            });
            return next;
        }
    });
});
},
'Sage/Utility/nls/Activity':function(){
﻿define("Sage/Utility/nls/Activity", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            ToDo: 'To-Do',
            PhoneCall: 'Phone Call',
            Meeting: 'Meeting',
            Personal: 'Personal Activity',
            Literature: 'Literature',
            Fax: 'Fax',
            Letter: 'Letter',
            Note: 'Note',
            Email: 'E-mail',
            Document: 'Document',
            DatabaseChange: 'Database Change',
            Event: 'Event',
            ScheduledEvent: 'Scheduled Event',
            Contact: 'Contact',
            Lead: 'Lead',
            New: 'New',
            Change: 'Change',
            Deleted: 'Deleted',
            Confirm: 'Confirm',
            Decline: 'Decline',
            Unknown: 'Unknown',
            Leader: 'Leader',
            Complete: 'Complete',
            confirmTypeChanged: 'Changed',
            confirmTypeConfirmed: 'Confirmed',
            confirmTypeDeleted: 'Deleted'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/nls/DesignPanel':function(){
﻿define("Sage/QuickForms/Design/nls/DesignPanel", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            cultureListText: {
                iv: "[invariant]",
                de_DE: "de-DE",
                fr_FR: "fr-FR",
                it_IT: "it-IT",
                ru_RU: "ru-RU"
            },
            helpText: "Help",
            saveText: "Save",
            cultureText: "Culture:",
            loadingText: "Loading...",
            savingText: "Saving...",
            saveErrorText: "An error occurred saving the form.",
            readErrorText: "Could not load the requested form.",
            cultureReloadConfirmText: "You have unsaved changes.  Are you sure you want to reload the form with a different culture?"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Dashboard/ChartingWidget':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/ChartingWidget", [
    'Sage/UI/Dashboard/BaseWidget',
    'Sage/Utility',
    'dojo/i18n',
    'dojo/_base/declare',
    'dojo/i18n!./nls/WidgetDefinition',
    'dojo/number'
],
function (baseWidget, util, i18n, declare) {
    //dojo.requireLocalization("Sage.UI.Dashboard", "WidgetDefinition");
    var widget = declare('Sage.UI.Dashboard.ChartingWidget', [baseWidget], {
        _chartTpl: new Simplate([
            '<table border="0" style="width:100%; height:100%">',
              '<tr>',
                '<td id="{%= $.id %}_chart" style="width:{%= $.chartWidth %}"></td>',
                '<td style="display:{%= $.legendDisplay %};font-size:10px;"><div class="dojoxGridScrollbox" style="height:{%= $.chartHeight %};overflow-y:auto;"><span id="{%= $.id %}_legend"></span></div></td>',
              '</tr>',
            '</table>'
        ]),
        _noDataTable: new Simplate([
            '<table border="0" style="width:100%; height:100%">',
              '<tr>',
                '<td>{%= $.NoDataMessage %}</td>',
              '</tr>',
            '</table>'
        ]),
        _baseEditor: function (parentCell, config) {
            // charting classes specific logic here
            var mkup = this._getEditorString(config, parentCell.id);
            // get a doc frag to add listeners to
            var frag = util.fragger(mkup);
            // parse it into a dijit
            var _dijits = util.fragToDijits(frag);
            // add it to the parent cell
            parentCell.addChild(_dijits[0], 0);
            if (parentCell.isNew) {
                parentCell._editorAdded();            
            }
        },
        _getPaneSize: function () {
            // NOTE: this.pane must already be set via html()
            return {
                w: dojo.style(this.pane, 'width'),
                h: dojo.style(this.pane, 'height')
            };
        },
        html: function (parentCell, data) {
            this.paneId = parentCell.id + '_pane';
            this.parentCellId = parentCell.id;
            this.pane = dojo.byId(this.paneId);
            this.chartId = parentCell.id + '_chart';
            this.legendId = parentCell.id + '_legend';
            this.options = parentCell.widgetOptions;
            this.showLegend = this.options.showLegend === 'true';
            this.showLabels = this.options.showLabels === 'true';
            var size = this._getPaneSize();
            this.paneWidth = size.w;
            // set the new height
            var h = Math.floor(size.w * this.prefHeight) + 'px';
            dojo.style(this.pane, 'height', h);
            // do I have data?
            if (data) {
                this.values = [];
                this._labels = [];
                
                if(this.name === 'Pie Chart') {
                    this.cumulativeValues = 0;
                    for(var i = 0; i < data.total_count; i++) {
                        data.items[i].value = Math.max(0, data.items[i].value);
                        this.cumulativeValues += Math.floor(data.items[i].value);
                    }
                }
                
                for (var i = 0; i < data.total_count; i++) {
                    var curr = data.items[i];
                    var fVal = Math.floor(curr.value);
                    var tmp = {};
                    if (this.showLabels) {
                        tmp.text = this.options.truncLabels === 'true' ?
                            this.truncate(curr.displayName,
                                this.options.truncNum || 7) :
                                curr.displayName;
                    }
                    if(this.name === 'Pie Chart') {
                        if(fVal <= 0) {
                            // No slice on the chart
                            continue;
                        }
                        
                        tmp.y = fVal;
                        var percentileVal = 0;
                        if(this.cumulativeValues > 0) {
                            percentileVal = fVal / this.cumulativeValues * 100;
                        }
                        tmp.tooltip = curr.displayName + ', ' + dojo.number.format(percentileVal, {
                            places: 2
                        }) + '%';
                        
                        var formattedValue = fVal;
                        if(formattedValue >= 1000000) {
                            formattedValue = dojo.number.format((formattedValue / 1000000), {places: 1}) + 'M';
                        }
                        else {
                            formattedValue = dojo.number.format(fVal);
                        }
                        
                        tmp.legend = '<label>' + curr.displayName + '</label><label style="float:right; margin-left:10px; margin-top:2px;">' + formattedValue + '</label>'; // Styling here for the value to be on the right
                    }
                    else {
                        var formattedValue = fVal;
                        if(formattedValue >= 1000000) {
                            formattedValue = dojo.number.format((formattedValue / 1000000), {places: 1}) + 'M';
                        }
                        else {
                            formattedValue = dojo.number.format(fVal);
                        }
                        tmp.value = i + 1; // non-zero based
                        tmp.y = fVal;
                        tmp.tooltip = curr.displayName + ', ' + formattedValue;
                    }
                    this._labels.push(tmp);
                    this.values.push(fVal); // Values is really only used for Line Charts now
                }
                
                if(data.total_count > 0) {
                    // put the table for the chart in the portlet
                    parentCell.set('content', this._chartTpl.apply({
                        id: parentCell.id,
                        chartWidth: parentCell.chartWidth,
                        legendDisplay: parentCell.legendDisplay,
                        chartHeight: h
                    }));
                    // assemble and render the chart
                    this._doChart(parentCell, data);
                }
                else {
                    var resources = Sage.UI.DataStore.Dashboard.WidgetResources;
                    dojo.style(this.pane, 'height', '20px');
                    parentCell.set('content', this._noDataTable.apply({
                        NoDataMessage: resources.noDataToDisplay
                    }));
                    this.editor(parentCell);
                }
            }
            else {
                var resources = Sage.UI.DataStore.Dashboard.WidgetResources;
                dojo.style(this.pane, 'height', '20px');
                parentCell.set('content', this._noDataTable.apply({
                    NoDataMessage: resources.noDataToDisplay
                }));
                this.editor(parentCell);
            }
            
            //Set up the footer before we go.
            this._addFooter();
        },
        _addFooter: function () {
            var _widgetDefinitionResource = i18n.getLocalization("Sage.UI.Dashboard", "WidgetDefinition");
            var portletContent = ['#', this.parentCellId, ' .dijitTitlePaneContentOuter'].join('');
            if (this.options.groupname && this.options.resource) {
                var footerHtml = String.format('<div class="dijitTitlePaneTitle" id="{0}" style="border:0;font-weight:normal;">',
                                    this.parentCellId + '_footer');
                
                if(this.options.entity !== 'Sage.Entity.Interfaces.IHistory' &&
                    this.options.groupname && this.options.resource) {
                        footerHtml += String.format('<span style="float:left; margin-top:3px;"><a href="{0}.aspx?modeid=list&gname={1}">{2}</a></span>',
                                this.options.resource,
                                this.options.groupname,
                                _widgetDefinitionResource.viewGroupText || 'View Group');
                }
                
                // DateTime Stamp Region
                footerHtml += '<span style="float:right; margin-top:3px;">' + dojo.date.locale.format(new Date(), {fullYear: true}) + '</span>';
                
                footerHtml += '</div>';

                var footer = dojo.byId(this.parentCellId + '_footer');
                if (!footer) {
                    dojo.place(footerHtml, dojo.query(portletContent)[0], 'last');
                }
                else {
                    dojo.place(footerHtml, footer, 'replace');
                }
            }
        },
        truncate: function (str, n) {
            return str.length > n ? str.slice(0, n) + '...' : str;
        }
    });
    
    return widget;
});

},
'Sage/Data/WritableSDataStore':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/WritableSDataStore", [
        'Sage/Data/BaseSDataStore',
        'Sage/Utility',
        'dojo/_base/declare',
        'dojo/_base/array',
        'dojo/_base/lang'
],
function (BaseSDataStore, Utility, declare, array, lang) {
    var writableSDataStore = declare('Sage.Data.WritableSDataStore', BaseSDataStore, {
        newItemParentReferenceProperty: false,
        constructor: function (o) {
            //dojo.data.api.Identity Implemented on BaseSDataStore...
            //dojo.data.api.Read Implemented on BaseSDataStore...
            this.features['dojo.data.api.Write'] = true;
            this.features['dojo.data.api.Notification'] = true;
            this.dirtyDataCache = { isDirty: false };
            this.singleResourceRequest = null;
            dojo.connect(this, "clearCache", this, this._clearCache);
            this.onComplete = o.onComplete;
        },
        getSingleResourceRequest: function (key) {
            this.verifyService();
            if (this.singleResourceRequest === null) {
                this.singleResourceRequest = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
                this.singleResourceRequest.setResourceKind(this.resourceKind);
                if (this.select && this.select.length > 0) {
                    this.singleResourceRequest.setQueryArg('select', this.select.join(','));
                }
                if (this.include && this.include.length > 0) {
                    this.singleResourceRequest.setQueryArg('include', this.include.join(','));
                }
            }
            if (key) {
                this.singleResourceRequest.setResourceSelector("'" + key + "'");
            }
            return this.singleResourceRequest;
        },
        onSuccess: function (context, feed) {
            //console.log('success: %o, %o', context, feed);
            if (context.onBegin) {
                context.onBegin.call(context.scope || this, feed.$totalResults, context);
            }
            if (this.onComplete) {
                this.onComplete.call(context.scope || this, feed.$resources, context);
            }
            if (context.onComplete) {
                context.onComplete.call(context.scope || this, feed.$resources, context);
            }
            this.addToCache(context, feed);
        },
        _clearCache: function () {
            this.clearDirtyDataCache();
        },
        clearDirtyDataCache: function () {
            for (var key in this.dirtyDataCache) {
                if (key !== 'isDirty') {
                    delete this.dirtyDataCache[key];
                }
            }
            this.dirtyDataCache.isDirty = false;
            //this.dirtyDataCache = { isDirty: false };
        },
        isItem: function (something) {
            var id = this.getIdentity(something);
            if (id && id !== '') {
                return this.dataCache.hasOwnProperty(id);
            }
            return false;
        },
        isItemLoaded: function (/* anything */something) {
            return this.isItem(something); //boolean
        },
        loadItem: function (/* object */keywordArgs) {
            if (!this.isItem(keywordArgs.item)) throw new Error('Unable to load ' + keywordArgs.item);
        },
        getValues: function (item, attributename) {
            if (this.isItem(item) && (typeof attributename === "string")) {
                return (item[attributename] || []).slice(0);
            }
            return [];
        },
        hasAttribute: function (item, attributename) {
            if (this.isItem(item) && (typeof attributename === "string")) {
                return attributename in item;
            }
            return false;
        },
        close: function () {
            this.clearCache();
        },
        //dojo.data.api.Write implementations...
        deleteItem: function (item, scope) {
            var options = {};
            options.scope = scope || this;
            options.ignoreETag = true;
            var request = this.getSingleResourceRequest(this.getIdentity(item));
            if (scope && typeof scope.onResponse === 'function') {
                options.success = scope.onResponse;
                options.aborted = scope.onResponse;
                options.failure = scope.onResponse;
            }
            request['delete'](item, options);
        },
        isDirty: function (item) {
            //item could be null - if so, it means is any item dirty...
            if (item) {
                var id = this.getIdentity(item);
                if (id && id !== '') {
                    return this.dirtyDataCache.hasOwnPropery(id);
                }
            }
            return this.dirtyDataCache.isDirty;
        },
        _checkPageExitWarningMessage: function () {
            var response = true;
            if (this.dirtyDataCache.isDirty) {
                var service = Sage.Services.getService("ClientBindingManagerService");
                response = confirm(service._PageExitWarningMessage);
            }
            return response;
        },
        newItem: function (args /*, parentInfo */) {
            if (!this._checkPageExitWarningMessage()) {
                return;
            }
            var request = this.createTemplateRequest();
            if (request) {
                request.read({
                    success: function (entity) {
                        this._newItemCreated(args, entity);
                        this.onNew(entity);
                    },
                    failure: this.requestTemplateFailure,
                    scope: this
                });
            }
        },
        _newItemCreated: function (options, entity) {
            if (this.newItemParentReferenceProperty) {
                var currentId = Sage.Utility.getCurrentEntityId();
                if (entity.hasOwnProperty(this.newItemParentReferenceProperty) && currentId) {
                    entity[this.newItemParentReferenceProperty] = { '$key': currentId };
                }
            }
            if ((options) && (options.onComplete) && (typeof options.onComplete === 'function')) {
                options.onComplete.call(options.scope || this, entity);
            }
        },
        createTemplateRequest: function () {
            //The entity to create the relationship/New record for, from the selection.        
            var request = new Sage.SData.Client.SDataTemplateResourceRequest(this.service);
            if ((this.resourceKind) && (this.resourceKind !== '')) {
                request.setResourceKind(this.resourceKind);
            }
            return request;
        },
        requestTemplateFailure: function () {
            //alert('Template not received.');
        },
        saveNewEntity: function (entity, success, failure, scope) {
            var request = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
            if (request) {
                if ((this.resourceKind) && (this.resourceKind !== '')) {
                    request.setResourceKind(this.resourceKind);
                }
                request.create(entity, {
                    success: success || function (created) {
                        if (typeof console !== 'undefined') {
                            console.log('created item: ' + created.$key);
                        };
                    },
                    failure: failure || function (response, o) {
                        if (typeof console !== 'undefined') {
                            console.log('Item not created: ' + entity.$key);
                        };
                    },
                    scope: scope || this
                });
            }
        },
        createItem: function (item, scope) {
            var request = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
            if (request) {
                if ((this.resourceKind) && (this.resourceKind !== '')) {
                    request.setResourceKind(this.resourceKind);
                }
                var options = {};
                options.scope = scope || this;
                options.scope.store = this;
                var fnSuccess = function (created) {
                    if (typeof console !== 'undefined') {
                        console.log('createItem() created item with $key of %o', created.$key);
                    }
                    if (typeof this.onResponse === 'function') {
                        this.onResponse.call(this, created);
                    }
                };
                options.success = fnSuccess;
                var fnFailure = function (response, o) {
                    if (typeof this.onResponse === 'function') {
                        this.onResponse.call(this, response, o);
                    }
                    else {
                        if (typeof console !== 'undefined' && response && typeof response !== 'undefined' && response.status) {
                            // Note: item may not have scope here.
                            console.log('createItem() creation failed for an item. Response: status = %o; statusText = %o', response.status, response.statusText);
                        }
                    }
                };
                options.failure = fnFailure;
                options.aborted = fnFailure;
                request.create(item, options);
            }
        },
        revert: function () {
            // return success
            // we don't really need to do much - the grid calls fetch again and gets the data...
            this.clearDirtyDataCache();
            this.onDataReset();
        },
        save: function (scope) {
            var entity, request;
            if (!this.dirtyDataCache.isDirty) {
                if (scope && typeof scope.onComplete === 'function') {
                    scope.onComplete.call(scope);
                }
                return;
            }
            for (var key in this.dirtyDataCache) {
                if (key !== 'isDirty') {
                    entity = this.dirtyDataCache[key];
                    if (this.isItem(entity)) {
                        request = this.getSingleResourceRequest(key);
                        var options = {};
                        options.scope = scope || this;
                        options.scope.store = this;
                        // per the spec, the 'If-Match' header MUST be present for PUT requests.
                        // however, we are breaking with the spec, on the consumer, to allow it to be OPTIONAL so
                        // that the provider can decide if it wishes to break with the spec or not.
                        if (!this.isSecurityManager) {
                            options.ignoreETag = true;
                        }
                        var fnSuccess = function (updated) {
                            //Get the current $etag from the response so we can continue to update the item via sdata.
                            if (this.store.dataCache[updated.$key]) {
                                this.store.dataCache[updated.$key].$etag = updated.$etag;
                            }
                            if (typeof this.onResponse === 'function') {
                                this.onResponse.call(this, updated);
                            }
                        };
                        options.success = fnSuccess;
                        var fnFailure = function (response, o) {
                            //TODO: Update the store's $etag if we get a new one during a failure?
                            if (typeof console !== 'undefined') {
                                if (response && typeof response !== 'undefined' && response.responseText) {
                                    var oResponse = dojo.fromJson(response.responseText);
                                    if (oResponse && typeof oResponse !== 'undefined' && oResponse.$key) {
                                        // entity.$key does not have the correct context here.
                                        console.log('save() item not updated for $key: %o', oResponse.$key);
                                        console.log('save() response $etag: %o', oResponse.$etag);
                                        var obj = this.store.dataCache[oResponse.$key];
                                        if (obj && obj.$etag) {
                                            console.log('save() store $etag: %o', obj.$etag);
                                        }
                                    }
                                }
                            }
                            if (typeof this.onResponse === 'function') {
                                this.onResponse.call(this, response, o);
                            }
                        };
                        options.failure = fnFailure;
                        options.aborted = fnFailure;
                        request.update(entity, options);
                    }
                    delete this.dirtyDataCache[key];
                }
            }
            this.dirtyDataCache.isDirty = false;
            // If scope.onResponse is undefined but scope.onComplete is defined.
            if (scope && typeof scope.onResponse !== 'function' && typeof scope.onComplete === 'function') {
                scope.onComplete.call(scope);
            }
        },
        setValue: function (item, attribute, value) {
            //if (typeof console !== 'undefined') { console.log('setValue - %o %o %o', item, attribute, value) };
            var oldValue = this.getValue(item, attribute, '');
            Utility.setValue(item, attribute, value);
            this.onSet(item, attribute, oldValue, value);
            if (oldValue != value) {
                this.dirtyDataCache[this.getIdentity(item)] = item;
                this.dirtyDataCache.isDirty = true;
            }
            return true;
        },
        setValues: function (item, attribute, values) {
            array.forEach(values, lang.hitch(this, function(val) {
                this.setValue(item, attribute, val);
            }));
        },
        unsetAttribute: function (item, attribute) {
            alert('not implemented - unsetAttribute');
            //delete all values of an attribute on the item...
        },
        //dojo.data.api.Notification
        onSet: function (/* item */item,
        /*attribute-name-string*/attribute,
        /*object | array*/oldValue,
        /*object | array*/newValue) {
            // summary: See dojo.data.api.Notification.onSet()

            // No need to do anything. This method is here just so that the
            // client code can connect observers to it.
        },
        onNew: function (newItem) {
            //nothing to do here - client code connects observers to this
        },
        onDelete: function (deletedItem) {
            //nothing to do here - client code connects observers to this
        },
        onDataReset: function () {
        },
        onDataSaved: function () {
        },
        onItemSaved: function (savedItem, parentInfo) {
        },
        onItemNotSaved: function (notSavedItem, error) {
        }
    });
    return writableSDataStore;
});
},
'Sage/MainView/Opportunity/OpportunityStatistics':function(){
require({cache:{
'url:Sage/MainView/Opportunity/templates/OpportunityStatistics.html':"﻿ [\r\n    '<div>',\r\n        '<div data-dojo-type=\"dijit.Dialog\" id=\"{%= $.id%}_dlgOpportunityStatistics\" title=\"{%= $.opportunityStatistics_Caption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onCancel:_close\">',\r\n            '<div dojoAttachPoint=\"loadingContainer\">',\r\n                '<br />',\r\n                '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingMessge %}</label>',\r\n                '<br />',\r\n                '<br />',\r\n            '</div>',\r\n            '<table cellspacing=\"20\" dojoAttachPoint=\"statisticsContentsContainer\" class=\"display-none\">',\r\n                '<tr>',\r\n                    '<td >',\r\n                        '<label>{%= $.opportunityCount %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"opportunityCount\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.salesPotentialTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"salesPotential\" dojoAttachPoint=\"salesPotentialTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"salesPotentialAverage\" dojoAttachPoint=\"salesPotentialAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.weightedPotentialTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"weightedPotential\" dojoAttachPoint=\"weightedPotentialTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"weightedPotentialAverage\" dojoAttachPoint=\"weightedPotentialAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.averageCloseProbability %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div dojoType=\"Sage.UI.Controls.Numeric\" constraints=\"{ places: 2, maxPlaces: 2, type: \\'percent\\' }\" dojoAttachPoint=\"closeProbability_Container\" readonly=\"readonly\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.actualAmountTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"actualAmount\" dojoAttachPoint=\"actualAmountTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"actualAmountAverage\" dojoAttachPoint=\"actualAmountAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.averageDaysOpen %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"daysOpen_Container\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.rangeEstClose %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"rangeEstClose_Container\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n            '<div class=\"button-bar alignright\">',\r\n                '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_btn_Cancel\" type=\"button\" dojoAttachEvent=\"onClick:_close\">{%= $.btnClose_Caption %}</button>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>'\r\n]"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/Opportunity/OpportunityStatistics", [
        'dojo/_base/declare',
        'dojo/i18n!./nls/OpportunityStatistics',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/lang',
        'dijit/Dialog',
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/UI/Dialogs',
        'Sage/UI/Controls/Currency',
        'Sage/UI/Controls/Numeric',
        'Sage/Data/SDataServiceRegistry',
        'dojo/date/locale',
        'Sage/Utility',
        'dojo/text!./templates/OpportunityStatistics.html',
        'dojo/html',
        'dijit/form/Form',
        'dijit/form/Select',
        'dijit/form/Textarea',
        'dijit/layout/ContentPane',
        'dojox/layout/TableContainer'
],
function (declare, i18nStrings, _DialogHelpIconMixin, dojoLang, dijitDialog, _Widget, _Templated, Dialogs, Currency, Numeric, sDataServiceRegistry, locale, utility, template, html) {
    var opportunityStatistics = declare('Sage.MainView.Opportunity.OpportunityStatistics', [_Widget, _Templated], {
        _dialog: false,
        _selectionInfo: false,
        selectedCount: 0,
        resource: '',
        currencyDecimalDigits: 2,
        currencyCode: 'USD',
        locale: Sys.CultureInfo.CurrentCulture.name,
        isMultiCurrencyEnabled: false,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function (selectionInfo) {
            this._selectionInfo = selectionInfo;
            this.currencyDecimalDigits = Sys.CultureInfo.CurrentCulture.numberFormat.CurrencyDecimalDigits;
            this.isMultiCurrencyEnabled = isMultiCurrencyEnabled();
            dojo.mixin(this, i18nStrings);
        },
        show: function () {
            this._dialog.show();
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('opportunitystatistics');
            }
            var service = sDataServiceRegistry.getSDataService('mashups');
            var request = new Sage.SData.Client.SDataNamedQueryRequest(service);
            request.setApplicationName('$app');
            request.setResourceKind('mashups');
            request.uri.setCollectionPredicate("'OpportunityStatistics'");
            request.setQueryName('execute');
            request.setQueryArg('_resultName', 'OpportunityStatisticsMashup');
            request.setQueryArg('_selectionKey', this._selectionInfo.key);
            var self = this;
            request.read({
                success: function (data) {
                    self.resource = data.$resources[0];
                    self.selectedCount = self.resource.RecordCount;
                    self.currencyCode = self.resource.CurrencyCode;
                    html.set(self.opportunityCount,self.selectedCount);
                    self.createControls();
                    var average = self.resource.DaysOpened;
                    if (self.selectedCount > 1) {
                        average = Math.round(self.resource.DaysOpened / self.selectedCount);
                    }
                    html.set(self.daysOpen_Container, average.toString());
                    dojo.addClass(self.loadingContainer, "display-none");
                    dojo.removeClass(self.statisticsContentsContainer, "display-none");
                },
                failure: function (request, status, error) {
                    Dialogs.showError(self.errorRequestingStatistics);
                }
            });
        },
        formatCurrency: function(val)
        {
            val = val.replace(" ", "", "gi");
            val = val.replace(Sys.CultureInfo.CurrentCulture.numberFormat.CurrencyDecimalSeparator, ".", "gi");
            return val;
        },
        createControls: function () {
            this.createSalesPotential();
            this.createCloseProbability();
            this.createWeightedPotential();
            this.createActualAmount();
            this.createRangeEstClose();
        },
        createSalesPotential: function () {
            this.salesPotentialTotal = new Currency({
                id: 'cur_SalesPotentialTotal',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.formatCurrency(this.resource.SalesPotential)
            });
            //}, this.salesPotentialTotal_Container);
            dojo.place(this.salesPotentialTotal.domNode, this.salesPotentialTotal_Container, 'replace');

            this.salesPotentialAverage = new Currency({
                id: 'cur_SalesPotentialAverage',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.formatCurrency(this.resource.SalesPotential) / this.selectedCount
            });
            dojo.place(this.salesPotentialAverage.domNode, this.salesPotentialAverage_Container, 'replace');
        },
        createCloseProbability: function () {
            this.closeProbability = new Numeric({
                id: 'num_CloseProbability',
                constraints: { places: 2 }, //maxPlaces: 2, type: 'percent', round: -1
                formatType: 'percent',
                disabled: true,
                value: this.resource.CloseProbability / this.selectedCount
            });
            dojo.place(this.closeProbability.domNode, this.closeProbability_Container.domNode, 'only');
            this.closeProbability_Container.value = this.resource.CloseProbability / this.selectedCount;

        },
        createWeightedPotential: function () {
            this.weightedPotentialTotal = new Currency({
                id: 'cur_WeightedPotentialTotal',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.resource.CloseProbability
            });
            dojo.place(this.weightedPotentialTotal.domNode, this.weightedPotentialTotal_Container, 'only');

            this.weightedPotentialAverage = new Currency({
                id: 'cur_WeightedPotentialAverage',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.resource.CloseProbability / this.selectedCount
            });
            dojo.place(this.weightedPotentialAverage.domNode, this.weightedPotentialAverage_Container, 'only');
        },
        createActualAmount: function () {
            this.actualAmountTotal = new Currency({
                id: 'cur_ActualAmount',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.formatCurrency(this.resource.ActualAmount)
            });
            dojo.place(this.actualAmountTotal.domNode, this.actualAmountTotal_Container, 'only');

            this.actualAmountAverage = new Currency({
                id: 'cur_ActualAmountAverage',
                constraints: { places: this.currencyDecimalDigits, currency: this.currencyCode, locale: this.locale },
                exchangeRateType: 'BaseRate',
                multiCurrency: this.isMultiCurrencyEnabled,
                disabled: true,
                'class': 'textcontrol currency',
                value: this.formatCurrency(this.resource.ActualAmount) / this.selectedCount
            });
            dojo.place(this.actualAmountAverage.domNode, this.actualAmountAverage_Container, 'only');
        },
        createRangeEstClose: function () {
            var minDate = locale.format(utility.Convert.toDateFromString(this.resource.MinDateEstClosed, true), { fullYear: true, selector: 'date' });
            var maxDate = locale.format(utility.Convert.toDateFromString(this.resource.MaxDateEstClosed, true), { fullYear: true, selector: 'date' });
            html.set(this.rangeEstClose_Container, dojo.string.substitute('${0} - ${1}', [minDate, maxDate]));
        },
        _close: function () {
            this._dialog.hide();
            this._dialog.destroyRecursive();
            this.destroyRecursive();
            this.salesPotentialTotal.destroy();
            this.salesPotentialAverage.destroy();
            this.closeProbability.destroy();
            this.weightedPotentialTotal.destroy();
            this.weightedPotentialAverage.destroy();
            this.actualAmountTotal.destroy();
            this.actualAmountAverage.destroy();
        }
    });
    return opportunityStatistics;
});
},
'Sage/UI/Columns/TextBox':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/TextBox", [
    'Sage/UI/Controls/TextBox',
    'Sage/UI/Columns/Cell',
    'dojo/_base/declare'
],
function (TextBox, Cell, declare) {
    var widget = declare('Sage.UI.Columns.TextBox', Cell, {
        defaultValue: '',
        widgetClass: TextBox,
        getWidgetProps: function (inDatum) {
            // Create a uniqueId for this widget.  Native dojox grid widgets are reused on every cell.
            // Sage EditableGrid cannot function this way.
            var controlId = this._getControlId();
            this.defaultValue = inDatum;
            //Set the options for the currency config object
            return dojo.mixin({}, this.widgetProps || {}, {
                value: '',
                maxLength: this.maxLength,
                regExp: this.regExp,
                shouldPublishMarkDirty: false
            })
        },
        getValue: function (index) {
            //  summary:
            //  Retreives the value from the widget and applies it to the grid.
            //  If there is a validation error in the cell, return the old value, else return the new value.
            var retVal = this.widget.focusNode.value;
            var textBox = dijit.byId(this.widget.focusNode.id);
            if (!textBox.isValid()
                    || (typeof retVal === 'undefined')
                    || (retVal === '')) {
                textBox.undo();
                retVal = this.defaultValue;
            }
            else {
                defaultValue = retVal;
            }
            return retVal;
        }
    });

    return widget;
});
},
'Sage/UI/widgetEditorLookup':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/widgetEditorLookup", [
    'dijit/form/ValidationTextBox',
    'dijit/form/RadioButton',
    'dijit/form/ComboBox',
    'dojo/data/ItemFileReadStore',
    'dijit/form/NumberTextBox'
],
function (validationTextBox, radioButton, comboBox, itemFileReadStore, numberTextBox) {
    var widget = {};
    widget.txtField = function (context) {
        var simplate  = new Simplate([
            '<div data-dojo-type="dijit.form.ValidationTextBox" id="{%= $.id %}"',
            ' regExp="[^<>;]*" invalidMessage="{%= $.invMess %}" style="width:100%;"></div>'
            ]);
        return simplate.apply(context);
    };

    widget.rdoGroup = function (context) {
        var simplate = new Simplate([
            '<table width="100%"><tr><td align="left" width="50%"><input type="radio" id="{%= $.idOne %}" data-dojo-type="dijit.form.RadioButton"',
            ' value="{%= $.valOne %}" name="{%= $.name %}"/><label for="${idOne}">{%= $.lblOne %}',
            '</label></td><td align="left" width="50%"><input type="radio" id="{%= $.idTwo %}"data-dojo-type="dijit.form.RadioButton"',
            ' value="{%= $.valTwo %}" name="{%= $.name %}"/><label for="{%= $.idTwo %}">{%= $.lblTwo %}',
            '</label></td></tr></table>'
        ]);
        return simplate.apply(context);
    };

    widget.comboField = function (context) {
        var simplate = new Simplate([
            '<input data-dojo-type="dijit.form.ComboBox" id="{%= $.id %}" style="width:100%;"',
            ' required="true" searchAttr="{%= $.searchAttr %}"/>'
        ]);
        return simplate.apply(context);
    };

    widget.numberField = function (context) {
        var simplate = new Simplate([
            '<input data-dojo-type="dijit.form.NumberTextBox" id="{%= $.id %}" style="width:100%;"',
            ' invalidMessage="{%= $.invMess %}"/>'
        ]);
        return simplate.apply(context);
    };
    
    widget.wholeNumberField = function (context) {
        var simplate = new Simplate([
            '<input data-dojo-type="Sage.UI.NumberTextBox" shouldPublishMarkDirty="false" id="{%= $.id %}"',
            ' invalidMessage="{%= $.invMess %}" constraints="{places:0}" style="width:100%;" formatType="Number"/>'
        ]);
        return simplate.apply(context);
    };


    // ToDo: Refactor widgetEditorLookup to widgetEditorInput
    // myEditRow takes whatever dojo type is provided.  
    // Customizer should maintain a unique id and use it to 
    //   access the new dijit. 
    widget._myEditRow = function (context) {
        var simplate = new Simplate([
            '<div data-dojo-type="{%= $.type %}" id="{%= $.id %}" shouldPublishMarkDirty="false" style="height:{%= $.height %};width:100%;" ></div>'
        ]);
        return simplate.apply(context);
    };
    
    Sage.UI.widgetEditorLookup = widget; // TODO: Refactor this
    return widget;
});



},
'Sage/_Templated':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/_Templated", [
        'dojo/dom-construct',
        'dojo/_base/declare',
        'dojo/query',
        'dojo/parser',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dijit/registry',
        'dijit/_base/wai'
],
function(domConstruct, declare, query, parser, array, lang, registry, wai) {
    // not inheriting from dijit._Templated, but using similar functionality.
    // this is required for contentTemplate to work property.
    var templated = declare('Sage._Templated', null, {
        constructor: function () {
            this._attachPoints = [];
            this._attachEvents = [];
        },
        buildRendering: function () {
            if (this.widgetTemplate && this.contentTemplate) {
                throw new Error('Both "widgetTemplate" and "contentTemplate" cannot be specified at the same time.');
            }
            
            if (this.contentTemplate) {
                this.inherited(arguments);
                var root = domConstruct.toDom(['<div>', this.contentTemplate.apply(this), '</div>'].join(''));
                this._attachTemplateNodes(root);
            } else if (this.widgetTemplate) {
                var root = domConstruct.toDom(this.widgetTemplate.apply(this));
                if (root.nodeType !== 1) {
                    throw new Error('Invalid template.');
                }

                this.domNode = root;
                this._attachTemplateNodes(root);
            } else {
                return;
            }

            if (this.widgetsInTemplate) {
                // Store widgets that we need to start at a later point in time
                var widgetsToAttach = parser.parse(root, {
                    noStart: !this._earlyTemplatedStartup,
                    template: true,          //1.6 addition
                    inherited: {dir: this.dir, lang: this.lang},
                    propsThis: this,         //1.6 addition - so data-dojo-props of widgets in the template can reference "this" to refer to me
                    scope: 'dojo'  //1.6 addition - even in multi-version mode templates use dojoType/data-dojo-type
                });

                this._startupWidgets = this._startupWidgets || [];
                this._startupWidgets = this._startupWidgets.concat(widgetsToAttach);

                this._supportingWidgets = this._supportingWidgets || [];
                this._supportingWidgets = this._supportingWidgets.concat(registry.findWidgets(root));

                this._attachTemplateNodes(widgetsToAttach, function(n, p) {
                    return n[p];
                });
            }

            if (this.contentTemplate) {
                query('> *', root).place(this.domNode);
            } else {
                this._fillContent(this.srcNodeRef);
            }
        },
        _fillContent: function(/*DomNode*/ source){
            // summary:
            //      Relocate source contents to templated container node.
            //      this.containerNode must be able to receive children, or exceptions will be thrown.
            // tags:
            //      protected
            var dest, frag, hasChildren;

            dest = this.containerNode;
            frag = document.createDocumentFragment();
            hasChildren = false;
            if(source && dest){
                while(source.hasChildNodes()){
                    frag.appendChild(source.firstChild);
                    hasChildren = true;
                }

                if (hasChildren) {
                    dest.appendChild(frag);
                }
            }
        },
        _attachTemplateNodes: function(rootNode, getAttrFunc){
            // summary:
            //		Iterate through the template and attach functions and nodes accordingly.
            // description:
            //		Map widget properties and functions to the handlers specified in
            //		the dom node and it's descendants. This function iterates over all
            //		nodes and looks for these properties:
            //			* dojoAttachPoint
            //			* dojoAttachEvent
            //			* waiRole
            //			* waiState
            // rootNode: DomNode|Array[Widgets]
            //		the node to search for properties. All children will be searched.
            // getAttrFunc: Function?
            //		a function which will be used to obtain property for a given
            //		DomNode/Widget
            // tags:
            //		private

            getAttrFunc = getAttrFunc || function (n,p){ return n.getAttribute(p); };

            var nodes = (rootNode instanceof Array) ? rootNode : (rootNode.all || rootNode.getElementsByTagName("*"));
            var x = (rootNode instanceof Array) ? 0 : -1;
            for (; x<nodes.length; x++) {
                var baseNode = (x == -1) ? rootNode : nodes[x];
                if(this.widgetsInTemplate && (getAttrFunc(baseNode, "dojoType") || getAttrFunc(baseNode, "data-dojo-type"))){
                    continue;
                }
                // Process dojoAttachPoint
                //var attachPoint = getAttrFunc(baseNode, "dojoAttachPoint");
                var attachPoint = getAttrFunc(baseNode, "dojoAttachPoint") || getAttrFunc(baseNode, "data-dojo-attach-point");
                if (attachPoint) {
                    var point, points = attachPoint.split(/\s*,\s*/);
                    while ((point = points.shift())){
                        if (this[point] instanceof Array) {
                            this[point].push(baseNode);
                        } else {
                            this[point]=baseNode;
                        }
                        
                        this._attachPoints.push(point);
                    }
                }

                // Process dojoAttachEvent
                //var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent");
                var attachEvent = getAttrFunc(baseNode, "dojoAttachEvent") || getAttrFunc(baseNode, "data-dojo-attach-event");
                if (attachEvent) {
                    // NOTE: we want to support attributes that have the form
                    // "domEvent: nativeEvent; ..."
                    var event, events = attachEvent.split(/\s*,\s*/);
                    var trim = lang.trim;
                    while((event = events.shift())){
                        if(event){
                            var thisFunc = null;
                            if(event.indexOf(":") != -1){
                                // oh, if only JS had tuple assignment
                                var funcNameArr = event.split(":");
                                event = trim(funcNameArr[0]);
                                thisFunc = trim(funcNameArr[1]);
                            }else{
                                event = trim(event);
                            }
                            if(!thisFunc){
                                thisFunc = event;
                            }
                            //this.connect(baseNode, event, thisFunc);
                            this._attachEvents.push(this.connect(baseNode, event, thisFunc));
                        }
                    }
                }

                // waiRole, waiState
                // TODO: remove this in 2.0, templates are now using role=... and aria-XXX=... attributes directicly
                var role = getAttrFunc(baseNode, "waiRole");
                if (role) {
                    wai.setWaiRole(baseNode, role);
                }
                
                var values = getAttrFunc(baseNode, "waiState");
                if (values){
                    array.forEach(values.split(/\s*,\s*/), function(stateValue){
                        if(stateValue.indexOf('-') != -1){
                            var pair = stateValue.split('-');
                            wai.setWaiState(baseNode, pair[0], pair[1]);
                        }
                    });
                }
            }
        },
        startup: function(){
            array.forEach(this._startupWidgets, function(w){
                if(w && !w._started && w.startup){
                    w.startup();
                }
            });
            this.inherited(arguments);
        },
        destroyRendering: function(){
            // Delete all attach points to prevent IE6 memory leaks.
            array.forEach(this._attachPoints, function(point) {
                delete this[point];
            }, this);
            this._attachPoints = [];

			// And same for event handlers
			array.forEach(this._attachEvents, this.disconnect, this);
			this._attachEvents = [];

            this.inherited(arguments);
        }

    });

    return templated;
});

},
'Sage/UI/nls/TimelessActivitiesPane':function(){
﻿define("Sage/UI/nls/TimelessActivitiesPane", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            header_complete: 'Complete',
            header_type: 'Type',
            header_contact: 'Name',
            header_regarding: 'Regarding',
            tooltip_type : 'Type',
            tooltip_contact: 'Contact',
            tooltip_account: 'Account',
            tooltip_lead : 'Lead',
            tooltip_phone : 'Phone',
            tooltip_leader : 'Leader',
            tooltip_regarding : 'Regarding',
            tooltip_location : 'Location',
            tooltip_notes : 'Notes',
            tooltip_company: 'Company'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/MenuItem':function(){
require({cache:{
'url:Sage/templates/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n        <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/MenuItem", [
        'dijit/MenuItem',
        'dijit/_Widget',
        'dojo/dom-style',
        'dojo/_base/declare',
        'dojo/text!../templates/MenuItem.html'
],
function (menuItem, _Widget, domStyle, declare, template) {
    var widget = declare('Sage.UI.MenuItem', menuItem, {
        templateString: template,
        
        iconClass: '',
        _setIconClassAttr: { node: 'iconNode', type: 'class' },
        
        label: '',
        _setLabelAttr: { node: 'containerNode', type: 'innerHTML' },
        
        icon: '',
        _setIconAttr: { node: 'iconNode', type: 'attribute', attribute: 'src' },
        
        imageClass: 'noIcon',
        
        iconStyle: '',
        _setIconStyleAttr: { node: 'iconNode', type: 'style' },
        
        ref: '',

        postMixInProperties: function() {
            if (this.hasImageClass() && this.hasIcon()) {
                this.icon = this._blankGif;
            } else {
                this.icon = this.icon || this._blankGif;
            }
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            if (this.hasImageClass()) {
                this.set('icon', this._blankGif);
                domStyle.set(this.iconNode, 'display', 'none');
            } else {
                domStyle.set(this.iconNodeSprite, 'display', 'none');
            }
        },
        hasImageClass: function () {
            if (this.imageClass && this.imageClass !== 'noIcon') {
                return true;
            }
            
            return false;
        },
        hasIcon: function () {
            if (this.icon && this.icon !== this._blankGif) {
                return true;
            }
            
            return false;
        },
        destroy: function() {
            this._setSelected = function () {};
            this.inherited(arguments);
        }
    });
    
    return widget;
});
},
'Sage/MainView/ActivityMgr/nls/ActivityEditor':function(){
﻿define("Sage/MainView/ActivityMgr/nls/ActivityEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            labelWidth: '100',
            tabNameGeneralText: 'General',
            tabNameAvailabilityText: 'Availability',
            tabNameAssociationsText: 'Associations',
            tabNameRecurringText: 'Recurring',
            tabNameAttachmentsText: 'Attachments',
            tabNameNotesText: 'Notes',
            scheduleText: 'Schedule',
            startTimeText: 'Start Time',
            timeLessText: 'Timeless',
            alarmText: 'Alarm',
            durationText: 'Duration',
            rolloverText: 'Auto rollover to next day',
            contactText: 'Contact',
            accountText: 'Account',
            leadText: 'Lead',
            opportunityText: 'Opportunity',
            ticketText: 'Ticket',
            companyText: 'Company',
            regardingText: 'Regarding',
            notesText: 'Notes',
            priorityText: 'Priority',
            leaderText: 'Leader',
            categoryText: 'Category',
            locationText: 'Location',
            dialogHeaderFormatText: '${actionText} ${activityType} - ${description}',
            scheduledByFormatText: 'Scheduled by ${user} on ${date}',
            completeScheduledByFormatText: 'Scheduled by ${user} on ${date} originally for ${startDate}',
            newConfirmationHeaderFormatText: 'Confirm ${activityType} Scheduled by ${user}',
            otherConfimationHeaderFormatText: '${activityType} ${actionText} by ${user}',
            acceptedText: 'Accepted',
            declinedText: 'Declined',
            scheduledText: 'Scheduled',
            updatedText: 'Updated',
            deletedText: 'Deleted',
            cancelText: 'Cancel',
            okText: 'OK',
            completeText: 'Complete',
            completeBtnText: 'Complete...',
            completedText: 'Completed',
            deleteText: 'Delete',
            lookupActText: 'Lookup Account',
            lookupContactText: 'Lookup Contact',
            lookupOpportunityText: 'Lookup Opportunity',
            lookupTicketText: 'Lookup Ticket',
            lookupLeadText: 'Lookup Lead',
            lookupLeaderText: 'Lookup Leader',
            lookupResourcesText: 'Add Members and Resources',
            addResourceText: 'Add',
            mainPhoneText: 'Main Phone',
            typeText: 'Type',
            subTypeText: 'Sub-Type',
            nameText: 'Name',
            cityText: 'City',
            stateText: 'State',
            workphoneText: 'Work Phone',
            emailText: 'Email',
            acctMgrText: 'Acct Manager',
            descriptionText: 'Description',
            stageText: 'Stage',
            statusText: 'Status',
            ownerText: 'Owner',
            ticketNumberText: 'Ticket Number',
            phoneText: 'Phone',
            urgencyText: 'Urgency',
            areaText: 'Area',
            recurringText: 'Recurring',
            resultText: 'Result',
            followupText: 'Follow-up',
            noneText: 'None',
            carryOverAttachmentsText: 'Carry Over Attachments',
            carryOverNotesText: 'Carry Over Notes',
            asScheduledText: 'As Scheduled',
            nowText: 'Now',
            responseText: 'Response',
            acceptText: 'Accept',
            declineText: 'Decline',
            deleteConfText: 'Delete Confirmation',
            closeText: 'Close',
            leadFullNameText: 'Name',
            postalText: 'Postal Code',
            failedLoadingDataMsg: 'An error occurred loading data.',
            removeText: 'Remove',
            noText: 'No',
            yesText: 'Yes',
            areYouSureText: 'You are about to permanently delete this record.',
            couldNotSaveErrorText: 'We\'re sorry, the activity could not be saved because an error occurred.',
            couldNotDeleteErrorText: 'We\'re sorry, the activity could not be deleted because an error occurred.',
            couldNotCompleteErrorText: 'We\'re sorry, the activity could not be completed because an error occurred.',
            scheduleFollowUpErrorText: 'The follow up could not be scheduled because the HistoryId could not be determined.'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/DataSourceDesigner':function(){
define("Sage/QuickForms/Design/DataSourceDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/NonVisibleAdvancedPropertyEditor',
    'dojo/i18n!./nls/DesignPanel'
], function(declare, array, lang, _Templated, _Widget, _Contained, ControlDesigner, NonVisibleAdvancedPropertyEditor, localization) {
    return declare('Sage.QuickForms.Design.DataSourceDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: false
        },
        editors: [
            NonVisibleAdvancedPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div data-dojo-attach-point="containerNode">',
            '<span data-dojo-attach-point="designCaptionNode"></span>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },

        helpTopicName: 'Data_Source_control',
        quickFormControlType: 'Sage.Platform.QuickForms.QFControls.QFDataSource, Sage.Platform.QuickForms.QFControls',

        displayNameText: 'Data Source',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setControlIdAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        startup: function() {
            this.inherited(arguments);

            this.set('designCaption', this.get('controlId'));
        }
    });
});
},
'Sage/Services/main':function(){
define("Sage/Services/main", [
    "Sage/Services/_ServiceMixin",
    "Sage/Services/ActivityAction",
    "Sage/Services/UserOptions",
    "Sage/Services/ActivityActionProcessor",
    "Sage/Services/ActivityService",
    "Sage/Services/CalendarSecurityService",
    "Sage/Services/ClientBindingManagerService",
    "Sage/Services/ClientContextService",
    "Sage/Services/ClientEntityContext",
    "Sage/Services/RoleSecurityService",
    "Sage/Services/SelectionContextService",
    "Sage/Services/SystemOptions"
    ], function() {
	// module:
        // Sage/Services/main
	// summary:
        // The Sage/Services/main module provides loading of all Sage/Services modules.
});
},
'Sage/UI/Columns/Numeric':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Numeric", [
    'Sage/UI/Controls/Numeric',
    'dojox/grid/cells/dijit',
    'dojo/_base/declare'
],
function (controlsNumeric, dijitCell, declare) {
    var widget = declare("Sage.UI.Columns.Numeric", dojox.grid.cells._Widget, {
        widgetClass: controlsNumeric,
        isWholeNumberPercent: false,
        getWidgetProps: function (inDatum) {
            var controlId = this.getControlId();
            //Set the options for the currency config object
            return dojo.mixin({}, this.widgetProps || {}, {
                constraints: this.constraints,
                value: inDatum,
                width: this.width,
                maxLength: this.maxLength,
                style: this.style,
                hotKey: this.hotKey,
                tabIndex: this.tabIndex,
                field: this.field,
                //Using name for ClientId of .net controls.  
                //TODO: Validate that this does not conflict with the column type.
                name: this.name,
                sortable: this.sortable,
                editable: this.editable,
                required: this.required,
                formatType: this.formatType,
                textAlign: this.getAlignment()
            });
        },
        getAlignment: function () {
            var retVal = 'right';
            retVal = (this.cellClasses.indexOf('aligncenter') > -1) ? 'center' : retVal;
            retVal = (this.cellClasses.indexOf('alignleft') > -1) ? 'left' : retVal;
            return retVal;
        },
        formatNode: function (inNode, inDatum, inRowIndex) {
            if (!this.widgetClass) {
                return inDatum;
            }

            // Check to see if the instance for the selected node already exists
            // This check ensures that a unique control gets created for each cell.  
            // Normal grid controls are created one for the entire column.
            var thisCurrency = dijit.byId(this.getControlId());
            // If it doesn't, create one.
            if (!thisCurrency) {
                this.widget = this.createWidget.apply(this, arguments);
                // If it does, use the existing one.
            } else {
                this.widget = thisCurrency;
                //Check to see if the value has been changed outside of the control and update the control if it has.
                if (thisCurrency.value !== inDatum || this.widget.focusNode.value !== inDatum) {
                    this.widget.focusNode.attr('value', inDatum);
                }
                this.attachWidget.apply(this, arguments);
            }
            this.sizeWidget.apply(this, arguments);
            this.grid.views.renormalizeRow(inRowIndex);
            this.grid.scroller.rowHeightChanged(inRowIndex, true);
            this.focus();

            if (this.formatType == 'Percent') {
                // dijit percent gets formated onfocus, don't format it here (it expects a decimal when focus starts)
                this.widget.focusNode.constraints['type'] = 'percent'; // ensure widget has constraint set
                this.widget.focusNode.focus();
            }

            return undefined;
        },
        formatter: function (value, index) {
            var vals = [];
            //If the user entered 0 just return an empty string.
            if (value == 0 || value == null) {
                return '';
            }

            if (this.isWholeNumberPercent && this.formatType === 'Percent') {
                //Percentage fields store the decimal value, but we want to display the whole number.
                value = Math.round(value * 100) / 10000;
            }

            //Build up display string if formatstring was specified.  Most common case is a PickList used as a percent selector.
            if ((this.displayFormatString) && (this.displayFormatString !== '')) {
                if (this.displayFields.length < 1) {
                    vals.push[value];
                }
                for (var idx = 0; idx < this.displayFields.length; idx++) {
                    //Gather the items to be used in the format 
                    vals.push(Sage.Utility.getValue(this.grid._by_idx[index].item, this.displayFields[idx]));
                }
                value = Sage.Format.stringFromArray(this.displayFormatString, vals);
                return value;
            }

            //Format the value based on locale number formatting and constraints.
            if (this.formatType === 'Percent') {
                this.constraints['type'] = 'percent';
            }

            value = dojo.number.format(value, dojo.mixin(this.constraints, { locale: Sys.CultureInfo.CurrentCulture.name }));
            //dojo.number.format will include a trailing decimal delimiter if places == 0 and round == -1.
            //Assume the need to slice this trailing delimiter.
            if (this.constraints && this.constraints.places == 0 && this.constraints.round == -1
                && value.lastIndexOf(Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalSeparator) > -1) {
                value = value.slice(0, value.length - 1);
            }

            if (this.abbreviationLength) {
                var abbreviationFormatter = Sage.Format.abbreviationFormatter(this.abbreviationLength);
                value = abbreviationFormatter(value);
            }
            return value;
        },
        styles: 'text-align: right;',
        setCurrentItems: function () {
            this.editInfo = this.grid.edit.info;
            this.item = this.grid.getItem(this.editInfo.rowIndex);
        },
        getControlId: function () {
            //summary:
            //  Generates an Id for this instance of the numbertextbox widget from the item key and cell field name
            //  Example XXXXXXX_Price
            this.setCurrentItems();
            return [this.item.$key, this.editInfo.cell.field, this.index].join("_");
        },
        getValue: function (index) {
            //  summary:
            //  Retreives the value from the widget and applies it to the grid.
            //  If there is a validation error in the cell, return the old value, else return the new value.
            var retVal = this.widget.focusNode.valueNode.value;
            if ((typeof retVal === 'undefined') || (retVal === '')) {
                retVal = 0;
            }

            if (this.widget && this.widget.state === "Error") {
                var item = this.grid.getItem(index);
                var oldValue = this.grid.store.getValue(item, this.grid.edit.info.cell.field);
                return oldValue;
            }

            return retVal;
        }
    });
    return widget;
});
},
'Sage/Services/UserOptions':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/UserOptions", [
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/declare'
],
function (SDataServiceRegistry, declare) {
    /**
    * Append the UserOptions object to the Sage.Services namespace
    * Declare the UserOptions class and append its methods and properties
    * @constructor
    */
    var widget = declare('Sage.Services.UserOptions', null, {
        constructor: function (options) {
            this.inherited(arguments);
            dojo.mixin(this, options);
            if (!options || !options.service) {
                this.service = SDataServiceRegistry.getSDataService('system', false, true, true);
            }
        },
        get: function (name, category, callback, onError, scope, async) {
            var req = this._createRequest(name, category);

            if (typeof async === 'undefined') {
                async = true;
            }

            if (req) {
                req.read({
                    success: callback,
                    failure: function (response) {
                        console.warn('Error reading request');
                        console.log(response);
                        if (typeof onError === "function") {
                            onError(response);
                        }
                    },
                    scope: scope || this,
                    async: async
                });
            } else {
                console.warn('Unable to create SData request');
            }
        },
        set: function (name, category, newValue, _success, _failure, scope) {
            var req = this._createRequest(name, category);
            _failure = _failure || function (response) {
                console.warn('Error reading request');
                console.log(response);
            };
            if (req) {
                req.read({
                    success: dojo.hitch(req, function (response) {
                        response.value = newValue;
                        SDataServiceRegistry._removeFromLocalStorage("userOptions");
                        this.update(response, { success: _success, scope: this });
                    }),
                    failure: _failure,
                    scope: scope || this
                });
            }
        },
        getByCategory: function (category, callback, scope, onError) {
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(this.service);
            req.setResourceKind('userOptions');
            req.setQueryArg('where', 'category eq \'' + category + '\'');
            req.read({
                success: callback,
                failure: function (response) {
                    console.warn('Error reading user options request %o', response);
                    if (typeof onError === "function") {
                        onError(response);
                    }
                },
                scope: scope || this
            });
        },
        getByCategories: function (categories, callback, scope) {
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(this.service);
            var strCategories = '';
            var strDel = ',';
            for (var i = 0; i < categories.length; i++) {
                if (i == categories.length - 1) {
                    strDel = '';
                }
                strCategories += '"' + categories[i] + '"' + strDel;
            }
            req.setResourceKind('userOptions');
            req.setQueryArg('where', 'category in (' + strCategories + ')');
            req.setQueryArg('count', '500');
            req.read({
                success: callback,
                failure: function (response) {
                    console.warn('Error reading user options request %o', response);
                },
                scope: scope || this
            });
        },
        _formatPredicate: function (n, c) {
            return dojo.string.substitute("category eq '${0}' and name eq '${1}'", [c, n]);
        },
        _createRequest: function (n, c) {
            var req = new Sage.SData.Client.SDataSingleResourceRequest(
					this.service);
            req.setResourceSelector(this._formatPredicate(n, c));
            req.setResourceKind('userOptions');
            // NOTE is there a need for a select query arg?
            return req;
        },
        _virtuald: function () {
            var match = /^\/([^\/]+)\//.exec(location.pathname);
            return match ? match[1] : '';
        }
    });
    /**
    * Make an instance of this service available to the 
    * Sage.Services.getService method.
    */
    Sage.Services.addService('UserOptions', new Sage.Services.UserOptions());

    //Backward compatibility mark as depricated...
    Sage.UserOptionsService = {
        getCommonOption: function (name, category, callback) {
            if (typeof console !== 'undefined') {
                console.warn(['DEPRECATED: Sage.UserOptionsService is deprecated.  ',
                'Use the UserOptions service instead.',
                'Change code like:',
                'Sage.UserOptionsService.getCommonOption(<option>, <category>, <callback>);',
                'to this: ',
                'var svc = Sage.Services.getService("UserOptions");',
                'if (svc) {',
                '	 svc.get(<option>, <category>, <callback>);',
                '}'].join('\n'));
            }
            var origCallback = callback;
            var svc = Sage.Services.getService('UserOptions');
            if (svc) {
                svc.get(name, category, function (option) {
                    var oldFmt = {
                        category: option.category,
                        option: option.name,
                        optionValue: option.value
                    };
                    if (origCallback) {
                        origCallback.call(window, oldFmt);
                    }
                });
            }
        },
        setCommonOption: function (name, category, data, callback) {
            if (typeof console !== 'undefined') {
                console.warn(['DEPRECATED: Sage.UserOptionsService is deprecated.  ',
                'Use the UserOptions service instead.',
                'Change code like:',
                'Sage.UserOptionsService.setCommonOption(<option>, <category>, <newValue>, <callback>);',
                'to this: ',
                'var svc = Sage.Services.getService("UserOptions");',
                'if (svc) {',
                '	 svc.set(<option>, <category>, <newValue>, <callback>);',
                '}'].join('\n'));
            }
            var svc = Sage.Services.getService('UserOptions');
            if (svc) {
                svc.set(name, category, data, callback);
            }
        }
    };

    return widget;
});



},
'Sage/MainView/IntegrationContract/InvoiceRTDV':function(){
require({cache:{
'url:Sage/MainView/IntegrationContract/templates/InvoiceRTDV.html':"﻿[\n'<div>',\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_invoiceDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\n        '<div dojoAttachPoint=\"loadingContainer\">',\r\n            '<br />',\r\n            '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n            '<br />',\r\n            '<br />',\r\n        '</div>',\n        '<div dojoAttachPoint=\"invoiceDialogContent\" class=\"display-none\">',\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\">',\n                 '<input dojoType=\"dijit.form.TextBox\" name=\"reference\" id=\"{%= $.id%}_reference\" label=\"{%= $.lblInvoiceCaption %}\" readonly=\"true\" />',\n                 '<input dojoType=\"dijit.form.TextBox\" name=\"grossTotal\" id=\"{%= $.id%}_grossTotal\" label=\"{%= $.lblNetTotalCaption %}\" readonly=\"readonly\" />',\n            '</div >',\n            '<div style=\"height:350px;width:800px\">',\r\n                '<div id=\"{%= $.id%}_invoiceTabContainer\" dojoAttachPoint=\"invoiceTabContainer\" dojoType=\"dijit.layout.TabContainer\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"{%= $.id%}_invoiceContent\" dojoAttachPoint=\"invoiceContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.detailsTabTitle %}\" selected=\"true\">',\r\n                        '<div id=\"{%= $.id%}_divInvoiceDetails\">',\r\n                            '<table cellspacing=\"5\">',\n                                '<col style=\"width:200px\" />',\r\n                                '<col style=\"width:200px\" />',\n                                '<tr>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_date\">{%= $.lblInvoiceDateCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_invoiceDate\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"invoiceDiscountPercent\">{%= $.lblInvoiceDiscountPercentCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_discountPercent\" name=\"invoiceDiscountPercent\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_deliveryDate\">{%= $.lblDueDateCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_deliveryDate\" name=\"deliveryDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_carrierTotalPrice\">{%= $.lblCarrierTotalPriceCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_carrierTotalPrice\" name=\"carrierTotalPrice\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_customerReference\">{%= $.lblCustomerPOCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_customerReference\" name=\"customerReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_taxTotal\">{%= $.lblTaxCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_taxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"settlementDiscountPercent\">{%= $.lblSettlementDiscountPercentCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_settlementDiscountPercent\" name=\"settlementDiscountPercent\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_notes\">{%= $.lblNotesCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_notes\" name=\"notes\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"settlementDiscountTerms\">{%= $.lblSettlementDiscountTermsCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_settlementDiscountTerms\" name=\"settlementDiscountTerms\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_costTotal\">{%= $.lblCostTotalCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_costTotal\" name=\"costTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"operatingCompanyCurrency\">{%= $.lblOCCurrencyCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_operatingCompanyCurrency\" name=\"operatingCompanyCurrency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_profitTotal\">{%= $.lblProfitTotalCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_profitTotal\" name=\"profitTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"operatingCompanyCurrencyExchangeRateDate\">{%= $.lblOperatingCompanyCurrencyExchangeRateDateCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_operatingCompanyCurrencyExchangeRateDate\" name=\"operatingCompanyCurrencyExchangeRateDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_priceList\">{%= $.lblPriceListCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_priceList\" name=\"pricelist.name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_currency\">{%= $.lblCurrencyCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_salesPerson\">{%= $.lblSalesPersonCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_salesPerson\" name=\"buyerContact.fullName\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_invoiceDiscountAmount\">{%= $.lblInvoiceDiscountAmountCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_invoiceDiscountAmount\" name=\"invoiceDiscountAmount\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\r\n                            '</table>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_addressesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.addressTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"sdgrdInvoiceAddresses\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdInvoiceAddresses_Grid\" dojoAttachPoint=\"sdgrdInvoiceAddresses_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_invoiceLinesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.invoiceLinesTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"sdgrdInvoiceLines\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdInvoiceLines_Grid\" dojoAttachPoint=\"sdgrdInvoiceLines_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_paymentsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.paymentsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Payments\" dojoAttachEvent=\"onShow:initPayments\">',\r\n                        '<div id=\"sdgrdPayments\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdPayments_Grid\" dojoAttachPoint=\"sdgrdPayments_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_deliveriesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.deliveriesTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Deliveries\" dojoAttachEvent=\"onShow:initDeliveries\">',\r\n                        '<div id=\"sdgrdDeliveries\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdDeliveries_Grid\" dojoAttachPoint=\"sdgrdDeliveries_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                '</div>',\r\n            '</div>',\r\n            '<div class=\"button-bar alignright\">',\r\n                 '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_invoiceBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/IntegrationContract/InvoiceRTDV", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/InvoiceRTDV',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/UI/SLXPreviewGrid',
    'Sage/Data/ProxySDataStore',
    'Sage/UI/Dialogs',
    'Sage/UI/Columns/DateTime',
    'dojo/text!./templates/InvoiceRTDV.html',
    'Sage/UI/DateTextBox',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'dijit/Dialog',
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog'
],

function (declare, i18nStrings, _Widget, _Templated, SLXPreviewGrid, ProxySDataStore, Dialogs, SlxDateTimeColumn, template) {
    var invoiceRTDV = declare('Sage.MainView.IntegrationContract.InvoiceRTDV', [_Widget, _Templated], {
        workspace: '',
        tabId: '',
        grid: '',
        globalSyncId: '',
        operatingCompanyId: '',
        dataStore: null,
        paymentsDataStore: null,
        deliveriesDataStore: null,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        loadSalesInvoices: function () {
            var self = this;
            var options = {
                readOnly: true,
                rowsPerPage: 20,
                slxContext: { workspace: this.workspace, tabId: this.tabId },
                columns: [
                    { width: 10, field: 'reference', name: this.grdInvoice_Name, defaultValue: '', sortable: true, formatter: this.invoiceDetailsViewRenderer, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'date', type: SlxDateTimeColumn, formatType: 'date', dateOnly: true, utc: false, name: this.grdInvoice_Date, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'customerReference', name: this.grdInvoice_PO, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'settlementDiscountTerms', name: this.grdInvoice_PaymentTerms, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'netTotal', name: this.grdInvoice_NetTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdInvoice_Tax, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdInvoice_Amount, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false }
                ],
                storeOptions: new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    resourceKind: 'tradingAccounts',
                    getResourcePredicate: function () {
                        return dojo.string.substitute("$uuid eq '${0}'", [self.globalSyncId]);
                    },
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'salesInvoices'}]
                }),
                tools: []
            };
            var salesInvoicesGrid = new SLXPreviewGrid.Grid(options, this.placeHolder);
            salesInvoicesGrid.startup();
            var tabContent = dijit.byId('tabContent');
            tabContent.resize(); tabContent.resize();
            this.grid = salesInvoicesGrid;
        },
        invoiceDetailsViewRenderer: function (value) {
            return dojo.string.substitute('<a href="javascript:invoiceRTDV.loadDetailsView();">${0}</a>', [value]);
        },
        destroyFirst: function (id) {
            var widget = dijit.byId(id);
            if (widget) {
                widget.destroyRecursive();
            }
        },
        loadAddresses: function (data) {
            this.destroyFirst('sdgrdInvoiceAddresses');
            if (data && typeof data.postalAddresses === 'undefined') {
                data.postalAddresses = {};
                data.postalAddresses.$resources = new Array();
            }
            var salesInvoiceAddresses = new dojox.grid.DataGrid({
                id: 'sdgrdInvoiceAddresses',
                store: this.dataStore,
                structure: [
                    { width: 10, field: 'type', name: this.grdAddress_Name, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'address1', name: this.grdAddress_address1, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'address2', name: this.grdAddress_address2, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'townCity', name: this.grdAddress_City, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'stateRegion', name: this.grdAddress_State, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'zipPostCode', name: this.grdAddress_Zip, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {},
                queryOptions: { singleResourceRequest: true, property: 'postalAddresses' }
            });
            dojo.place(salesInvoiceAddresses.domNode, this.sdgrdInvoiceAddresses_Grid, "single");
            salesInvoiceAddresses.startup();
        },
        loadLineItems: function (data) {
            this.destroyFirst('sdgrdInvoiceLines');
            if (data && typeof data.salesInvoiceLines === 'undefined') {
                data.salesInvoiceLines = {};
                data.salesInvoiceLines.$resources = new Array();
            }
            var salesInvoiceLines = new dojox.grid.DataGrid({
                id: 'sdgrdInvoiceLines',
                store: this.dataStore,
                structure: [
                    { width: 10, field: 'number', name: this.grdItems_Line, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdItems_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'status', name: this.grdItems_Status, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodity.name', name: this.grdItems_Commodity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodityVariant.reference', name: this.grdItems_CommodityVariant, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodityDimension.reference', name: this.grdItems_CommodityDimension, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'unitOfMeasure.name', name: this.grdItems_UnitOfMeasure, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'quantity', name: this.grdItems_Quantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'initialPrice', name: this.grdItems_InitialPrice, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualPrice', name: this.grdItems_ActualPrice, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'netTotal', name: this.grdItems_NetTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'chargesTotal', name: this.grdItems_ChargesTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'discountTotal', name: this.grdItems_DiscountTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdItems_TaxTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdItems_GrossTotal, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {},
                queryOptions: { singleResourceRequest: true, property: 'salesInvoiceLines' }
            });
            dojo.place(salesInvoiceLines.domNode, this.sdgrdInvoiceLines_Grid, "only");
            salesInvoiceLines.startup();
        },
        initPayments: function () {
            if (this.paymentsDataStore) return;
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this.paymentsDataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    getResourcePredicate: function () {
                        var salesInvoiceId = row['$key'];
                        return dojo.string.substitute("'${0}'", [salesInvoiceId]);
                    },
                    resourceKind: 'salesInvoices',
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'receipts'}],
                    includeContent: true
                });
                dojo.connect(this.paymentsDataStore, 'onGetSingleResource', this, 'loadPayments');
                this.paymentsDataStore.getSingleResource();
            }
        },
        loadPayments: function (data) {
            this.destroyFirst('sdgrdPayments');
            if (data && typeof data.receipts === 'undefined') {
                data.receipts = {};
                data.receipts.$resources = new Array();
            }
            var payments = new dojox.grid.DataGrid({
                id: 'sdgrdPayments',
                store: this.paymentsDataStore,
                structure: [
                    { width: 10, field: 'date', type: SlxDateTimeColumn, formatType: 'date', name: this.grdPayments_Date, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'name', name: this.grdPayments_Name, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdPayments_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'status', name: this.grdPayments_Status, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'netTotal', name: this.grdPayments_NetTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'discountTotal', name: this.grdPayments_Discounts, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'chargesTotal', name: this.grdPayments_Charges, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdPayments_Tax, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdPayments_GrossTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'currency', name: this.grdPayments_Currency, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'tenderType', name: this.grdPayments_TenderType, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'tenderReference', name: this.grdPayments_TenderReference, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'processDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdPayments_ProcessDate, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {}
            });
            dojo.place(payments.domNode, this.sdgrdPayments_Grid, "only");
            payments.startup();
        },
        initDeliveries: function () {
            if (this.deliveriesDataStore) return;
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this.deliveriesDataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    getResourcePredicate: function () {
                        var salesInvoiceId = row['$key'];
                        return dojo.string.substitute("'${0}'", [salesInvoiceId]);
                    },
                    resourceKind: 'salesInvoices',
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'salesOrderDeliveries'}],
                    includeContent: true
                });
                dojo.connect(this.deliveriesDataStore, 'onGetSingleResource', this, 'loadDeliveries');
                this.deliveriesDataStore.getSingleResource();
            }
        },
        loadDeliveries: function (data) {
            this.destroyFirst('sdgrdDeliveries');
            if (data && typeof data.salesOrderDeliveries === 'undefined') {
                data.salesOrderDeliveries = {};
                data.salesOrderDeliveries.$resources = new Array();
            }
            var deliveries = new dojox.grid.DataGrid({
                id: 'sdgrdDeliveries',
                store: this.deliveriesDataStore,
                structure: [
                    { width: 10, field: 'reference', name: this.grdDeliveries_Number, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdDeliveries_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'status', name: this.grdDeliveries_Status, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'requestedDeliveryDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_RequestedDate, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualDeliveryDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_ActualDate, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualDeliveryTime', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_ActualTime, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'requestedQuantity', name: this.grdDeliveries_RequestedQuantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'deliveredQuantity', name: this.grdDeliveries_DeliveredQuantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'deliveryMethod', name: this.grdDeliveries_Method, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'carrierTradingAccount.name', name: this.grdDeliveries_Carrier, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'carrierReference', name: this.grdDeliveries_CarrierReference, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'dateExceptionReason', name: this.grdDeliveries_ExceptionReason, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {}
            });
            dojo.place(deliveries.domNode, this.sdgrdDeliveries_Grid, "only");
            deliveries.startup();
        },
        loadDetailsView: function () {
            dojo.removeClass(this.loadingContainer, "display-none");
            dojo.addClass(this.invoiceDialogContent, "display-none");
            this._dialog.show();
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                var salesInvoiceId = row['$key'];
                this.dataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    resourceKind: 'salesInvoices',
                    getResourcePredicate: function () {
                        return dojo.string.substitute("'${0}'", [salesInvoiceId]);
                    },
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: ['*,salesInvoiceLines/*,postalAddresses/*,buyerContact/fullName,pricelist/name,salesInvoiceLines/commodity/name,salesInvoiceLines/unitOfMeasure/name,salesInvoiceLines/commodityVariant/reference,salesInvoiceLines/commodityDimension/reference,salesOrderDeliveries/carrierTradingAccount/name'],
                    includeContent: true
                });
                dojo.connect(this.dataStore, 'onGetSingleResource', this, 'buildGrids');
                this.dataStore.getSingleResource();
            }
        },
        loadInvoiceDetails: function (data) {
            if (data && typeof data !== 'undefined') {
                this._dialog.set('value', data);
            }
        },
        buildGrids: function (data) {
            this.loadInvoiceDetails(data);
            this.loadAddresses(data);
            this.loadLineItems(data);
            if (this.invoiceTabContainer != null) {
                this.invoiceTabContainer.selectChild(this.invoiceContent);
            }
            dojo.addClass(this.loadingContainer, "display-none");
            dojo.removeClass(this.invoiceDialogContent, "display-none");
            this._dialog.resize();
        },
        hideDetailsDialog: function () {
            /* Destroy the grids that are loaded dynamically, so that the 
            data for one entity is not initially displayed for another entity. */
            this.destroyFirst('sdgrdDeliveries');
            this.deliveriesDataStore = null;
            this.destroyFirst('sdgrdPayments');
            this.paymentsDataStore = null;
            this._dialog.hide();
        }
    });
    return invoiceRTDV;
});
},
'Sage/MainView/nls/ActivityManager':function(){
﻿define("Sage/MainView/nls/ActivityManager", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleFmtString: '${0}',
            tabDisplayNameActivity: 'Activities',
            tabDisplayNameLit: 'Literature',
            tabDisplayNameEvent: 'Events',
            tabDisplayNameConfirm: 'Confirmations',
            activityColNameComplete: 'Complete',
            activityColNameAttachment: 'Attachment',
            activityColNameRecurring: 'Recurring',
            activityColNameAlarm: 'Alarm',
            activityColNameType: 'ActivityType',
            activityColNameStartDate: 'StartDate',
            activityColNameDuration: 'Duration',
            activityColNameContact: 'Contact',
            activityColNameLead: 'Lead',
            activityColNameAccount: 'Account',
            activityColNameRegarding:'Regarding',
            activityColNamePriority:'Priority',
            activityColNameUserId: 'leader',
            activityTypePhone:'Phone',
            activityTypeCall:'Call',
            activityTypeMeeting:'Meeting',
            activityTypePersonal:'Personal'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Alarms/main':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/main", [
        "Sage/UI/Alarms/ActivityAlarm",
        "Sage/UI/Alarms/AlarmButton",
        "Sage/UI/Alarms/AlarmCountDown",
        "Sage/UI/Alarms/AlarmPane",
        "Sage/UI/Alarms/AlarmPopup",
        "Sage/UI/Alarms/AlertPane",
        "Sage/UI/Alarms/UnconfirmedAlarm",
        "Sage/UI/Alarms/UnconfirmedPane"
    ], function() {
        // module:
        //Sage/UI/Alarms/main
        // summary:
        // The Sage/UI/Alarms/main module provides loading of all Sage/UI/Alarms modules
    });
},
'Sage/UI/Columns/HistoryType':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/HistoryType", [
       'dojox/grid/cells/_base',
       'Sage/Utility',
       'Sage/Utility/Activity',
       'dojo/string',
       'dojo/_base/declare'
],
function (_base, util, activity, dString, declare) {
    var widget = declare("Sage.UI.Columns.HistoryType", _base, {
        keyField: false,
        format: function (inRowIndex, inItem) {
            var type = this.get(inRowIndex, inItem);
            if (!type) {
                return this.defaultValue;
            }
            var key = util.getValue(inItem, this.keyField || "$key");
            var fmt = '<div class="Global_Images icon16x16 ${0}"></div>&nbsp;<a href="javascript:Sage.Link.editHistory(\'${1}\')">${2}</a>';
            return dString.substitute(fmt, [activity.getActivityImageClass(type, 'small'), key, activity.getActivityTypeName(type)]);
        }
    });

    return widget;
});

},
'Sage/UI/SummaryContainer':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SummaryContainer", [
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/UI/SummaryContents',
        'dojo/_base/declare'
],
function (_Widget, _Templated, summaryContents, declare) {
    var summaryContainer = declare('Sage.UI.SummaryContainer', [_Widget, _Templated], {
        widgetsInTemplate: false,
        templateLocation: '', // 'SummaryTemplates/Account.html',
        contentNode: null,
        paneContents: null,
        entity: null,
        postProcessCallBack: false,
        attributeMap: {
            'content': { node: 'contentNode', type: 'innerHTML' }
        },
        widgetTemplate: new Simplate([
            '<div class="EntityCard">',
                '<div dojoAttachPoint="contentNode">Loading...</div>',
            '</div>'
        ]),
        _setEntityAttr: function (entity) {
            this.entity = entity;
            var pane = new summaryContents({
                templateLocation: this.templateLocation,
                entity: entity
            });
            dojo.place(pane.domNode, this.contentNode, 'only');
            pane.startup();
            this.paneContents = pane;
            if (this.postProcessCallBack) {
                this.postProcessCallBack(this.entity);
            }
        },
        startup: function () {
            if (this.entity) {
                var pane = new summaryContents({
                    templateLocation: this.templateLocation,
                    entity: this.entity
                });
                dojo.place(pane.domNode, this.contentNode, 'only');
                pane.startup();
                this.paneContents = pane;
                if (this.postProcessCallBack) {
                    this.postProcessCallBack(this.entity);
                }
            }
        },
        destroy: function () {
            if (this.paneContents) {
                this.paneContents.destroy(arguments);
            }
            this.inherited(arguments);
        }
    });

    return summaryContainer;
});

},
'Sage/UI/SLXPreviewGrid/Filter/DateRange':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SLXPreviewGrid/Filter/DateRange", [
        "dijit/form/DateTextBox",
        "dijit/_Widget",
        "dijit/_Templated",
        'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin',
        'dojo/_base/declare'
],
function (DateTextBox, _Widget, _Templated, _filterMixin, declare) {
    var DateRange = declare("Sage.UI.SLXPreviewGrid.Filter.DateRange", [_Widget, _Templated, _filterMixin], {
        // summary:
        //  Date range filter
        templateString: "<div>" +
        "<input data-dojo-type='dijit.form.DateTextBox' dojoAttachPoint='dteFrom' style='width:90px'> - " +
        "<input data-dojo-type='dijit.form.DateTextBox' dojoAttachPoint='dteTo' style='width:90px'>" +
        "</div>",
        widgetsInTemplate: true,

        /////////////////////////////////////
        // Public API
        getQuery: function () {
            var toIsoStringFromDate = function (value, isUpperBound) {
                // format to ISO
                // if isUpperBound is true it will add 1 day (used for upper bound in date range)
                if (!value) {
                    return '';
                }
                if (value.constructor !== Date) {
                    value = Date.parse(value);
                }
                if (isUpperBound) {
                    value.setUTCDate(value.getUTCDate() + 1);
                }
                var pad = function (n) { return n < 10 ? '0' + n : n; };
                // adapted from: https://developer.mozilla.org/en/JavaScript/Reference/global_objects/date
                return value.getUTCFullYear() + '-'
                        + pad(value.getUTCMonth() + 1) + '-'
                        + pad(value.getUTCDate()) + 'T'
                        + pad(value.getUTCHours()) + ':'
                        + pad(value.getUTCMinutes()) + ':'
                        + pad(value.getUTCSeconds()) + 'Z';
            };
            var dFrom = toIsoStringFromDate(this.dteFrom.get('value'));
            var dTo = toIsoStringFromDate(this.dteTo.get('value'), true);



            var qry = '';
            if (dFrom) {
                qry = this.field + " ge '" + dFrom + "'";
            }
            if (dTo) {
                if (qry) {
                    qry += " and ";
                }
                qry += this.field + " lt '" + dTo + "'";
            }

            if (this.params["getTimeless"]) {
                if (qry) {
                    var fDate = false;
                    qry = "((" + qry + " and not Timeless) or (";
                    var dFromTimeless = Sage.Utility.Activity.formatTimelessStartDate(this.dteFrom.get('value'));
                    var dToTimeless = Sage.Utility.Activity.formatTimelessEndDate(this.dteTo.get('value'));
                    if (dFromTimeless) {
                        qry += this.field + " gt '" + dFromTimeless + "'";
                        fDate = true;
                    }
                    if (dToTimeless) {
                        if (fDate) {
                            qry += " and ";
                        }
                        qry += this.field + " lt '" + dToTimeless + "'";
                    }
                    qry += " and Timeless))";

                }
            }
            return qry;
        },

        reset: function () {
            this.dteFrom.set('value', 0);
            this.dteTo.set('value', 0);
        },
        getState: function () {
            return {
                'dFrom': this.dteFrom.get('value'),
                'dTo': this.dteTo.get('value')
            };
        },
        applyState: function (state) {
            if (state) {
                if (state['dFrom']) {
                    this.dteFrom.set('value', state['dFrom']);
                }
                if (state['dTo']) {
                    this.dteTo.set('value', state['dTo']);
                }
            }
        }
    });

    return DateRange;
});


},
'Sage/UI/Dashboard/DashboardWidget':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/DashboardWidget", [
        'dojo/_base/declare',
        'Sage/UI/Dashboard/WidgetDefinition',
        'dojo/i18n',
        'dojo/_base/lang',
        'dijit/form/TextBox',
        'dijit/form/CheckBox',
        'dojox/charting/widget/Chart2D',
        'dojox/charting/action2d/Highlight',
        'dojox/charting/action2d/MoveSlice',
        'dojox/charting/action2d/Tooltip',
        'dojox/charting/action2d/Magnify',
        'dojox/charting/widget/Legend',
        'dojox/charting/themes/Julie',
        'dojo/i18n!./nls/DashboardWidget'
    ],
function (
        declare,
        widgetDefinition,
        i18n,
        lang
    ) {
    var widget = declare('Sage.UI.Dashboard.DashboardWidget', null, {
        constructor: function (config) {
            dojo.safeMixin(this, config);
            this._setDefinition();
            this._winResize = dojo.connect(window, 'onresize', this, function () {
                if (!this.parentCell.open || !this.parentCell._started) { return; }
                if (this.parentCell.refresh) {
                    this.parentCell.refresh(true);
                }
            });
            this.dropSub = dojo.subscribe('/ui/widget/dropped', this, function (id, p, c, i) {
                if (id === this.parentCell.id) {
                    if (!this.parentCell.open || !this.parentCell._started) { return; }
                    if (this.parentCell.refresh) {
                        this.parentCell.refresh(true);
                    }
                }
            });
        },
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "DashboardWidget"));
        },
        _getInstanceData: function () {
            if (this.parentCell.isNew && this.definition.editor) {
                this.definition.editor(this.parentCell);
                if(this.parentCell._settingsWidget) { // Default widget, for example, doesn't have a dialog to toggle
                    this.parentCell._settingsWidget.toggle();
                }
                else {
                    this.parentCell._editorAdded();
                }
                return;
            }
            if (!this.definition.isStatic) {
                // get the the 36 data here
                var that = this;
                // do I have a datasource? if so use it for an XHR call
                if (this.options.datasource) {
                    dojo.xhrGet({
                        url: this.options.datasource,
                        handleAs: 'json',
                        load: function (data) {
                            if (data) {
                                that._setInstanceData(data);
                            } else {
                                that.parentCell.set(
                                    'content', this.noQueryDataText + this.options.datasource); //'The server has no data for query ' 
                            }
                        },
                        error: function(data) {
                            that._setInstanceData(null);
                        }
                    });
                } else { // I am a new widget in need of a datasource or a StaticXhr
                    this.parentCell._setContent(this.initializingText || '', true);
                    if (this.definition.isStaticXhr) {
                        // widget handles xhr and cell rendering itself
                        this._setInstanceData(null);
                    }
                    // TODO how to use editor here?
                    if (this.definition.editor) {
                        this.definition.editor(this.parentCell);
                    }
                }
            } else {
                this._setInstanceData();
            }
        },
        _setDefinition: function () {
            // WidgetDefinition is a factory function,
            // the second argument is a callback with the returned definition
            widgetDefinition(
                Sage.UI.WidgetDefinitions[this.options.name], lang.hitch(this, function (definition) {
                    this.definition = definition;
                    this._getInstanceData();
            }));
        },
        _setInstanceData: function (data) {
            // check for isStatic, and if true then just inject the 
            // return from the html() method
            if (this.definition.isStatic) {
                this.parentCell.set('content', this.definition.html(this.parentCell));
                // add the editor after if exists
                if (this.definition.editor) {
                    this.definition.editor(this.parentCell);
                }
            } else {
                // hand off to the widget's html() to handle rendering.
                this.definition.html(this.parentCell, data);
            }
        }
    });

    return widget;
});



},
'Sage/Data/SummaryViewDataManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/SummaryViewDataManager", [
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/array',
    'dojo/_base/declare',
    'dojo/_base/lang'
], function (sDataServiceRegistry, array, declare, lang) {
    var summaryRequestQueue = declare('Sage.Data.SummaryRequestQueue', null, {
        mashupName: '',
        queryName: '',
        fetching: false,
        service: null,
        unfetchedIds: null,
        constructor: function (options) {
            lang.mixin(this, options);
            this.requestHash = {};
            this.fetching = false;
            this.unfetchedIds = [];
            this.allFetched = [];
            this.service = sDataServiceRegistry.getSDataService('mashups');
        },
        add: function (id, context) {
            this.requestHash[id] = context;
            this.allFetched.push({ id: id, context: context});
            this.unfetchedIds.push(id);
        },
        send: function (callback, manager) {
            this.fetching = true;
            var quotedIds = [],
                id,
                index;
            for (id in this.requestHash) {
                quotedIds.push('\'' + id + '\'');
                index = array.indexOf(this.unfetchedIds, id);
                if (index > -1) {
                    this.unfetchedIds.splice(index, 1);
                }
            }
            var request = new Sage.SData.Client.SDataNamedQueryRequest(this.service);
            request.setApplicationName('$app');
            request.setResourceKind('mashups');
            var mashupName = this.mashupName || 'SummaryViewQueries';
            request.uri.setCollectionPredicate("'" + mashupName + "'");
            request.setQueryName('execute');
            request.setQueryArg('_resultName', this.queryName);
            request.setQueryArg('_ids', quotedIds.join(','));
            var context = this;
            request.read({
                success: lang.hitch(manager, callback, context),
                failure: lang.hitch(this, this.requestFailed, context)
            });
        },
        requestFailed: function (a, b, c) {
            console.log('request failed %o %o %o', a, b, c);
        }
    });

    var summaryVewDataManager = declare('Sage.Data.SummaryViewDataManager', null, {
        oldQueue: null,
        queue: null,
        maxQueueLength: 100,
        constructor: function () {
            this.oldQueue = {};
            this._createNewQueue();
        },
        _createNewQueue: function () {
            this.queue = new summaryRequestQueue({});
            this.requestTimeout = false;
        },
        requestData: function (entityid, widget, requestConfiguration) {
            if (this.queue.fetching) {
                this.oldQueue = this.queue;
                this._createNewQueue();
            }
            this.queue.mashupName = requestConfiguration.mashupName;
            this.queue.queryName = requestConfiguration.queryName;
            this.queue.add(entityid, widget);
            if (this.requestTimeout) {
                window.clearTimeout(this.requestTimeout);
            }
            var q = this.queue;
            var self = this;
            
            if (q.unfetchedIds.length >= this.maxQueueLength) {
                q.send(self.receiveData, self);
            }
            
            this.requestTimeout = window.setTimeout(function () { q.send(self.receiveData, self); }, 250);
        },
        requestDataNoWait: function (entityid, widget, requestConfiguration) {
            var tempQueue = new summaryRequestQueue({
                mashupName: requestConfiguration.mashupName,
                queryName: requestConfiguration.queryName
            });
            tempQueue.add(entityid, widget);
            tempQueue.send(this.receiveData, this);
        },
        receiveData: function (context, data) {
            for (var i = 0; i < data.$resources.length; i++) {
                var entity = data.$resources[i];
                var id = entity.id;
                if (!id) {
                    id = entity.$key;
                    entity.id = entity.$key;
                }
                
                // Certain groups have duplicate entities. Find
                // all of the widgets for the given entity id and set the (duplicate) content.
                (function(entity) {
                    array.forEach(context.allFetched, function (item) {
                        try {
                            if (entity.id === item.id) {
                                item.context.set('entity', entity);
                            }
                        } catch (err) { }
                    });
                })(entity);
            }
        }
    });

    Sage.Services.addService('SummaryViewDataManager', new summaryVewDataManager());
    return summaryVewDataManager;
});
},
'Sage/MainView/ActivityMgr/ActivityCalendar':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/ActivityCalendar", [
      'Sage/Data/WritableSDataStore',
      'Sage/Data/SingleEntrySDataStore',
      'Sage/Data/SDataServiceRegistry',
      'Sage/Utility',
      'dojo/string',
      'dojo/_base/lang',
      'dojo/_base/declare',
      'dojo/i18n!./nls/ActivityCalendar',
      'Sage/Array'

],
function (writableSDataStore, singleEntrySDataStore, sDataServiceRegistry, utility, dstring, lang, declare, nlsStrings) {

    var activityCalendar = declare('Sage.MainView.ActivityMgr.ActivityCalendar', null, {
        _contentWindow: null, /* This is being used to display the dhtmlxScheduler inside iFrame 
                                 as we have another instance on acticity window and dhtmlxscheduler 
                                 is a singleton instance to DOM */
        _activitiesData: null,
        _eventsData: null,
        _allData: null,
        _schedulerEvents: [],
        _schedulerEvents1: [],
        _schedulerLoaded: false,
        _loadHistoryOnStart: false,
        self: this,
        _calendarUsers: [],
        _selectedUsers: [],
        _currentUser: null,
        _userOptions: {},
        _userActivityData: [],
        _reccurring: [],
        _currentUserId: null,
        _currentUserColor: [],
        _dateRangeStart: null,
        _dateRangeEnd: null,
        completedText: '(Completed)',
        meetingIconUrl: '../../images/icons/meeting_14x14.png',
        toDoIconUrl: '../../images/icons/To_Do_14x14.png',
        phoneCallIconUrl: '../../images/icons/Call_14x14.png',
        personalActivityIconUrl: '../../images/icons/personal_14x14.png',
        _userColors: [],
        constructor: function (contentWindow, userOptions) {
            (function () {
                this._contentWindow = contentWindow;
            })();
            this._currentUserId = lang.trim(utility.getClientContextByKey('userID')) || '';
            this._userOptions = userOptions;
            this._userColors["user1"] = "#D5E2BD";
            this._userColors["user2"] = "#CFDEF5";
            this._userColors["user3"] = "#FBDBB5";
            this._userColors["user4"] = "#DFC9F6";
            this._currentUserColor = [];
            this._nlsResources = nlsStrings;
            var formatEventStartDate = function (dt) {
                return dojo.date.locale.format(new Date(dt), { selector: "date", datePattern: "EEE MMM d yyyy 00:00:00 ZZZZ" });
            };
            var formatEventEndDate = function (dt) {
                return dojo.date.locale.format(new Date(dt), { selector: "date", datePattern: "EEE MMM d yyyy 24:00:00 ZZZZ" });
            };
            var formatEventData = function (data) {
                var eventData = [{
                    StartDate: formatEventStartDate(Sage.Utility.Convert.toDateFromString(data.StartDate)),
                    EndDate: formatEventEndDate(Sage.Utility.Convert.toDateFromString(data.EndDate)),
                    Text: data.Type,
                    Id: data.$key + "-evt"
                }];
                return eventData;
            };
            var self = this;


            dojo.subscribe("/entity/history/create", function (data) {
                if (data != null) {
                    var historyId = data.HistoryId || data.$key;
                    if (historyId) {
                        self._getHistoryItem(historyId);
                    }
                }
            });

            dojo.subscribe("/entity/history/delete", function (key) {
                if (key != null) {
                    self._deleteHistoryItem(key);
                }
            });



            //This will trigger when the activity is created thro Activity Editor dialog
            //User activities(members) will not be part of the data at this time, will be fetched thro '/userActivity/create' event
            dojo.subscribe("/entity/activity/create", function (data) {
                if (data != null) {
                    if (!data.Timeless) {
                        var userId = data.Leader.$key;
                        userId = lang.trim(userId);

                        //Check if the user is selected in Calendar Users grid
                        if (self._isUserSelected(userId)) {
                            if (data.Recurring) {
                                //If recurring, load all the instances including member instances of the activity
                                //self._reloadAllActivitiesByActivityId(data.$key);
                                //self._getActivities(userId);
                                self._refreshSchedulerEvents();
                            } else {
                                var activityObject = self._formatActivityObject(data, userId);
                                //Store the activity object to be used for any useractivity updates
                                if (!self._userActivityData[userId]) {
                                    self._userActivityData[userId] = [];
                                    self._userActivityData[userId]["activities"] = [];
                                }
                                self._userActivityData[userId]["activities"].push(activityObject);

                                dojo.publish('/entity/activity/addToScheduler', [activityObject, this]);
                            }
                        }
                    }
                }
            });

            //This will trigger whenever the activity is updated with new member or removal of any existing member of the activity
            //Also this will be followed by '/activity/create' event
            dojo.subscribe("/entity/userActivity/create", function (data) {
                if (data != null && data.Activity) {
                    var actId = data.Activity.$key;
                    var userId = data.User.$key;
                    var status = data.Status;

                    //Check if the user is selected in Calendar Users grid
                    if (self._isUserSelected(userId)) {

                        if (self._reccurring[actId]) {

                            self._removeReccurringFromScheduler(actId);
                            window.setTimeout(function () { self._reloadAllActivitiesByActivityId(actId); }, 1);
                        } else {
                            //Get the activity object which we stored during '/activity/create'
                            var origActivityObj = self._getActivityObjectFromCollection(actId);
                            if (origActivityObj) {
                                var userActivityObj = self._getUserActivityFromActivity(origActivityObj, actId, userId, status);
                                //Render in scheduler
                                dojo.publish('/entity/activity/addToScheduler', [userActivityObj, this]);
                                if (!self._userActivityData[userId]) {
                                    self._userActivityData[userId] = [];
                                    self._userActivityData[userId]["activities"] = [];
                                }
                                //Store the member instance of the activity
                                self._userActivityData[userId]["activities"].push(userActivityObj);
                            }
                        }
                    }
                }
            });

            dojo.subscribe("/entity/activity/activityScheduler/reloadActivity", function (activityId) {
                self._reloadAllActivitiesByActivityId(activityId);
            });

            //This will trigger whenever a member is removed from activity thro activity dialog
            dojo.subscribe("/entity/userActivity/delete", function (data) {
                if (data != null) {
                    //data = "'ActivityId=VDEMOA0000HQ;UserId=UDEMOA000000'"
                    var activityItem = data.split(";")[0];
                    var userItem = data.split(";")[1];
                    var activityId = activityItem.split("=")[1];

                    if (self._reccurring[activityId]) {
                        self._removeReccurringFromScheduler(activityId);
                        window.setTimeout(function () { self._reloadAllActivitiesByActivityId(activityId); }, 1);
                    } else {
                        var userId = userItem.split("=")[1];
                        userId = userId.replace("'", "");
                        var actId = activityId + "-" + userId + "-act";
                        if (lang.trim(utility.getClientContextByKey('userID')) == userId) {
                            actId = "0:" + actId;
                        }
                        dojo.publish('/entity/activity/deleteFromScheduler', [actId, this]);
                        //Remove from collection
                        self._removeActivityObjectFromCollection(activityId, userId);
                    }

                }
            });

            //This will trigger whenever the activity is updated thro Activity dialog
            dojo.subscribe("/entity/activity/change", function (data) {
                if (data != null) {
                    if (data.Recurring || data.RecurrenceState.toLowerCase() !== 'rsnotrecurring') {
                        //If recurring, remove all instances of the activity from scheduler and reload to get updated
                        //                        self._removeReccurringFromScheduler(data.$key);
                        //                        self._reloadAllActivitiesByActivityId(data.$key);

                        self._refreshSchedulerEvents();
                    } else {
                        //When the leader changed, we need to remove current activity from scheduler as the color will change
                        if (data.LeaderChanged) {
                            self._deleteFromSchedulerByActivity(data.$key);
                        }
                        var userId = null;
                        if (data.Leader && data.Leader.$key) {
                            userId = lang.trim(data.Leader.$key);
                        }

                        //Check if the userId is in selected calendar users list
                        if (self._isUserSelected(userId)) {
                            var activityObject = self._formatActivityObject(data, userId);
                            dojo.publish('/entity/activity/updateScheduler', [activityObject, this]);
                            self._removeActivityObjectFromCollection(data.$key, userId);
                            self._userActivityData[userId]["activities"].push(activityObject);
                        }

                        //Update member activity instances on scheduler
                        var members = self._getMembersOfActivity(data.$key);
                        if (members) {
                            for (var i = 0; i < members.length; i++) {
                                if (members[i] !== userId) {
                                    activityObject = self._formatActivityObject(data, members[i]);
                                    dojo.publish('/entity/activity/updateScheduler', [activityObject, this]);
                                    self._removeActivityObjectFromCollection(data.$key, members[i]);
                                    if (!self._userActivityData[members[i]]) {
                                        self._userActivityData[members[i]] = [];
                                        self._userActivityData[members[i]]["activities"] = [];
                                    }
                                    self._userActivityData[members[i]]["activities"].push(activityObject);
                                }
                            }
                        }


                    }
                }
            });

            dojo.subscribe("/entity/activity/delete/single", function (activityId) {
                self._deleteFromSchedulerByActivity(activityId);
            });

            dojo.subscribe("/entity/activity/confirm", function (activityData) {
                if (activityData) {
                    self._refreshSchedulerByActivity(activityData.activityId);
                }
            });

            dojo.subscribe("/entity/activity/decline", function (activityData) {
                if (activityData) {
                    self._refreshSchedulerByActivity(activityData.activityId);
                }
            });

            dojo.subscribe("/entity/activity/delete/recurrence", function (activityId) {
                var actId;

                if (activityId) {
                    actId = activityId.substring(0, 13);
                    if (self._userActivityData) {
                        for (var i in self._userActivityData) {
                            if (self._userActivityData[i] != null) {
                                var deleteActivities = [];
                                //Remove activities of selected user from scheduler
                                if (self._userActivityData[i]["activities"]) {
                                    for (var k = 0; k < self._userActivityData[i]["activities"].length; k++) {
                                        if (self._userActivityData[i]["activities"][k]) {
                                            var id = self._userActivityData[i]["activities"][k]["id"];
                                            if (id.indexOf(actId) > -1) {
                                                deleteActivities.push(id);
                                            }
                                        }
                                    }
                                    if (deleteActivities.length > 0) {
                                        dojo.publish('/entity/activity/clearSchedulerEvents', [deleteActivities, this]);
                                    }
                                }
                            }
                        }
                    }
                }

            });

            dojo.subscribe("/entity/activity/delete", function (activityId) {
                self._deleteFromSchedulerByActivity(activityId);
            });


            dojo.subscribe("/entity/event/create", function (data) {
                if (data != null) {
                    var userId = data.UserId;
                    userId = lang.trim(userId);
                    var eventObject = self._formatEventObject(data, userId);
                    dojo.publish('/entity/activity/addToScheduler', [eventObject, this]);
                }
            });

            dojo.subscribe("/entity/event/change", function (data) {
                if (data != null) {
                    var userId = data.UserId;
                    userId = lang.trim(userId);
                    var eventObject = self._formatEventObject(data, userId);
                    dojo.publish('/entity/activity/updateScheduler', [eventObject, this]);
                }
            });

            dojo.subscribe("/entity/event/delete/single", function (eventId) {
                var evId = eventId + "-evt";
                dojo.publish('/entity/activity/deleteFromScheduler', [evId, this]);
            });

            dojo.subscribe("/entity/calendar/userlist/add", function (data) {
                (function () {
                    dojo.publish('/entity/activity/updateScheduler', [formatEventData(data), this]);
                })();
            });

            completedText = this._nlsResources.completedText || '(Completed)';
        },
        _deleteHistoryItem: function (historyId) {
            if (this._userActivityData) {
                for (var i in this._userActivityData) {
                    if (this._userActivityData[i] != null) {
                        //Remove history item of from scheduler
                        if (this._userActivityData[i]["history"]) {
                            for (var k = 0; k < this._userActivityData[i]["history"].length; k++) {
                                if (this._userActivityData[i]["history"][k]) {
                                    var id = this._userActivityData[i]["history"][k]["id"];
                                    if (id.indexOf(historyId) > -1) {
                                        delete this._userActivityData[i]["history"][k];
                                        dojo.publish('/entity/activity/deleteFromScheduler', [id, this]);
                                        break;
                                    }
                                }
                            }

                        }
                    }
                }
            }
        },
        _deleteFromSchedulerByActivity: function (activityId) {
            if (activityId && activityId.indexOf("{") == -1) {
                var activityIds = this._getAllActivitiesFromCollectionById(activityId);
                for (var i = 0; i < activityIds.length; i++) {
                    dojo.publish('/entity/activity/deleteFromScheduler', [activityIds[i], this]);
                    this._removeActivityObjectFromCollectionByActivityId(activityIds[i]);
                }
            }
        },
        _isUserSelected: function (userId) {
            var userSelected = false;
            for (var i in this._selectedUsers) {
                if (this._selectedUsers[i]["userId"]) {
                    if (this._selectedUsers[i]["userId"].toString() == userId) {
                        userSelected = true;
                        break;
                    }
                }
            }
            return userSelected;
        },
        _refreshSchedulerByActivity: function (activityId) {
            if (activityId) {
                this._deleteFromSchedulerByActivity(activityId);
                this._reloadAllActivitiesByActivityId(activityId);
            }
        },
        _getUserActivityFromActivity: function (actObj, actId, userId, status) {
            var userActivityObj = dojo.clone(actObj);
            var sd = actObj.start_date;
            var ed = actObj.end_date;
            var isConfirmed = false;
            if (userActivityObj) {
                userActivityObj.id = actId + "-" + userId + "-act";
                if (status) {
                    switch (status) {
                        case "asAccepted":
                            isConfirmed = true;
                            break;
                        case "asUnconfirmed":
                            isConfirmed = false;
                            break;
                    }
                }
                userActivityObj.userColor = this._currentUserColor[userId];
                // var sDate = utility.Activity.formatActivityStartDateForCalendar(userActivityObj.start_date);
                userActivityObj.end_date = ed; // utility.Activity.formatActivityEndDateForCalendar(userActivityObj.start_date, userActivityObj.duration);
                userActivityObj.start_date = sd; // sDate;
                userActivityObj.confirmed = isConfirmed;
            }
            return userActivityObj;
        },
        _getActivityObjectFromCollection: function (activityId) {
            var actObj = null;
            var br = false;
            if (this._userActivityData) {
                for (var i in this._userActivityData) {
                    if (this._userActivityData[i] != null) {
                        if (this._userActivityData[i]["activities"]) {
                            for (var k = 0; k < this._userActivityData[i]["activities"].length; k++) {
                                if (this._userActivityData[i]["activities"][k]) {
                                    var id = this._userActivityData[i]["activities"][k]["id"];
                                    if (id.indexOf(activityId) > -1) {
                                        actObj = this._userActivityData[i]["activities"][k];
                                        br = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (br)
                        break;
                }
            }
            return actObj;
        },
        _getAllActivitiesFromCollectionById: function (activityId) {
            var actArr = [];
            if (this._userActivityData) {
                for (var i in this._userActivityData) {
                    if (this._userActivityData[i] != null) {
                        if (this._userActivityData[i]["activities"]) {
                            for (var k = 0; k < this._userActivityData[i]["activities"].length; k++) {
                                if (this._userActivityData[i]["activities"][k]) {
                                    var id = this._userActivityData[i]["activities"][k]["id"];
                                    if (id.indexOf(activityId) > -1) {
                                        actArr.push(id);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return actArr;
        },
        _removeActivityObjectFromCollection: function (activityId, userId) {
            if (this._userActivityData) {
                if (this._userActivityData[userId] != null) {
                    if (this._userActivityData[userId]["activities"]) {
                        for (var k = 0; k < this._userActivityData[userId]["activities"].length; k++) {
                            if (this._userActivityData[userId]["activities"][k]) {
                                var id = this._userActivityData[userId]["activities"][k]["id"];
                                if (id.indexOf(activityId) > -1) {
                                    delete this._userActivityData[userId]["activities"][k];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        },
        _removeActivityObjectFromCollectionByActivityId: function (activityId) {
            var br = false;
            if (this._userActivityData) {
                for (var i in this._userActivityData) {
                    if (this._userActivityData[i] != null) {
                        if (this._userActivityData[i]["activities"]) {
                            for (var k = 0; k < this._userActivityData[i]["activities"].length; k++) {
                                if (this._userActivityData[i]["activities"][k]) {
                                    var id = this._userActivityData[i]["activities"][k]["id"];
                                    if (id == activityId) {
                                        delete this._userActivityData[i]["activities"][k];
                                        br = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (br)
                        break;
                }

            }
        },
        _getMembersOfActivity: function (activityId) {
            var actObj;
            var members = [];
            if (this._userActivityData) {
                for (var i in this._selectedUsers) {
                    if (this._selectedUsers[i] && this._selectedUsers[i]["userId"]) {
                        var cUserId = this._selectedUsers[i]["userId"].toString();
                        if (this._userActivityData[cUserId] != null) {
                            if (this._userActivityData[cUserId]["activities"]) {
                                actObj = this._userActivityData[cUserId]["activities"].filter(function (activity) { return activity.id.indexOf(activityId) > -1 });
                                if (actObj.length > 0) {
                                    members.push(cUserId);
                                }
                            }
                        }
                    }

                }
            }
            return members;
        },
        _getWeekStart: function (userWeekStart, date) {
            if (date == null) {
                date = new Date();
            }
            var shift = date.getDay();
            shift = userWeekStart - shift;
            var stDate = dojo.date.add(date, "day", shift);
            if (stDate > date) {
                stDate = dojo.date.add(stDate, "day", -7);
            }
            return stDate;
        },
        _setQueryDates: function (data) {
            var ndate = data.date.valueOf();
            switch (data.mode) {
                case 'day':
                case 'week':
                case 'workweek':
                case 'month':
                    var daysInMonth = dojo.date.getDaysInMonth(new Date(ndate));
                    var firstDayOfMonth = new Date(new Date(ndate).setDate(1));
                    firstDayOfMonth.setHours(0, 0, 0, 0);
                    var lastDayOfMonth = new Date(new Date(ndate).setDate(daysInMonth));
                    lastDayOfMonth.setHours(0, 0, 0, 0);

                    var rangeStart = this._dateAdd(firstDayOfMonth, "day", -7);
                    var rangeEnd = this._dateAdd(lastDayOfMonth, "day", 8);

                    this._dateRangeStart = Sage.Utility.Convert.toIsoStringFromDate(rangeStart);
                    this._dateRangeEnd = Sage.Utility.Convert.toIsoStringFromDate(rangeEnd);
                    break;
            }
        },
        _updateDateRange: function (data, initial) {

            if (!initial && !this._schedulerLoaded)
                return;
            var nDate = data.date;
            if (Sage.Utility.Convert.isDateString(nDate)) {
                nDate = Sage.Utility.Convert.toDateFromString(nDate);
            }
            nDate = new Date(nDate.getFullYear(), nDate.getMonth(), nDate.getDate(), nDate.getHours(), nDate.getMinutes());

            if (this._dateRangeStart && this._dateRangeEnd) {
                var sDate = this._dateRangeStart;
                if (Sage.Utility.Convert.isDateString(sDate)) {
                    sDate = Sage.Utility.Convert.toDateFromString(sDate);
                }
                sDate = new Date(sDate.getFullYear(), sDate.getMonth(), sDate.getDate(), sDate.getHours(), sDate.getMinutes());
                var eDate = this._dateRangeEnd;
                if (Sage.Utility.Convert.isDateString(eDate)) {
                    eDate = Sage.Utility.Convert.toDateFromString(eDate);
                }
                eDate = new Date(eDate.getFullYear(), eDate.getMonth(), eDate.getDate(), eDate.getHours(), eDate.getMinutes());

                if (data.mode == "month" || ((dojo.date.compare(nDate, eDate, "date") > 0) || ((dojo.date.compare(sDate, nDate, "date") > 0)))) {
                    this._setQueryDates(data);
                    this._refreshSchedulerEvents();
                }
            } else {
                this._setQueryDates(data);
                this._refreshSchedulerEvents();
            }

        },
        _updateCalendarUsers: function (userId, action) {
            var idx = dojo.indexOf(this._calendarUsers, userId);
            //var idx = this._calendarUsers.indexOf(userId);
            if (action === "add") {
                if (idx != -1) this._calendarUsers.splice(idx);
                this._calendarUsers.push(userId);
            } else if (action === "remove") {
                if (idx != -1) this._calendarUsers.splice(idx);
            }
        },
        _updateReccurring: function (id) {
            if (id) {
                //id = id.replace("0:", "");
                var rId = id.replace("0:", "").split(";");
                var aId = rId[0];


                if (!this._reccurring[aId])
                    this._reccurring[aId] = [];
                this._reccurring[aId].push(id);
            }
        },
        _dateAdd: function (dt, mode, duration) {
            if (!dt) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(dt)) {
                dt = Sage.Utility.Convert.toDateFromString(dt);
            }
            var dtAdd = new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes());
            dtAdd = dojo.date.add(dtAdd, mode, duration);
            return dtAdd;
        },
        _reloadUserCalendars: function (userId) {
            if (this._userActivityData) {
                if (this._userActivityData[userId] != null) {
                    var deleteActivities = [];
                    var deleteEvents = [];
                    var deleteHistory = [];
                    //Remove activities of selected user from scheduler
                    if (this._userActivityData[userId]["activities"]) {
                        for (var k = 0; k < this._userActivityData[userId]["activities"].length; k++) {
                            if (this._userActivityData[userId]["activities"][k])
                                deleteActivities.push(this._userActivityData[userId]["activities"][k]["id"]);
                        }
                        dojo.publish('/entity/activity/clearSchedulerEvents', [deleteActivities, this]);
                    }
                    //Remove events of selected user from scheduler
                    if (this._userActivityData[userId]["events"]) {
                        for (var l = 0; l < this._userActivityData[userId]["events"].length; l++) {
                            if (this._userActivityData[userId]["events"][l])
                                deleteEvents.push(this._userActivityData[userId]["events"][l]["id"]);
                        }
                        dojo.publish('/entity/activity/clearSchedulerEvents', [deleteEvents, this]);
                    }
                    //Remove history activities of selected user from scheduler
                    if (this._userActivityData[userId]["history"]) {
                        for (var m = 0; m < this._userActivityData[userId]["history"].length; m++) {
                            if (this._userActivityData[userId]["history"][m])
                                deleteHistory.push(this._userActivityData[userId]["history"][m]["id"]);
                        }
                        dojo.publish('/entity/activity/clearSchedulerEvents', [deleteHistory, this]);
                    }
                }
            }

        },
        _updateSelectedUsers: function (usersList, remove, loadHistoryOnStart) {
            if (usersList) {
                if (this._selectedUsers == null || this._selectedUsers.length == 0) {
                    this._selectedUsers = lang.clone(usersList);
                } else {
                    var userId;
                    if (remove) {
                        for (var i in usersList) {
                            userId = usersList[i]["userId"];
                            if (userId) {
                                delete this._selectedUsers[userId];
                            }
                        }
                    } else {
                        for (var i in usersList) {
                            userId = usersList[i]["userId"];
                            userColor = usersList[i]["usercolor"];
                            if (userId) {
                                this._selectedUsers[userId] = usersList[i];
                                if (this._currentUserId == userId) {
                                    this._updateCalendarUsers(userId.toString(), "add");
                                    this._getActivities(userId.toString(), userColor.toString());
                                    this._getEvents(userId.toString(), userColor.toString());
                                    if (loadHistoryOnStart) {
                                        this._getHistory(userId.toString(), userColor.toString());
                                    }
                                } else {
                                    var scopeObj = { userId: userId, userColor: userColor };
                                    this._getSecurityAccessData(lang.trim(utility.getClientContextByKey('userID')), userId, scopeObj, function (scObj) {
                                        this._updateCalendarUsers(scObj.userId.toString(), "add");
                                        this._getActivities(scObj.userId.toString(), scObj.userColor.toString());
                                        this._getEvents(scObj.userId.toString(), scObj.userColor.toString());
                                        if (loadHistoryOnStart) {
                                            this._getHistory(scObj.userId.toString(), scObj.userColor.toString());
                                        }
                                    }, this);
                                }
                            }

                        }
                    }
                }


            }
        },
        _refreshSchedulerEvents: function () {
            dojo.publish("/entity/activity/clearScheduler", [null, this]);
            if (this._selectedUsers) {
                var userId, userColor;

                var cUserId = lang.trim(utility.getClientContextByKey('userID'));

                var showHistory = this._selectedUsers[cUserId]["loadHistoryOnStart"];

                for (var i in this._selectedUsers) {
                    userId = this._selectedUsers[i]["userId"];
                    userColor = this._selectedUsers[i]["usercolor"];
                    var scopeObj = { userId: userId, userColor: userColor };
                    if (userId == cUserId) {
                        this._getActivities(userId, userColor);
                        this._getEvents(userId, userColor);
                        if (showHistory)
                            this._getHistory(userId, userColor);
                    } else if (userId) {
                        this._getSecurityAccessData(cUserId, userId, scopeObj, function(scObj) {
                            this._getActivities(scObj.userId, scObj.userColor);
                            this._getEvents(scObj.userId, scObj.userColor);
                            if (showHistory)
                                this._getHistory(scObj.userId, scObj.userColor);
                        }, this);
                    }
                }
            }
            this._schedulerLoaded = true;
        },
        _removeReccurringFromScheduler: function (activityId) {
            if (this._reccurring) {
                var list = this._reccurring[activityId];
                if (list && list.length > 0)
                    dojo.publish('/entity/activity/clearSchedulerEvents', [list, this]);
            }

        },
        _checkSecurityAccess: function (accessFor, accessTo, callback, scope) {
            //console.log("_checkSecurityAccess accessFor-" + accessFor + ",accessTo-" + accessTo);
            this.accessData = false;
            if (!this._accessStore) {
                this._accessStore = new singleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'activityresourceviews',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
            }
            this._accessStore.fetch({
                predicate: "'" + accessTo + "-" + accessFor + "'",
                onComplete: function (accessData) {
                    callback.call(scope, accessData);
                },
                onError: function () {
                    console.log("Error retrieving access data");
                    callback.call(scope, null);
                },
                scope: this
            });
        },
        _getSecurityAccessData: function (accessFor, accessTo, scObj, callBack, scope) {
            //console.log("_getSecurityAccessData : accessFor-" + accessFor + ",accessTo-" + accessTo);
            if (this._selectedUsers[accessTo] && this._selectedUsers[accessTo]["access"]) {
                //console.log("_getSecurityAccessData : accessFor-" + accessFor + ",accessTo-" + accessTo + "  RETURN");
                callBack.call(scope, scObj);
            } else {
                this._checkSecurityAccess(accessFor, accessTo, function (accessData) {
                    if (accessData) {
                        this._selectedUsers[accessTo]["access"] = [];
                        this._selectedUsers[accessTo]["access"].allowAdd = accessData.AllowAdd;
                        this._selectedUsers[accessTo]["access"].allowEdit = accessData.AllowEdit;
                        this._selectedUsers[accessTo]["access"].allowDelete = accessData.AllowDelete;
                        //console.log("_getSecurityAccessData set :" + accessTo);
                    }
                    //console.log("_getSecurityAccessData callback :" + accessTo);
                    callBack.call(scope, scObj);

                }, this);
            }
        },
        _reloadAllActivitiesByActivityId: function (activityId) {

            if (!this.allActivitiesStore) {
                this.allActivitiesStore = writableSDataStore({
                    service: sDataServiceRegistry.getSDataService('system'),
                    resourceKind: 'activities',
                    include: ['$descriptors,UserInfo'],
                    select: ['$key', 'Alarm', 'AlarmTime', 'Status', 'AccountId', 'AccountName', 'ActivityId', 'ContactId', 'ContactName', 'Description', 'Duration', 'LeadId', 'LeadName', 'OpportunityId', 'OpportunityName', 'TicketId', 'Recurring', 'StartDate', 'Timeless', 'Type', 'Priority', 'Notes', 'Phonenumber', 'Location', 'Leader/Userinfo/UserName', 'Useractivities/status', 'Useractivities/User/$key'],
                    sort: [{ attribute: 'StartDate', descending: true}]
                });
            }

            this.allActivitiesStore.fetch({
                query: dstring.substitute('Id eq \'${0}\' and not Timeless and UserActivities.Status ne \'asDeclned\'', [activityId]),
                count: 80,
                start: 0,
                onComplete: this._onallActivitiesRequestComplete,
                scope: this
            });
        },
        _onallActivitiesRequestComplete: function (activitiesJson) {

            dojo.require('Sage.Utility');
            dojo.require("dojo.date.locale");

            if (activitiesJson != null && activitiesJson != undefined) {
                this._schedulerEventsx = [];
                var currentUserId = null;
                for (var i = 0; i < activitiesJson.length; i++) {
                    var activityObj = {};
                    if (!activitiesJson[i].Timeless) {
                         if(activitiesJson[i]["UserActivities"]){
                            var resources = activitiesJson[i]["UserActivities"]["$resources"];
                            if (resources && resources.length > 0) {
                                for (var j = 0; j < resources.length; j++) {
                                    currentUserId = resources[j]["User"]["$key"];
                                    currentUserId = lang.trim(currentUserId);

                                    if (this._isUserSelected(currentUserId) && resources[j]["Status"] != 'asDeclned') {
                                        activityObj = this._formatActivityObject(activitiesJson[i], currentUserId, resources[j]["Status"]);
                                        if (activityObj) {
                                            this._schedulerEventsx.push(activityObj);
                                            this._updateUserActivityDataCollection(currentUserId, activityObj, true);
                                        }
                                    }
                                }
                            }
                         } else if (activitiesJson[i]["Leader"]) {
                            //If there is no UserActivities, it could be personal Activity
                            currentUserId = activitiesJson[i]["Leader"]["$key"];
                            currentUserId = lang.trim(currentUserId);
                            activityObj = this._formatActivityObject(activitiesJson[i], currentUserId);
                            this._schedulerEventsx.push(activityObj);
                            this._updateUserActivityDataCollection(currentUserId, activityObj, true);
                        }
                    }
                }
                dojo.publish('/entity/activity/loadScheduler', [dojo.clone(this._schedulerEventsx), this]);
            }

        },
        _getActivities: function (userId, color) {
            if (userId == null) {
                userId = utility.getClientContextByKey('userID');
            }
            userId = lang.trim(userId);
            self._currentUser = userId;
            if (color == null || color == undefined) {
                color = "user1";
            }
            this._currentUserColor[userId] = color;
            if (!this.activitiesStore) {
                this.activitiesStore = writableSDataStore({
                    service: sDataServiceRegistry.getSDataService('system'),
                    resourceKind: 'activities',
                    include: ['$descriptors'],
                    select: ['Alarm', 'AlarmTime', 'Attachment', 'Status', 'AccountId', 'AccountName', 'ActivityId', 'ContactId', 'ContactName', 'Description', 'Duration', 'LeadId', 'LeadName', 'OpportunityId', 'OpportunityName', 'TicketId', 'Recurring', 'StartDate', 'Timeless', 'Type', 'Priority', 'Notes', 'Phonenumber', 'Location', 'AllowEdit', 'AllowDelete', 'Leader/Userinfo/UserName', 'UserActivities', 'UserActivities/User', 'UserActivities/Status'],
                    sort: [{ attribute: 'StartDate', descending: true}]
                });
            }

            //Define custom object with current context and the userId being queried to pass the userId to call back function
            var scopeObj = { 'me': this, 'userId': userId };

            this.activitiesStore.fetch({
                query: dstring.substitute('UserActivities.UserId eq \'${0}\' and not Timeless and UserActivities.Status ne \'asDeclned\' and StartDate gt @${1}@ and StartDate lt @${2}@', [userId, this._dateRangeStart, this._dateRangeEnd]),
                onComplete: this._onActivitiesRequestComplete,
                scope: scopeObj
            });
        },
        _getEvents: function (userId, color) {
            if (userId == null) {
                userId = utility.getClientContextByKey('userID');
            }
            userId = lang.trim(userId);
            this._currentUserColor[userId] = color;
            if (!this.eventsStore) {
                this.eventsStore = writableSDataStore({
                    service: sDataServiceRegistry.getSDataService('dynamic'),
                    resourceKind: 'events',
                    include: [],
                    select: ['Type',
                      'StartDate',
                      'EndDate',
                      'Location',
                      'Description',
                      'User'],
                    sort: [{ attribute: 'StartDate', descending: true}]
                });
            }

            this.eventsStore.fetch({
                query: { conditions: dstring.substitute('UserId eq \'${0}\' and StartDate gt @${1}@ and StartDate lt @${2}@', [userId, this._dateRangeStart, this._dateRangeEnd]) },
                onComplete: this._onEventsRequestComplete,
                scope: this
            });
        },
        _getHistory: function (userId, color) {
            if (userId == null) {
                userId = utility.getClientContextByKey('userID');
            }
            this._currentUserColor[userId] = color;
            if (!this.historyActivitiesStore) {

                this.historyActivitiesStore = writableSDataStore({
                    service: sDataServiceRegistry.getSDataService('dynamic'),
                    resourceKind: 'history',
                    include: ['History'],
                    select: ['$key', 'UserId', 'ActivityId',
                        'AccountName',
                        'Category',
                        'CompletedDate',
                        'ContactId',
                        'ContactName',
                        'Description',
                        'Duration',
                        'LeadId',
                        'LeadName',
                        'LongNotes',
                        'Notes',
                        'OpportunityId',
                        'OpportunityName',
                        'Priority',
                        'Timeless',
                        'Type',
                        'Location',
                        'StartDate',
                        'EndDate'],
                    sort: [{ attribute: 'StartDate', descending: true}]
                });
            }

            this.historyActivitiesStore.fetch({
                query: dstring.substitute('UserId eq \'${0}\' and not Timeless and StartDate gt @${1}@ and StartDate lt @${2}@ and Type in (\'atPhoneCall\',\'atToDo\',\'atAppointment\',\'atPersonal\')', [userId, this._dateRangeStart, this._dateRangeEnd]),
                onComplete: this._onHistoryRequestComplete,
                scope: this
            });
        },
        _getHistoryItem: function (historyId) {
            if (!this._historyStore) {
                this._historyStore = new singleEntrySDataStore({
                    include: [],
                    resourceKind: 'history',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
            }
            this._historyStore.fetch({
                predicate: '"' + historyId + '"',
                onComplete: this._receivedHistoryItem,
                scope: this
            });
        },
        _receivedHistoryItem: function (historyData) {
            var userId;
            var loggedInUser = lang.trim(utility.getClientContextByKey('userID'));
            if (historyData != null && historyData != undefined) {
                userId = historyData.UserId;
                if (this._selectedUsers[userId]) {
                    var showHistory = this._selectedUsers[userId]["loadHistoryOnStart"];
                    if (showHistory) {
                        var histObj = {};
                        histObj = this._formatHistoryObject(userId, historyData, loggedInUser);
                        if (!this._isEmptyObject(histObj)) {
                            if (!this._userActivityData[userId])
                                this._userActivityData[userId] = {};

                            if (!this._userActivityData[userId]["history"])
                                this._userActivityData[userId]["history"] = [];

                            this._userActivityData[userId]["history"].push(histObj);
                            dojo.publish('/entity/activity/addToScheduler', [dojo.clone(histObj), this]);
                        }
                    }
                }
            }
        },
        iframeRef: function (frameRef) {
            return frameRef.contentWindow ? frameRef.contentWindow.document : frameRef.contentDocument;

        },
        _getActivityUserId: function (activityKey) {
            var uId = null;
            if (activityKey) {
                var keyData = activityKey.split(";");
                if (keyData && keyData.length > 1) {
                    uId = keyData[1].split("=")[1];
                }
            }
            return uId;
        },
        _getAccessData: function (userId, accessType) {
            var access = false;
            if (this._selectedUsers && this._selectedUsers[userId] && this._selectedUsers[userId]["access"]) {
                switch (accessType) {
                    case "allowAdd":
                        access = this._selectedUsers[userId]["access"]["allowAdd"];
                        break;
                    case "allowEdit":
                        access = this._selectedUsers[userId]["access"]["allowEdit"];
                        break;
                    case "allowDelete":
                        access = this._selectedUsers[userId]["access"]["allowDelete"];
                        break;
                }
            }
            return access;
        },
        _formatActivityObject: function (actJson, userId, status, loggedInUser) {
            var startDate, endDate, text, iconSrc;
            var actObj = {};
            var isLoggedInUser = false;
            if (!loggedInUser)
                loggedInUser = lang.trim(utility.getClientContextByKey('userID'));
            if (userId === lang.trim(loggedInUser)) {
                isLoggedInUser = true;
            }

            if (actJson != null) {
                //Hack to sort the activities by id so that the logged in User's activity will be displayed first
                if (isLoggedInUser) {
                    actObj.id = "0:";
                    actObj.id += actJson.$key;
                } else {
                    actObj.id = actJson.$key;
                }

                actObj.currentUser = isLoggedInUser;
                actObj.id += "-" + userId;
                actObj.id += "-act";
                actObj.type = "userActivity";
                actObj.subType = actJson.Type;
                startDate = actJson.StartDate;
                text = actJson.ContactName;
                actObj.text = (text == null) ? "" : text;
                actObj.timeless = actJson.Timeless;
                actObj.alarm = actJson.Alarm;
                if (actJson["Leader"]) {
                    actObj.leaderUserId = actJson["Leader"]["$key"];
                }
                actObj.alarmTime = Sage.Utility.Convert.toDateFromString(actJson.AlarmTime);
                actObj.duration = actJson.Duration;
                actObj.description = actJson.Description;
                actObj.contactId = actJson.ContactId;
                actObj.contactName = actJson.ContactName;
                actObj.accountId = actJson.AccountId;
                actObj.accountName = actJson.AccountName;
                actObj.leadId = actJson.LeadId;
                actObj.leadName = actJson.LeadName;
                actObj.regarding = actJson.Description;
                actObj.priority = actJson.Priority;
                actObj.notes = actJson.Notes;
                actObj.phoneNumber = actJson.PhoneNumber;
                actObj.opportunityId = actJson.OpportunityId;
                actObj.opportunity = actJson.OpportunityName;
                actObj.recurring = actJson.$key.indexOf(";") > 0 ? true : false;

                if (isLoggedInUser) {
                    actObj.allowDelete = true;
                    actObj.allowEdit = actJson.AllowEdit;
                } else {
                    actObj.allowDelete = this._getAccessData(userId, "allowDelete");
                    actObj.allowEdit = this._getAccessData(userId, "allowEdit");
                }
                actObj.ticketId = actJson.TicketId;

                if (actObj.recurring) {
                    this._updateReccurring(actObj.id);
                }


                actObj.attachment = actJson.Attachment;
                actObj.location = actJson.Location;
                switch (actJson.Type.toUpperCase()) {
                    case "ATTODO":
                        iconSrc = this.toDoIconUrl;
                        break;
                    case "ATAPPOINTMENT":
                        iconSrc = this.meetingIconUrl;
                        break;
                    case "ATPHONECALL":
                        iconSrc = this.phoneCallIconUrl;
                        break;
                    case "ATPERSONAL":
                        iconSrc = this.personalActivityIconUrl;
                        break;
                }
                actObj.iconSrc = iconSrc;
                actObj.userColor = this._currentUserColor[userId];
                var isConfirmed = true;

                if (status) {
                    switch (status) {
                        case "asAccepted":
                            isConfirmed = true;
                            break;
                        case "asUnconfirmed":
                            isConfirmed = false;
                            break;
                    }
                }
                actObj.confirmed = isConfirmed;
                actObj.start_date = utility.Activity.formatActivityStartDateForCalendar(actJson.StartDate);
                actObj.end_date = utility.Activity.formatActivityEndDateForCalendar(actJson.StartDate, actObj.duration);

                if (actObj.alarmTime) {
                    actObj.alarmMinutesBefore = dojo.date.difference(Sage.Utility.Convert.toDateFromString(actJson.StartDate), actObj.alarmTime, "minute");
                }

            }
            return actObj;
        },
        _formatEventObject: function (eventJson, userId) {
            var evtObj = {};
            if (eventJson != null) {
                evtObj.id = eventJson.$key;
                evtObj.id += "-evt";
                evtObj.type = "event";
                evtObj.subType = eventJson.Type;
                evtObj.description = eventJson.Description;
                evtObj.location = eventJson.Location;
                evtObj.text = eventJson.Type;
                evtObj.userColor = this._currentUserColor[userId];
                evtObj.start_date = utility.Activity.formatActivityStartDateForCalendar(eventJson.StartDate, "MM/d/yy 0:00",true);
                evtObj.end_date = utility.Activity.formatActivityStartDateForCalendar(eventJson.EndDate, "MM/d/yy 24:00",true);
            }
            return evtObj;
        },
        _updateUserActivityDataCollection: function (userId, activityObj, chkExists) {
            if (!this._userActivityData[userId]) {
                this._userActivityData[userId] = [];
            }
            if (!this._userActivityData[userId]["activities"]) {
                this._userActivityData[userId]["activities"] = [];
            } else if (chkExists) {
                try {
                    this._userActivityData[userId]["activities"].removeByAttr("id", activityObj.id);
                } catch (ex) {
                }
            }
            this._userActivityData[userId]["activities"].push(activityObj);
        },
        _onActivitiesRequestComplete: function (activitiesJson, contextscope) {
            //Get the context and userId from the custom object (scopeObj) from _getActivities method
            var _queryUserId = contextscope.scope.userId;
            var _this = contextscope.scope.me;

            if (activitiesJson != null && activitiesJson != undefined) {
                _this._schedulerEvents = [];
                var currentUserId = null;
                var status = null;
                var loggedInUserId = utility.getClientContextByKey('userID');

                for (var i = 0; i < activitiesJson.length; i++) {
                    var activityObj = {};
                    if (!activitiesJson[i].Timeless) {
                        if (activitiesJson[i]["UserActivities"]) {
                            if (activitiesJson[i]["UserActivities"]["$resources"]) {
                                for (var j = 0; j < activitiesJson[i]["UserActivities"]["$resources"].length; j++) {
                                    if (activitiesJson[i]["UserActivities"]["$resources"][j]["User"]) {
                                        if (_queryUserId == activitiesJson[i]["UserActivities"]["$resources"][j]["User"]["$key"]) {
                                            currentUserId = activitiesJson[i]["UserActivities"]["$resources"][j]["User"]["$key"];
                                            currentUserId = lang.trim(currentUserId);
                                            status = activitiesJson[i]["UserActivities"]["$resources"][j]["Status"];
                                            activityObj = _this._formatActivityObject(activitiesJson[i], currentUserId, status, loggedInUserId);
                                            _this._updateUserActivityDataCollection(currentUserId, activityObj);
                                        }
                                    }
                                }
                            }
                        } else if (activitiesJson[i]["Leader"]) {
                            //If there is no UserActivities, it could be personal Activity
                            currentUserId = activitiesJson[i]["Leader"]["$key"];
                            currentUserId = lang.trim(currentUserId);
                            activityObj = _this._formatActivityObject(activitiesJson[i], currentUserId,null, loggedInUserId);
                            _this._updateUserActivityDataCollection(currentUserId, activityObj);
                            currentUserId = null;
                        }
                    }
                    if (!_this._isEmptyObject(activityObj)) {
                        _this._schedulerEvents.push(activityObj);
                    }
                }
                dojo.publish('/entity/activity/loadScheduler', [dojo.clone(_this._schedulerEvents), _this]);
            }

        },
        _onEventsRequestComplete: function (eventsJson) {
            dojo.require('Sage.Utility');
            dojo.require("dojo.date.locale");
            if (eventsJson != null && eventsJson != undefined) {
                this._schedulerEvents1 = [];
                var currentUserId = null;
                for (var i = 0; i < eventsJson.length; i++) {
                    var eventObj = {};

                    if (!currentUserId) {
                        currentUserId = eventsJson[i]["User"]["$key"];
                    }
                    currentUserId = lang.trim(currentUserId);
                    eventObj = this._formatEventObject(eventsJson[i], currentUserId);
                    if (eventObj) {
                        this._schedulerEvents1.push(eventObj);
                    }
                }
                if (!this._userActivityData[currentUserId])
                    this._userActivityData[currentUserId] = {};
                this._userActivityData[currentUserId]["events"] = this._schedulerEvents1;
                dojo.publish('/entity/activity/loadScheduler', [dojo.clone(this._schedulerEvents1), this]);
            }
        },
        _formatHistoryObject: function (userId, historyData, loggedInUser) {
            var historyActivityObj = {};
            var iconSrc = "";
            var text;
            userId = lang.trim(userId);
            if (!historyData.Timeless) {

                if (userId == lang.trim(loggedInUser)) {
                    historyActivityObj.id = "0:";
                    historyActivityObj.id += historyData.$key;
                } else {
                    historyActivityObj.id = historyData.$key;
                }
                historyActivityObj.id += "-" + userId;
                historyActivityObj.id += "-hist";
                historyActivityObj.type = "userHistoryActivity";
                historyActivityObj.activityId = historyData.ActivityId;
                historyActivityObj.subType = historyData.Type;
                //text = completedText;
                text = historyData.ContactName;
                historyActivityObj.text = (text == null) ? "" : text;
                historyActivityObj.timeless = historyData.Timeless;
                historyActivityObj.duration = historyData.Duration;
                historyActivityObj.description = historyData.Description;
                historyActivityObj.contactName = historyData.ContactName;
                historyActivityObj.accountName = historyData.AccountName;
                historyActivityObj.leadName = historyData.LeadName;
                historyActivityObj.regarding = historyData.Description;
                historyActivityObj.priority = historyData.Priority;
                historyActivityObj.notes = historyData.Notes;
                historyActivityObj.location = historyData.Location;
                historyActivityObj.opportunity = historyData.OpportunityName;
                historyActivityObj.userColor = this._currentUserColor[userId];
                historyActivityObj.confirmed = true;

                switch (historyData.Type.toUpperCase()) {
                    case "ATTODO":
                        iconSrc = this.toDoIconUrl;
                        break;
                    case "ATAPPOINTMENT":
                        iconSrc = this.meetingIconUrl;
                        break;
                    case "ATPHONECALL":
                        iconSrc = this.phoneCallIconUrl;
                        break;
                    case "ATPERSONALACTIVITY":
                        iconSrc = this.personalActivityIconUrl;
                        break;
                }
                historyActivityObj.iconSrc = iconSrc;
                historyActivityObj.start_date = utility.Activity.formatActivityStartDateForCalendar(historyData.CompletedDate);
                historyActivityObj.end_date = utility.Activity.formatActivityEndDateForCalendar(historyData.CompletedDate, historyActivityObj.duration);

            }
            return historyActivityObj;

        },
        _onHistoryRequestComplete: function (historyData) {
            if (historyData != null && historyData != undefined) {
                var schedulerEventsHistory = [];
                var text;
                var currentUserId = null;
                var loggedInUser = lang.trim(utility.getClientContextByKey('userID'));
                for (var i = 0; i < historyData.length; i++) {
                    var historyActivityObj = {};
                    currentUserId = historyData[i].UserId;
                    historyActivityObj = this._formatHistoryObject(currentUserId, historyData[i], loggedInUser);
                    if (!this._isEmptyObject(historyActivityObj)) {
                        schedulerEventsHistory.push(historyActivityObj);
                    }
                }

                if (!this._userActivityData[currentUserId])
                    this._userActivityData[currentUserId] = {};

                this._userActivityData[currentUserId]["history"] = schedulerEventsHistory;

                dojo.publish('/entity/activity/loadScheduler', [dojo.clone(schedulerEventsHistory), this]);
            }

        },
        _getEventColorByUser: function (userId) {
            var userColor = "#d5e2bd";
            for (var i = 0; i < this._calendarUsers.length; i++) {
                if (this._calendarUsers[i].userId == userId) {
                    userColor = this._calendarUsers[i].eventColor;
                }
            }
            return userColor;
        },
        _isEmptyObject: function (obj) {
            for (var i in obj) { return false; }
            return true;
        }

    });
    return activityCalendar;
});

},
'Sage/QuickForms/Design/main':function(){
define("Sage/QuickForms/Design/main", [
    "Sage/QuickForms/Design/CheckBoxControlDesigner",
    "Sage/QuickForms/Design/ColumnDesigner",
    "Sage/QuickForms/Design/ComboBoxControlDesigner",
    "Sage/QuickForms/Design/ControlDesigner",
    "Sage/QuickForms/Design/ControlDesignerRegistry",
    "Sage/QuickForms/Design/CurrencyControlDesigner",
    "Sage/QuickForms/Design/DataGridControlDesigner",
    "Sage/QuickForms/Design/DataSourceDesigner",
    "Sage/QuickForms/Design/DataSourcePanel",
    "Sage/QuickForms/Design/DateTimePickerControlDesigner",
    "Sage/QuickForms/Design/DesignPanel",
    "Sage/QuickForms/Design/DesignSurface",
    "Sage/QuickForms/Design/EmailControlDesigner",
    "Sage/QuickForms/Design/FormDesigner",
    "Sage/QuickForms/Design/GenericControlDesigner",
    "Sage/QuickForms/Design/Help",
    "Sage/QuickForms/Design/HiddenControlDesigner",
    "Sage/QuickForms/Design/NonVisibleControlContainer",
    "Sage/QuickForms/Design/NumericControlDesigner",
    "Sage/QuickForms/Design/OwnerControlDesigner",
    "Sage/QuickForms/Design/PhoneControlDesigner",
    "Sage/QuickForms/Design/PickListControlDesigner",
    "Sage/QuickForms/Design/PropertyEditorContainer",
    "Sage/QuickForms/Design/PropertyValueError",
    "Sage/QuickForms/Design/RowDesigner",
    "Sage/QuickForms/Design/TextBoxControlDesigner",
    "Sage/QuickForms/Design/UrlControlDesigner",
    "Sage/QuickForms/Design/UserControlDesigner",
    "Sage/QuickForms/Design/EditableGridControlDesigner"
], function() {
	// module:
        // Sage/QuickForms/Design/main
	// summary:
        // The Sage/QuickForms/Design/main module provides loading of all Sage/QuickForms/Design modules.
});
},
'Sage/Utility/File/Attachment':function(){
﻿/*globals define, Sage, window, dojo */
define("Sage/Utility/File/Attachment", [
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility/File',
    'Sage/UI/Dialogs',
    'dojo/_base/lang',
    'dojo/string',
    'Sage/Utility',
        'Sage/Utility/File/DescriptionsForm',
    'dojo/i18n',
    'dojo/i18n!./nls/Attachment'
],
    function (SingleEntrySDataStore, SDataServiceRegistry, FileUtil, dialogs, dLang, dString, Utility, DescriptionsForm, i18n) {
        Sage.namespace('Utility.File.Attachment');
        Sage.Utility.File.Attachment = {
            percentComplete: 'Uploading, please wait...',
            _store: false,
            _totalProgress: 0,
            _attachmentTemplate: false,
            _mixinsByName: {},
            _files: [],
            _fileCount: 0,
            _filesUploadedCount: 0,
            _isUploading: false,
            _descriptionsForm: false,
            //_uploadUrlFmt: 'slxdata.ashx/slx/system/-/attachments(\'${0}\')/file',
            _uploadUrl: 'slxdata.ashx/slx/system/-/attachments/file',
            createAttachments: function (files) {
                var entityDesc = '';
                if (Sage.Services.hasService('ClientEntityContext')) {
                    var entitycontext = Sage.Services.getService('ClientEntityContext');
                    var context = entitycontext.getContext();
                    entityDesc = context.Description || '';
                }
                this._ensureDescriptionsForm();
                this._descriptionsForm.set('entityDesc', entityDesc);
                this._descriptionsForm.set('files', files);
                this._descriptionsForm.show();
            },
            createAttachmentSilent: function (file, mixin) {
                if (!mixin.hasOwnProperty('description')) {
                    mixin['description'] = this.getDefaultDescription(file.name);
                }
                //console.log("creating attachment silently - desc: " + mixin['description']);
                this._mixinsByName[file.name] = dLang.mixin(mixin, {
                    attachDate: Utility.Convert.toIsoStringFromDate(new Date()),
                    dataType: 'R'
                });
                this._files.push(file);
                if (!this._attachmentTemplate) {
                    this.getAttachmentTemplate(this.uploadFiles, this);
                } else {
                    this.uploadFiles();
                }
            },
            handleDescriptions: function (files, descriptions) {
                var propname = '';
                var id = '';
                this.getKnownRelationships(function (rels) {
                    var rootmixin = dLang.mixin(rels, {
                        attachDate: Utility.Convert.toIsoStringFromDate(new Date()),
                        dataType: 'R',
                        user: { '$key': Utility.getClientContextByKey('userID') || '' }
                    });
                    for (var i = 0; i < descriptions.length; i++) {
                        descriptions[i][propname] = id;
                        this._mixinsByName[descriptions[i].fileName] = dLang.mixin(descriptions[i], rootmixin);
                    }
                    for (i = 0; i < files.length; i++) {
                        this._files.push(files[i]);
                    }
                    if (!this._attachmentTemplate) {
                        this.getAttachmentTemplate(this.uploadFiles, this);
                    } else {
                        this.uploadFiles();
                    }
                }, this);
            },
            uploadFiles: function (template) {
                this._isUploading = true;
                this._fileCount = this._files.length;
                if (template && !this._attachmentTemplate) {
                    this._attachmentTemplate = template;
                }
                while (this._files.length > 0) {
                    var file = this._files.pop();
                    Sage.Utility.File.uploadFile(file,
                    this._uploadUrl,
                    this._updateProgress,
                    this._successUpload,
                    this._failAdd,
                    this);
                }
            },
            _successUpload: function (request) {

                //the id of the new attachment is buried in the Location response header...
                var url = request.getResponseHeader('Location');
                var re = /\'\w+\'/g;
                var matches = url.match(re);
                if (matches) {
                    var id = matches[0].replace(/\'/g, '');

                    //now that we have the id, we can fetch it using the SingleEntrySDataStore
                    var tempStore = new SingleEntrySDataStore({
                        resourceKind: 'attachments',
                        service: SDataServiceRegistry.getSDataService('system')
                    });
                    tempStore.fetch({
                        predicate: '"' + id + '"',
                        onComplete: function (attachment) {
                            //now we have the attachment entity, we can set the values to the properties we need to
                            var mixin = this._mixinsByName[attachment.fileName];
                            if (mixin) {
                                attachment = dLang.mixin(attachment, mixin);
                                // then save it
                                tempStore.save({
                                    scope: this,
                                    success: this._successAddEntity,
                                    failure: this._failAdd
                                });
                            }
                            //clean up in case they upload the same file again to another entity or something
                            delete (this._mixinsByName[attachment.fileName]);
                        },
                        beforeRequest: function (req) {
                            req.setQueryArg('_includeFile', 'false');
                        },
                        onError: this._failAdd,
                        scope: this
                    });
                }
                this._filesUploadedCount = this._filesUploadedCount + 1;
                this._updateProgress((this._fileCount < 1) ? 100 : (this._filesUploadedCount / this._fileCount) * 100);
            },
            _successAddEntity: function (entity) {
                //console.log('new attachment record created... ' + entity['$key']);
                dojo.publish('/entity/attachment/create', entity);
            },
            getAttachment: function (id) {
                if (id && id.length === 12) {
                    window.open('slxdata.ashx/slx/system/-/attachments(\'' + id + '\')/file', 'file');
                }
            },
            getAttachmentTemplate: function (callback, scope) {
                FileUtil.Attachment._createStore();
                FileUtil.Attachment._store.newItem({
                    onComplete: callback,
                    scope: scope || this
                });
            },
            getDefaultDescription: function (filename) {
                this._ensureDescriptionsForm();
                return this._descriptionsForm.getDefaultDescription(filename);
            },
            _createStore: function () {
                if (!FileUtil.Attachment._store) {
                    FileUtil.Attachment._store = new SingleEntrySDataStore({
                        resourceKind: 'attachments',
                        service: SDataServiceRegistry.getSDataService('system')
                    });
                }
            },
            _updateProgress: function (curFileProgress) {
                //console.log('progress obj: %o', curFileProgress);
                var pct = this._totalProgress;
                //console.log('pct: ' + pct);
                if (curFileProgress && curFileProgress.lengthComputable) {
                    var thisFilePercent = (curFileProgress.loaded / curFileProgress.total) * 100;
                    pct += Math.round(thisFilePercent / this._fileCount);
                } else if (curFileProgress) {
                    pct = curFileProgress;
                }
                this._totalProgress = pct;
                //console.log('now calculated pct: ' + pct);
                if (pct < 99) {
                    dialogs.showProgressBar({
                        pct: pct,
                        title: this.percentComplete
                    });
                } else {
                    dialogs.closeProgressBar();
                    this._resetCounts();

                }
            },
            _resetCounts: function () {
                this._fileCount = 0;
                this._filesUploadedCount = 0;
                this._isUploading = false;
                this._totalProgress = 0;
            },
            _failAdd: function (resp) {
                console.warn('Attachment failed to save %o', resp);
            },
            _successUpdate: function (attachment) {
                dojo.publish('/entity/attachment/update', attachment);
            },
            _ensureDescriptionsForm: function () {
                if (!this._descriptionsForm) {
                    this._descriptionsForm = new DescriptionsForm({
                        entityDesc: '',
                        files: this._files || []
                    });
                    dojo.connect(this._descriptionsForm, 'onDescriptionsEntered', this, 'handleDescriptions');
                }
            },
            getKnownRelationships: function (callback, scope, includeInsertActivity) {
                var retobj = {};
                if (Sage.Services.hasService('ClientEntityContext')) {
                    var entitycontext = Sage.Services.getService('ClientEntityContext');
                    var context = entitycontext.getContext();
                    var parts = context.EntityType.split('.');
                    var entityType = parts[parts.length - 1];
                    if (context.EntityId !== "") {
                        var id = context.EntityId;
                        switch (entityType) {
                            case 'IContact':
                                this._getContactRelationships(id, callback, scope);
                                return;
                            case 'IOpportunity':
                                this._getOpportunityRelationships(id, callback, scope);
                                return;
                            case 'ITicket':
                                this._getTicketRelationships(id, callback, scope);
                                return;
                            case 'ISalesOrder':
                                this._getSalesOrderRelationships(id, callback, scope);
                                return;
                            case 'IActivity':
                                this._getActivityRelationships(id, callback, scope);
                                return;
                            case 'IHistory':
                                this._getHistoryRelationships(id, callback, scope);
                                return;
                            case 'IContract':
                                this._getContractRelationships(id, callback, scope);
                                return;
                            case 'IReturn':
                                this._getReturnRelationships(id, callback, scope);
                                return;
                        }
                        var propname = context.EntityTableName.toLowerCase() + 'Id';
                        retobj[propname] = id;
                        callback.call(scope || this, retobj);
                        return;
                    } else if (entityType === 'IActivity' && includeInsertActivity) {
                        //we are in insert activity or history mode - get the relationships from the Editor...
                        //*** note *** this should only be called by the fallback file picker
                        // when using HTML5 File support or Gears, this is not needed.  This is just
                        // a hack for IE without gears.
                        this._getInsertActivityRelationships(callback, scope);
                        return;
                    } else if (entityType === 'IHistory' && includeInsertActivity) {
                        this._getInsertHistoryRelationships(callback, scope);
                        return;
                    }
                }
                callback.call(scope || this, {});
            },
            _getRequest: function (resourceKind, id) {
                var req = new Sage.SData.Client.SDataSingleResourceRequest(SDataServiceRegistry.getSDataService('dynamic'));
                req.setResourceKind(resourceKind);
                req.setResourceSelector('"' + id + '"');
                req.setQueryArg('precedence', '0');
                return req;
            },
            _getContactRelationships: function (id, callback, scope) {
                var req = this._getRequest('contacts', id);
                req.setQueryArg('include', 'Account');
                req.read({
                    success: function (contact) {
                        var obj = {
                            accountId: Utility.getValue(contact, 'Account.$key'),
                            contactId: contact.$key
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'contactId': id });
                    },
                    scope: this
                });
            },
            _getOpportunityRelationships: function (id, callback, scope) {
                var req = this._getRequest('opportunities', id);
                req.setQueryArg('include', 'Account,Contacts');
                req.setQueryArg('select', 'Contacts/IsPrimary,Account/Id');
                req.read({
                    success: function (opp) {
                        var obj = {
                            accountId: Utility.getValue(opp, 'Account.$key'),
                            opportunityId: opp.$key
                        };
                        var contactId = '';
                        var contacts = opp.Contacts.$resources;
                        if (contacts.length > 0) {
                            contactId = contacts[0].$key;
                        }
                        for (var i = 0; i < contacts.length; i++) {
                            if (contacts[i].IsPrimary) {
                                contactId = contacts[i].$key;
                            }
                        }
                        obj['contactId'] = contactId;
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'opportunityId': id });
                    },
                    scope: this
                });
            },
            _getSalesOrderRelationships: function (id, callback, scope) {
                var req = this._getRequest('salesorders', id);
                req.setQueryArg('include', 'Account');
                req.read({
                    success: function (so) {
                        //console.dir(so);
                        var obj = {
                            accountId: Utility.getValue(so, 'Account.$key'),
                            salesOrderId: so.$key
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'salesOrderId': id });
                    },
                    scope: this
                });
            },
            _getTicketRelationships: function (id, callback, scope) {
                var req = this._getRequest('tickets', id);
                req.setQueryArg('include', 'Account,Contact');
                req.read({
                    success: function (ticket) {
                        var obj = {
                            accountId: Utility.getValue(ticket, 'Account.$key'),
                            ticketId: ticket.$key,
                            contactId: Utility.getValue(ticket, 'Contact.$key')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ticketId': id });
                    },
                    scope: this
                });
            },
            _getReturnRelationships: function (id, callback, scope) {
                var req = this._getRequest('returns', id);
                req.setQueryArg('include', 'Account,Contact,Ticket');
                req.read({
                    success: function (rma) {
                        var obj = {
                            returnId: rma.$key,
                            accountId: Utility.getValue(rma, 'Account.$key'),
                            ticketId: Utility.getValue(rma, 'Ticket.$key'),
                            contactId: Utility.getValue(rma, 'Contact.$key')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { returnId: id });
                    },
                    scope: this
                });
            },
            _getActivityRelationships: function (id, callback, scope) {
                var req = this._getRequest('activities', id);
                req.setQueryArg('select', 'AccountId,ContactId,LeadId,OpportunityId,TicketId');
                req.read({
                    success: function (activity) {
                        //console.dir(activity);
                        var obj = {
                            accountId: Utility.getValue(activity, 'AccountId'),
                            activityId: activity.$key,
                            contactId: Utility.getValue(activity, 'ContactId'),
                            leadId: Utility.getValue(activity, 'LeadId'),
                            opportunityId: Utility.getValue(activity, 'OpportunityId'),
                            ticketId: Utility.getValue(activity, 'TicketId')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'activityId': id });
                    },
                    scope: this
                });
            },
            _getInsertActivityRelationships: function (callback, scope) {
                var ed = dijit.byId('activityEditor');
                if (ed) {
                    var obj = ed.getRelationshipsForAttachments();
                    callback.call(scope || this, obj);
                    return;
                }
                callback.call(scope || this, { 'activityId': '' });
            },
            _getHistoryRelationships: function (id, callback, scope) {
                var req = this._getRequest('history', id);
                req.setQueryArg('select', 'AccountId,ContactId,LeadId,OpportunityId,TicketId');
                req.read({
                    success: function (history) {
                        //console.dir(history);
                        var obj = {
                            accountId: Utility.getValue(history, 'AccountId'),
                            historyId: history.$key,
                            contactId: Utility.getValue(history, 'ContactId'),
                            leadId: Utility.getValue(history, 'LeadId'),
                            opportunityId: Utility.getValue(history, 'OpportunityId'),
                            ticketId: Utility.getValue(history, 'TicketId')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'historyId': id });
                    },
                    scope: this
                });
            },
            _getInsertHistoryRelationships: function (callback, scope) {
                var ed = dijit.byId('historyEditor');
                if (ed) {
                    var obj = ed.getRelationshipsForAttachments();
                    callback.call(scope || this, obj);
                    return;
                }
                callback.call(scope || this, { 'historyId': '' });
            },
            _getContractRelationships: function (id, callback, scope) {
                var req = this._getRequest('contracts', id);
                req.setQueryArg('include', 'Account,Contact');
                req.read({
                    success: function (contract) {
                        var obj = {
                            accountId: Utility.getValue(contract, 'Account.$key'),
                            contractId: contract.$key,
                            contactId: Utility.getValue(contract, 'Contact.$key')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ticketId': id });
                    },
                    scope: this
                });
            },

            /* remote database attachment sync functionailty   */

            remoteRequestAttachment: function (attachId) {
                //http://localhost:17966/SlxClient/slxdata.ashx/slx/system/-/attachments/$service/RequestAttachment/$template?format=json
                var payload = {
                    '$name': 'RequestAttachment',
                    'request': {
                        'entity': { '$key': attachId },
                        AttachmentId: attachId
                    }
                };
                var request = new Sage.SData.Client.SDataServiceOperationRequest(SDataServiceRegistry.getSDataService('system'))
                    .setResourceKind('attachments')
                    .setOperationName('RequestAttachment');
                request.execute(payload, {
                    success: function (response) { dojo.publish('/entity/attachment/requested', response); }
                });
            }

            /* end remote handling.  */
        };
        return Sage.Utility.File.Attachment = dojo.mixin(Sage.Utility.File.Attachment, i18n.getLocalization("Sage.Utility.File", "Attachment"));
    });
},
'Sage/QuickForms/Design/Editors/NumericAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/NumericAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/NumericAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization) {
    return declare('Sage.QuickForms.Design.Editors.NumericAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.formatTypeTooltipText %}">',
                        '<label>{%= $.formatTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_formatType" data-dojo-attach-event="onChange:_onFormatTypeChange">',
                        '{% for (var format in $.numberFormatText) { %}',
                            '<span value="{%= format %}">{%= $.numberFormatText[format] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.maxLengthTooltipText %}">',
                        '<label>{%= $.maxLengthText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_maxLength" data-dojo-attach-event="onChange:_onMaxLengthChange" data-dojo-props="constraints:{min:-1,places:0}"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.decimalDigitsTooltipText %}">',
                        '<label>{%= $.decimalDigitsText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_decimalDigits" data-dojo-props="constraints:{min:-1,max:100,places:0}" data-dojo-attach-event="onChange:_onDecimalDigitsChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.strictTooltipText %}">',
                        '<label>{%= $.strictText %}</label>',
                        '<div data-dojo-attach-point="_strict" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onStrictChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _isReadOnly: null,
        _defaultDataBinding: null,
        _formatType: null,
        _maxLength: null,
        _required: null,
        _strict: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        decimalDigitsText: 'Decimal Digits:',
        decimalDigitsTooltipText: 'The number of digits after the decimal to display and allow for data entry.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        formatTypeText: 'Format Type:',
        formatTypeTooltipText: 'Type of format to use when converting number to string.',
        maxLengthText: 'Max Length:',
        maxLengthTooltipText: 'Maximum number of characters user can enter.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        strictText: 'Strict:',
        strictTooltipText: 'Pads display of number with trailing zeros as necessary.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        numberFormatText: {
            'Number': 'Number',
            'Percent': 'Percent',
            'Decimal': 'Decimal',
            'Scientific': 'Scientific'
        },
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlId.set('value', this._designer.get('controlId'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._decimalDigits.set('value', this._designer.get('decimalDigits'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._formatType.set('value', this._designer.get('formatType'));
            this._maxLength.set('value', this._designer.get('maxLength'));
            this._required.set('value', this._designer.get('required'));
            this._strict.set('value', this._designer.get('strict'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('enabled', value);
        },
        _onDecimalDigitsChange: function(value){
            if (this.isSuspended() || !this._decimalDigits.isValid()) {
                return;
            }
            this._designer.set('decimalDigits', value);
        },
        _onFormatTypeChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('formatType', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('controlLabelPlacement', value);
        },
        _onMaxLengthChange: function(value){
            if (this.isSuspended() || !this._maxLength.isValid()) {
                return;
            }
            this._designer.set('maxLength', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('required', value);
        },
        _onStrictChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('strict', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/QuickForms/Design/nls/NumericControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/NumericControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Numeric"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/_PropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/_PropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Properties"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Columns/templates/DndCell.html':"<div>\r\n    <div data-dojo-type=\"dojo.dnd.Source\" dojoAttachPoint=\"sourceNode\" copyOnly=\"true\" accept=\"\">\r\n        <div class=\"dojoDndItem\" dojoAttachPoint=\"dndItem\"></div>\r\n    </div>\r\n</div>\r\n",
'Sage/Services/nls/ActivityActionProcessor':function(){
define("Sage/Services/nls/ActivityActionProcessor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            btnOkayText: 'OK',
            btnCancelText: 'Cancel',
            btnCloseText: 'Close',
            btnHelpText: 'Help',
            processingText: 'Processing request please wait...',
            failureText: 'I\'m sorry, the action was not successful an error occurred.',
            titleText: 'Process'
         }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Controls/SummaryAggregate':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/SummaryAggregate", [
       'dijit/_Widget',
       'Sage/_Templated',
       'dijit/Tooltip',
       'Sage/UI/GridMenuItem',
       'Sage/Data/BaseSDataStore',
       'Sage/UI/Columns/SlxLink',
       'Sage/UI/Columns/Phone',
       'dojo/i18n!../nls/SDataLookup', // loading text, no data text, TODO: Create common nls
       'dojo/_base/declare'
],
function (_Widget, _Templated, tooltip, gridMenuItem, baseSDataStore, slxLink, phone, nlsResource, declare) {
    var widget = declare('Sage.UI.Controls.SummaryAggregate', [_Widget, _Templated], {
        //l18n strings...
        loadingText: nlsResource.loadingText,
        noDataText: nlsResource.noDataText,
        widgetsInTemplate: true,
        value: '',
        content: '',
        valueNode: null,
        linkTabName: '',
        entityId: '',
        linkPage: '',
        toolTip: false,
        _button: null,
        _menu: null,
        store: false,
        grid: false,
        popupStructure: null,
        resourceKind: '',
        select: null,
        where: '',
        //popupCaption: '',
        widgetTemplate: new Simplate([
            '<span>',
                '<button data-dojo-type="dijit.form.ComboButton" data-dojo-attach-point="_button" data-dojo-attach-event="onClick:_click" >',
                    '<div data-dojo-type="dijit.Menu" data-dojo-attach-point="_menu">',
                    '</div>', 
                '</button>',
            '</span>'
        ]),
        constructor: function() {
            this.select = [];
            this.popupStructure = [];
            this.inherited(arguments);
        },
        _click: function () {
            if (!this.linkPage) {
                this._findlinkPage();
            }
            var url = this.linkPage + "?entityid=" + this.entityId || '';
            if (this.linkTabName) {
                url = url + "&activetab=" + this.linkTabName;
            }
            document.location = url;
        },
        _setValueAttr: function (value) {
            this.value = value;
            this._button.set('label', value);
        },
        startup: function () {
            this.inherited(arguments);
            if (!this.store) {
                if (this.select.length === 0) {
                    this.select.push('id');
                    for (var i = 0; i < this.popupStructure.length; i++) {
                        this.select.push(this.popupStructure[i]['field']);
                    }
                }
                this.store = new baseSDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('dynamic'),
                    resourceKind: this.resourceKind,
                    select: this.select // ['id', 'Name', 'WorkPhone', 'Email']
                });
            }

            if (!this.grid) {
                this.grid = new gridMenuItem({
                    gridOptions: {
                        store: this.store,
                        rowsPerPage: 40,
                        structure: this.popupStructure,
                        loadingMessage: this.loadingText, // 'Loading...',
                        noDataMessage: this.noDataText, // 'No records returned',
                        selectionMode: 'single',
                        query: this.where.replace(/~magicquote~/g, '\''), // 'Account.id eq \'' + this.entityId + '\'',
                        height: '250px',
                        width: '300px'
                    }
                });
                this._menu.addChild(this.grid);
                this._menu.set('style', { width: '350px' });
                this.grid.startup();
            }
        },
        _findlinkPage: function () {
            if (!this.linkPage) {
                var url = document.location.href;
                if (url.indexOf("?") > -1) {
                    this.linkPage = url.substring(0, url.indexOf("?"));
                }
            }
        },
        destroy: function () {
            this.inherited(arguments);
            if (this.grid) {
                this.grid.destroy();
            }
        }
    });

    Sage.UI.Controls.SummaryAggregate.markupFactory = function (props, node, ctor) {
        var widthFromAttr = function (n) {
            var w = d.attr(n, "width") || "auto";
            if ((w != "auto") && (w.slice(-2) != "em") && (w.slice(-1) != "%")) {
                w = parseInt(w, 10) + "px";
            }
            return w;
        };
        if (!props.popupStructure) {
            var d = dojo;
            var structure = [];

            var multiCurrency = isMultiCurrencyEnabled();
            d.query('> span', node).forEach(function (span, span_idx) {
                var cell = {
                    name: d.trim(d.attr(span, 'name') || span.innerHTML),
                    type: d.attr(span, 'cellType') || false,
                    field: d.trim(d.attr(span, 'field') || ''),
                    id: d.trim(d.attr(span, 'id') || ''),
                    idField: d.trim(d.attr(span, 'idField') || ''),
                    queryParams: d.trim(d.attr(span, 'queryParams') || ''),
                    pageName: d.trim(d.attr(span, 'pageName') || ''),
                    image: d.trim(d.attr(span, 'icon') || ''),
                    multiCurrency: multiCurrency,
                    exchangeRateType: d.trim(d.attr(span, 'exchangeRateType') || '')
                };
                if (d.hasAttr(span, 'width')) {
                    cell['width'] = widthFromAttr(span);
                }
                cell.type = cell.type ? dojo.getObject(cell.type) : dojox.grid.cells.Cell;
                if (cell.type && cell.type.markupFactory) {
                    cell.type.markupFactory(span, cell);
                }

                if (cell.name === '&nbsp;' || cell.name === '') {
                    cell.name = cell.field;
                }

                structure.push(cell);
            });
            props.popupStructure = structure;
        }

        return new ctor(props, node);
    };
    return widget;
});

},
'Sage/QuickForms/Design/Editors/nls/TextBoxBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/TextBoxBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            linesText: "Lines:",
            linesTooltipText: "Number of lines of text displayed.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/nls/QuickCompleteEditor':function(){
﻿define("Sage/MainView/ActivityMgr/nls/QuickCompleteEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            lblResultText: 'Result:',
            lblNoteText: 'Note (append to all items):',
            btnCompleteIndividuallyText: 'Individually',
            btnAsScheduledText: 'As Scheduled',
            btnCompleteNowText: 'Now',
            btnCancelText: 'Cancel',
            btnCloseText: 'Close',
            btnHelpText: 'Help',
            resultCompletedText: 'Complete',
            titleText:'Quick Complete'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Filters/CheckBoxFilter':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/CheckBoxFilter", [
       'dijit/_Widget',
       'dijit/_Contained',
       'dojo/NodeList-traverse',
       'Sage/_Templated',
       'Sage/Services/_ServiceMixin',
       'Sage/_ActionMixin',
       'dojo/string',
       'dojo/on',
       'dojo/_base/lang',
       'dojo/dom-construct',
       './EditFilterItems',
       'dojo/_base/array',
       'dojo/query',
       'dojo/dom-attr',
       'dojo/i18n!./nls/CheckBoxFilter',
       'Sage/Utility',
       'Sage/Utility/Filters',
       'dojo/json',
       'dijit/registry',
       'dojo/_base/declare'
],
function (
        _Widget,
        _Contained,
        NodeList,
        _Templated,
        _ServiceMixin,
        _ActionMixin,
        dString,
        on,
        lang,
        domConstruct,
        EditFilterItems,
        array,
        query,
        domAttr,
        nls,
        Utility,
        FiltersUtility,
        json,
        registry,
        declare) {
    var widget = declare('Sage.UI.Filters.CheckBoxFilter', [_Widget, _Contained, _ServiceMixin, _ActionMixin, _Templated], {
        attributeMap: {
            'content': { node: 'listNode', type: 'innerHTML' }
        },
        serviceMap: {
            'groupContextService': 'ClientGroupContext',
            'systemDataService': { type: 'sdata', name: 'system' }
        },
        widgetsInTemplate: false,
        widgetTemplate: new Simplate([
            '<div class="filter-type-checkbox filter-collapsed">',
                '<h3 data-action="toggleExpand" data-dojo-attach-point="filterNameNode">{%: $.filter.displayName || $.filter.filterName %}',
                '</h3>',
                '<ul class="filter-loading-indicator"><li><span>{%: $.loadingText %}</span></li></ul>',
                '<a href="#" class="filter-clear" data-dojo-attach-point="clearLinkNode">{%: $.clearText %}</a>',
                '<span class="filter-sep" data-dojo-attach-point="linkSep"> | </span>',
                '<a href="#" class="filter-edit-items" data-dojo-attach-point="moreLinkNode">{%: $.moreText %}</a>',
                '<ul class="filter-list" data-dojo-attach-point="listNode"></ul>',
            '</div>'
        ]),
        itemTemplate: new Simplate([
            '<li data-action="toggleSelect" class="{%= $.selected ? "filter-selected" : "" %}" data-name="{%= $.name %}" data-selected="{%= !!$.selected %}">',
            '<div>',
            '<span class="p-selection">&nbsp;</span>',
            '<span class="p-label">{%: $$._formatLabelText($.$descriptor, $.name) %}</span>',
            '{% if ($.value > -1) { %}',
            '&nbsp;<span class="p-spacer">(</span>',
            '<span class="p-count">{%: $.value %}</span>',
            '<span class="p-spacer"> {%: $.ofText %} </span>',
            '<span class="p-total">{%: $.value %}</span>',
            '<span class="p-spacer">)</span>',
            '{% } %}',
            '</div>',
            '</li>'
        ]),
        _activeFilterCount: 0,
        _loaded: false,
        _selected: null,
        _ranges: null,
        _filterGroup: null,
        _filterSubscriptions: null,
        appliedValues: null,
        parent: null,
        _originalActiveFilter: '',

        // i18n
        loadingText: 'Loading...',
        moreText: 'Add/Remove Items',
        clearText: 'Clear',
        emptyText: '(empty)',
        nullText: '(null)',
        ofText: 'of',
        // end i18n

        nullName: 'SLX_NULL',
        emptyName: 'SLX_EMPTY',

        filterGroup: 'default',
        filter: null,
        store: null,
        editFilterItems: null,
        editFilterItemsHandle: null,
        output: null,
        entries: [],
        expanded: false,
        FILTER_UPDATE_DELAY: 1000,
        lazyUpdateCounts: null,

        // Paging
        count: 1000,
        loading: true,
        groupId: '',
        constructor: function () {
            this.inherited(arguments);
            this.output = [];
            this.entries = [];
            lang.mixin(this, nls);
        },
        postMixInProperties: function () {
            this.inherited(arguments);

            this._selected = {};

            var rangeFilter = this._isRangeFilter();
            if (rangeFilter) {
                this.store.request.setQueryArg('orderby', '');
                this.compileRanges(rangeFilter.ranges);
            }

            if (this.expanded) {
                this.expanded = false; // toggleExpand will flip this
                setTimeout(lang.hitch(this, this._toggleExpand), 500);
            } else if (this.appliedValues) {
                setTimeout(lang.hitch(this, this._loadItems), 500);
            }

            if (this.store && this.store.request && this.store.request.getQueryArg) {
                this._originalActiveFilter = this.store.request.getQueryArg('_activeFilter');
            }
        },
        postCreate: function () {
            this.inherited(arguments);

            var hasFormatter = false;
            if (this.configurationProvider.getFilterFormatter) {
                var formatter = this.configurationProvider.getFilterFormatter(this.filter);
                if (formatter) {
                    hasFormatter = true;
                }
            }

            if (!this._isDistinctFilter() || hasFormatter) {
                domConstruct.destroy(this.moreLinkNode);
                domConstruct.destroy(this.linkSep);
            } else {
                this.editFilterItemsHandle = on(this.moreLinkNode, 'click', lang.hitch(this, this._moreLinkClicked));
            }

            on(this.clearLinkNode, 'click', lang.hitch(this, this._clearLinkClicked));

            var id = this.filter.$key + '_editFilterItems',
                editor = registry.byId(id);
            this.editFilterItems = editor || new EditFilterItems({
                id: id,
                store: this.store,
                filter: this.filter,
                filterPanel: this.parent,
                parent: this
            });
        },
        _clearLinkClicked: function () {
            // De-select selected filters.
            var q = query('li.filter-selected', this.listNode),
                evt;
            array.forEach(q, function (node) {
                if (node.click) {
                    node.click();
                } else {
                    evt = document.createEvent('MouseEvents');
                    evt.initMouseEvent('click', true, true, window,
                        0, 0, 0, 0, 0, false, false, false, false, 0, null);
                    node.dispatchEvent(evt);
                }
            });
        },
        _moreLinkClicked: function (e) {

            if (this._originalActiveFilter) {
                this.editFilterItems.baseFilter = this._originalActiveFilter;
            }

            this.editFilterItems.showDialog();
            e.cancelBubble = true;
        },
        uninitialize: function () {
            this.inherited(arguments);

            if (this.editFilterItems) {
                this.editFilterItems.destroy(false);

            }

            if (this.editFilterItemsHandle) {
                this.editFilterItemsHandle.remove();
            }
        },
        _setFilterGroupAttr: function (value) {
            if (this._filterSubscriptions) {
                array.forEach(this._filterSubscriptions, function (subscription) {
                    this.unsubscribe(subscription);
                }, this);
            }

            this._filterGroup = value;
            this._filterSubscriptions = []; // we do not listen to reload, as reload will destroy this widget
            this._filterSubscriptions.push(
                this.subscribe(dString.substitute("/ui/filters/${0}/change", [this._filterGroup]), this._onChange),
                this.subscribe(dString.substitute("/ui/filters/${0}/clear", [this._filterGroup]), this._onClear),
                this.subscribe(dString.substitute("/ui/filters/${0}/refresh", [this._filterGroup]), lang.hitch(this, this._onRefresh)));
        },
        _onRefresh: function (applied, definitionSet, filterManager) {
            this.appliedValues = applied;
            this.updateCounts();
        },
        _updateActiveFilters: function () {
            var filterManager = this._getFilterManager(),
                queryParts = [],
                q = false;

            if (filterManager) {
                q = filterManager.createQuery();
            }

            if (!this.expanded) {
                return;
            }

            if (q === false) {
                q = '';
            } else {
                queryParts.push(q);
            }

            if (this._originalActiveFilter) {
                queryParts.push(this._originalActiveFilter);
            }

            if (queryParts.length > 1) {
                q = queryParts.join(' AND ');
            } else {
                q = queryParts.join('');
            }

            this.store.request.setQueryArg('_activeFilter', q);
        },
        refresh: function () {
            // Force a refresh if we have already loaded
            if (this._loaded) {
                array.forEach(query('*', this.listNode), function (item) {
                    domConstruct.destroy(item);
                });

                this.requestData();
            }
        },
        _onChange: function (definition, name, value, source) {
            // todo: save value if we are not expanded
            name = this._transformFilterItemName(name);
            if (source !== this && definition.$key === this.filter.$key) {
                query(dString.substitute('> [data-name="${0}"]', [name]), this.listNode).forEach(function (el) {
                    dojo.attr(el, 'data-selected', (!!value).toString());
                    dojo.toggleClass(el, 'filter-selected', !!value);
                });
            }
        },
        _onClear: function (definition, source) {
            if (source !== this && (!definition || definition.$key === this.filter.$key)) {
                dojo.query('> [data-selected="true"]', this.listNode).forEach(function (el) {
                    dojo.attr(el, 'data-selected', 'false');
                    dojo.toggleClass(el, 'filter-selected', false);
                });
            }
        },
        _getFilterGroupAttr: function () {
            return this._filterGroup;
        },
        _formatLabelText: function (value, name) {
            if (name === this.nullName) {
                return this.nullText;
            } else if (name === this.emptyName) {
                return this.emptyText;
            }

            if (this.configurationProvider) {
                if (this.configurationProvider.getFilterFormatter) {
                    var formatter = this.configurationProvider.getFilterFormatter(this.filter);
                    if (formatter) {
                        return formatter(value);
                    }
                }
            }

            return value;
        },
        _isDistinctFilter: function () {
            return this.filter &&
                   this.filter.details &&
                   this.filter.details.distinctFilter;
        },
        _isRangeFilter: function () {
            return this.filter &&
                   this.filter.details &&
                   this.filter.details.rangeFilter;
        },
        compileRanges: function (ranges) {
            var i = 0;
            this._ranges = {};
            for (i = 0; i < ranges.length; i++) {
                this._ranges[this._transformFilterItemName(ranges[i].rangeName)] = ranges[i];
            }
        },
        _saveExpandState: function () {
            var data = this.parent._configuration._hiddenFilters || {},
                key = this.parent._configuration._hiddenFiltersKey,
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                prop = context.CurrentEntity + '_' + this.filter.filterName;

            // Create it if necessary
            if (!data[prop]) {
                data[prop] = {
                    expanded: false,
                    hidden: false
                };
            }

            data[prop].expanded = this.expanded;
            FiltersUtility.setHiddenFilters(key, json.stringify(data));
        },
        toggleExpand: function (params, evt, el) {
            // toggleExpand is called when the user clicks the filter to expand it
            this._toggleExpand();
            this._saveExpandState();
        },
        _toggleExpand: function () {
            // toggle expanded state without saving state
            this.expanded = !this.expanded;

            if (this.domNode) {
                dojo.toggleClass(this.domNode, 'filter-collapsed');
            }

            this._loadItems();
        },
        _loadItems: function () {
            if (!this._loaded) {
                this._loaded = true;
                this.requestData();
            } else {
                this.updateCounts();
            }
        },
        toggleSelect: function (params, evt, el) {
            var selected = /^true$/i.test(params.selected),
                name = params.name,
                value = !selected && (this._isRangeFilter() ? this._ranges[name] : name);
            this.onSelectionChange(this.filter, name, value, this);
            dojo.attr(el, 'data-selected', (!selected).toString());
            dojo.toggleClass(el, 'filter-selected', !selected);
        },
        onSelectionChange: function (definition, name, value, source) {
            dojo.publish(dString.substitute("/ui/filters/${0}/change", [this._filterGroup]), [definition, name, value, source]);
        },
        updateCounts: function () {
            if (!this.lazyUpdateCounts) {
                this.lazyUpdateCounts = Utility.debounce(lang.hitch(this, function () {
                    if (this.expanded) {
                        query('li[data-name] div span.p-count', this.listNode).forEach(function (node) {
                            node.innerHTML = '0';
                        });

                        this._updateActiveFilters();
                        this._doUpdateCounts();
                    }
                }), this.FILTER_UPDATE_DELAY);
            }

            this.lazyUpdateCounts();
        },
        _doUpdateCounts: function () {
            this.store.fetch({
                onComplete: lang.hitch(this, this._updateCountsInPlace),
                count: this.count
            });
        },
        requestData: function () {
            if (this.loading) {
                if (this.domNode) {
                    dojo.addClass(this.domNode, 'filter-loading');
                    this.set('content', '');
                }
            }

            this.store.fetch({
                onError: lang.hitch(this, this._onFetchError),
                onComplete: lang.hitch(this, this._onFetchComplete),
                count: this.count
            });
        },
        _onFetchComplete: function (items, requestObject) {
            this._processFetchResult(items, requestObject);
        },
        _onFetchError: function (error, requestObject) {
            if (this.domNode) {
                dojo.removeClass(this.domNode, 'filter-loading');
            }
        },
        isFilterItemHidden: function (filterItem) {
            var data = this.parent._configuration._hiddenFilters || {},
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                prop = context.CurrentEntity + '_' + this.filter.filterName,
                hidden = false;

            if (data[prop]) {
                hidden = array.some(data[prop].items, function (item) {
                    return item === filterItem;
                });
            }

            return hidden;
        },
        _updateCountsInPlace: function (items, requestObject) {
            var i = 0,
                entry = null,
                len = items.length;

            for (i = 0; i < len; i++) {
                entry = items[i];
                entry.name = this._transformFilterItemName(entry.name);
                query("li[data-name=\"" + entry.name + "\"]", this.listNode).forEach(function (node) {
                    query("div span.p-count", node).forEach(function (span) {
                        span.innerHTML = entry.value;
                    });
                });
            }

            this._finishedLoading();
        },
        _processFetchResult: function (items, requestObject) {
            var i = 0,
                entry = null,
                hidden = false,
                len = items.length,
                selected = false;

            for (i = 0; i < len; i++) {
                entry = items[i];
                entry.name = this._transformFilterItemName(entry.name);
                hidden = this.isFilterItemHidden(entry.name);
                if (hidden === false || this._isRangeFilter()) {
                    selected = this.appliedValues && this.appliedValues[this.filter.$key] && !!this.appliedValues[this.filter.$key][entry.name];
                    entry.selected = selected || (this.appliedValues && !!this.appliedValues[entry.name]);
                    entry.ofText = this.ofText;

                    this.output.push(this.itemTemplate.apply(entry, this));
                    this.entries.push(entry);
                }
            }

            this._fixMissingItems();
            if (this.domNode) {
                this.set('content', this.output.join(''));
            }
            this._clearOutputEntries();
            this.updateCounts();
        },
        _transformFilterItemName: function (name) {
            var results = name;
            if (name === null) {
                results = this.nullName;
            } else if (name === '') {
                results = this.emptyName;
            }

            return results.trim();
        },
        _fixMissingItems: function () {
            /*
            We could end up in a situation where we have applied a filter,
            and then edited the item. This would cause the distinct checkboxes
            to not show up, thus allowing the user to never clear it. Find these
            and add them to the filter items list so the user can uncheck it.
            */
            var tempEntry,
                prop,
                val,
                exists = true;

            for (prop in this.appliedValues) {
                if (this.appliedValues.hasOwnProperty(prop)) {
                    val = this.appliedValues[prop];
                    exists = array.some(this.entries, function (entry) {
                        return entry.name === prop;
                    });

                    if (!exists) {
                        tempEntry = {
                            name: '',
                            $descriptor: '',
                            selected: true,
                            value: 0
                        };

                        tempEntry.name = prop;
                        tempEntry.$descriptor = val;
                        tempEntry.ofText = this.ofText;

                        if (typeof tempEntry.$descriptor === 'string') {
                            this.output.push(this.itemTemplate.apply(tempEntry, this));
                            this.entries.push(tempEntry);
                        }
                    }
                }
            }
        },
        _clearOutputEntries: function () {
            this.output = [];
            this.entries = [];
        },
        _finishedLoading: function () {
            this.loading = false;
            this.store.request.setQueryArg('_activeFilter', this._originalActiveFilter || '');
            if (this.domNode) {
                dojo.removeClass(this.domNode, 'filter-loading');
            }
        },
        _getFilterManager: function () {
            var filterManager = this.parent.filterManager;
            if (!filterManager) {
                if (this.parent._configuration.getFilterManager) {
                    filterManager = this.parent._configuration.getFilterManager();
                }
            }
            //Add to make sure the check box filter is part of the current view.            
            var service = Sage.Services.getService("ClientGroupContext");
            var context = service && service.getContext();
            if (this.groupId != context.CurrentGroupID) {
                filterManager = null;
            }
            return filterManager;
        }
    });

    return widget;
});

},
'Sage/Utility/Groups':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/Groups", [
        'Sage/Groups/GroupLookup'
],
function (GroupLookup) {
    Sage.namespace('Utility.Groups');
    dojo.mixin(Sage.Utility.Groups, {
        showMainLookupFor: function (family, page) {
            var lookupManagerService = Sage.Services.getService('GroupLookupManager');
            if (lookupManagerService) {
                if (typeof family === "undefined") {
                    lookupManagerService.showLookup();
                } else {
                    lookupManagerService.showLookup({ family: family, returnTo: page || false });
                }
            }
        }
    });
    
    return Sage.Utility.Groups;
});
},
'Sage/UI/ToolBarLabel':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/ToolBarLabel", [
    'dijit/_Widget',
    'dijit/_TemplatedMixin',
    'dojo/_base/declare'
],
function (_Widget, _TemplatedMixin, declare) {
    var toolBarLabel = declare('Sage.UI.ToolBarLabel', [_Widget, _TemplatedMixin], {
        label: 'label',
        //Default region
        region: 'leading',
        templateString: '<span class="dijitToolbarLabel"><span class="dijitReset dijitInline " dojoAttachPoint="containerNode"></span></span>',

        attributeMap: {
            label: { node: "containerNode", type: "innerHTML" }
        },
        _append: function (val) {
            this.containerNode.innerHTML += val;
        },
        _setLabelAttr: function (label) {
            this.containerNode.innerHTML = this.label = label;
        }
    });
    return toolBarLabel;
});
},
'Sage/UI/Controls/DateTimePicker':function(){
require({cache:{
'url:Sage/UI/Controls/templates/DateTimePicker.html':"<div class=\"dateTimePicker\">\r\n        <div dojoAttachPoint=\"tooltipContainer\">\r\n        \r\n            <div dojoAttachPoint=\"dateContainer\" class=\"dateTimePicker-dateContainer\">\r\n               \r\n                    <input id=\"${id}-Calendar\" data-dojo-type=\"Sage.UI.Calendar\"\r\n                        style=\"width:inherit;\"\r\n                        textAlign=\"${textAlign}\"\r\n                           type=\"text\" \r\n                           tabindex=\"0\"\r\n                           displayMode=\"popup\"\r\n                           dojoAttachPoint=\"dateNode\"\r\n                           dojoAttachEvent=\"onValueSelected:_onValueSelected,onBlur:_onCalendarBlur\">\r\n               \r\n            </div>\r\n            \r\n            <div dojoAttachPoint=\"timeZoneContainer\" class=\"dateTimePicker-timeZoneContainer\">\r\n               \r\n                    <label for=\"${id}-TimeStart\">${timeStartText}</label><br />\r\n                    <input id=\"${id}-TimeTextBox\" data-dojo-type=\"dijit.form.TimeTextBox\" \r\n                           style=\"width:16em;\"\r\n                           textAlign=\"${textAlign}\"\r\n                           tabindex=\"0\"\r\n                           type=\"text\" dojoAttachPoint=\"timeNode\">\r\n                    <br /><br/>\r\n                    <label for=\"${id}-TzCalculator\">${timeZoneCalculatorText}</label>\r\n                    <div id=\"timeZoneCalucaltor\" class=\"dateTimePicker-timeZoneCalculator\">\r\n                       <p style=\"width:auto;margin-top:auto\">\r\n                            <label for=\"${id}-TzSelectSource\">${timeZoneSourceText}</label><br />\r\n                            <select id=\"${id}-TzSelectSource\" data-dojo-type=\"dijit.form.ComboBox\"  dojoAttachPoint=\"timeZoneSourceComboNode\" style=\"width:15em;\">\r\n                            </select>\r\n                            <br />\r\n                            <label for=\"${id}-TzSelectDest\">${timeZoneDestText}</label><br />\r\n                           <select id=\"${id}-TzSelectDest\" data-dojo-type=\"dijit.form.ComboBox\"  dojoAttachPoint=\"timeZoneDestComboNode\" style=\"width:15em;\">\r\n                           </select>\r\n                           <br/>\r\n                            <span id=\"${id}-ConvertResults\" dojoAttachPoint=\"convertResultsNode\" style=\"float:left;padding-top:5px;\">\r\n                        </span>\r\n                        </p><br/>\r\n                        <button id=\"${id}-Convert\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"timeZoneConvertButtonNode\" type=\"button\" style=\"float:right\" dojoAttachEvent=\"onClick:_convertClicked\">\r\n                            ${convertText}\r\n                        </button>\r\n                       \r\n                        \r\n                    </div>\r\n               \r\n                <div class=\"button-bar alignright\" style=\"clear: both\">\r\n                    <button id=\"${id}-OKButton\" tabindex=\"0\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"OKButtonNode\" type=\"button\" dojoAttachEvent=\"onClick:_okClicked\">\r\n                        ${okText}\r\n                    </button>\r\n                    <button id=\"${id}-CancelButton\" tabindex=\"0\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"CancelButtonNode\" type=\"button\" dojoAttachEvent=\"onClick:_cancelClicked\">\r\n                        ${cancelText}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    \r\n</div>\r\n\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, sessionStorage */
define("Sage/UI/Controls/DateTimePicker", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dojo/fx',
       'dojo/date/locale',
       'dijit/_Widget',
       'dijit/form/TimeTextBox',
       'Sage/UI/Calendar',
       'Sage/Utility',
       'dijit/TooltipDialog',
       'dijit/_base/popup',
       'dijit/form/ComboBox',
       'dijit/focus',
       'dojo/data/ItemFileReadStore',
       'dojo/i18n!./nls/DateTimePicker',
       'dojo/json',
       'dojo/_base/lang',
       'dojo/_base/array',
       'dojo/_base/config',
       'dojo/_base/declare',
       'dojo/dom-construct',
       'Sage/Utility/_LocalStorageMixin',
       'dojo/text!./templates/DateTimePicker.html'
],
function (_TemplatedMixin,
    _WidgetsInTemplateMixin,
    fx,
    locale,
    _Widget,
    timeTextBox,
    calendar,
    utility,
    tooltipDialog,
    popup,
    comboBox,
    focusUtil,
    itemFileReadStore,
    nlsStrings,
    json,
    lang,
    array,
    dojoConfig,
    declare,
    domConstruct,
    _localStorageMixin,
    template) {

    var _menu, datePicker, tzDataLoader;

    tzDataLoader = declare('Sage.UI.Controls.DateTimePicker.TimeZoneDataLoader', _localStorageMixin, {
        _requests: [],
        _requestingData: false,
        _tzData: false,
        _storageNamespace: 'DateTimePickerTZ',
        constructor: function () {
            this._requests = [];
            this._requestingData = false;
            this._tzData = false;
        },
        requestTimeZones: function (callback, scope) {
            if (!this._tzData) {
                var data = this.getFromLocalStorage(this._storageNamespace, this._storageNamespace);
                if (data) {
                    this._tzData = json.parse(data);
                } else {
                    this._requests.push({
                        fn: callback,
                        scope: scope || this
                    });
                    if (!this._requestingData) {
                        dojo.xhrGet({
                            url: 'slxdata.ashx/slx/crm/-/timezones/p',
                            handleAs: 'json',
                            load: lang.hitch(this, this._receiveData),
                            error: function (err) {
                            }
                        });
                        this._requestingData = true;
                    }
                    return;
                }
            }
            callback.call(scope || this, this._tzData);
        },
        _receiveData: function (data) {
            this.saveToLocalStorage(this._storageNamespace, json.stringify(data), this._storageNamespace);
            this._tzData = data;
            var len = this._requests.length;
            for (var i = 0; i < len; i++) {
                var clbk = this._requests.pop();
                clbk.fn.call(clbk.scope, data);
            }
        }
    });

    _menu = declare('Sage.UI.Controls._DateTimePickerMenu', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        // Display properties
        templateString: template,
        widgetsInTemplate: true,
        textAlign: 'left',
        // localized strings
        okText: '',
        cancelText: '',
        convertText: '',
        calculatorText: '',
        timeZoneSourceText: '',
        timeZoneDestText: '',
        // end localize
        id: 'dateTimePickerMenu',
        dir: '',
        _messages: null,
        _started: false,
        _timezonesLoaded: false,
        _timezonesVisible: false,
        displayTime: false,

        constructor: function (options) {
            lang.mixin(this, nlsStrings);
            this.inherited(arguments);
        },
        startup: function () {
            this._started = true;
            this._messages = [];
            this.focus();
            this.inherited(arguments);
        },
        uninitialize: function () {
            this.dateNode.destroy(false);
            this.timeZoneSourceComboNode.destroy(false);
            this.timeZoneDestComboNode.destroy(false);
            this.timeZoneConvertButtonNode.destroy(false);
            this.timeNode.destroy(false);
            this.OKButtonNode.destroy(false);
            this.CancelButtonNode.destroy(false);

            this.inherited(arguments);
        },
        _getUTCDate: function (date) {
            return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
        },
        _okClicked: function (options) {
            this.onExecute();
            this.onOKClicked();
        },
        onOKClicked: function () {
        },
        _onCalendarBlur: function () {
            this.calendarBlur();
        },
        calendarBlur: function () {

        },
        _onValueSelected: function () {
            if (!this.displayTime) {
                this.calendarDateSelected();
                this.onExecute();
            }
        },
        calendarDateSelected: function () {
        },
        _cancelClicked: function () {
            this.onCancel();
            this.onCancelClicked();
        },
        onFocusOut: function () {
            this.onExecute();
        },
        onCancelClicked: function () {
        },
        onCancel: function () {
        },
        onExecute: function () {
        },
        _hideTimeNode: function () {
            //  this._hideNode(this.timeContainer);
            this._hideNode(this.timeZoneContainer);
        },
        _hideDateNode: function () {
            this._hideNode(this.dateContainer);
        },
        _showTimeNode: function () {
            //this._showNode(this.timeContainer);
            this._showNode(this.timeZoneContainer);
        },
        _showDateNode: function () {
            this._showNode(this.dateContainer);
        },
        _hideNode: function (id) {
            dojo.style(id, 'visibility', 'hidden');
            dojo.style(id, 'display', 'none');
        },
        _showNode: function (id) {
            dojo.style(id, 'visibility', 'visible');
            dojo.style(id, 'display', 'block');
        },
        _convertClicked: function () {
            if (!this._timezonesLoaded) {
                return;
            }

            var self = this,
                selectedDate = this.dateNode.get('value'),
                selectedTime = this.timeNode.get('value'),
                selectedSource = this.timeZoneSourceComboNode.get('value'),
                selectedDest = this.timeZoneDestComboNode.get('value'),
                dateString = '',
                returnedDate = null,
                url = 'slxdata.ashx/slx/crm/-/timezones/convertTimeFormatted?timezoneNameSource=${0}&timezoneNameDest=${1}&date=${2}&getFormatted=${3}';

            // Combine date/time into selectedDate
            selectedDate.setHours(selectedTime.getHours());
            selectedDate.setMinutes(selectedTime.getMinutes());
            dateString = selectedDate.toLocaleString();

            dojo.xhrGet({
                url: dojo.string.substitute(url, [escape(selectedSource), escape(selectedDest), dateString, "false"]),
                handleAs: 'json',
                load: function (convertedDateString) {
                    self.convertResultsNode.innerHTML = convertedDateString;  
                },
                error: function (err) {
                    console.error(err);
                }
            });

        },
        processTimeZones: function (data) {
            var items = [];
            var initialValue = utility.getClientContextByKey('userTimeZone');
            array.forEach(data, function (item) {
                if (!item.Displayname || !item.Keyname) {
                    return;
                }
                items.push({
                    id: item.Keyname,
                    text: item.Displayname,
                    offsetHours: item.OffsetHours,
                    offsetMinutes: item.OffsetMinutes
                });
            });

            this.storeData = {
                label: 'text',
                identifier: 'id',
                items: items
            };

            this.timeZoneStore = new itemFileReadStore({
                data: this.storeData
            });

            var self = this;
            this.timeZoneSourceComboNode.set('store', this.timeZoneStore);
            this.timeZoneSourceComboNode.set('searchAttr', 'text');
            //Preselect the current time zone on source combo
            this.timeZoneSourceComboNode.store.fetch(
                {
                    query: { text: initialValue },
                    onComplete: function (items) {
                        self.timeZoneSourceComboNode.setAttribute('item', items[0]);
                    }
                });


            this.timeZoneDestComboNode.set('store', this.timeZoneStore);
            this.timeZoneDestComboNode.set('searchAttr', 'text');
        },
        loadTimeZones: function () {
            if (this._timezonesLoaded) {
                return;
            }
            this._timezonesLoaded = true;
            var loader = new tzDataLoader();
            loader.requestTimeZones(this.processTimeZones, this);
        }
    });

    datePicker = declare('Sage.UI.Controls.DateTimePicker', [comboBox], {
        id: 'dateTimePicker',

        buttonToolTip: 'Calendar',
        toolTip: '',

        // TODO: Add get/set attr
        displayDate: true,
        displayTime: true,

        initialDate: null,
        initialTime: null,
        initialTextValue: '',

        dateFormat: '', // Used for ASP.NET control

        timeZoneStore: null,
        storeData: null,

        dropDown: false,
        _opened: false,

        readOnly: false,
        enabled: true,
        required: false,

        renderAsHyperlink: false,
        shouldPublishMarkDirty: true,
        handles: null,
        store: null,
        dateOnlyHanlde: null,
        documentClickHandle: null,
        dropdownIconClicked: false,
        popupElements: null,
        minDate: null,
        constructor: function (options) {
            //console.log("datetimepicker :: construct"); 
            this.buttonToolTip = nlsStrings.buttonToolTip;

            this.handles = [];
            this.documentClickHandle = [];
            this.dateOnlyHanlde = [];
            this.store = {}; // required by ComboBox - do not remove or IE8 error will occur.

            this.inherited(arguments);
        },
        _onChanged: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
        },
        uninitialize: function () {
            //console.log('DateTimePicker :: uninitialize');
            this.inherited(arguments);
        },
        startup: function () {
            //console.log("datetimepicker :: startup"); 
            this.inherited(arguments);
            this.dropDown = new _menu({ id: this.id + '_Popout', displayTime: this.displayTime });
            this.handles.push(this.connect(this, 'onChange', this._onChanged));
            this.handles.push(dojo.connect(this.dropDown, 'onOKClicked', this, '_displayCurrentValue'));
            this.handles.push(dojo.connect(this.focusNode, 'onkeyup', this, '_onFocusKeyUp', true));
            this.handles.push(dojo.connect(this.focusNode, 'onblur', this, '_onFocusBlur', true));

            this.focusNode.value = this.initialTextValue;

            var date = utility.Convert.toDateFromString(this.initialDate) || new Date();
            var time = utility.Convert.toDateFromString(this.initialTime) || new Date();

            this.dropDown.dateNode.set('value', date.toDateString());
            this.dropDown.timeNode.set('value', time);

            if (this.displayDate) {
                this.dropDown._showDateNode();
            } else {
                this.dropDown._hideDateNode();
            }

            if (this.displayTime) {
                this.dropDown._showTimeNode();
            } else {
                //Attach event to calendar date select event and assign the date in combobox
                this.dateOnlyHanlde.push(dojo.connect(this.dropDown, 'calendarDateSelected', this, '_displayCurrentValue'));
                this.dropDown._hideTimeNode();
            }

            var nodesList = [];
            //Recursive function to get all child nodes of passed in node
            var getChildElements = function (node) {
                if (node && node.children && node.children.length > 0) {
                    for (var i = 0; i < node.children.length; i++) {
                        if (node.children[i])
                            nodesList.push(node.children[i]);
                        getChildElements(node.children[i]);
                    }
                }
                return nodesList;
            };
            //Get the list of all child elements of popup window
            this.popupElements = getChildElements(this.dropDown.domNode);
            this.popupElements.push(this.dropDown.domNode);
            this.popupElements.push(this._buttonNode.parentNode);

            //handle closing the popup
            this.documentClickHandle.push(dojo.connect(document, 'onclick', this, '_documentOnClick'));

            this._setupRenderAsHyperlink();
            this._setupDropDownIcon();
        },
        _documentOnClick: function (evt) {
            // summary:
            //		Handles popup window close on clicking outside popup window
            // description:
            // 		Listen to document click event and close popup if clicked out side
            var e = evt || window.event;
            var element = e.target || e.srcElement;

            //If clicked node is in the list child  nodes, return true
            //Else if there is a parent node, check the parent node(recursive)
            //Else return false
            var isPresent = function (popupElements, node) {
                if (dojo.indexOf(popupElements, node) > -1) {
                    return true;
                } else if (node.parentNode) {
                    return isPresent(popupElements, node.parentNode);
                } else {
                    return false;
                }
            };
            //Timepicker elements and Calendar month labels are dynamic, checking by their class name
            if ((element && element.className &&
                (element.className.indexOf('dijitTimePickerItemInner') > -1 ||
                            element.className.indexOf('dijitCalendarMonthLabel') > -1)) ||
                (element && element.id &&
                        (element.id.indexOf("_Popout-TzSelectSource_popup") > -1 ||
                         element.id.indexOf("_Popout-TzSelectDest_popup") > -1))) {
                //If clicked element is on popup window, stop event
                e.cancelBubble = true;
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
                e.preventDefault = true;
            } else {
                //TimeNode popup won't be available during startup
                if (this.dropDown && this.dropDown.timeNode && this.dropDown.timeNode.dropDown) {
                    if (dojo.indexOf(this.popupElements, this.dropDown.timeNode.dropDown.domNode) == -1) {
                        this.popupElements.push(this.dropDown.timeNode.dropDown.domNode);
                    }
                }

                //Check if the clicked node is part of pop up window
                if (!isPresent(this.popupElements, element)) {
                    this.closeDropDown();
                } else {
                    e.cancelBubble = true;
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    e.preventDefault = true;
                }
            }
        },
        _setupDropDownIcon: function () {
            if (this.renderAsHyperlink) {
                return;
            }

            domConstruct.create('div', {
                'class': 'Global_Images icon16x16 icon_Calendar_16x16',
                title: this.buttonToolTip,
                tabIndex: 0
            }, this._buttonNode, 'only');

            dojo.addClass(this._buttonNode, "smCalendarIconTxtBox");

            this.handles.push(this.connect(this._buttonNode, 'ondijitclick', function () {

                if (!this.displayTime) {
                    dojo.style(this.dropDown.domNode, "height", "226px");
                } else {
                    dojo.style(this.dropDown.domNode, "height", "266px");
                }

                if (!this.dropdownIconClicked) {
                    this.openDropDown();
                    this.dropdownIconClicked = true;
                }

            }));
        },
        _displayCurrentValue: function () {
            if (!this._started) {
                return;
            }
            var selectedDate = this.getDateValue(),
                selectedTime = this.getTimeValue(),
                results,
                options = { fullYear: true };

            if (!selectedDate) {
                return;
            }

            selectedDate.setHours(selectedTime.getHours());
            selectedDate.setMinutes(selectedTime.getMinutes());
            selectedDate.setSeconds(selectedTime.getSeconds());

            if (this.displayDate && this.displayTime) {
                options.selector = 'date and time';
            } else if (this.displayDate) {
                options.selector = 'date';
            } else if (this.displayTime) {
                options.selector = 'time';
            }

            results = locale.format(selectedDate, options);

            if (this.renderAsHyperlink) {
                var node = dojo.byId(this.id + '-Link');
                node.innerHTML = results;
            } else {
                this.focusNode.value = results;
            }

            if ((!this.value.getTime) || this.value.getTime() !== selectedDate.getTime()) {
                this.value = selectedDate;
                this.onChange(selectedDate);
            }
        },
        _setupRenderAsHyperlink: function () {
            if (!this.renderAsHyperlink) {
                return;
            }

            // Insert a hyperlink as a replace for the focusNode, make sure it fires open on the dropdown when clicked. Hide other combobox visuals
            // by replacing them.
            dojo.style(this.domNode, 'border', 'none');
            var node = dojo.create('a', { id: this.id + '-Link', innerHTML: this.focusNode.value }, this.domNode, 'only');

            dojo.style(node, 'cursor', 'pointer');
            this.handles.push(dojo.connect(node, 'onclick', this, function () {

                if (!this.displayTime) {
                    dojo.style(this.dropDown.domNode, "height", "226px");
                } else {
                    dojo.style(this.dropDown.domNode, "height", "266px");
                }

                this.openDropDown();
            }));
        },
        loadDropDown: function () {
            // overrides ComboBox
        },
        isLoaded: function () {
            // overrides ComboBox
            return true;
        },
        _setBlurValue: function () {
            // overrides ComboBox
            //console.log('DateTimePicker :: _setBlurValue hit');
        },
        closeDropDown: function () {
            // overrides ComboBox
            popup.close(this.dropDown);
            this._opened = false;
            this.dropdownIconClicked = false;

            //Detach document click event handler when closing window
            dojo.forEach(this.documentClickHandle, function (handle) {
                dojo.disconnect(handle);
            });

        },
        _openResultList: function () {
            // overrides ComboBox
            //console.log('DateTimePicker :: _openResultList hit');
        },
        _showResultList: function () {
            // overrides ComboBox
            //console.log('DateTimePicker :: _showResultList hit');
        },
        _onBlur: function () {
            // TODO: Why is this firing when clicking nodes in the dropdown?
        },
        triggerOnFocusBlur: function (currentLocale) {
            //For unit testing - date input value formatting
            //dojoConfig.locale = currentLocale;
            this._validateInputDate(currentLocale);
        },
        _validateInputDate: function (currentLocale) {
            if (!this._opened && !this.readOnly && this.dropDown && this.focusNode.value !== '') {
                // Combo is not opened, fire okClicked so any connections to it can be notified.

                var text = this.focusNode.value;
                if (text === this.initialTextValue) {
                    return;
                }

                //code = e.charOrCode;
                var parsedDate = null;
                var selectorString = "date";
                if (text.indexOf(":") > 0) {
                    selectorString = "datetime";
                }
                currentLocale = currentLocale || dojoConfig.locale;
                parsedDate = dojo.date.locale.parse(text, { selector: selectorString, locale: currentLocale });
                //console.log("minDate: %o,text: %o,parsedDate : %o,selectorString : %o, locale:%o", this.minDate, text, parsedDate, selectorString, dojoConfig.locale);

                // Only set if we have a valid dropdown and the date is parsed correctly.
                // invalidDate.getDate() will return NaN if invalid.
                if (this.dropDown && parsedDate !== null && isNaN(parsedDate.getDate()) === false) {
                    if (parsedDate.getFullYear() >= (new Date().getFullYear() - 259)) {
                        this.dropDown.dateNode.set('value', parsedDate);
                        this.dropDown.timeNode.set('value', parsedDate);
                    }
                }

                this.dropDown.onOKClicked();
            }
        },
        _onFocusBlur: function () {
            // Focus node onblur event
            //console.log("this._opened :%o,this.MCDropDown :%o,this.focusNode.value:%o", this._opened, this.dropDown, this.focusNode.value);
            this._validateInputDate();

            if (this._opened) {
                focusUtil.focus(dojo.query('.dijitCalendarContainer', this.dropDown.dateContainer)[0]);
            }
        },
        _onFocusKeyUp: function (e) {

        },
        _onKey: function (e) {
            // overrides ComboBox
        },
        openDropDown: function () {
            // overrides ComboBox
            this._opened = true;
            var self = this;
            popup.open({
                popup: this.dropDown,
                around: this.domNode,
                onExecute: function () {
                    self.closeDropDown();
                    focusUtil.focus(self.focusNode);
                },
                onCancel: function () {
                    self.closeDropDown();
                    focusUtil.focus(self.focusNode);
                },
                onClose: function () {
                }
            });
            this.documentClickHandle.push(dojo.connect(document, 'onclick', this, '_documentOnClick'));

            if (this.displayTime) {
                this.dropDown.loadTimeZones();
            }

            focusUtil.focus(dojo.query('.dijitCalendarContainer', this.dropDown.dateContainer)[0]);
            popup._stack[0].handlers[0].remove();
        },
        _getUTCDate: function (date) {
            return this.dropDown._getUTCDate(date);
        },
        getDateValue: function () {
            return this.dropDown.dateNode.get('value');
        },
        getTimeValue: function () {
            var timeVal = this.dropDown.timeNode.get('value') || new Date(Date.now());
            if (timeVal) {
                timeVal.setSeconds(this.dropDown.timeNode['seconds'] || 0);
            }

            return timeVal;
        },
        getMinDate: function () {
            this.minDate = Sage.Utility.Activity.formatDateAdd(new Date(), 'year', -259);
            return this.minDate;
        },
        _getValueAttr: function () {
            var d = this.getDateValue();
            var t = this.getTimeValue();
            d.setHours(t.getHours());
            d.setMinutes(t.getMinutes());
            d.setSeconds(t.getSeconds());
            return d;
        },
        _setValueAttr: function (val) {
            if (val && val.toDateString) {
                if (this.dropDown) {
                    this.dropDown.dateNode.set('value', val);
                    this.dropDown.timeNode.set('value', val);
                    this.dropDown.timeNode['seconds'] = val.getSeconds();
                    this._displayCurrentValue();
                }
                if ((!this.value.getTime) || this.value.getTime() !== val.getTime()) {
                    this.value = val;
                    this.onChange(val);
                }
            }
        },
        _setDisplayDateAttr: function (displayDate) {
            this.displayDate = displayDate;
            this._displayCurrentValue();
            if (this.dropDown) {
                if (this.displayDate) {
                    this.dropDown._showDateNode();
                } else {
                    this.dropDown._hideDateNode();
                }
            }
        },
        _getDisplayDateAttr: function () {
            return this.displayDate;
        },
        _setToolTipAttr: function (toolTip) {
            if (toolTip && toolTip !== '') {
                this.set('title', toolTip);
            }
        },
        _getToolTipAttr: function () {
            return this.toolTip;
        },
        _setDisabledAttr: function (disabled) {
            if (disabled) {
                dojo.style(this._buttonNode, 'visibility', 'hidden');
                dojo.style(this._buttonNode, 'display', 'none');
            } else {
                dojo.style(this._buttonNode, 'visibility', '');
                dojo.style(this._buttonNode, 'display', '');
            }
            this.inherited(arguments);
        },
        _setReadOnlyAttr: function (readOnly) {
            if (readOnly) {
                dojo.style(this._buttonNode, 'visibility', 'hidden');
                dojo.style(this._buttonNode, 'display', 'none');
            }
            this.inherited(arguments);
        },
        _setDisplayTimeAttr: function (displayTime) {
            this.displayTime = displayTime;
            this._displayCurrentValue();
            if (this.dropDown) {
                if (this.displayDate) {
                    this.dropDown._showDateNode();
                } else {
                    this.dropDown._hideDateNode();
                }

                //Detach event which sets the selected date when clicking any date in calendar
                dojo.forEach(this.dateOnlyHanlde, function (handle) {
                    dojo.disconnect(handle);
                });

                if (this.displayTime) {
                    this.dropDown.displayTime = true;
                    this.dropDown._showTimeNode();
                } else {
                    this.dropDown.displayTime = false;
                    //Attach event to onclick of any date in calendar to set the date in combo box 
                    this.dateOnlyHanlde.push(dojo.connect(this.dropDown, 'calendarDateSelected', this, '_displayCurrentValue'));
                    //this.dateOnlyHanlde.push(dojo.connect(this.dropDown, 'calendarBlur', this, '_closeDropDownOnDateOnly'));
                    this.dropDown._hideTimeNode();
                }
            }

        },
        _getDisplayTimeAttr: function () {
            return this.displayTime;
        },
        getValueForASPNET: function () {
            // ASP.NET control puts this value into a hidden input
            // format: "Year,Month,Day,Hours,Min"
            var values = [];
            var date = this.getDateValue();
            values.push(date.getFullYear());
            values.push(date.getMonth() + 1);
            values.push(date.getDate());

            var time = this.getTimeValue();
            values.push(time.getHours());
            values.push(time.getMinutes());

            return values.join(',');
        },
        destroy: function () {
            //console.log("datetimepicker :: destroy");
            dojo.forEach(dijit.findWidgets(this.domNode), function (wid) {
                wid.destroy(false);
            });

            dojo.forEach(this.handles, function (handle) {
                dojo.disconnect(handle);
            });

            this.inherited(arguments);
        },

        // OLD script functions
        fmtDateForASPNET: function () {
            var date = this.getDateValue();
            var time = this.getTimeValue();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hours = time.getHours();
            var minutes = time.getMinutes();

            var result = '';

            if (this.displayDate) {
                var divChar = this.getDivChar();
                var strMon = month;
                var strDat = day;

                if (this.dateFormat.substring(0, 1).toUpperCase() == 'MM') {
                    strMon = (strMon < 10) ? '0' + strMon : strMon;
                }
                if (this.dateFormat.substring(0, 1).toUpperCase == 'DD') {
                    strDat = (strDat < 10) ? '0' + strDat : strDat;
                }

                if (this.dateFormat.substring(0, 1) == 'M' || this.dateFormat.substring(0, 1) == 'm') {
                    result = strMon + divChar + strDat + divChar + date.getFullYear();
                }
                if (this.dateFormat.substring(0, 1) == 'D' || this.dateFormat.substring(0, 1) == 'd') {
                    result = strDat + divChar + strMon + divChar + date.getFullYear();
                }
                if (this.dateFormat.substring(0, 1) == 'Y' || this.dateFormat.substring(0, 1) == 'y') {
                    result = date.getFullYear() + divChar + strMon + divChar + strDat;
                }
                if (this.displayTime) {
                    result += " ";
                }
            }

            if (this.displayTime) {
                var timeDivStr = this.getTimeDivChar();
                var strHour = hours;
                var strMin = minutes;
                if (strMin < 10) { strMin = '0' + strMin; }
                if (this.dateFormat.indexOf('H') > -1) {
                    result += strHour + timeDivStr + strMin;
                } else if (this.dateFormat.indexOf('h') > -1) {
                    var str12Hour = hours;
                    if (this.Hours === 0) {
                        str12Hour = '12';
                    }

                    var strMeridian = 'AM';
                    if (hours >= 12) {
                        if (hours > 12) {
                            str12Hour = (hours - 12);
                        }

                        strMeridian = 'PM';
                    }

                    result += str12Hour + timeDivStr + strMin + " " + strMeridian;
                } else {
                    result += time.toLocaleTimeString();
                }
            }

            return result;
        },
        getDivChar: function () {
            /* this function determines date separator for the date format supplied  */
            var divChar = '';
            for (var i = 0; i < this.dateFormat.length; i++) {
                if (isNaN(this.dateFormat.charAt(i))) {
                    if ((this.dateFormat.charAt(i) < 'A' || this.dateFormat.charAt(i) > 'Z') && (this.dateFormat.charAt(i) < 'a' || this.dateFormat.charAt(i) > 'z')) {
                        divChar = this.dateFormat.charAt(i);
                        break;
                    }
                }
            }
            return divChar;
        },
        getTimeDivChar: function () {
            /* this function determines time separator for the date format supplied  */
            if (this.displayTime) {
                var fmtParts = this.dateFormat.split(" ");
                if (fmtParts.length > 1) {
                    var timeFmt = fmtParts[1];
                    for (var i = 0; i < timeFmt.length; i++) {
                        if (isNaN(timeFmt.charAt(i))) {
                            if ((timeFmt.charAt(i) < 'A' || timeFmt.charAt(i) > 'Z') && (timeFmt.charAt(i) < 'a' || timeFmt.charAt(i) > 'z')) {
                                return timeFmt.charAt(i);
                            }
                        }
                    }
                }
            }
            return ":";
        }
    });


    return datePicker;
});

},
'Sage/MainView/Contact/ContactSearchForDuplicates':function(){
require({cache:{
'url:Sage/MainView/Contact/templates/ContactDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Contact.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccount_Caption || \"Account:\" %}</td>',\r\n                        '<td class=\"DataItem\"><a href=\"Account.aspx?entityid={{%= $.templateData.account_id %}}\">{%= Sage.Utility.htmlEncode($.templateData.accountname) %}</a></td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Caption || \"Title:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.title %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWorkPhone_Caption || \"Work Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.workphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svHomePhone_Caption || \"Home Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.homephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMobilePhone_Caption || \"Mobile Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mobilephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n] ",
'url:Sage/MainView/Lead/templates/LeadDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Lead.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svCompany_Caption || \"Company:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountname %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Caption || \"Title:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.title %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWorkPhone_Caption || \"Work Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.workphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svHomePhone_Caption || \"Home Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.homephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMobilePhone_Caption || \"Mobile Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mobilephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n]",
'url:Sage/MainView/Account/templates/AccountDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Account.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svSubType_Caption || \"Sub Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.subtype %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Status || \"Status:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.status %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svDivision_Caption || \"Division:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.division %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svIndustry_Caption || \"Industry:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.industry) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMainPhone_Caption || \"Main phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mainphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTollFree_Caption || \"Toll free:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.tollfree) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n]"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/Contact/ContactSearchForDuplicates", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/ContactSearchForDuplicates',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/Utility',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'Sage/UI/_DialogLoadingMixin',
    'Sage/UI/Dialogs',
    'dijit/Dialog',
    'dojo/i18n!./nls/ContactSearchForDuplicates',
    'dojo/text!./templates/ContactDetailSummary.html',
    'dojo/text!../Lead/templates/LeadDetailSummary.html',
    'dojo/text!../Account/templates/AccountDetailSummary.html'
],
function (
    declare,
    i18nStrings,
    _Widget,
    _Templated,
    Utility,
    _DialogHelpIconMixin,
    dojoLang,
    _DialogLoadingMixin,
    Dialogs,
    Dialog,
    nls,
    contactTemplate,
    leadTemplate,
    accountTemplate
) {
    var contactSearchForDuplicates = declare('Sage.MainView.Contact.ContactSearchForDuplicates', [_Widget, _Templated], {
        workSpace: {},
        templateDialog: false,
        templateData: '',
        rootUrl: 'slxdata.ashx/slx/crm/-/namedqueries?format=json&',
        widgetsInTemplate: true,
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        init: function (workSpace) {
            this.workSpace = workSpace;
        },
        onTabFiltersClick: function () {
            this.setDivDisplay(this.workSpace.divFiltersId, "inline");
            this.setDivDisplay(this.workSpace.divOptionsId, "none");

            this.setTabDisplay(this.workSpace.tabFiltersId, "tws-tab-button tws-active-tab-button");
            this.setTabDisplay(this.workSpace.tabOptionsId, "tws-tab-button");
        },
        onTabOptionsClick: function () {
            this.setDivDisplay(this.workSpace.divOptionsId, "inline");
            this.setDivDisplay(this.workSpace.divFiltersId, "none");

            this.setTabDisplay(this.workSpace.tabOptionsId, "tws-tab-button tws-active-tab-button");
            this.setTabDisplay(this.workSpace.tabFiltersId, "tws-tab-button");
        },
        setDivDisplay: function (divId, display) {
            var control = dojo.byId(divId);
            if (control !== null) {
                control.style.display = display;
            }
        },
        setTabDisplay: function (tabId, displayClass) {
            var control = dojo.byId(tabId);
            if (control !== null) {
                control.className = displayClass;
            }
        },
        showSummaryView: function (entityType, entityId) {
            var url = this.getReqestUrl(entityType, entityId);
            this.showData(url, this.successRequest, this.errorRequest, entityType, entityId);
        },
        getReqestUrl: function (entityType, entityId) {
            var url = null;
            if (entityType === 'Contact') {
                url = this.getReqeustUrlEx(entityId, 'ContactSearch');
            }
            if (entityType === 'Lead') {
                url = this.getReqeustUrlEx(entityId, 'LeadSearch');
            }
            if (entityType === 'Account') {
                url = this.getReqeustUrlEx(entityId, 'AccountSearch');
            }
            return url;
        },
        getReqeustUrlEx: function (entityId, searchName) {
            var fmtstr = "mainentity.id eq '${0}'";
            var params =
            {
                name: searchName,
                where: dojo.string.substitute(fmtstr, [entityId])
            };
            return this.rootUrl + this.buildQParamStr(params);
        },
        buildQParamStr: function (params) {
            var o = params;
            var p = [];
            if (typeof o === "object") {
                for (var k in o) {
                    p.push(k + "=" + encodeURIComponent(o[k]));
                }
            } else if (typeof o === "string") {
                p.push(o);
            }
            return p.join("&");
        },
        showData: function (url, successcallback, errorcallback, entityType, entityId) {
            if (typeof successcallback === "undefined") { successcallback = function (data) { }; }
            if (typeof errorcallback === "undefined") { errorcallback = function () { }; }
            if (typeof entityType === "undefined") { entityType = ''; }
            if (typeof entityId === "undefined") { entityId = ''; }
            var self = this;
            dojo.xhrGet({
                url: url,
                cache: false,
                preventCache: true,
                handleAs: 'json',
                load: function (data) {
                    successcallback(self, entityType, data);
                },
                error: function (request, status, error) {
                    errorcallback(self, error);
                }
            });
        },
        successRequest: function (self, entityType, data) {
            self.show(entityType, data);
        },
        show: function (entityType, data) {
            this.templateData = data.items[0];
            this.templateDialog = new Dialog({
                title: this.getSummaryTitle(entityType),
                id: [this.id, '-Dialog'].join(''),
                content: this.getTemplate(entityType).apply(this)
            });
            this.connect(this.templateDialog, "onCancel", this._close);
            this.templateDialog.show();
        },
        errorRequest: function (self, error) {
            Dialogs.showError(dojo.string.substitute(self.errorLoadingSummaryView, [error]));
        },
        getSummaryTitle: function (entityType) {
            var title = null;
            if (entityType === 'Contact') {
                title = this.ContactSummaryView_Title;
            }
            if (entityType === 'Lead') {
                title = this.LeadSummaryView_Title;
            }
            if (entityType === 'Account') {
                title = this.AccountSummaryView_Title;
            }
            return title;
        },
        getTemplate: function (entityType) {
            var tpl = null;
            if (entityType === 'Contact') {
                tpl = new Simplate(eval(contactTemplate));
            }
            if (entityType === 'Lead') {
                tpl = new Simplate(eval(leadTemplate));
            }
            if (entityType === 'Account') {
                tpl = new Simplate(eval(accountTemplate));
            }
            return tpl;
        },
        _close: function () {
            this.templateDialog.destroyRecursive();
        }
    });
    return contactSearchForDuplicates;
});
},
'Sage/UI/Controls/_customSelectMixin':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/_customSelectMixin", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/form/ComboBox',
    'dojo/_base/declare'
],
function (_Widget, _Templated, ComboBox, declare) {
    var customSelectMixin = declare('Sage.UI.Controls._customSelectMixin', [_Widget, _Templated], {
        widgetsInTemplate: true,
        disabled: false,
        value: '',
        text: '',
        widgetTemplate: new Simplate([
            '<div>',
                '<select dojoType="dijit.form.ComboBox" id="{%= $.id %}_select" labelAttr="label" dojoAttachPoint="_select" dojoAttachEvent="onChange:_onChange"></select>',
            '</div>' //root node
        ]),
        postCreate: function () {
            this.inherited(arguments);
            this._fillSelect();
        },
        _fillSelect: function () {
            // override to fill with custom data...
        },
        _setValueAttr: function (value) {
            this.text = value;
            this.value = value;
            if (this._store) {
                this._store.fetchItemByIdentity({
                    identity: value,
                    onItem: function (item) {
                        if (item) {
                            this._select.set('value', this._store.getValue(item, this._storeData.label));
                            this.value = this._store.getValue(item, this._storeData.identifier);
                            this.text = this._store.getValue(item, this._storeData.label);
                        } else {
                            this._handleValueNotInStore(value);
                        }
                    },
                    onError: function () {
                        //console.log('did not find item. ' + this.value);
                    },
                    scope: this
                });
            }
        },
        _getValueAttr: function () {
            if (this._select.item && this._store) {
                this.value = this._store.getValue(this._select.item, this._storeData.identifier);
            }
            return this.value;
        },
        _onChange: function (newValue) {
            //handles the _select control's change event...  newValue is the text
            if ((this.value === newValue) || (this.text === newValue)) {
                return;
            }
            if (this._select.item) {
                var item = this._select.item;
                //this.value = item[this._storeData.identifier];
                //this.text = item[this._storeData.label];                
                this.value = this._store.getValue(item, this._storeData.identifier);
                this.text = this._store.getValue(item, this._storeData.label);
            } else {
                this.value = this._handleValueNotInStore(newValue);
            }
            this.onChange(this.value);
        },
        _handleValueNotInStore: function (newValue) {
            //override this method to create a new item, or revert to last known good value...
            this.text = newValue;
            this.value = newValue;
            return newValue;
        },
        _getTextAttr: function () {
            return this.text;
        },
        _setTextAttr: function (text) {
            this.text = text;
            this._select.set('displayedValue', text);
        },
        _setDisabledAttr: function (disabled) {
            this.disabled = disabled;
            this._select.set('disabled', disabled);
        },
        _getDisabledAttr: function () {
            return this.disabled = this._select.get('disabled');
        },
        onChange: function () { }
    });
    return customSelectMixin;
});
},
'Sage/Utility/Email':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/Email", [
    'Sage/Utility',
    'Sage/Data/SDataServiceRegistry',
    'Sage/UI/Dialogs',
    'dojo/parser',
    'dojox/validate/regexp',
    'dojo/i18n!./nls/Email'
],
// ReSharper disable InconsistentNaming
function (Utility, SDataServiceRegistry, Dialogs, parser, regexp, nls) {

    Sage.namespace('Utility.Email');
    dojo.mixin(Sage.Utility.Email, {
        resources: nls,
        /* ------------------------------------- writeEmail functionality ----------------------------------  */

        /**
        * writeEmail - generate an email with subject, body and one or more recipients
        * @param {string || object || array [of string] || array [of object]} recipent - if it is a string or array all items are added to the "To"
        *       if it is an object it can have the following properties whose values can be a single string, array of strings, single
        *       object or array of objects: to, cc, bcc
        * @param {string} subject - the subject line of the email
        * @param {string} body - the body of the email can be plain text or html if it is html, use isFormatted
        * @param {bool} isFormatted - if true, the body will be treated as formatted html
        * @param {number} nameOrder - 0 = format name as "John Abbott"; 1 = format name as "Abbott, John"
        */

        /*
        example:
        Sage.Utility.Email.writeEmail(
        {
        to: ['bob@mycompany.com', 'sally@mycompany'],
        cc: 'billy@othercompany.com',
        bcc: 'mom@hotmail.com'
        },
        'This is a good email - read it',
        'Hello all,<br />This is the <b>best</b> email you have ever gotten.<br /><br /> <span style="font-size:26px;font-weight:bold;">Pass it on to all of your contacts or you will have bad luck.</span>',
        true, 1);
        */
        writeEmail: function (recipient, subject, body, isFormatted, nameOrder) {

            if (dojo.isString(recipient) && (recipient.length > 0)) {
                // First, check to see if the recipient string represents a JSON object (such as would be passed when writeEmail is called from code behind).
                // Since we're not expecting JSON every time, there is no need to call JSON.parse for each request.
                if ((recipient.indexOf("{", 0) == 0) && (recipient.lastIndexOf("}") == recipient.length - 1)) {
                    try {
                        var objValue = dojo.fromJson(recipient);
                        if (dojo.isObject(objValue))
                            recipient = objValue;
                    } catch(e) {
                        Dialogs.showError(dojo.substitute(Utility.Email.resources.RecipientInfoError, [e.message]));
                        if (typeof console !== "undefined") {
                            console.error("There was an error attempting to parse the recipient data as JSON: %o", e); //DNL
                            console.error("recipient parameter: %o", recipient); //DNL
                        }
                        return;
                    }
                }
                    // Does the string represent an array passed as a string?
                else if ((recipient.indexOf("[", 0) == 0) && (recipient.lastIndexOf("]") == recipient.length - 1)) {
                    recipient = eval(recipient);
                }
            }

            var self = this;

            require(['Sage/MailMerge/Helper', 'Sage/MailMerge/Service'], function (Helper, DesktopService) {

                // 0 = FirstLast (e.g. John Abbott <jabbot@abbott.demo>)
                // 1 = LastFirst (e.g. Abbott, John <jabbot@abbott.demo>) 
                var iNameOrder = 0;
                if (typeof nameOrder !== "undefined") {
                    if (!isNaN(nameOrder)) {
                        if (Number(nameOrder) == 1)
                            iNameOrder = 1;
                    }
                }
                var olBCC = 3, olCC = 2, olTo = 1; // Microsoft Outlook constants. These constants are also used below generically (for any e-mail client).
                var arrProps = ["to", "cc", "bcc"];
                var iRecipientType = 0;
                var sType = (dojo.isArray(recipient)) ? "array" : typeof recipient;
                var bHasRecipient = (sType !== "undefined") && (recipient != null);

                var oRecipients = {
                    "to": [],
                    "cc": [],
                    "bcc": []
                };

                // Helper function to add the recipient to the correct array (i.e. TO, CC, or BCC).
                var fnAddRecipient = function (type, firstName, lastName, emailAddress) {
                    if (self.isValidEmailAddress(emailAddress || "")) {
                        var fnAddToArray = function (array) {
                            array.push({ "firstName": firstName || "", "lastName": lastName || "", "emailAddress": emailAddress || "" });
                        };
                        switch (type) {
                            case olCC:
                                fnAddToArray(oRecipients.cc);
                                break;
                            case olBCC:
                                fnAddToArray(oRecipients.bcc);
                                break;
                            default:
                                fnAddToArray(oRecipients.to);
                                break;
                        }
                    } else {
                        if (typeof console !== "undefined")
                            console.warn(dojo.string.substitute("Invalid or missing e-mail for ${0} ${1}. E-mail address: ${2}.", [firstName, lastName, emailAddress]));
                    }
                };

                // Parse the recipient parameter and add the corresponding data to the oRecipients object.
                if (bHasRecipient) {
                    var fnAddEmailObj = function (type, email) {
                        if (dojo.isObject(email))
                            fnAddRecipient(type, email.firstName || "", email.lastName || "", email.emailAddress || "");
                    };
                    switch (sType) {
                        case "string":
                            if (recipient != "")
                                fnAddRecipient(olTo, "", "", recipient);
                            break;
                        case "array":
                            dojo.forEach(recipient, function (email) {
                                if (dojo.isString(email))
                                    fnAddRecipient(olTo, "", "", email);
                                else if (dojo.isObject(email))
                                    fnAddEmailObj(olTo, email);
                            });
                            break;
                        case "object":
                            iRecipientType = 0;
                            dojo.forEach(arrProps, function (prop) {
                                iRecipientType++; // olTo = 1; olCC = 2; olBCC = 3                            
                                if (recipient.hasOwnProperty(prop)) {
                                    switch ((dojo.isArray(recipient[prop])) ? "array" : typeof recipient[prop]) {
                                        case "string":
                                            fnAddRecipient(iRecipientType, "", "", recipient[prop]);
                                            break;
                                        case "array":
                                            dojo.forEach(recipient[prop], function (obj) {
                                                if (dojo.isString(obj))
                                                    fnAddRecipient(iRecipientType, "", "", obj);
                                                else if (dojo.isObject(obj))
                                                    fnAddEmailObj(iRecipientType, obj);
                                            });
                                            break;
                                        case "object":
                                            fnAddEmailObj(iRecipientType, recipient[prop]);
                                            break;
                                    }
                                }
                            });
                            break;
                    }
                }

                // Ensure that the recipient parameter is not used incorrectly after this point; the oRecipients object has the data we want now.
                recipient = undefined;

                // Sort proc used for sorting the recipient arrays.
                var fnCompare = function (obj1, obj2) {
                    var iCompare;
                    switch (iNameOrder) {
                        // LastFirst (e.g. Abbott, John <jabbot@abbott.demo>)         
                        case 1:
                            iCompare = (obj1.lastName || "").toLocaleUpperCase().localeCompare((obj2.lastName || "").toLocaleUpperCase());
                            if (iCompare == 0)
                                iCompare = (obj1.firstName || "").toLocaleUpperCase().localeCompare((obj2.firstName || "").toLocaleUpperCase());
                            break;
                        // FirstLast (e.g. John Abbott <jabbot@abbott.demo>)         
                        default:
                            iCompare = (obj1.firstName || "").toLocaleUpperCase().localeCompare((obj2.firstName || "").toLocaleUpperCase());
                            if (iCompare == 0)
                                iCompare = (obj1.lastName || "").toLocaleUpperCase().localeCompare((obj2.lastName || "").toLocaleUpperCase());
                    }
                    return iCompare;
                };

                var iRecipientLength = oRecipients.to.length + oRecipients.cc.length + oRecipients.bcc.length;
                bHasRecipient = (iRecipientLength > 0);

                // Use SageGears with Desktop Integration if it and Microsoft Outlook are available.
                var oService = Helper.GetDesktopService(false /* Do not show an error if the service cannot be loaded. */);
                if (oService) {
                    if (typeof oService.MailMergeGUI !== "undefined") {
                        // Make sure that at least the 8.x version of SLXMMGUIW.DLL being used.
                        if (typeof oService.MailMergeGUI().OutlookIsAvailable !== "undefined" && oService.MailMergeGUI().OutlookIsAvailable) {
                            // SageGears does not like NULL parameters when it's expecting an IDispatch interface, so create an empty array.
                            var arrRecipients = oService.NewActiveXObject("SLXMMGUIW.MultidimensionalArray");
                            var iColumnCount = 4;
                            arrRecipients.Resize(0, iColumnCount);
                            if (bHasRecipient) {
                                arrRecipients.Resize(iRecipientLength, iColumnCount);
                                iRecipientType = 0;
                                var iRow = 0;
                                dojo.forEach(arrProps, function (prop) {
                                    iRecipientType++; // olTo = 1; olCC = 2; olBCC = 3 
                                    var arrRecipientObjs = oRecipients[prop];
                                    if (dojo.isArray(arrRecipientObjs) && arrRecipientObjs.length > 0) {
                                        arrRecipientObjs.sort(fnCompare);
                                        dojo.forEach(arrRecipientObjs, function (obj) {
                                            arrRecipients.SetValue(iRow, 0, obj.firstName || "");
                                            arrRecipients.SetValue(iRow, 1, obj.lastName || "");
                                            arrRecipients.SetValue(iRow, 2, obj.emailAddress || "");
                                            arrRecipients.SetValue(iRow, 3, iRecipientType);
                                            iRow++;
                                        });
                                    }
                                });
                            }
                            var sSubject = (dojo.isString(subject)) ? subject : "";
                            // Note: body can be plain text or HTML (e.g. <HTML>Hello <B>World</B></HTML>).
                            var sBody = (dojo.isString(body)) ? body : "";
                            // Use Extended MAPI to access the Outlook recipients and other properties; if we do not do
                            // this there will be a security prompt, depending on Outlook version and heuristics.                            
                            oService.MailMergeGUI().WriteEmailEx(arrRecipients, sSubject, sBody, iNameOrder);
                            return;
                        } else {
                            if (typeof console !== "undefined") {
                                // SLXMMGUIW.DLL is installed, but it's an older version.
                                if (typeof oService.MailMergeGUI().OutlookIsAvailable === "undefined")
                                    console.error("The request to e-mail could not be processed by Desktop Integration. An older version of SLXMMGUIW.DLL appears to be installed."); //DNL
                                else
                                // If Microsoft Outlook is unavailable.
                                    console.warn("The request to e-mail could not be processed by Desktop Integration. Microsoft Outlook is unavailable."); //DNL
                            }
                        }
                    }
                }

                // If we get this far it means that Desktop Integration was [not] used to create the e-mail message. We'll use the mailto: protocol instead.
                if (typeof console !== "undefined")
                    console.info("Falling back to the mailto: protocol to create the e-mail message."); //DNL

                /*
                //BEGIN Supporting writeEmail functions
                * Add all strings in parts to str
                * @param {String} str - current value we need to add to
                * @param {Array} parts
                * @param {Number} maxLength
                * @param {String} (optional) separator.  Note the separator is not url encoded.
                * @param {bool} (optional) doEncode.  Defaults to true.  If false, strings won't be url encoded.
                * @param {bool} (optional partialOk.  Defaults to true.  If false, only whole strings from the parts array will be included.
                */
                var addUrlComponents = function (str, parts, maxLength, separator, doEncode, partialOk) {
                    if (typeof parts == "string")
                        parts = [parts];
                    var encode;
                    if (doEncode === false)
                        encode = function (x) { return x; };
                    else
                        encode = function (x) { return encodeURIComponent(x); };
                    for (var i = 0; i < parts.length && str.length < maxLength; i++) {
                        var left = maxLength - str.length;
                        var part = parts[i];
                        if (i > 0 && separator)
                            left--;
                        if (left == 0 || (partialOk === false && left < part.length))
                            continue;
                        part = part.substr(0, left);

                        var ns = encode(part);
                        if (str.length + ns.length > maxLength) {
                            if (partialOk === false)
                                continue;
                            var right = 0;
                            var overflow = ns.length - left;
                            while (overflow > 0) {
                                right++;
                                overflow -= encode(part.charAt(part.length - right)).length;
                            }
                            if (right >= part.length)
                                continue;
                            ns = encode(part.substr(0, part.length - right));
                        }
                        if (i > 0 && separator)
                            str += separator;
                        str += ns;
                    }
                    return str;
                };

                // Format the recipient text as it will appear in the e-mail TO, CC, and BCC fields.
                var fnGetRecipientText = function (firstName, lastName, email) {
                    var sResult = "";
                    var sFirstName = firstName || "";
                    var sLastName = lastName || "";
                    var sEmail = email || "";
                    if (sFirstName != "" && sLastName != "") {
                        // iNameOrder: 0 = FirstLast; 1 = LastFirst.
                        switch (iNameOrder) {
                            case 1:
                                sResult = sLastName + ", " + sFirstName;
                                break;
                            default:
                                sResult = sFirstName + " " + sLastName;
                                break;
                        }
                    } else if (sLastName == "" && sFirstName != "") sResult = sFirstName;
                    else if (sLastName != "" && sFirstName == "") sResult = sLastName;
                    if (sResult == "") return sEmail;
                    sResult = dojo.string.substitute("${0} <${1}>", [sResult, sEmail]);
                    return sResult;
                };

                // Get the recipients for each type (i.e. TO, CC, or BCC).
                var fnGetRecipients = function (type) {
                    var arrMailRecipients = [];
                    var arrRecipientsByType;
                    switch (type) {
                        case olCC:
                            arrRecipientsByType = oRecipients.cc;
                            break;
                        case olBCC:
                            arrRecipientsByType = oRecipients.bcc;
                            break;
                        default:
                            arrRecipientsByType = oRecipients.to;
                            break;
                    }
                    if (dojo.isArray(arrRecipientsByType) && arrRecipientsByType.length > 0) {
                        // Sort the recipients
                        arrRecipientsByType.sort(fnCompare);
                        dojo.forEach(arrRecipientsByType, function (obj) {
                            var sMailTo = fnGetRecipientText(obj.firstName || "", obj.lastName || "", obj.emailAddress || "");
                            arrMailRecipients.push(sMailTo);
                        });
                    }
                    return arrMailRecipients;
                };

                //END Supporting writeEmail functions
                var maxRecipLen = (subject || body) ? 1500 : 2040;
                var arrTo = fnGetRecipients(olTo);
                // To:
                var url = addUrlComponents("mailto:", (dojo.isArray(arrTo) ? arrTo : []), maxRecipLen, ";", false, false);
                var bQueryStringInitialized = false;
                var fnAddParameter = function (param) {
                    var sParam = (bQueryStringInitialized) ? "&" : "?";
                    sParam += param + "=";
                    bQueryStringInitialized = true;
                    return sParam;
                };
                // Subject
                if (dojo.isString(subject) && subject != "") {
                    url += fnAddParameter("subject");
                    url = addUrlComponents(url, subject, 1700);
                }
                // CC:
                var arrCarbonCopy = fnGetRecipients(olCC);
                if (dojo.isArray(arrCarbonCopy) && arrCarbonCopy.length > 0) {
                    url += fnAddParameter("cc");
                    url = addUrlComponents(url, arrCarbonCopy, maxRecipLen, ";", false, false);
                }
                // BCC:
                var arrBlindCopy = fnGetRecipients(olBCC);
                if (dojo.isArray(arrBlindCopy) && arrBlindCopy.length > 0) {
                    url += fnAddParameter("bcc");
                    url = addUrlComponents(url, arrBlindCopy, maxRecipLen, ";", false, false);
                }
                // Body
                if (dojo.isString(body) && body != "") {
                    url += fnAddParameter("body");
                    url = addUrlComponents(url, body, 2000);
                }
                if (typeof console !== "undefined") {
                    console.debug("mailto: protocol URL length = %o", url.length);
                    console.debug("url: %o", url);
                }
                try {
                    location.href = url;
                } catch (e) {
                    //Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIDOMLocation.href]
                    Dialogs.showError(dojo.string.substitute(Utility.Email.resources.MailToProtocolError,
                        [url.length, (typeof e.toMessage == "function") ? e.toMessage() : e.message]));
                }
            });
        }, // End writeEmail

        // isWriteEmailToIdsSupported
        isWriteEmailToIdsSupported: function (maintable) {
            if (!dojo.isString(maintable) || maintable == "") {
                if (typeof console !== "undefined")
                    console.error("The maintable argument is invalid in isWriteEmailToIdsSupported(maintable)."); //DNL
            }
            // Currently only Contact or Lead is supported for writeEmailToIds.               
            var sMainTable = (dojo.isString(maintable)) ? maintable.toUpperCase() : "";
            return (sMainTable == "CONTACT" || sMainTable == "LEAD");
        },

        // isValidEmailAddress
        __emailValidationRegEx: null,
        isValidEmailAddress: function (email) {
            if (this.__emailValidationRegEx === null)
                this.__emailValidationRegEx = new RegExp(dojox.validate.regexp.emailAddress());
            if (dojo.isString(email))
                return this.__emailValidationRegEx.test(email);
            return false;
        },

        // writeEmailToIds
        writeEmailToIds: function (arrEntityIds, maintable, subject, body, nameOrder, emailField) {
            if (!this.isWriteEmailToIdsSupported(maintable)) {
                Dialogs.showError(Utility.Email.resources.InvalidContextError);
                return;
            }
            if (!dojo.isArray(arrEntityIds)) {
                Dialogs.showError(Utility.Email.resources.InvalidArgumentError);
                return;
            }

            var self = this;

            require(['Sage/MailMerge/Helper', 'Sage/MailMerge/Service'], function (Helper, DesktopService) {

                console.debug('in it');

                var sMainTable = maintable.toUpperCase();

                // Remove duplicate entity ids.
                var iDuplicateCount = 0;
                arrEntityIds.sort();
                var arrEntityIdsNoDupes = [];
                dojo.forEach(arrEntityIds, function (id) {
                    if (dojo.indexOf(arrEntityIdsNoDupes, id) == -1)
                        arrEntityIdsNoDupes.push(id);
                    else {
                        iDuplicateCount++;
                        if (typeof console !== "undefined")
                            console.info("Filtering out duplicate entity Id: %o", id);
                    }
                });
                arrEntityIds = arrEntityIdsNoDupes;

                // Quote each id for the SData query.
                dojo.forEach(arrEntityIds, function (id, idx) {
                    arrEntityIds[idx] = "'" + id + "'";
                });

                // Determine the number of HTTP SData requests that will be required.
                // NOTE: SData supports a maximum of 100 items for an IN clause.
                var iRequestCount = 1;
                if (arrEntityIds.length > 100) {
                    iRequestCount = Math.floor(arrEntityIds.length / 100);
                    if ((arrEntityIds.length % 100) != 0)
                        iRequestCount++;
                }

                // 0 = FirstLast; 1 = LastFirst.
                var iNameOrder = 0;
                if (typeof nameOrder !== "undefined") {
                    if (!isNaN(nameOrder)) {
                        if (Number(nameOrder) == 1)
                            iNameOrder = 1;
                    }
                }

                var bIsContactEntity = (sMainTable == "CONTACT");
                var sEmailField = "Email"; //DNL            
                if (dojo.isString(emailField) && emailField != "" && bIsContactEntity) {
                    var sEmailFieldUpper = emailField.toUpperCase();
                    switch (sEmailFieldUpper) {
                        case "SECONDARYEMAIL":
                            sEmailField = "SecondaryEmail"; //DNL
                            if (typeof console !== "undefined")
                                console.info("Using the Contact.SecondaryEmail field."); //DNL
                            break;
                        case "EMAIL3":
                            sEmailField = "Email3"; //DNL
                            if (typeof console !== "undefined")
                                console.info("Using the Contact.Email3 field."); //DNL
                            break;
                        default:
                            if (sEmailFieldUpper != "EMAIL")
                                if (typeof console !== "undefined")
                                    console.warn("Invalid Contact e-mail field: %o", sEmailField); //DNL
                            if (typeof console !== "undefined")
                                console.log("Using the Contact.Email field."); //DNL
                            break;
                    }
                }

                var iMissingOrInvalidEmailCount = 0; // The number of entities that had an invaild or missing e-mail address.
                var iCannotSolicitCount = 0; // The number of entities that were marked DoNotEmail or DoNotSolicit.
                var iRequest; // The current request.
                var iResponseCount = 0; // The number of successful HTTP responses.

                var oSelectedEntities = { "data": [] }; // Temporary entity store.            
                var fnAddEntityData = function (key, firstName, lastName, emailAddress) {
                    oSelectedEntities.data.push({ "key": key || "", "firstName": firstName || "", "lastName": lastName || "", "emailAddress": emailAddress || "" });
                };

                // Desktop Integration
                var oService = Helper.GetDesktopService(false /* Do not show an error if the service cannot be loaded. */);

                // Process each SData request.
                for (iRequest = 0; iRequest < iRequestCount; iRequest++) {
                    var fnProcessRequest = function () {
                        var iArraySize = 100;
                        if (arrEntityIds.length < 100)
                            iArraySize = arrEntityIds.length;
                        var arrRequestIds = new Array(iArraySize);
                        var iEntityId;
                        for (iEntityId = 0; iEntityId < iArraySize; iEntityId++)
                            arrRequestIds[iEntityId] = arrEntityIds.shift();
                        var sFmtString = (arrRequestIds.length > 1) ? "Id in (${0})" : "Id eq ${0}";
                        var sWhere = dojo.string.substitute(sFmtString, [arrRequestIds.join(",")]);
                        var oSDataService = Sage.Data.SDataServiceRegistry.getSDataService("dynamic");
                        var oSDataRequest = new Sage.SData.Client.SDataResourceCollectionRequest(oSDataService);
                        oSDataRequest.setResourceKind((sMainTable == "LEAD") ? "leads" : "contacts");
                        var sFields = "FirstName,LastName,DoNotSolicit,DoNotEmail," + sEmailField;
                        oSDataRequest.setQueryArg("select", sFields);
                        oSDataRequest.setQueryArg("where", sWhere);
                        oSDataRequest.read({
                            httpMethodOverride: true,
                            success: function (data) {
                                iResponseCount++;
                                var oResources = (typeof data !== "undefined" && data != null) ? data["$resources"] : null;
                                if (dojo.isArray(oResources) && oResources.length > 0) {
                                    var iEntity;
                                    for (iEntity = 0; iEntity < oResources.length; iEntity++) {
                                        var sEntityId = oResources[iEntity].$key || "";
                                        var sEmailAddress;
                                        switch (sEmailField) {
                                            case "SecondaryEmail":
                                                //DNL
                                                sEmailAddress = oResources[iEntity].SecondaryEmail || "";
                                                break;
                                            case "Email3":
                                                //DNL
                                                sEmailAddress = oResources[iEntity].Email3 || "";
                                                break;
                                            default:
                                                sEmailAddress = oResources[iEntity].Email || "";
                                                break;
                                        }
                                        var sFirstName = oResources[iEntity].FirstName || "";
                                        var sLastName = oResources[iEntity].LastName || "";
                                        var bDoNotEmail = oResources[iEntity].DoNotEmail || false;
                                        var bDoNotSolicit = oResources[iEntity].DoNotSolicit || false;
                                        if (sEmailAddress != "" && self.isValidEmailAddress(sEmailAddress) && !bDoNotEmail && !bDoNotSolicit)
                                            fnAddEntityData(sEntityId, sFirstName, sLastName, sEmailAddress);
                                        else {
                                            if (bDoNotEmail || bDoNotSolicit) {
                                                iCannotSolicitCount++;
                                                if (typeof console !== "undefined")
                                                    console.warn(dojo.string.substitute("Cannot solicit ${0} ${1} (${2}).", [sFirstName, sLastName, sEntityId]));
                                            } else {
                                                iMissingOrInvalidEmailCount++;
                                                if (typeof console !== "undefined")
                                                    console.warn(dojo.string.substitute("Invalid e-mail for ${0} ${1} (${2}). E-mail address: ${3}.", [sFirstName, sLastName, sEntityId, sEmailAddress]));
                                            }
                                        }
                                    }
                                }
                                // Has the FINAL SData response been processed?
                                if (iResponseCount == iRequestCount) {
                                    var sExclusions = null;
                                    if (iCannotSolicitCount > 0 || iMissingOrInvalidEmailCount > 0 || iDuplicateCount > 0)
                                        sExclusions = dojo.string.substitute(Utility.Email.resources.FilteredOutMsg, [iCannotSolicitCount, iMissingOrInvalidEmailCount, iDuplicateCount]);
                                    var enumRecipientType = {
                                        rtTo: 0,
                                        rtCC: 1,
                                        rtBCC: 2
                                    };
                                    var oRecipients = {
                                        "to": [],
                                        "cc": [],
                                        "bcc": []
                                    };
                                    // Add the recipient to one of the arrays in oRecipients.
                                    var fnAddRecipient = function (type, firstName, lastName, emailAddress) {
                                        var fnAddToArray = function (array) {
                                            array.push({ "firstName": firstName || "", "lastName": lastName || "", "emailAddress": emailAddress || "" });
                                        };
                                        switch (type) {
                                            case enumRecipientType.rtCC:
                                                fnAddToArray(oRecipients.cc);
                                                break;
                                            case enumRecipientType.rtBCC:
                                                fnAddToArray(oRecipients.bcc);
                                                break;
                                            default:
                                                // enumRecipientType.rtTo
                                                fnAddToArray(oRecipients.to);
                                                break;
                                        }
                                    };
                                    var oRecipient;
                                    if (oSelectedEntities.data.length > 1) {
                                        if (iMissingOrInvalidEmailCount > 0)
                                            if (typeof console !== "undefined")
                                                console.warn(dojo.string.substitute("Total number of entities that had an invalid or missing e-mail address: ${0}. These entities have been excluded.", [iMissingOrInvalidEmailCount])); //DNL
                                        if (iCannotSolicitCount > 0)
                                            if (typeof console !== "undefined")
                                                console.warn(dojo.string.substitute("Total number of entities that were marked as DoNotEmail or DoNotSolicit: ${0}. These entities have been excluded.", [iCannotSolicitCount])); //DNL
                                        if (iDuplicateCount > 0)
                                            if (typeof console !== "undefined")
                                                console.info(dojo.string.substitute("Total number of entities excluded because they were duplicates: ${0}.", [iDuplicateCount])); //DNL
                                        var i;
                                        // If Desktop Integration is available we'll prompt the user with the selection dialog.                                    
                                        if (oService) {
                                            var oSelectEmailInfo = new Sage.SelectEmailInfo();
                                            dojo.forEach(oSelectedEntities.data, function (entity) {
                                                oSelectEmailInfo.AddInfo("", "", entity.key, entity.emailAddress, entity.firstName, entity.lastName, "", "", false);
                                            });
                                            var sStatusText = (dojo.isString(sExclusions)) ? sExclusions : "";
                                            // NOTE: The oService.SelectEmailNames() dialog filters out duplicate entity ids and the entities will be sorted.
                                            var oSelectedInfo = oService.SelectEmailNames(oSelectEmailInfo, MaxTo.maxNoMax, sStatusText);
                                            if (oSelectedInfo != null && oSelectedInfo.Recipients.length > 0) {
                                                for (i = 0; i < oSelectedInfo.Recipients.length; i++) {
                                                    oRecipient = oSelectedInfo.Recipients[i];
                                                    // Note: CASE is different between Desktop Integration and non-Desktop Integration.
                                                    fnAddRecipient(oRecipient.Type, oRecipient.FirstName, oRecipient.LastName, oRecipient.EmailAddress);
                                                }
                                            } else
                                            // The user canceled or did not select any entities.
                                                return;
                                        }
                                        // NON-Desktop Integration. In the future we may create a dojo based dialog.
                                        else {
                                            dojo.forEach(oSelectedEntities.data, function (entity) {
                                                // Note: CASE is different between Desktop Integration and non-Desktop Integration.
                                                fnAddRecipient(enumRecipientType.rtTo, entity.firstName, entity.lastName, entity.emailAddress);
                                            });
                                        }
                                    } else {
                                        if (oSelectedEntities.data.length == 1) {
                                            oRecipient = oSelectedEntities.data[0];
                                            // Note: CASE is different between Desktop Integration and non-Desktop Integration.
                                            fnAddRecipient(enumRecipientType.rtTo, oRecipient.firstName, oRecipient.lastName, oRecipient.emailAddress);
                                        } else {
                                            var sFailureMsg = Utility.Email.resources.AllInvalidEmailError;
                                            if (bIsContactEntity && sEmailField != "Email") //DNL
                                                sFailureMsg += dojo.string.substitute(" " + Utility.Email.resources.EmailFieldQueried, ["Contact." + sEmailField]);
                                            Dialogs.showInfo(sFailureMsg);
                                            return;
                                        }
                                    }
                                    var sSubject = (dojo.isString(subject)) ? subject : "";
                                    // Note: body can be plain text or HTML (e.g. <HTML>Hello <B>World</B></HTML>).                                                   
                                    var sBody = (dojo.isString(body)) ? body : "";
                                    // "<HTML></HTML>"
                                    var bFormatted = (sBody.length > 13) ? (sBody.indexOf("<HTML", sBody.substring(0, 4).toUpperCase()) == 0) : false;
                                    self.writeEmail(oRecipients, sSubject, sBody, bFormatted, iNameOrder);
                                }
                            },
                            failure: function (xhr, sdata) {
                                var options = { message: Utility.Email.resources.EntityInfoError };
                                Utility.ErrorHandler.handleHttpError(xhr, sdata, options);
                            },
                            scope: this
                        });
                    };
                    fnProcessRequest();
                }
            });
        }, // End writeEmailToIds

        // writeEmailToGroupSelection
        writeEmailToGroupSelection: function (subject, body, nameOrder, emailField) {
            if (Utility.getModeId() != "list") {
                Dialogs.showInfo(Utility.Email.resources.CapabilityModeError);
                return;
            }
            var oGroupContext = Sage.Services.getService("ClientGroupContext");
            if (!dojo.isObject(oGroupContext)) return;
            var sMainTable = oGroupContext.getContext().CurrentTable;
            if (!this.isWriteEmailToIdsSupported(sMainTable)) {
                Dialogs.showError(Utility.Email.resources.CapabilityEntityError);
                return;
            }
            var oPanel = dijit.byId("list");
            if (!dojo.isObject(oPanel)) return;
            var oSelectionInfo = oPanel.getSelectionInfo();
            if (!dojo.isObject(oSelectionInfo) || !oSelectionInfo.hasOwnProperty("selectionCount") || oSelectionInfo.selectionCount <= 0) {
                Dialogs.showInfo(Utility.Email.resources.NoRowsSelectedError);
                return;
            }
            var arrEntityIds = new Array(oSelectionInfo.selections.length);
            dojo.forEach(oSelectionInfo.selections, function (item, idx) {
                arrEntityIds[idx] = item.id;
            });
            this.writeEmailToIds(arrEntityIds, sMainTable, subject, body, nameOrder, emailField);
        }
    });

    return Sage.Utility.Email;
});
},
'Sage/Link':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Link", [
    'Sage/UI/Dialogs',
    'Sage/Utility',
    'Sage/Services/ActivityService',
    'dojo/string'
],
function (dialogs, utility, ActivityService, dojoString) {
    Sage.namespace('Link');
    Sage.Link = {
        entityDetail: function (kind, id) {
            var kindUC = kind.toUpperCase();
            switch (kindUC) {
                case 'ACTIVITY':
                    this.editActivity(id);
                    break;
                case 'HISTORY':
                    this.editHistory(id);
                    break;
                default:
                    //if we are in detail mode for the entity requested, just navigate to that entity
                    if (utility.getModeId() === 'detail') {
                        var clientEntityContextSvc = Sage.Services.getService('ClientEntityContext');
                        var eContext = clientEntityContextSvc.getContext();
                        if (eContext.EntityType === kind || eContext.EntityType === 'Sage.Entity.Interfaces.I' + kind) {
                            clientEntityContextSvc.navigateSLXGroupEntity(id);
                            return;
                        }
                    }
                    var url = dojoString.substitute('${0}.aspx?entityid=${1}&modeid=Detail', [kind, id]);
                    document.location = url;
                    break;
            }
        },
        toListView: function (kind) {
            var url;
            if (typeof kind !== 'undefined') {
                url = kind + '.aspx?modeid=list';
            } else {
                url = document.location.href.replace("#", "");
                if (url.indexOf("?") > -1) {
                    var halves = url.split("?");
                    url = halves[0];
                }
                url += "?modeid=list";
            }
            document.location = url;
        },
        toActivityListView: function (tabid) {
            if (document.location.href.toLowerCase().indexOf('activitymanager.aspx') < 1) {
                var url = 'ActivityManager.aspx' + ((tabid) ? '?tabId=' + tabid : '');
                // IE8 fix - as the page is leaving and the rest of the dojo event handling 
                // code is running, wild things start happening and IE ends up back where it started,
                // but with bad errors...
                window.setTimeout(function () {
                    document.location = url;
                }, 5);
            } else {
                if (tabid) {
                    var s = Sage.Services.getService('ClientGroupContext');
                    s.setCurrentGroup(tabid);
                }
            }
        },
        schedule: function (type) {

            if (type === 'CompleteActivity') {
                Sage.ClientLinkHandler.request({ request: 'Schedule', type: type });
                return;
            }

            var activityService = Sage.Services.getService('ActivityService');
            if (!activityService) {
                Sage.Services.addService('ActivityService', new ActivityService());
                activityService = Sage.Services.getService('ActivityService');
            }
            activityService.scheduleActivity({ type: type });
        },

        newNote: function () {

            var activityService = Sage.Services.getService('ActivityService');
            if (!activityService) {
                Sage.Services.addService('ActivityService', new ActivityService());
                activityService = Sage.Services.getService('ActivityService');
            }
            activityService.insertNote();

            //Sage.ClientLinkHandler.request({ request: 'New', type: 'Note' });
        },

        scheduleActivity: function (args) {
            console.warn('ToDo: this method - Sage.Link.scheduleActivity seems to have been used for various purposes, passing various bits of information in the args parameter.  This needs to be fixed for each call...');
            this.schedule(args);
        },

        schedulePhoneCall: function () {
            this.schedule('PhoneCall');
        },

        scheduleMeeting: function () {
            this.schedule('Meeting');
        },

        scheduleToDo: function () {
            this.schedule('ToDo');
        },

        schedulePersonalActivity: function () {
            this.schedule('PersonalActivity');
        },

        scheduleCompleteActivity: function () {
            this.schedule('CompleteActivity');
        },

        scheduleEvent: function (args) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.scheduleEvent(args);
        },


        editEvent: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.editEvent(id);
        },

        deleteEvent: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.deleteEvent(id);
        },

        editActivity: function (id, isRecurring, memberId) {
            var activityService = Sage.Services.getService('ActivityService');
            if (!activityService) {
                Sage.Services.addService('ActivityService', new ActivityService());
                activityService = Sage.Services.getService('ActivityService');
            }
            memberId = memberId || '';
            activityService.editActivity(id, isRecurring, memberId);
        },
        editActivityIfConfirmed: function (id, isRecurring) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.editActivityIfConfirmed(id, isRecurring);              
        },
        editActivityOccurrence: function (id, recurDate) {
            Sage.ClientLinkHandler.request({ request: 'EditActivityOccurrence', id: id, recurDate: recurDate });
        },

        editHistory: function (id, args) {
            var activityService = Sage.Services.getService('ActivityService');
            if (!activityService) {
                Sage.Services.addService('ActivityService', new ActivityService());
                activityService = Sage.Services.getService('ActivityService');
            }
            activityService.editHistory(id);

        },

        completeActivity: function (id, isRecurring) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.completeActivity(id, isRecurring);
        },

        completeNewActivity: function (type, args) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.completeNewActivity(type, args);
        },

        completeActivityOccurrence: function (id, recurDate) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.completeActivityOccurrence(id, recurDate);
        },

        deleteActivity: function (id, callback) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.deleteActivity(id, false, callback);
        },

        deleteActivityOccurrence: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.deleteActivity(id);
        },
        confirmActivityFor: function (actId, userId) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.confirmActivityFor(actId, userId);
        },
        editConfirmation: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.editConfirmation(id);
        },
        acceptConfirmation: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.acceptConfirmation({ id: id });
        },
        declineConfirmation: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.declineConfirmation(id);
        },
        deleteConfirmation: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.deleteConfirmation(id);
        },
        scheduleLitRequest: function () {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.scheduleLitRequest();
        },
        deleteLitRequest: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.deleteLitRequest(id);
        },
        goToLitRequest: function (id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.goToLitRequest(id);
        },
        goToActivityAssociation: function (association, id) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.goToActivityAssociation(association, id);
        },

        mergeRecords: function () {
            var panel = dijit.byId('list');
            if (panel) {
                var selectionInfo = panel.getSelectionInfo();

                if (selectionInfo.selectionCount === 2) {
                    var contextService = Sage.Services.getService("SelectionContextService");
                    contextService.setSelectionContext(selectionInfo.key, selectionInfo, this.mergeRecordsSelectionInfoCallback);
                    Sage.ClientLinkHandler.request({ request: 'MergeRecords', selectionInfoKey: selectionInfo.key });
                }
                else {
                    dialogs.showInfo(MasterPageLinks.Merge_Account_SelectionError);
                }
            }
        },
        mergeRecordsSelectionInfoCallback: function () {
            // client-side action
        },
        removeDeletedConfirmation: function (id) {
            Sage.ClientLinkHandler.request({ request: 'RemoveDeletedConfirmation', id: id });
        },
        getHelpUrl: function (topic, subsystem) {
            var urlfmt;
            /*if(subsystem) {
            urlfmt = dojoString.substitute('help/Subsystems/${0}/${0}_CSH.htm#${1}', [subsystem, topic]);
            return urlfmt;
            }*/

            urlfmt = utility.getClientContextByKey('WebHelpUrlFmt');
            if (urlfmt === '') {
                urlfmt = 'help/WebClient_CSH.htm#${0}';
            }
            return dojoString.substitute(urlfmt, [topic]);
        },
        getHelpUrlTarget: function () {
            var target = utility.getClientContextByKey('WebHelpLinkTarget');
            return (target === '') ? 'MCWebHelp' : target;
        },
        editSecurityProfile: function (childId, parentId, securityProfileId) {
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'EditSecurityProfile', selectionInfoKey: childId + ',' + parentId + ',' + securityProfileId });
        },
        getTeamMemberLink: function (entityType, entityId) {
            if (entityType.toLowerCase() == "user")
                Sage.ClientLinkHandler.request({ request: 'Administration', type: 'RedirectToUser', kind: entityType, id: entityId });
            else
                window.location.href = entityType + ".aspx?entityId=" + entityId;
        }
    };
    window.Link = Sage.Link;
    return Sage.Link;
});
},
'Sage/Utility/File/nls/DefaultDropHandler':function(){
﻿define("Sage/Utility/File/nls/DefaultDropHandler", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        emailDroppedText: 'Dropped Email',
        attachmentTitleText: 'Save Attachements',
         attachmentQuestionText: 'Would you like to keep a copy of these attachment(s) in SalesLogix? <br />The attachments will be stored under the Attachments tab for relevant entities.'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/MainView/ActivityMgr/RecurringEditor':function(){
require({cache:{
'url:Sage/MainView/ActivityMgr/templates/RecurringEditor.html':"﻿\r\n['<div>',\r\n    '<table style=\"width:100%\">',\r\n        '<tr>',\r\n            '<td class=\"recurring-selectors\">',  //radio buttons...\r\n                '<div>{%= $.activityOccurrsText %}</div>',\r\n                '<div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"None\" id=\"{%= $.id %}_rdo_Once\" dojoAttachPoint=\"rdo_Once\" checked=\"true\" dojoAttachEvent=\"onChange:_onceChanged\" />',  //  \r\n                    '<label for=\"{%= $.id %}_rdo_Once\">&nbsp;{%= $.onceText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"daily\" id=\"{%= $.id %}_rdo_Daily\" dojoAttachPoint=\"rdo_Daily\" dojoAttachEvent=\"onChange:_dailyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Daily\">&nbsp;{%= $.dailyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"weekly\" id=\"{%= $.id %}_rdo_Weekly\" dojoAttachPoint=\"rdo_Weekly\" dojoAttachEvent=\"onChange:_weeklyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Weekly\">&nbsp;{%= $.weeklyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"monthly\" id=\"{%= $.id %}_rdo_Monthly\" dojoAttachPoint=\"rdo_Monthly\" dojoAttachEvent=\"onChange:_monthlyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Monthly\">&nbsp;{%= $.monthlyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"yearly\" id=\"{%= $.id %}_rdo_Yearly\" dojoAttachPoint=\"rdo_Yearly\" dojoAttachEvent=\"onChange:_yearlyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Yearly\">&nbsp;{%= $.yearlyText %}</label>',\r\n                '</div>',\r\n            '</td>',\r\n            '<td>',  //panel for each different recurring type...\r\n                '<div dojoType=\"dijit.layout.StackContainer\" dojoAttachPoint=\"_panelContainer\" class=\"recurring-body\" >',\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_oncePanel\" class=\"recurring-panel\"  >',\r\n                        '{%= $.occursOnceText %}',\r\n                    '</div>',\r\n//daily panel...............................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_dailyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"dailyEvery\" value=\"days\" id=\"{%= $.id %}_rdoDailyEvery\" checked=\"true\" dojoAttachPoint=\"_rdoDailyEvery\" dojoAttachEvent=\"onChange:_dailyEveryChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoDailyEvery\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_dailyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.daysText %}</span>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"dailyEvery\" value=\"daysAfter\" id=\"{%= $.id %}_rdoDailyEveryAfter\" dojoAttachPoint=\"_rdoDailyEveryAfter\" />',\r\n                                '<label for=\"{%= $.id %}_rdoDailyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_dailyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.daysAfterText %}</span>',\r\n                            '</div>',\r\n                    '</div>',\r\n//weekly panel............................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_weeklyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"weeklyEvery\" value=\"weeksOn\" id=\"{%= $.id %}_rdoWeeklyEvery\" checked=\"true\" dojoAttachPoint=\"_rdoWeeklyEvery\" dojoAttachEvent=\"onChange:_weeklyEveryChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoWeeklyEvery\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_weeklyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.weeksOnText %}</span>',\r\n                        '</div>',\r\n                        '<div style=\"white-space:normal;padding-bottom:10px;\">',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkMonday\" value=\"mon\" id=\"{%= $.id %}_chkMonday\" dojoAttachPoint=\"_chkMonday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkMonday\" class=\"padded-inline-label\">{%= $.monText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkTuesday\" value=\"tue\" id=\"{%= $.id %}_chkTuesday\" dojoAttachPoint=\"_chkTuesday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkTuesday\" class=\"padded-inline-label\">{%= $.tueText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkWednesday\" value=\"wed\" id=\"{%= $.id %}_chkWednesday\" dojoAttachPoint=\"_chkWednesday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkWednesday\" class=\"padded-inline-label\">{%= $.wedText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkThursday\" value=\"thu\" id=\"{%= $.id %}_chkThursday\" dojoAttachPoint=\"_chkThursday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkThursday\" class=\"padded-inline-label\">{%= $.thurText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkFriday\" value=\"fri\" id=\"{%= $.id %}_chkFriday\" dojoAttachPoint=\"_chkFriday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkFriday\" class=\"padded-inline-label\">{%= $.friText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkSaturday\" value=\"sat\" id=\"{%= $.id %}_chkSaturday\" dojoAttachPoint=\"_chkSaturday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkSaturday\" class=\"padded-inline-label\">{%= $.satText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkSunday\" value=\"sun\" id=\"{%= $.id %}_chkSunday\" dojoAttachPoint=\"_chkSunday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkSunday\" class=\"padded-inline-label\">{%= $.sunText %}</label>',\r\n                            '</span>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"weeklyEvery\" value=\"weeksAfter\" id=\"{%= $.id %}_rdoWeeklyEveryAfter\" dojoAttachPoint=\"_rdoWeeklyEveryAfter\" />',\r\n                                '<label for=\"{%= $.id %}_rdoWeeklyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_weeklyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.weeksAfterText %}</span>',\r\n                        '</div>',\r\n                    '</div>',\r\n//monthly panel.........................................................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_monthlyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyOn\" id=\"{%= $.id %}_rdoMonthlyOn\" checked=\"true\" dojoAttachPoint=\"_rdoMonthlyOn\" dojoAttachEvent=\"onChange:_monthlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyOn\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsOnText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_datesSelect\" dojoAttachEvent=\"onChange:_calculateEnd\" maxHeight=\"300\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyOnThe\" id=\"{%= $.id %}_rdoMonthlyOnThe\" dojoAttachPoint=\"_rdoMonthlyOnThe\" />', // dojoAttachEvent=\"onChange:_monthlyOnChanged\"\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyOnThe\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyOnTheText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsOnTheText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_weeksSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_calculateEnd\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_weekdaySelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_calculateEnd\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyAfter\" id=\"{%= $.id %}_rdoMonthlyAfter\" dojoAttachPoint=\"_rdoMonthlyAfter\" dojoAttachEvent=\"onChange:_monthlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsAfterText %}</span>',\r\n                        '</div>',\r\n                    '</div>',\r\n// yearly panel..............\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_yearlyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyOn\" id=\"{%= $.id %}_rdoYearlyOn\" checked=\"true\" dojoAttachPoint=\"_rdoYearlyOn\" dojoAttachEvent=\"onChange:_yearlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyOn\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_yearlyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.yearsOnText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_monthNamesSelect\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" maxHeight=\"300\" dojoAttachPoint=\"_yearDatesSelect\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= ($.labelWidth - 3) %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyOnThe\" id=\"{%= $.id %}_rdoYearlyOnThe\" dojoAttachPoint=\"_rdoYearlyOnThe\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyOnThe\" class=\"padded-inline-label\">{%= $.theText %}</label>',\r\n                            '</div>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearWeeksSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearWeekdaySelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<label class=\"padded-inline-label\">{%= $.inText %}</label>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearMonthNamesSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyEveryAfter\" id=\"{%= $.id %}_rdoYearlyEveryAfter\" dojoAttachPoint=\"_rdoYearlyEveryAfter\" dojoAttachEvent=\"onChange:_yearlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_yearlyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.yearsAfterText %}</span>',\r\n                            '</div>',\r\n                    '</div>',\r\n                '</div>', //stack container\r\n// End date calculator section.........................................\r\n                '<div dojoAttachPoint=\"_startEndCalculator\" class=\"display-none\">',\r\n                    '<hr />',\r\n                    '<table>',\r\n                        '<tr>',\r\n                            '<td>{%= $.startRecurringText %}</td>',\r\n                            '<td>',\r\n                                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_StartRecur\" value=\"{%= $.startDate %}\" dojoAttachPoint=\"dtp_startRecur\" displayDate=\"true\" displayTime=\"false\" dojoAttachEvent=\"onChange:_recurringStartDateChanged\" readOnly=\"true\" ></div>',\r\n                            '</td>',\r\n                        '</tr>',\r\n                        '<tr>',\r\n                            '<td>',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"endRecur\" value=\"endAfterNum\" id=\"{%= $.id %}_rdoEndAfterNum\" dojoAttachPoint=\"_rdoEndAfter\" dojoAttachEvent=\"onChange:_endCalcModeChanged\" checked=\"true\" />',\r\n                                '<label for=\"{%= $.id %}_rdoEndAfterNum\" class=\"padded-inline-label\">{%= $.endAfterText  %}</label>',\r\n                            '</td><td>',\r\n                                '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"2\" constraints=\"{places: 0, type: \\'decimal\\', max: 999, min: 1}\" maxlength=\"3\" id=\"{%= $.id %}_num_Occurances\" dojoAttachPoint=\"num_Occurances\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_numOccurancesChanged\" />',\r\n                                '<span class=\"padded-inline-label\">{%= $.occurrencesText %}</span>',\r\n                            '</td>',\r\n                        '</tr><tr>',\r\n                            '<td>',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"endRecur\" value=\"endOn\" id=\"{%= $.id %}_rdoEndOn\" dojoAttachPoint=\"_rdoEndOn\" />',\r\n                                '<label for=\"{%= $.id %}_rdoEndOn\" class=\"padded-inline-label\">{%= $.endOnText %}</label>',\r\n                            '</td>',\r\n                            '<td>',\r\n                                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_EndRecur\" dojoAttachPoint=\"dtp_endRecur\" displayDate=\"true\" displayTime=\"false\" dojoAttachEvent=\"onChange:_endRecurChanged\" ></div>',\r\n                            '</td>',\r\n                        '</tr>',\r\n                    '</table>',\r\n                '</div>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</table>',\r\n'</div>']"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/RecurringEditor", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/dom-class',
    'Sage/Utility/Activity',
    'dijit/form/RadioButton',
    'Sage/UI/Controls/Numeric',
    'dijit/layout/StackContainer',
    'dijit/layout/ContentPane',
    'Sage/UI/NumberTextBox',
    'dijit/form/CheckBox',
    'dijit/form/Select',
    'Sage/UI/Controls/DateTimePicker',
    'dojo/date',
    'dojo/i18n!./nls/RecurringEditor',
    'dojo/text!./templates/RecurringEditor.html'
],
function (_Widget,
    _Templated,
    declare,
    lang,
    domClass,
    activityUtility,
    RadioButton,
    Numeric,
    StackContainer,
    ContentPane,
    NumberTextBox,
    CheckBox,
    Select,
    DateTimePicker,
    dDate,
    recurringEditorStrings,
    template
    ) {

    var _recurringCalculator = declare('Sage.MainView.ActivityMgr._RecurringCalculator', null, {
        startDate: new Date(),
        initialStartDate: new Date(),
        endDate: new Date(),
        interval: 1,
        occurances: 1,
        activityRecurPeriodCode: 0,
        recurPeriod: false,
        editor: false,
        constructor: function (opts) {
            lang.mixin(this, opts);
        },
        calculateEndDate: function () {
            //calculate the end date based on the start date and number of occurances...
            if (!isNaN(this.interval) && !isNaN(this.occurances) && this.recurPeriod) {
                this.endDate = dDate.add(this.startDate, this.recurPeriod, (this.interval * this.occurances) - this.interval);
            }
            return this.endDate || this.startDate;
        },
        calculateNumberOfOccurances: function () {
            //calculate the number of occurances based on the start date and end date...
            var dif = dDate.difference(this.startDate, this.endDate, this.recurPeriod);
            var occCount = (dif / this.interval) + 1;
            occCount = Math.floor(occCount);
            return occCount;
        },
        set: function (prop, val) {
            switch (prop.toLowerCase()) {
                case 'enddate':
                    //should we check to see if it is a date? ...or maybe convert from string to date?
                    this.endDate = val;
                    this.endDate.setHours(0);
                    this.endDate.setMinutes(0);
                    //this.calculateNumberOfOccurances();
                    break;
                case 'interval':
                    this.interval = val;
                    //this.calculateNumberOfOccurances();
                    break;
                case 'occurances':
                    this.occurances = val;
                    //this.calculateEndDate();
                    break;
                case 'startdate':
                    this.startDate = val;
                    this.startDate.setHours(0);
                    this.startDate.setMinutes(0);
                    break;
                case 'initialstartdate':
                    this.initialStartDate = val;
                    this.initialStartDate.setHours(0);
                    this.initialStartDate.setMinutes(0);
                    //now what?
                    break;
                case 'editor':
                    this.editor = val;
                    break;
                case 'activityrecurperiodcode':
                    this.activityRecurPeriodCode = val;
                    break;
            }
        },
        get: function (prop) {
            switch (prop.toLowerCase()) {
                case 'enddate':
                    //should we check to see if it is a date? ...or maybe convert from string to date?
                    return this.endDate;
                case 'interval':
                    return this.interval;
                case 'occurances':
                    return this.occurances;
                case 'startdate':
                    return this.startDate;
                case 'editor':
                    return this.editor;
                case 'activityRecurPeriodCode':
                    return this.activityRecurPeriodCode;
            }
            return false;
        },
        _getTempStartDate: function () {
            // returns a clone of the start date (no time) that can be manipulated for counting occurances
            return new Date(this.startDate.getFullYear(), this.startDate.getMonth(), this.startDate.getDate());
        }
    });

    var dailyRecurringCalculator = declare('Sage.MainView.ActivityMgr.DailyRecurringCalculator', _recurringCalculator, {
        recurPeriod: 'day'//,
        //        calculateNumberOfOccurances: function () {
        //            //... logic from legacy web client - actrecurdaily.js
        //            var day; // = this.startDate.getDate();
        //            var tempStart = this._getTempStartDate();
        //            var occurcount = 1;
        //            while (tempStart < this.endDate && occurcount < 999) {
        //                day = tempStart.getDate();
        //                tempStart.setDate(day + (this.interval * 1));
        //                occurcount++;
        //            }

        //            //... new logic - does it match?
        //            var occCount = this.inherited(arguments);

        //            console.warn('calculating daily occurances.  Old Logic: ' + occurcount + '     New Logic: ' + occCount);

        //            this.occurances = occurcount;
        //            return this.occurances;
        //        }
    });

    var weeklyRecurringCalculator = declare('Sage.MainView.ActivityMgr.WeeklyRecurringCalculator', _recurringCalculator, {
        recurPeriod: 'week',
        _checkedCount: 0,
        _checkedDays: {},
        calculateEndDate: function () {
            if (this.editor) {

                var checkedCount = this.editor.countCheckedDays();
                //if there is only one occurance per week, simple math will do...
                // if none are checked, assume one (the day of the start date)
                if (checkedCount < 2) {
                    if (!isNaN(this.interval) && !isNaN(this.occurances) && this.recurPeriod) {
                        this.endDate = dDate.add(this.startDate, this.recurPeriod, (this.interval * this.occurances) - this.interval);
                    }
                    return this.endDate || this.startDate;
                }
                //but if not, we never know how many of the occurances will be in the first or last weeks without digging in and counting...
                var checkedDays = this.editor.getCheckedDays();
                // (the array of 0's or 1's meaning the day is checked or not)
                var workingDate = this._getTempStartDate();
                //start off assuming the start date is the first occurance.
                var remaining = this.occurances - 1;
                while (remaining > 0) {
                    workingDate = dDate.add(workingDate, 'day', 1);
                    remaining = remaining - checkedDays[workingDate.getDay()]; //if that day is checked, it will lower the remaining.
                }
                return workingDate;
            }
            return this.endDate || this.startDate;
        } //,

        //        calculateNumberOfOccurances: function () { 
        //... ToDo: but neither method of counting is right if there are more than one occurances per week...
        // probably need to implement better logic...

        //            //... logic from Legacy web client - actrecurweekly.js
        //            var dateDiff = (this.endDate - this.startDate);
        //            var Age = Math.round(dateDiff / 86400000);
        //            var occurcount = (Age / (this.interval * 7));
        //            occurcount = (occurcount + 1);
        //            occurcount = Math.floor(occurcount);

        //            //... new logic - does it match?
        //            var occCount = this.inherited(arguments);

        //           
        //            console.warn('calculating weekly occurances.  Old Logic: ' + occurcount + '     New Logic: ' + occCount);

        //            this.occurances = occurcount;
        //            return occurcount;
        //        }

    });

    var monthlyRecurringCalculator = declare('Sage.MainView.ActivityMgr.MonthlyRecurringCalculator', _recurringCalculator, {
        recurPeriod: 'month',
        calculateStartDate: function () {
            var sDate = lang.clone(this.initialStartDate);
            var firstOccurrenceDate;
            var weekDate = parseInt(this.editor._datesSelect.get('value'), 10);
            var weekDay = parseInt(this.editor._weekdaySelect.get('value'), 10);
            var nthWeek = parseInt(this.editor._weeksSelect.get('value'), 10);

            if (this.editor._rdoMonthlyOn.get('checked')) {
                firstOccurrenceDate = this.getNthDayOfMonth(this.initialStartDate, weekDate);
                sDate = firstOccurrenceDate;
            } else if (this.editor._rdoMonthlyOnThe.get('checked')) {
                firstOccurrenceDate = activityUtility.setDateToNthWeekDay(this.initialStartDate, nthWeek, weekDay);

                firstOccurrenceDate.setHours(this.initialStartDate.getHours());
                firstOccurrenceDate.setMinutes(this.initialStartDate.getMinutes());
                //If first occurence falls before activity start date, update activity start date to first occurrance's date
                var dtCompare = dojo.date.compare(this.initialStartDate, firstOccurrenceDate, "date");
                if (dtCompare != 0) {
                    if (dtCompare > 0) {
                        sDate = this.calculateFirstOccurrance(this.initialStartDate, firstOccurrenceDate, nthWeek, weekDay);
                    } else {
                        sDate = firstOccurrenceDate;
                    }
                }
            }
            return sDate;
        },
        calculateEndDate: function () {
            var eDate = this.inherited(arguments);
            if (this.activityRecurPeriodCode === 5) {
                //adjust to the correct day of the correct week for this option. (eg. first friday or last tuesday of the month)
                var week = activityUtility.getNthWeekOfMonth(this.startDate);
                var day = this.startDate.getDay();
                eDate = activityUtility.setDateToNthWeekDay(eDate, week, day);
            }
            return eDate;
        },
        getNthDayOfMonth: function (startDate, dayNumber) {
            var firstOccurDate = lang.clone(startDate);
            var startDateDay = startDate.getDate();
            if (startDateDay > dayNumber) {
                firstOccurDate = dojo.date.add(startDate, "month", 1);
            }
            firstOccurDate.setDate(dayNumber);

            return firstOccurDate;
        },
        calculateFirstOccurrance: function (currentStartDate, currentFirstOccurranceDate, nthWeek, weekDay) {
            var nDate = currentFirstOccurranceDate;
            while (dojo.date.compare(this.initialStartDate, nDate, "date") > 0) {
                nDate = activityUtility.setDateToNthWeekDay(dojo.date.add(nDate, "month", 1), nthWeek, weekDay);
            }
            return nDate;
        }
    });

    var yearlyRecurringCalculator = declare('Sage.MainView.ActivityMgr.YearlyRecurringCalculator', _recurringCalculator, {
        recurPeriod: 'year',
        calculateEndDate: function () {
            var eDate = this.inherited(arguments);
            if (this.activityRecurPeriodCode === 8) {
                //adjust to the correct day of the correct week for this option. (eg. first friday or last tuesday of the month)
                var week = activityUtility.getNthWeekOfMonth(this.startDate);
                var day = this.startDate.getDay();
                eDate.setMonth(this.startDate.getMonth());
                eDate = activityUtility.setDateToNthWeekDay(eDate, week, day);
            }
            return eDate;
        }
    });

    /**
    * @class UI Editor for editing recurring properties of activities.  Intended to be the "Recurring" tab in a schedule/edit form for activities.
    */
    var recurringEditor = declare('Sage.MainView.ActivityMgr.RecurringEditor', [_Widget, _Templated], {
        /**
        * @property {object} activity - the activity object that is being edited
        */
        activity: {},
        id: '',
        /**
        * @property {string} indicates the width of the labels in the form.
        */
        labelWidth: '80',

        /**
        * @property {Date} Get or set the start date of the activity being edited.
        */
        startDate: new Date(),
        /**
        * @property {Int} Get or set the number of times this recurring activity occurs.
        */
        initialStartDate: new Date(),
        startDateChangedFromParent: false,
        occurances: 2,
        interval: 1,
        activityRecurPeriodCode: 0,
        recurringPeriods: {
            once: 'once',
            daily: 'daily',
            weekly: 'weekly',
            monthly: 'monthly',
            yearly: 'yearly'
        },
        currentPeriod: 'once',
        endCalculators: false,
        _applyingActivityData: false,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            lang.mixin(this, recurringEditorStrings);
        },
        postMixInProperties: function () {
            if (!this.endCalculators) {
                this.endCalculators = {};
                var config = {
                    startDate: this.startDate,
                    endDate: this.endDate,
                    interval: 1,
                    occurances: 1,
                    editor: this
                };
                this.endCalculators[this.recurringPeriods.daily] = new dailyRecurringCalculator(config);
                this.endCalculators[this.recurringPeriods.weekly] = new weeklyRecurringCalculator(config);
                this.endCalculators[this.recurringPeriods.monthly] = new monthlyRecurringCalculator(config);
                this.endCalculators[this.recurringPeriods.yearly] = new yearlyRecurringCalculator(config);
            }
        },

        // property getters and setters............................................................................
        _setStartDateAttr: function (newVal) {
            //when we notify that we've changed the start date, the main activity editor sets the time of the current activity to the new date, then fires
            // its change date functionality which sets this.  Make sure we don't keep cycling through an endless notification of changed dates.  We only
            // care about the date portion of the date anyway.
            if (newVal.getMonth() === this.startDate.getMonth() &&
                    newVal.getDate() === this.startDate.getDate() &&
                    newVal.getFullYear() === this.startDate.getFullYear()) {
                return;
            }
            //This flag is to prevent startdate change notification to parent which will keep cycling
            this.startDateChangedFromParent = true;            
            this._applyingActivityData = true;
            this.startDate = newVal;
            this.initialStartDate = newVal;
            this.dtp_startRecur.set('value', newVal);
            this._weeklySyncToStartDate();
            this._monthlySyncToStartDate();
            this._yearlySyncToStartDate();
            //this._calculateStartDate();
            this._calculateEnd();            
            this._applyingActivityData = false;
            //Set to true for enabling the start date change notification
            this.startDateChangedFromParent = false;

        },
        _getStartDateAttr: function () {
            return this.startDate;
        },
        _setOccurancesAttr: function (occ) {
            this.occurances = occ;
            this.num_Occurances.set('value', occ);
        },
        _getOccurancesAttr: function () {
            return this.occurances;
        },
        _setActivityAttr: function (activity) {
            //debugger;
            this.activity = activity;
            this._setUI();
            this._applyActivityData();
        },
        _getActivityAttr: function () {
            return this.activity;
        },
        onTabShow: function () {
            //should be called when this tab
            this._panelContainer.resize();
        },
        _setUI: function () {
            var opts = [];
            /*  add the appropriate select options  */
            if (this._datesSelect.getOptions().length < 1) {
                for (var i = 1; i < 32; i++) {
                    opts.push({
                        value: i.toString(),
                        label: i.toString()
                    });
                }
                this._datesSelect.addOption(opts);
                this._yearDatesSelect.addOption(opts);
            }
            if (this._monthNamesSelect.getOptions().length < 1) {
                opts = [
                    { value: '1', label: this.janText },
                    { value: '2', label: this.febText },
                    { value: '3', label: this.marText },
                    { value: '4', label: this.aprText },
                    { value: '5', label: this.mayText },
                    { value: '6', label: this.junText },
                    { value: '7', label: this.julText },
                    { value: '8', label: this.augText },
                    { value: '9', label: this.sepText },
                    { value: '10', label: this.octText },
                    { value: '11', label: this.novText },
                    { value: '12', label: this.decText }
                ];
                this._monthNamesSelect.addOption(opts);
                this._yearMonthNamesSelect.addOption(opts);
            }

            if (this._weeksSelect.getOptions().length < 1) {
                opts = [
                    { value: '1', label: this.firstText },
                    { value: '2', label: this.secondText },
                    { value: '3', label: this.thirdText },
                    { value: '4', label: this.fourthText },
                    { value: '5', label: this.lastText }
                ];
                this._weeksSelect.addOption(opts);
                this._yearWeeksSelect.addOption(opts);
            }
            if (this._weekdaySelect.getOptions().length < 1) {
                opts = [
                    { value: '1', label: this.monText },
                    { value: '2', label: this.tueText },
                    { value: '3', label: this.wedText },
                    { value: '4', label: this.thurText },
                    { value: '5', label: this.friText },
                    { value: '6', label: this.satText },
                    { value: '0', label: this.sunText }
                ];
                this._weekdaySelect.addOption(opts);
                this._yearWeekdaySelect.addOption(opts);
            }
        },

        // handling for recurring period radio buttons..............................................................
        _onceChanged: function (checked) {

            this._setUI();
            if (checked) {
                this._panelContainer.selectChild(this._oncePanel);
                this.interval = 1;
                this._updateRecurringPeriod(this.recurringPeriods.once);
            }
        },
        _dailyChanged: function (checked) {
            if (checked) {
                //console.log('daily is now checked');
                this._panelContainer.selectChild(this._dailyPanel);
                this._dailyUpdateInterval();
                this._updateRecurringPeriod(this.recurringPeriods.daily);
                this._toggleEndCalculatorVisibility(this._rdoDailyEvery.get('checked'));
            }
        },
        _dailyUpdateInterval: function () {
            this.interval = (this._rdoDailyEvery.get('checked')) ? this._dailyEveryText.get('value') : this._dailyEveryAfterText.get('value');
            if (isNaN(this.interval)) {
                this.interval = 1;
            }
        },
        _weeklyChanged: function (checked) {
            if (checked) {
                //console.log('weekly is now checked');
                this._panelContainer.selectChild(this._weeklyPanel);
                this._weeklyUpdateInterval();
                this._updateRecurringPeriod(this.recurringPeriods.weekly);
                this._toggleEndCalculatorVisibility(this._rdoWeeklyEvery.get('checked'));
            }
        },
        _weeklySyncToStartDate: function () {
            this._clearCheckedWeekdays();
            this._enforceWeekdayChecked();
        },
        _weeklyUpdateInterval: function () {
            this._enforceWeekdayChecked();
            this.interval = (this._rdoWeeklyEvery.get('checked')) ? this._weeklyEveryText.get('value') : this._weeklyEveryAfterText.get('value');
            if (isNaN(this.interval)) {
                this.interval = 1;
            }
        },
        _monthlyChanged: function (checked) {
            if (checked) {
                //console.log('monthly is now checked');
                this._panelContainer.selectChild(this._monthlyPanel);
                this._monthlyUpdateInterval();
                this._updateRecurringPeriod(this.recurringPeriods.monthly);
                this._toggleEndCalculatorVisibility(!this._rdoMonthlyAfter.get('checked'));
            }
        },
        _monthlyUpdateInterval: function () {
            this.interval = (this._rdoMonthlyOn.get('checked')) ? this._monthlyEveryText.get('value') :
                                (this._rdoMonthlyOnThe.get('checked')) ? this._monthlyOnTheText.get('value') : this._monthlyAfterText.get('value');
            if (isNaN(this.interval)) {
                this.interval = 1;
            }
        },
        _monthlySyncToStartDate: function () {
            this._datesSelect.set('value', this.startDate.getDate().toString());
            this._weekdaySelect.set('value', this.startDate.getDay().toString());
            this._weeksSelect.set('value', activityUtility.getNthWeekOfMonth(this.startDate).toString());

        },
        _yearlyChanged: function (checked) {
            if (checked) {
                //console.log('yearly is now checked');
                this._panelContainer.selectChild(this._yearlyPanel);
                this._yearlyUpdateInterval();
                this._updateRecurringPeriod(this.recurringPeriods.yearly);
                this._toggleEndCalculatorVisibility(!this._rdoYearlyEveryAfter.get('checked'));
            }
        },
        _yearlyUpdateInterval: function () {
            this.interval = (this._rdoYearlyOn.get('checked')) ? this._yearlyEveryText.get('value') :
                                (this._rdoYearlyEveryAfter.get('checked')) ? this._yearlyEveryAfterText.get('value') : 1;
        },
        _yearlySyncToStartDate: function () {
            this._monthNamesSelect.set('value', (this.startDate.getMonth() + 1).toString());
            this._yearDatesSelect.set('value', this.startDate.getDate().toString());
            this._yearWeeksSelect.set('value', activityUtility.getNthWeekOfMonth(this.startDate).toString());
            this._yearWeekdaySelect.set('value', this.startDate.getDay().toString());
            this._yearMonthNamesSelect.set('value', (this.startDate.getMonth() + 1).toString());
        },
        _updateRecurringPeriod: function (period) {
            //console.log('recurring period changed... ' + period);
            //console.log('recurring period changed, the interval is now ' + this.interval);
            this._toggleEndCalculatorVisibility(period !== this.recurringPeriods.once);

            this.currentPeriod = period;
            this._calculateEnd();
            this.onRecurPeriodChanged(period);
        },
        _toggleEndCalculatorVisibility: function (visible) {
            if (visible) {
                domClass.remove(this._startEndCalculator, 'display-none');
            } else {
                domClass.add(this._startEndCalculator, 'display-none');
            }
        },

        // data handling ......................................................................................
        // databinding controls when opening an existing activity for editing...
        _applyActivityData: function () {
            /* take the recurring information from the activity and set the controls appropriately  */
            /*
            RecurPeriod key:
            0 : Daily - every x days, end after n occurrences
            1 : Daily - every x days after completion
            2 : Weekly - every x weeks on day, end after n occurrences
            3 : Weekly - every x weeks after completion
            4 : Monthly - every x months, on day d, end after n occurrences
            5 : Monthly - every x months, on d'st, day, end after n occurrences
            6 : Monthly - every x months after completion
            7 : Yearly - every x years on mm/dd, end after n occurrences
            8 : Yearly - on the d'st day of mon, end after n occurrences
            9 : Yearly - every x years after completion
            */

            this._applyingActivityData = true;

            if (this.activity && this.activity.hasOwnProperty('Recurring')) {
                this.startDate = Sage.Utility.Convert.toDateFromString(this.activity.StartDate);
                this.initialStartDate = Sage.Utility.Convert.toDateFromString(this.activity.StartDate);
                if (this.activity.Timeless || activityUtility.isDateFiveSecondRuleTimeless(this.startDate)) {
                    this.startDate = new Date(this.startDate.getUTCFullYear(), this.startDate.getUTCMonth(), this.startDate.getUTCDate(), 0, 0, 5);
                }
                this.activityRecurPeriodCode = this.activity.RecurPeriod;
                this.dtp_startRecur.set('value', this.startDate);
                if (!this.activity.Recurring) {
                    this.rdo_Once.set('checked', true);
                    this._toggleEndCalculatorVisibility(false);
                    //set these up so they are ready if the user turns on recurring
                    this._resetInterval();
                    this._weeklySyncToStartDate();
                    this._monthlySyncToStartDate();
                    this._yearlySyncToStartDate();
                    this._applyingActivityData = false;
                    return;
                }
                this._toggleEndCalculatorVisibility(true);
                switch (this.activity.RecurPeriod) {
                    case 0:
                    case 1:
                        this._applyDailyRecurringValues();
                        break;
                    case 2:
                    case 3:
                        this._applyWeeklyRecurringValues();
                        break;
                    case 4:
                    case 5:
                    case 6:
                        this._applyMonthlyRecurringValues();
                        break;
                    case 7:
                    case 8:
                    case 9:
                        this._applyYearlyRecurringValues();
                        break;
                    default:
                        this.rdo_Once.set('checked', true);
                }
                this._applyingActivityData = false;
            }
            
        },
        _applyEndCalculatorValues: function () {
            this.dtp_startRecur.set('value', this.startDate);
            this._rdoEndAfter.set('checked', true);
            this.num_Occurances.set('value', this.activity.RecurIterations);
            this._calculateEnd();
        },
        _applyDailyRecurringValues: function () {
            //console.log('_applyDailyRecurringValues');
            this.rdo_Daily.set('checked', true);
            this._toggleEndCalculatorVisibility(this.activity.RecurPeriod === 0);
            this.interval = this.activity.RecurPeriodSpec;
            if (this.activity.RecurPeriod === 0) {
                this._rdoDailyEvery.set('checked', true);
                this._dailyEveryText.set('value', this.activity.RecurPeriodSpec);
                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 1) {
                this._rdoDailyEveryAfter.set('checked', true);
                this._dailyEveryAfterText.set('value', this.activity.RecurPeriodSpec);
            }
        },
        _weekDayValues: {
            sun: 131072,
            mon: 262144,
            tue: 524288,
            wed: 1048576,
            thu: 2097152,
            fri: 4194304,
            sat: 8388608
        },
        _resetInterval: function () {
            this._rdoDailyEvery.set('checked', true);
            this._dailyEveryText.set('value', "1");
            this._dailyEveryAfterText.set('value', "1");

            this._rdoWeeklyEvery.set('checked', true);
            this._weeklyEveryText.set('value', "1");
            this._weeklyEveryAfterText.set('value', "1");

            this._rdoMonthlyOn.set('checked', true);
            this._monthlyEveryText.set('value', "1");
            this._monthlyOnTheText.set('value', "1");
            this._monthlyAfterText.set('value', "1");

            this._rdoYearlyOn.set('checked', true);
            this._yearlyEveryText.set('value', "1");
            this._yearlyEveryAfterText.set('value', "1");

            this.num_Occurances.set('value', "2");
            this.occurances = 2;
            this._intervalChanged(2);

        },
        _clearCheckedWeekdays: function () {
            this._chkSaturday.set('checked', false);
            this._chkFriday.set('checked', false);
            this._chkThursday.set('checked', false);
            this._chkThursday.set('checked', false);
            this._chkWednesday.set('checked', false);
            this._chkTuesday.set('checked', false);
            this._chkMonday.set('checked', false);
            this._chkSunday.set('checked', false);
        },
        _applyWeeklyRecurringValues: function () {
            //console.log('_applyWeeklyRecurringValues');
            this.rdo_Weekly.set('checked', true);
            this._toggleEndCalculatorVisibility(this.activity.RecurPeriod === 2);
            //clear any checked days first...
            this._clearCheckedWeekdays();
            //set the weekly every radio button
            //evaluate the period spec number (and check the right days)
            this.interval = this._evalRecurperiodspec(this.activity.RecurPeriodSpec, this.activity.RecurPeriod);
            if (this.activity.RecurPeriod === 2) {
                this._rdoWeeklyEvery.set('checked', true);
                this._weeklyEveryText.set('value', this.interval);
                this._enforceWeekdayChecked();
                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 3) {
                this._rdoWeeklyEveryAfter.set('checked', true);
                this._weeklyEveryAfterText.set('value', this.interval);
            }
        },
        _evalRecurperiodspec: function (recspec, recperiod) {
            //  Figure out what days to check and reduce the RecurPeriodSpec number to the right number of weeks/months/years between occurances.
            //  Several periods need the number reduced, but only check the days for period 2.            
            if (recspec > this._weekDayValues['sat']) {
                recspec = recspec - this._weekDayValues['sat'];
                if (recperiod === 2) { this._chkSaturday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['fri']) {
                recspec = recspec - this._weekDayValues['fri'];
                if (recperiod === 2) { this._chkFriday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['thu']) {
                recspec = recspec - this._weekDayValues['thu'];
                if (recperiod === 2) { this._chkThursday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['wed']) {
                recspec = recspec - this._weekDayValues['wed'];
                if (recperiod === 2) { this._chkWednesday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['tue']) {
                recspec = recspec - this._weekDayValues['tue'];
                if (recperiod === 2) { this._chkTuesday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['mon']) {
                recspec = recspec - this._weekDayValues['mon'];
                if (recperiod === 2) { this._chkMonday.set('checked', true); }
            }
            if (recspec > this._weekDayValues['sun']) {
                recspec = recspec - this._weekDayValues['sun'];
                if (recperiod === 2) { this._chkSunday.set('checked', true); }
            }
            return recspec;
        },
        _applyMonthlyRecurringValues: function () {
            //console.log('_applyMonthlyRecurringValues');
            this.rdo_Monthly.set('checked', true);
            var recspec = this.activity.RecurPeriodSpec;
            if (this.activity.RecurPeriod === 4) {
                //check the Every x months on day n radio
                this._rdoMonthlyOn.set('checked', true);
                //figure out the number of months between occurances...
                recspec = this._evalRecurperiodspec(recspec, this.activity.RecurPeriod);
                if (recspec > 65000) {
                    recspec = recspec % 65536;
                }
                this._monthlyEveryText.set('value', recspec);

                // set the day...
                this._datesSelect.set('value', this.startDate.getDate().toString());
                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 5) {

                //debugger;

                //check the every x months on the radio
                this._rdoMonthlyOnThe.set('checked', true);


                var wDay = Math.floor(recspec / 524288) - 1;
                recspec = recspec % 524288;
                var mWeek = Math.floor(recspec / 65536);
                recspec = recspec % 65536;

                //select the n'st day select box
                mWeek++;
                this._weeksSelect.set('value', (mWeek).toString());

                // select the day of the week
                this._weekdaySelect.set('value', wDay.toString());

                //set the number of months between occurances...
                this._monthlyOnTheText.set('value', recspec);
                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 6) {
                //ToDo:
                // check the every x months after completion radio
                this._rdoMonthlyAfter.set('checked', true);
                if (recspec > 1048576) {
                    recspec = recspec - 1048576;
                    if (recspec > 1000) {
                        recspec = recspec % 65536;
                    }
                }
                this._monthlyAfterText.set('value', recspec);

            }
            this.interval = recspec;
            this._toggleEndCalculatorVisibility(this.activity.RecurPeriod !== 6);
        },
        _applyYearlyRecurringValues: function () {
            //console.log('_applyYearlyRecurringValues');
            var mon;
            this.rdo_Yearly.set('checked', true);
            var recspec = this.activity.RecurPeriodSpec;
            if (this.activity.RecurPeriod === 7) {
                //select the "every x years on" radio control
                this._rdoYearlyOn.set('checked', true);
                // number of years between occurances...
                if (recspec > 38797312) {
                    recspec = eval(recspec) - 38797312;
                } else {
                    recspec = eval(recspec) - 17825792;
                }
                if (recspec > 1000) {
                    recspec = this._evalRecurperiodspec(recspec, this.activity.RecurPeriod);
                    recspec = recspec % 65536;
                }
                this._yearlyEveryText.set('value', recspec);
                // set the month and day from the start date...
                mon = this.startDate.getMonth();
                mon++;
                this._monthNamesSelect.set('value', mon.toString());

                var d = this.startDate.getDate();
                this._yearDatesSelect.set('value', d.toString());

                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 8) {
                //ToDo: This should be right, but something is wrong - either in scheduling them in 7.5.4 or in this logic...
                this._rdoYearlyOnThe.set('checked', true);

                //                console.warn('ToDo: There appears to be problems with this option - Yearly recurring, selecting the n\'st weekday in month.  Check that these are saving correctly in 7.5.4 - they do not seem to be.');

                mon = Math.floor(recspec / 4194304);
                recspec = recspec % 4194304;
                var wDay = Math.floor(recspec / 524288) - 1;
                recspec = recspec % 524288;
                var mWeek = Math.floor(recspec / 65536);
                mWeek++;
                recspec = recspec % 65536;

                this._yearWeeksSelect.set('value', mWeek.toString());
                this._yearWeekdaySelect.set('value', wDay.toString());
                this._yearMonthNamesSelect.set('value', mon.toString());


                this._applyEndCalculatorValues();
            } else if (this.activity.RecurPeriod === 9) {
                this._rdoYearlyEveryAfter.set('checked', true);

                if (recspec > 38797312) {
                    recspec = recspec - 38797312;
                    if (recspec > 1000) {
                        recspec = this._evalRecurperiodspec(recspec, this.activity.RecurPeriod);
                        recspec = recspec % 65536;
                    }
                }
                this._yearlyEveryAfterText.set('value', recspec);

            }
            this.interval = recspec;
            this._toggleEndCalculatorVisibility(this.activity.RecurPeriod !== 9);
        },
        // end databinding controls when opening an existing activity for editing...





        // daily panel handling......................................................................................
        _dailyEveryChanged: function () {
            this._setDailyUI();
            this._applyChangesToActivity();
        },
        _setDailyUI: function () {
            //console.log('_setDailyUI');
            var dailyEveryChecked = this._rdoDailyEvery.get('checked');
            this._dailyEveryText.set('disabled', !dailyEveryChecked);
            this._dailyEveryAfterText.set('disabled', dailyEveryChecked);
            this._dailyUpdateInterval();
            this.activityRecurPeriodCode = this._rdoDailyEvery.get('checked') ? 0 : 1;
            this._toggleEndCalculatorVisibility(dailyEveryChecked);
        },
        // weekly panel handling ....................................................................................
        _weeklyEveryChanged: function () {
            this._setWeeklyUI();
            this._applyChangesToActivity();
        },
        _setWeeklyUI: function () {
            //console.log('_setWeeklyUI');
            var disable = !this._rdoWeeklyEvery.get('checked');
            this._weeklyEveryText.set('disabled', disable);
            this._chkMonday.set('disabled', disable);
            this._chkTuesday.set('disabled', disable);
            this._chkWednesday.set('disabled', disable);
            this._chkThursday.set('disabled', disable);
            this._chkFriday.set('disabled', disable);
            this._chkSaturday.set('disabled', disable);
            this._chkSunday.set('disabled', disable);

            this._weeklyEveryAfterText.set('disabled', !this._rdoWeeklyEveryAfter.get('checked'));
            this._enforceWeekdayChecked();
            this._weeklyUpdateInterval();
            this.activityRecurPeriodCode = this._rdoWeeklyEvery.get('checked') ? 2 : 3;
            this._toggleEndCalculatorVisibility(this._rdoWeeklyEvery.get('checked'));
        },
        _dayChecked: function () {
            this._enforceWeekdayChecked();
            this._calculateEnd();
        },
        _enforceWeekdayChecked: function () {
            var checkedCount = this.countCheckedDays();
            if (checkedCount < 1) {
                var d = this.startDate.getDay();
                switch (d) {
                    case 0:
                        this._chkSunday.set('checked', true);
                        break;
                    case 1:
                        this._chkMonday.set('checked', true);
                        break;
                    case 2:
                        this._chkTuesday.set('checked', true);
                        break;
                    case 3:
                        this._chkWednesday.set('checked', true);
                        break;
                    case 4:
                        this._chkThursday.set('checked', true);
                        break;
                    case 5:
                        this._chkFriday.set('checked', true);
                        break;
                    case 6:
                        this._chkSaturday.set('checked', true);
                        break;
                }
            }
            if (checkedCount > this.occurances) {
                this._setOccurancesAttr(checkedCount);
            }
        },
        getCheckedDays: function () {
            // returns an array of 7 numbers, either 0 or 1 corresponding to the whether
            // the corresponding day is checked or not; 1 means checked 0 means unchecked.
            // The number in the 0 position is sunday, 1 is monday etc.
            return [
                this._chkSunday.get('checked') ? 1 : 0, //'sun': 
                this._chkMonday.get('checked') ? 1 : 0, //'mon': 
                this._chkTuesday.get('checked') ? 1 : 0, //'tue': 
                this._chkWednesday.get('checked') ? 1 : 0, //'wed': 
                this._chkThursday.get('checked') ? 1 : 0, //'thu': 
                this._chkFriday.get('checked') ? 1 : 0, //'fri': 
                this._chkSaturday.get('checked') ? 1 : 0 //'sat': 
            ];
        },
        countCheckedDays: function () {
            var checkedCount = 0;
            var checkedDays = this.getCheckedDays();
            for (var i = 0; i < checkedDays.length; i++) {
                checkedCount += Number(checkedDays[i]);
            }
            return checkedCount;
        },
        // monthly panel handling...................................................................................
        _monthlyOnChanged: function () {
            this._setMonthlyUI();
            if (this._rdoMonthlyAfter.get('checked')) {       //for the other two cases, this has already happened.
                this._applyChangesToActivity();               //                                  <---<<<   <---<<<
            }
        },
        _setMonthlyUI: function () {
            //console.log('_setMonthlyUI');
            var disable = !this._rdoMonthlyOn.get('checked');
            this._monthlyEveryText.set('disabled', disable);
            this._datesSelect.set('disabled', disable);

            disable = !this._rdoMonthlyOnThe.get('checked');
            this._monthlyOnTheText.set('disabled', disable);
            this._weeksSelect.set('disabled', disable);
            this._weekdaySelect.set('disabled', disable);

            this._monthlyAfterText.set('disabled', !this._rdoMonthlyAfter.get('checked'));
            this._monthlyUpdateInterval();
            this.activityRecurPeriodCode = this._rdoMonthlyOn.get('checked') ? 4 : this._rdoMonthlyOnThe.get('checked') ? 5 : 6;
            this._toggleEndCalculatorVisibility(!this._rdoMonthlyAfter.get('checked'));
            if (this.activityRecurPeriodCode < 6) {
                this._calculateEnd();
            }
        },
        _monthlyValidateEndDate: function () {
            if (this.rdo_Monthly.get('checked')) {
                //ToDo:  this logic assumes that the month selected matches
                // the pattern.  For example, if the recurrence is every 6 months and they select
                // a date 7 months away, this will stay in the same month and show a date 
                // that is not actually in the recurrence pattern.
                // Incidentally, I tried the example above in 7.5.4 - and it set the date 5 years later
                // than the date I selected and set occurances to 10.  hmmmm...
                var endDate = this.dtp_endRecur.get('value');
                //console.log('validating end date for monthly recurring... %o', endDate);
                if (this._rdoMonthlyOn.get('checked')) {
                    //make sure the end date matches the date...
                    var correctDate = parseInt(this._datesSelect.get('value'), 10);
                    if (endDate.getDate() !== correctDate) {
                        endDate.setDate(correctDate);
                        this.dtp_endRecur.set('value', endDate);
                        //console.log('montly end date validation failed changing date to %o', endDate);
                        return false;
                    }
                } else if (this._rdoMonthlyOnThe.get('checked')) {
                    //make sure the end date matches the nth weekday...
                    var correctDay = parseInt(this._weekdaySelect.get('value'), 10);
                    var correctWeek = parseInt(this._weeksSelect.get('value'), 10);
                    if (activityUtility.getNthWeekOfMonth(endDate) !== correctWeek || endDate.getDay() !== correctDay) {
                        endDate = activityUtility.setDateToNthWeekDay(endDate, correctWeek, correctDay);
                        this.dtp_endRecur.set('value', endDate);
                        //console.log('montly end date validation failed changing date to %o', endDate);
                        return false;
                    }
                }
            }
            return true;
        },
        // yearly panel handling.....................................................................................
        _yearlyOnChanged: function () {
            this._setYearlyUI();
            this._applyChangesToActivity();
        },
        _setYearlyUI: function () {
            //console.log('_setYearlyUI');
            var disable = !this._rdoYearlyOn.get('checked');
            this._yearlyEveryText.set('disabled', disable);
            this._monthNamesSelect.set('disabled', disable);
            this._yearDatesSelect.set('disabled', disable);

            disable = !this._rdoYearlyOnThe.get('checked');
            this._yearWeeksSelect.set('disabled', disable);
            this._yearWeekdaySelect.set('disabled', disable);
            this._yearMonthNamesSelect.set('disabled', disable);

            this._yearlyEveryAfterText.set('disabled', !this._rdoYearlyEveryAfter.get('checked'));
            this._yearlyUpdateInterval();
            this.activityRecurPeriodCode = this._rdoYearlyOn.get('checked') ? 7 : this._rdoYearlyOnThe.get('checked') ? 8 : 9;
            this._toggleEndCalculatorVisibility(!this._rdoYearlyEveryAfter.get('checked'));
        },
        _yearlyValidateEndDate: function () {
            var valid = true;
            if (this.rdo_Yearly.get('checked')) {
                var endDate = this.dtp_endRecur.get('value');
                var mon = this.startDate.getMonth();
                if (endDate.getMonth() !== mon) {
                    valid = false;
                    endDate.setMonth(mon);
                }
                if (this._rdoYearlyOn.get('checked')) {
                    var dt = this.startDate.getDate();
                    if (endDate.getDate !== dt) {
                        valid = false;
                        endDate.setDate(dt);
                    }
                } else if (this._rdoYearlyOnThe.get('checked')) {
                    //make sure the end date matches the nth weekday...
                    var correctDay = parseInt(this._yearWeekdaySelect.get('value'), 10);
                    var correctWeek = parseInt(this._yearWeeksSelect.get('value'), 10);
                    if (activityUtility.getNthWeekOfMonth(endDate) !== correctWeek || endDate.getDay() !== correctDay) {
                        valid = false;
                        endDate = activityUtility.setDateToNthWeekDay(endDate, correctWeek, correctDay);
                    }
                }
                if (!valid) {
                    this.dtp_endRecur.set('value', endDate);
                }
            }
            return valid;
        },
        _yearlyRecurDateChanged: function () {
            // avoid changing the start date before things have settled down...            
            if (this._applyingActivityData) { return; }
            var month, changed = false;
            //debugger;
            var tempStartDate = new Date(this.startDate.getFullYear(), this.startDate.getMonth(), this.startDate.getDate());
            if (this._rdoYearlyOn.get('checked')) {
                //get the date characteristics from the "every x years on" section...
                month = parseInt(this._monthNamesSelect.get('value'), 10) - 1;
                var dt = parseInt(this._yearDatesSelect.get('value'), 10);
                if (tempStartDate.getMonth() !== month) {
                    tempStartDate.setMonth(month);
                    changed = true;
                }
                if (tempStartDate.getDate() !== dt) {
                    tempStartDate.setDate(dt);
                    changed = true;
                }

            } else if (this._rdoYearlyOnThe.get('checked')) {
                //get the date characteristics from the "The n'st weekday in month" section...
                month = parseInt(this._yearMonthNamesSelect.get('value'), 10) - 1;
                if (tempStartDate.getMonth() !== month) {
                    tempStartDate.setMonth(month);
                    changed = true;
                }
                var dy = parseInt(this._weekdaySelect.get('value'), 10);
                var wk = parseInt(this._weeksSelect.get('value'), 10);
                var compareDate = activityUtility.setDateToNthWeekDay(tempStartDate, wk, dy);
                if (tempStartDate.getDate() !== compareDate.getDate()) {
                    if (compareDate < new Date()) {
                        compareDate = dDate.add(compareDate, 'year', 1);
                        compareDate = activityUtility.setDateToNthWeekDay(compareDate, wk, dy);
                    }
                    tempStartDate = compareDate;
                    changed = true;
                }
            }
            if (changed) {
                //if it is in the past, add a year...
                if (tempStartDate < new Date()) {
                    tempStartDate = dDate.add(tempStartDate, 'year', 1);
                }

                //console.log('one of the yearly recurring select boxes has been changed - causing the start date to change.');

                if (!this.startDateChangedFromParent) {
                    this.onStartDateChanged(tempStartDate);
                }

            }
        },
        // common ui handling........................................................................................
        _intervalChanged: function (newVal) {
            // occurs when the interval value changes on any recurring type.
            this.interval = newVal;
            this._calculateEnd();
        },
        _recurringStartDateChanged: function (newStart) {
            //console.log('firing onStartDateChanged...');
            if (!this.startDateChangedFromParent) {
                this.onStartDateChanged(newStart);
            }
        },
        _endCalcModeChanged: function () {

        },
        _numOccurancesChanged: function (occurances) {
            this.occurances = occurances;
            this._calculateEndDate();
        },
        _endRecurChanged: function (newEnd) {
            if (this._rdoEndOn.get('checked')) {
                if (this._monthlyValidateEndDate() && this._yearlyValidateEndDate()) {
                    this._calculateOccurances();
                }
            }
        },
        _calculateEnd: function () {
            if (this.currentPeriod === 'once') {
                this._applyChangesToActivity();
                return;
            }
            if (this._rdoEndAfter.get('checked')) {
                if (this.rdo_Monthly.get('checked') && !this.startDateChangedFromParent) {
                    this._calculateStartDate();
                }
                this._calculateEndDate();
            } else {
                this._calculateOccurances();
            }
        },
        _calculateStartDate: function () {
            var calculator = this.endCalculators[this.currentPeriod];
            if (calculator && this._rdoEndAfter.get('checked')) {
                this._applyCurrentValuesToCalculator(calculator);
                calculator.set('occurances', this.occurances);
                var startDate = calculator.calculateStartDate();
                this.startDate = startDate;
                this.dtp_startRecur.set('value', startDate);
                if (!this.startDateChangedFromParent) {
                    this.onStartDateChanged(startDate);
                }
            }

        },
        _calculateEndDate: function () {
            var calculator = this.endCalculators[this.currentPeriod];
            if (calculator && this._rdoEndAfter.get('checked')) {
                this._applyCurrentValuesToCalculator(calculator);
                calculator.set('occurances', this.occurances);
                var endDate = calculator.calculateEndDate();
                this.dtp_endRecur.set('value', endDate);
                //IS THIS THE RIGHT PLACE TO CALL THIS?????????????????????   <---<<<   <---<<<
                this._applyChangesToActivity();
            }
        },
        _applyCurrentValuesToCalculator: function (calculator) {
            calculator.set('startDate', this.startDate);
            calculator.set('initialStartDate', this.initialStartDate);
            calculator.set('interval', this.interval);
            calculator.set('activityRecurPeriodCode', this.activityRecurPeriodCode);
        },
        _calculateOccurances: function () {
            var calculator = this.endCalculators[this.currentPeriod];
            if (calculator && this._rdoEndOn.get('checked')) {
                this._applyCurrentValuesToCalculator(calculator);
                calculator.set('endDate', this.dtp_endRecur.get('value'));
                var occ = 1;
                if (calculator.endDate < calculator.startDate) {
                    this.dtp_endRecur.set('value', this.startDate);
                } else {
                    occ = calculator.calculateNumberOfOccurances();
                }
                this.occurances = occ;
                this.num_Occurances.set('value', occ);
                //IS THIS THE RIGHT PLACE TO CALL THIS?????????????????????   <---<<<   <---<<<
                this._applyChangesToActivity();
            }
        },
        _applyChangesToActivity: function () {
            //calculate and set the values of the Recurring fields on the activity
            if (this._applyingActivityData) { return; }
            //console.log('calculating and applying recurring data to activity...');
            if (this.rdo_Once.get('checked')) {
                this.activity.RecurIterations = 0;
                this.activity.RecurPeriod = 0;
                this.activity.RecurPeriodSpec = 0;
                this.activity.Recurring = false;
                return;
            }

            var recperiod = this._getCurrentRecperiod();
            this.activity.RecurPeriod = recperiod;
            var modifier = 0;
            var occurances = this.num_Occurances.get('value');
            switch (recperiod) {
                case 0:
                case 1:
                    this._dailyUpdateInterval();
                    if (recperiod === 1) { occurances = -1; }
                    break;
                case 2:
                    modifier = this._sumWeekDays();
                    this._weeklyUpdateInterval();
                    break;
                case 3:
                    modifier = 1048576;
                    this._weeklyUpdateInterval();
                    occurances = -1;
                    break;
                case 4:
                    modifier = 1048576;
                    this._monthlyUpdateInterval();
                    break;
                case 5:
                    modifier = this._sumMonthly();
                    this._monthlyUpdateInterval();
                    break;
                case 6:
                    modifier = 1048576;
                    this._monthlyUpdateInterval();
                    occurances = -1;
                    break;
                case 7:
                    modifier = 38797312;
                    this._yearlyUpdateInterval();
                    break;
                case 8:
                    modifier = this._sumYearly();
                    this.interval = 1;
                    break;
                case 9:
                    modifier = 38797312;
                    this._yearlyUpdateInterval();
                    occurances = -1;
                    break;
            }
            this.activity.RecurIterations = occurances;
            this.activity.RecurPeriodSpec = modifier + this.interval;
            this.activity.Recurring = true;

            //            console.log('calculated and applied the recuring properties of activity.  interval: ' + this.interval);
            //            console.log('RecurIterations: ' + occurances);
            //            console.log('RecurPeriod: ' + recperiod);
            //            console.log('RecurPeriodSpec: ' + this.activity.RecurPeriodSpec);

        },
        _getCurrentRecperiod: function () {
            if (this.rdo_Daily.get('checked')) {
                return (this._rdoDailyEvery.get('checked')) ? 0 : 1;
            }
            if (this.rdo_Weekly.get('checked')) {
                return (this._rdoWeeklyEvery.get('checked')) ? 2 : 3;
            }
            if (this.rdo_Monthly.get('checked')) {
                return (this._rdoMonthlyOn.get('checked')) ? 4 :
                            (this._rdoMonthlyOnThe.get('checked')) ? 5 : 6;
            }
            if (this.rdo_Yearly.get('checked')) {
                return (this._rdoYearlyOn.get('checked')) ? 7 :
                                (this._rdoYearlyOnThe.get('checked')) ? 8 : 9;
            }
            return 0;
        },
        _sumWeekDays: function () {
            var result = 0;
            if (this._chkSaturday.get('checked')) {
                result += this._weekDayValues['sat'];
            }
            if (this._chkFriday.get('checked')) {
                result += this._weekDayValues['fri'];
            }
            if (this._chkThursday.get('checked')) {
                result += this._weekDayValues['thu'];
            }
            if (this._chkWednesday.get('checked')) {
                result += this._weekDayValues['wed'];
            }
            if (this._chkTuesday.get('checked')) {
                result += this._weekDayValues['tue'];
            }
            if (this._chkMonday.get('checked')) {
                result += this._weekDayValues['mon'];
            }
            if (this._chkSunday.get('checked')) {
                result += this._weekDayValues['sun'];
            }
            //console.log('sum week days: ' + result);
            return result;
        },
        _getNthOccurenceOfWeekDay: function () {
            var weekDay = parseInt(this._weekdaySelect.get('value'), 10);
            var nthWeek = parseInt(this._weeksSelect.get('value'), 10);
            var today = new Date();

            for (var i = 0; i < 7; i++) {
                var d = new Date(today.getFullYear(), today.getMonth(), i + 1);
                if (d.getDay() == weekDay) {
                    return dojo.date.add(d, "day", ((nthWeek - 1) * 7));
                }
            }

        },
        _sumMonthly: function () {
            // used to determine the value for periodspec for activities that occur
            // monthly every nth weekday (i.e. every 3 months on the 3rd Friday).

            var weekDay = parseInt(this._weekdaySelect.get('value'), 10) + 1;
            var nthWeek = parseInt(this._weeksSelect.get('value'), 10);
            return ((weekDay * 524288) + ((nthWeek - 1) * 65536));
        },
        _sumYearly: function () {
            // returns the value for recperiodspec for activities that occur
            // yearly every nth weekday of a specific month (i.e. every 3rd Friday of September).

            var weekDay = parseInt(this._yearWeekdaySelect.get('value'), 10) + 1;
            var monthNum = parseInt(this._yearMonthNamesSelect.get('value'), 10);
            var nthWeek = parseInt(this._yearWeeksSelect.get('value'), 10);
            return ((monthNum * 4194304) + (weekDay * 524288) + ((nthWeek - 1) * 65536));

        },
        _setReadOnly: function (readOnly) {
            var recurringDisableList = ["rdo_Once", "rdo_Daily", "rdo_Weekly", "rdo_Monthly", "rdo_Yearly", "_rdoDailyEvery", "_dailyEveryText", "_rdoDailyEveryAfter", "_dailyEveryAfterText", "_rdoWeeklyEvery", "_weeklyEveryText", "_chkMonday", "_chkTuesday", "_chkWednesday", "_chkThursday", "_chkFriday", "_chkSaturday", "_chkSunday", "_rdoWeeklyEveryAfter", "_weeklyEveryAfterText", "_rdoMonthlyOn", "_monthlyEveryText", "_datesSelect", "_rdoMonthlyOnThe", "_monthlyOnTheText", "_weeksSelect", "_weekdaySelect", "_rdoMonthlyAfter", "_monthlyAfterText", "_rdoYearlyOn", "_yearlyEveryText", "_monthNamesSelect", "_yearDatesSelect", "_rdoYearlyOnThe", "_yearWeeksSelect", "_yearWeekdaySelect", "_yearMonthNamesSelect", "_rdoYearlyEveryAfter", "_yearlyEveryAfterText", "dtp_startRecur", "_rdoEndAfter", "num_Occurances", "_rdoEndOn", "dtp_endRecur"];
            if (readOnly) {
                this._bulkSetProperty(this, recurringDisableList, 'disabled', true);
            } else {
                this._bulkSetProperty(this, recurringDisableList, 'disabled', false);
                this._setUI();
                this._applyActivityData();
            }
        },
        _bulkSetProperty: function (ui, propsList, prop, val) {
            for (var i = 0; i < propsList.length; i++) {
                var ctrl = ui[propsList[i]];
                if (ctrl) {
                    ctrl.set(prop, val);
                }
            }
        },
        // events for main editor...
        onStartDateChanged: function (newStartDate) { },
        onRecurPeriodChanged: function (newRecPer) { }
    });
    return recurringEditor;
});
},
'Sage/UI/Controls/Lookup':function(){
require({cache:{
'url:Sage/UI/Controls/templates/Lookup.html':"<div class=\"textcontrol lookup\">\r\n    <span id=\"${id}\" class=\"lookup\">\r\n        <input id=\"${id}_LookupText\" class=\"text-with-icons\" required=\"${required}\" type=\"text\" dojoAttachPoint=\"textbox,focusNode\" />\r\n        <a href=\"#\">\r\n            <img id=\"${id}_LookupBtn\" src=\"images/icons/Find_16x16.png\" dojoAttachPoint=\"lookupButton\" alt=\"${buttonToolTip}\" title=\"${buttonToolTip}\" />\r\n        </a>\r\n        \r\n        <img id=\"${id}_btnClearResult\" src=\"images/icons/Delete_16x16.png\" dojoAttachPoint=\"clearButton\" class=\"display-none\" alt=\"${closeButtonToolTip}\" title=\"${closeButtonToolTip}\"/>\r\n    </span>\r\n</div>"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Lookup", [
    'dijit/_TemplatedMixin',
    'dijit/_WidgetsInTemplateMixin',
    'dijit/_Widget',
    'Sage/UI/ConditionManager',
    'Sage/UI/SDataLookup',
    'dojo/dom-attr',
    'Sage/UI/Controls/EntityInfoToolTip',
    'dojo/i18n!./nls/Lookup',
    'dojo/text!./templates/Lookup.html',
    'dojo/_base/declare'
],
function (_TemplatedMixin, _WidgetsInTemplateMixin, _Widget, conditionManager, _SDataLookup, domAttr, EntityInfoToolTip, i18nStrings, template, declare) {
    var widget = declare('Sage.UI.Controls.Lookup', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {

        /**
        * @property {string} DOM id of control
        */
        id: 'lookup',

        /**
        * @property {object} SDataLookup configuration object 
        */
        config: null,

        /**
        * @property {object} SDataLookup results object 
        */
        selectedObject: null,

        /**
        * @property {bool} showEntityInfoTooltip 
        */
        showEntityInfoToolTip: false,

        disabled: false,
        required: false,

        allowClearingResult: false,

        //i18n strings...
        buttonToolTip: 'Find',
        closeButtonToolTip: 'Remove',

        //end i18n strings
        _tooltip: false,

        _setSelectedObjectAttr: function (value) {
            this.textbox.value = (value) ? value.$descriptor : '';
            this.selectedObject = value;
            this._onChange(value);
        },

        _getSelectedObjectAttr: function () {
            return this.selectedObject;
        },

        _setShowEntityInfoToolTipAttr: function (showTooltip) {
            this.showEntityInfoToolTip = showTooltip;
            if (!this.domNode) {
                return;
            }
            this._tooltip = (showTooltip) ? this._createToolTip() : false;
        },
        _getShowEntityInfoToolTipAttr: function () {
            return this.showEntityInfoToolTip;
        },
        _createToolTip: function () {
            return new EntityInfoToolTip({
                connectId: [this.domNode],
                position: ['below'],
                entityName: this.config.storeOptions.resourceKind,
                entityId: (this.selectedObject && this.selectedObject['$key']) ? this.selectedObject['$key'] : ''
            });
        },

        _setAllowClearingResultAttr: function (allow) {
            this.allowClearingResult = allow;
            if (allow) {
                dojo.removeClass(this.clearButton, 'display-none');
            } else {
                dojo.addClass(this.clearButton, 'display-none');
            }
        },

        _getAllowClearingResultAttr: function () {
            return this.allowClearingResult;
        },

        _setDisabledAttr: function (value) {
            this.disabled = value;
            domAttr.set(this.focusNode, 'disabled', value);
            this.focusNode.setAttribute("aria-disabled", value);
            if (value) {
                dojo.style(this.clearButton, 'visibility', 'hidden');
                dojo.style(this.clearButton, 'display', 'none');
                dojo.style(this.lookupButton, 'visibility', 'hidden');
                dojo.style(this.lookupButton, 'display', 'none');
            } else {
                dojo.style(this.clearButton, 'visibility', '');
                dojo.style(this.clearButton, 'display', '');
                dojo.style(this.lookupButton, 'visibility', '');
                dojo.style(this.lookupButton, 'display', '');
            }
        },
        _getDisabledAttr: function () {
            return this.disabled;
        },
        _onChange: function (value) {
            if (this._tooltip) {
                this._tooltip.set('entityId', (value && value['$key']) ? value['$key'] : '');
            }
            this.onChange(value);
        },

        /**
        * Fires when lookup results are set or selectedObject is set.
        * @event
        */
        onChange: function (value) {
        },

        // Display properties
        templateString: template,
        widgetsInTemplate: false,

        /**
        *
        * @constructor
        */
        constructor: function (options) {
            this.inherited(arguments);
            dojo.mixin(this, i18nStrings);
        },

        //To force closetooltip
        hideTooltip: function () {
            if (this._tooltip) {
                this._tooltip.close();
            }
        },
        postCreate: function () {
            var self = this;

            dojo.connect(this.lookupButton, 'onclick', this.lookupButton, function () {
                if (!self.get('disabled')) {
                    var lookup = new _SDataLookup(self.config);
                    lookup.doSelected = function (items) {
                        self.set('selectedObject', items[0]);
                        lookup.lookupDialog.hide();
                        //lookup.destroy();
                    };

                    lookup.showLookup();
                    var handle = dojo.connect(lookup.lookupDialog, 'onHide', lookup, function () { dojo.disconnect(handle); this.destroy(); });
                }
            }, true);

            dojo.connect(this.clearButton, 'onclick', null, function () {
                if (!self.get('disabled')) {
                    self.textbox.value = '';
                    self.set('selectedObject', null);
                }
            }, true);
        }
    });

    return widget;
});

},
'Sage/Utility/Activity':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/Activity", [
    'dojo/date/locale',
    'dojox/grid/cells/_base',
    'Sage/Utility',
    'dojo/string',
    'dojo/i18n!./nls/Activity',
    'dojo/_base/declare'
],
function (dateLocale, cell, utility, dstring, nlsStrings, declare) {
    var isValidId = function (id) {
        var valid = false;
        if (id) {
            if (id.trim() !== '') {
                valid = true;
            }
        }
        return valid;
    };
    var typeCell = declare("Sage.Utility.Activity.TypeCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            //console.log('index: ' + inRowIndex + '   item: %o', inItem);
            if (!inItem) {
                return this.defaultValue;
            }
            var type = this.get(inRowIndex, inItem);
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var key = utility.getValue(activity, "$key");
            var confStatus = (inItem.hasOwnProperty('Status')) ? inItem.Status : false;
            var fmtStr = '<a href="${0}" ><div class="Global_Images icon16x16 ${1}" title="${2}"></div>&nbsp;${2}</a>';

            //Determine the recurrnece context, se we pass the correct recurring flag so that the reocrrnce dlg will be not be shown if there is no ending to the reocurrnce. 
            var reocState = Sage.Utility.getValue(activity, 'RecurrenceState');
            var recurring = Sage.Utility.Activity._getReccurenceFlag(activity);
            //typically, we will want to edit the activity
            var href = 'javascript:Sage.Link.editActivity(\'' + key + '\', ' + recurring + ')';
            if (confStatus) {
                var curUser = utility.getClientContextByKey('userID');
                //assume the current user is who the useractivity is for...
                var actUser = (inItem.hasOwnProperty['User']) ? inItem.User['$key'] : curUser;
                //if the current user has not confirmed the activity, then they need to confirm it before editing.
                if (confStatus === 'asUnconfirmed' && curUser === actUser) {
                    href = 'javascript:Sage.Link.confirmActivityFor(\'' + key + '\', \'' + curUser + '\')';
                }
            } else {
                //if we don't know if the user has confirmed or not, let the activity service check...
                href = 'javascript:Sage.Link.editActivityIfConfirmed(\'' + key + '\', ' + recurring + ')';
            }
            return dstring.substitute(fmtStr, [href, Sage.Utility.Activity.getActivityImageClass(type, 'small'), Sage.Utility.Activity.getActivityTypeName(type)]);
        }
    });
    var historyTypeCell = declare('Sage.Utility.Activity.HistoryTypeCell', dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var key = utility.getValue(inItem, '$key');
            var type = utility.getValue(inItem, 'Type');
            var typeDisp = Sage.Utility.Activity.getActivityTypeName(type);
            var fmt = '<a href="javascript:Sage.Link.editHistory(\'${0}\')" ><div class="Global_Images icon16x16 ${1} title="${2}"></div>&nbsp;${2}</a>';
            return dstring.substitute(fmt, [key, Sage.Utility.Activity.getActivityImageClass(type, 'small'), typeDisp]);
        }
    });
    var alarmCell = declare('Sage.Utility.Activity.AlarmCell', cell, {
        formatter: function (val, index) {
            return (val) ? "<img src='images/icons/Alarm_16x16.gif'/>" : "<div><div>";
        }
    });
    var recurCell = declare("Sage.Utility.Activity.RecurCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var html = "";
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var recur = utility.getValue(activity, 'Recurring');
            var recurState = utility.getValue(activity, 'RecurrenceState');
            if (recur || (recurState && recurState === 'rstOccurrence')) {
                html = '<div class="Global_Images icon16x16 icon_recurring"></div>';
            }
            return html;
        }
    });
    var attachCell = declare("Sage.Utility.Activity.AttachCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var html = "<div><div>";
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var attach = utility.getValue(activity, 'Attachment');
            if (attach) {
                html = '<div class="Global_Images icon16x16 icon_attach_to_16"></div>';
            }
            return html;
        }
    });
    var confrimStatusCell = declare("Sage.Utility.Activity.ConfrimStatusCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var html = "<div><div>";
            var status = utility.getValue(inItem, 'Status');
            if (status === 'asUnconfirmed') {
                html = '<div class="Global_Images icon16x16 icon_unconfirmedActivity16x16"></div>';
            }
            return html;
        }
    });
    var durationCell = declare("Sage.Utility.Activity.DurationCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var durationStr = "";
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var duration = utility.getValue(activity, 'Duration');
            if (duration) {
                var timeless = utility.getValue(activity, 'Timeless');
                durationStr = Sage.Utility.Activity.formatDuration(duration, timeless);
            }
            return durationStr;
        }
    });
    var nameCell = declare("Sage.Utility.Activity.NameCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var contact = utility.getValue(activity, 'ContactName');
            var contactId = utility.getValue(activity, 'ContactId');
            if (isValidId(contactId)) {
                return '<a href="Contact.aspx?entityid=' + contactId + '" >' + contact + '</a>';
            }
            var lead = utility.getValue(activity, 'LeadName');
            var leadId = utility.getValue(activity, 'LeadId');
            if (isValidId(leadId)) {
                return '<a href="Lead.aspx?entityid=' + leadId + '" >' + lead + '</a>';
            }
            return "<div></div> ";
        }
    });
    var nameTypeCell = declare("Sage.Utility.Activity.NameTypeCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var contactId = utility.getValue(activity, 'ContactId');
            if (isValidId(contactId)) {
                return nlsStrings.Contact;
            }
            var leadId = utility.getValue(activity, 'LeadId');
            if (isValidId(leadId)) {
                return nlsStrings.Lead;
            }
            return '';
        }
    });
    var accountCell = declare("Sage.Utility.Activity.AccountCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
            var account = utility.getValue(activity, 'AccountName');
            var accountId = utility.getValue(activity, 'AccountId');
            var html = '';
            if (isValidId(accountId)) {
                html = '<a href="Account.aspx?entityid=' + accountId + '" >' + account + '</a>';
            }
            var leadId = utility.getValue(activity, 'LeadId');
            if (isValidId(leadId)) {
                html = '<a href="Lead.aspx?entityid=' + leadId + '" >' + account + '</a>';
            }
            return html;
        }
    });
    var leaderCell = declare("Sage.Utility.Activity.LeaderCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : null;
            var leader;

            if (activity) {
                leader = utility.getValue(activity, "Leader");
            } else {
                leader = (inItem.hasOwnProperty('Leader') && typeof inItem['Leader'] === 'object') ? inItem.Leader : inItem;
            }
            var leaderName = utility.getValue(leader, '$descriptor');
            return leaderName;
        }
    });
    var completeCell = declare("Sage.Utility.Activity.CompleteCell", dojox.grid.cells.Cell, {
        format: function (inRowIndex, inItem) {
            if (!inItem) {
                return this.defaultValue;
            }
            var key = utility.getValue(inItem, '$key');
            if (isValidId(key)) {
                var activity = (inItem.hasOwnProperty('Activity') && typeof inItem['Activity'] === 'object') ? inItem.Activity : inItem;
                return dstring.substitute('<a href="javascript:Sage.Link.completeActivity(\'${0}\', ${1})">${2}</a>', [key, utility.getValue(activity, 'Recurring'), nlsStrings.Complete]);
            }
            return '';
        }
    });
    Sage.namespace('Utility.Activity');
    return Sage.Utility.Activity = {
        timelessText: 'timeless',
        _imageMap: {
            small: {
                'atNote': 'images/icons/note_16x16.gif',
                'atPhoneCall': 'images/icons/Call_16x16.gif',
                'atToDo': 'images/icons/To_Do_16x16.gif',
                'atAppointment': 'images/icons/Meeting_16x16.gif',
                'atPersonal': 'images/icons/Personal_16x16.gif',
                'atLiterature': 'images/icons/Literature_16x16.png',
                'atDoc': 'images/icons/mailletter_16x16.png',
                'atFax': 'images/icons/fax_16x16.gif',
                'atEmail': 'images/icons/mailletter_16x16.png'
            },
            medium: {
                'atNote': 'images/icons/Note_24x24.gif',
                'atPhoneCall': 'images/icons/Call_24x24.gif',
                'atToDo': 'images/icons/To_Do_24x24.gif',
                'atAppointment': 'images/icons/Meeting_24x24.gif',
                'atPersonal': 'images/icons/Personal_24x24.gif',
                'atLiterature': 'images/icons/Literature_24x24.png',
                'atDoc': 'images/icons/mailletter_24x24.gif',
                'atFax': 'images/icons/fax_24x24.gif',
                'atEmail': 'images/icons/mailletter_24x24.gif'
            },
            large: {
                'atNote': 'images/icons/Note_24x24.gif',
                'atPhoneCall': 'images/icons/Call_32x32.gif',
                'atToDo': 'images/icons/To_Do_32x32.gif',
                'atAppointment': 'images/icons/Meeting_32x32.gif',
                'atPersonal': 'images/icons/Personal_32x32.gif',
                'atLiterature': 'images/icons/Literature_32x32.png',
                'atDoc': 'images/icons/mailletter_32x32.gif',
                'atFax': 'images/icons/fax_32x32.gif',
                'atEmail': 'images/icons/mailletter_32x32.gif'
            }
        },
        _iconClassMap: {
            small: {
                'atNote': 'icon_note_16x16',
                'atPhoneCall': 'icon_Call_16x16',
                'atToDo': 'icon_To_Do_16x16',
                'atAppointment': 'icon_Meeting_16x16',
                'atPersonal': 'icon_Personal_16x16',
                'atLiterature': 'icon_Literature_16x16',
                'atDoc': 'icon_mailletter_16x16',
                'atFax': 'icon_fax_16x16',
                'atEMail': 'icon_mailletter_16x16'
            },
            medium: {
                'atNote': 'icon_Note_24x24',
                'atPhoneCall': 'icon_Call_24x24',
                'atToDo': 'icon_To_Do_24x24',
                'atAppointment': 'icon_Meeting_24x24',
                'atPersonal': 'icon_Personal_24x24',
                'atLiterature': 'icon_Literature_24x24',
                'atDoc': 'icon_mailletter_24x24',
                'atFax': 'icon_fax_24x24',
                'atEmail': 'icon_mailletter_24x24'
            },
            large: {
                'atNote': 'icon_Note_24x24',
                'atPhoneCall': 'icon_Call_32x32',
                'atToDo': 'icon_To_Do_32x32',
                'atAppointment': 'icon_Meeting_32x32',
                'atPersonal': 'icon_Personal_32x32',
                'atLiterature': 'icon_Literature_32x32',
                'atDoc': 'icon_mailletter_32x32',
                'atFax': 'icon_fax_32x32',
                'atEmail': 'icon_mailletter_32x32'
            }
        },
        _picklistMap: {
            'Regarding': {
                'atNote': 'Note Regarding',
                'atPhoneCall': 'Phone Call Regarding',
                'atToDo': 'To Do Regarding',
                'atAppointment': 'Meeting Regarding',
                'atEmail': 'To Do Regarding',
                'atPersonal': 'Personal Activity Regarding',
                'atLiterature': 'To Do Regarding'
            },
            'Category': {
                'atNote': 'Note Category Codes',
                'atPhoneCall': 'Phone Call Category Codes',
                'atToDo': 'To Do Category Codes',
                'atAppointment': 'Meeting Category Codes',
                'atEmail': 'To Do Category Codes',
                'atPersonal': '',
                'atLiterature': 'To Do Category Codes'
            },
            'Result': {
                'atNote': 'Meeting Result Codes',
                'atPhoneCall': 'Phone Call Result Codes',
                'atToDo': 'To Do Result Codes',
                'atAppointment': 'Meeting Result Codes',
                'atEmail': 'To Do Result Codes',
                'atPersonal': 'Personal Activity Result Codes',
                'atLiterature': 'To Do Result Codes'
            }
        },
        _notMyPersonalActivityMixin: {
            "AccountId": '',
            "AccountName": '',
            "Category": nlsStrings.Personal,
            "ContactId": '',
            "ContactName": '',
            "Description": nlsStrings.Personal,
            "LeadId": '',
            "LeadName": "",
            "LongNotes": '',
            "Notes": '',
            "OpportunityId": '',
            "OpportunityName": '',
            "PhoneNumber": "",
            "Priority": '',
            "TicketId": '',
            "TicketNumber": '',
            "Location": ''
        },
        secureActivityData: function (activity) {
            if ((activity.Type == 262162) || (activity.Type == 'atPersonal')) {
                var currentUserId;
                var clientContextSvc = Sage.Services.getService('ClientContextService');
                if (clientContextSvc) {
                    if (clientContextSvc.containsKey("userID")) {
                        currentUserId = clientContextSvc.getValue("userID");
                    }
                }
                if (currentUserId === activity.UserId) {
                    return;
                }
                if (activity.Leader) {

                    if (currentUserId === activity.Leader.$key) {
                        return;
                    }
                }
                //the current user does should not see this data.
                dojo.mixin(activity, Sage.Utility.Activity._notMyPersonalActivityMixin);
            }
        },
        getActivityImage: function (type, size) {
            size = Sage.Utility.Activity._verifySize(size);
            type = type || 'atAppointment';
            return Sage.Utility.Activity._imageMap[size][type] || Sage.Utility.Activity._imageMap[size]['atAppointment'];
        },
        _verifySize: function (size) {
            size = size || 'small';
            size = size.toLowerCase();
            if (size !== 'small' && size !== 'medium' && size !== 'large') {
                size = 'small';
            }
            return size;
        },
        getActivityImageClass: function (type, size) {
            size = Sage.Utility.Activity._verifySize(size);
            type = type || 'atAppointment';
            return Sage.Utility.Activity._iconClassMap[size][type] || Sage.Utility.Activity._iconClassMap[size]['atAppointment'];
        },
        getActivityTypeName: function (type) {
            switch (type) {
                case 'atPhoneCall':
                    return nlsStrings.PhoneCall || 'Phone Call';
                case 'atToDo':
                    return nlsStrings.ToDo || 'To Do';
                case 'atAppointment':
                    return nlsStrings.Meeting || 'Meeting';
                case 'atPersonal':
                    return nlsStrings.Personal || 'Personal Activity';
                case 'atLiterature':
                    return nlsStrings.Literature || 'Literature';
                case 'atFax':
                    return nlsStrings.Fax || 'Fax';
                case 'atLetter':
                    return nlsStrings.Letter || 'Letter';
                case 'atNote':
                    return nlsStrings.Note || 'Note';
                case 'atEMail':
                    return nlsStrings.Email || 'E-mail';
                case 'atDoc':
                    return nlsStrings.Document || 'Document';
                case 'atDatabaseChange':
                    return nlsStrings.DatabaseChange || 'Database Change';
                case 'atInternal':
                    return nlsStrings.Event || 'Event';
                case 'atSchedule':
                    return nlsStrings.ScheduledEvent || 'Scheduled Event';
                default:
                    return type;
            }
        },
        getActivityTypeEnumCode: function (type) {
            switch (type) {
                case 262146:
                    return 'atPhoneCall';
                case 262147:
                    return 'atToDo';
                case 'atAppointment':
                case 262145:
                    return 'atAppointment';
                case 262162:
                    return 'atPersonal';
                case 'atLiterature':
                    return 'atLiterature';
                case 'atFax':
                    return 'atFax';
                case 'atLetter':
                    return 'atLetter';
                case 'atNote':
                    return 'atNote';
                case 'atEMail':
                    return 'atEMail';
                default:
                    return type;
            }
        },
        getConfirmationTypeEnumCode: function (type) {
            switch (type) {
                case 0:
                    return 'New';
                case 1:
                    return 'Change';
                case 2:
                    return 'Deleted';
                case 3:
                    return 'Confirm';
                case 4:
                    return 'Decline';
                case 5:
                    return 'Unknown';
                case 6:
                    return 'Leader';
                default:
                    return type;
            }
        },
        getConfirmationDisplayName: function (type) {
            switch (type) {
                case 'New':
                    return nlsStrings.New || 'New';
                case 'Change':
                    return nlsStrings.Change || 'Change';
                case 'Deleted':
                    return nlsStrings.Deleted || 'Deleted';
                case 'Confirm':
                    return nlsStrings.Confirm || 'Confirm';
                case 'Decline':
                    return nlsStrings.Decline || 'Decline';
                case 'Unknown':
                    return nlsStrings.Unknown || 'Unknown';
                case 'Leader':
                    return nlsStrings.Leader || 'Leader';
                default:
                    return type;
            }
        },
        getActivityPicklistName: function (picklist, actType) {
            picklist = picklist || 'Regarding';
            if (!Sage.Utility.Activity._picklistMap.hasOwnProperty(picklist)) {
                picklist = 'Regarding';
            }
            return Sage.Utility.Activity._picklistMap[picklist][actType] || Sage.Utility.Activity._picklistMap[picklist]['atToDo'];
        },
        formatActivityStartDate: function (startDate, timeless) {
            if (!startDate) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(startDate)) {
                startDate = Sage.Utility.Convert.toDateFromString(startDate);
            }
            if (typeof timeless === 'undefined') {
                timeless = Sage.Utility.Activity.isDateFiveSecondRuleTimeless(startDate);
            }
            if (!timeless) {
                return dateLocale.format(startDate, { selector: 'datetime', fullYear: true });
            } else {
                var timelessDate = new Date(startDate.getUTCFullYear(), startDate.getUTCMonth(), startDate.getUTCDate());
                return dateLocale.format(timelessDate, { selector: 'date', fullYear: true }) + ' ' + this.timelessText;
            }
        },
        getActivityEndDate: function (startDate, duration, timeless) {
            if (!startDate) {
                return false;
            }
            if (Sage.Utility.Convert.isDateString(startDate)) {
                startDate = Sage.Utility.Convert.toDateFromString(startDate);
            }
            if (typeof timeless === 'undefined') {
                timeless = Sage.Utility.Activity.isDateFiveSecondRuleTimeless(startDate);
            }
            if (!timeless) {
                return dojo.date.add(startDate, "minute", duration);
            } else {
                return new Date(startDate.getUTCFullYear(), startDate.getUTCMonth(), startDate.getUTCDate(), 0, 0, 5);
            }
        },
        formatActivityStartDateForCalendar: function (startDate, dateFormat, timeless) {
            if (!startDate) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(startDate)) {
                startDate = Sage.Utility.Convert.toDateFromString(startDate);
            }
            var sDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes());
            if(timeless) {
                sDate = new Date(startDate.getUTCFullYear(), startDate.getUTCMonth(), startDate.getUTCDate(), 0, 0, 5);
            }
            if (dateFormat)
                return dateLocale.format(sDate, { selector: 'date', datePattern: dateFormat });
            else
                return dateLocale.format(sDate, { selector: 'date', datePattern: "MM/d/yy H:mm" });
        },
        formatActivityEndDateForCalendar: function (startDate, duration) {
            if (!startDate) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(startDate)) {
                startDate = Sage.Utility.Convert.toDateFromString(startDate);
            }
            var stDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes());
            var eDate = dojo.date.add(stDate, "minute", duration);
            //Some activities will end after midnight, so make it same date and just update the time to handle it in Activity scheduler
            if (dojo.date.compare(eDate, stDate, "date") > 0) {
                //eDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), eDate.getHours(), eDate.getMinutes());
                return dateLocale.format(stDate, { selector: 'date', datePattern: "MM/d/yy 24:00" });
            }
            return dateLocale.format(eDate, { selector: 'date', datePattern: "MM/d/yy H:mm" });
        },
        formatEventDate: function (startDate) {
            if (!startDate) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(startDate)) {
                startDate = Sage.Utility.Convert.toDateFromString(startDate);
            }
            return dateLocale.format(startDate, { selector: 'date', fullYear: true });
        },
        formatDateAdd: function (dt, mode, duration) {
            if (!dt) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(dt)) {
                dt = Sage.Utility.Convert.toDateFromString(dt);
            }
            var dtAdd = new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes());
            dtAdd = dojo.date.add(dtAdd, mode, duration);
            return dateLocale.format(dtAdd, { selector: 'date', fullYear: true });
        },
        formatShortDate: function (dt) {
            if (!dt) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(dt)) {
                dt = Sage.Utility.Convert.toDateFromString(dt);
            }
            var dtAdd = new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes());
            return dateLocale.format(dtAdd, { selector: 'date', formatLength: 'short', fullYear: true });
        },
        formatLongDate: function (dt) {
            if (!dt) {
                return '';
            }
            if (Sage.Utility.Convert.isDateString(dt)) {
                dt = Sage.Utility.Convert.toDateFromString(dt);
            }
            var dtAdd = new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes());
            return dateLocale.format(dtAdd, { selector: 'date', formatLength: 'long', fullYear: true });
        },
        roundDateToNextQuarterHour: function (dt) {
            dt.setSeconds(0);
            var curMin = dt.getMinutes();
            if (curMin < 15) {
                dt.setMinutes(15);
            } else if (curMin < 30) {
                dt.setMinutes(30);
            } else if (curMin < 45) {
                dt.setMinutes(45);
            } else {
                dt.setMinutes(0);
                dt = dojo.date.add(dt, 'hour', 1);
            }
            return dt;
        },
        isDateFiveSecondRuleTimeless: function (d) {
            if (!d) {
                return false;
            }
            return ((d.getUTCHours() === 0) && (d.getUTCMinutes() === 0) && (d.getUTCSeconds() === 5));
        },
        formatDuration: function (duration, timeless) {
            if (timeless) {
                return '';
            }
            if (!duration) {
                return '0m';
            }
            if (duration < 60) {
                return duration + "m";
            }
            if (duration > 60) {
                var hours = String(duration / 60).split(".");
                var min = duration % 60;
                return hours[0] + "h " + min + "m";
            }
            else {
                return "1hr";
            }
        },
        formatTimelessStartDate: function (value) {
            if (!value) {
                return '';
            }
            var pad = function (n) { return n < 10 ? '0' + n : n; };
            return value.getUTCFullYear() + '-'
                + pad(value.getUTCMonth() + 1) + '-'
                + pad(value.getUTCDate()) + 'T00:00:00Z';
        },
        formatTimelessEndDate: function (dateValue, mode, increment) {
            if (!dateValue) {
                return '';
            }
            var newDate = new Date(dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate());
            newDate = dojo.date.add(newDate, mode, increment);
            var pad = function (n) { return n < 10 ? '0' + n : n; };
            var utcYear = newDate.getUTCFullYear();
            var utcMonth = newDate.getUTCMonth() + 1;
            var utcDate = newDate.getUTCDate();
           
            return utcYear + '-'
                + pad(utcMonth) + '-'
                + pad(utcDate) + 'T23:59:59Z';
        },
        getNthWeekOfMonth: function (d) {
            //returns a number 1 - 5 indicating the week in which the supplied date occurs.
            //The typical usage should consider a return value of 5 to mean the "Last" week.
            var tempDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
            var curMonth = tempDate.getMonth();
            for (var i = 1; i < 7; i++) {
                tempDate = dojo.date.add(tempDate, 'week', -1);
                if (curMonth !== tempDate.getMonth()) {
                    return i;
                }
            }
            return 1;
        },
        setDateToNthWeekDay: function (d, nthWeek, weekDay) {
            //returns the date in the month of the provided date that lands on the 
            // specified weekday.  e.g. First Friday.
            var i, tempDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
            if (nthWeek === 5) {
                //"last" - count backwards...
                tempDate.setDate(dojo.date.getDaysInMonth(tempDate));
                for (i = 0; i < 7; i++) {
                    if (tempDate.getDay() === weekDay) {
                        break;
                    }
                    tempDate = dojo.date.add(tempDate, 'day', -1);
                }
            } else {
                // count from the beginning...
                tempDate.setDate(1);
                //get to the first day that matches...
                for (i = 0; i < 7; i++) {
                    if (tempDate.getDay() === weekDay) {
                        break;
                    }
                    tempDate = dojo.date.add(tempDate, 'day', 1);
                }
                //then add correct number of weeks (first week - add 0 etc.)
                tempDate = dojo.date.add(tempDate, 'week', nthWeek - 1);
            }
            return tempDate;
        },
        isValidId: function (id) {
            var valid = false;
            if (id) {
                if (id.trim() != '') {
                    valid = true;
                }
            }
            return valid;
        },
        getConfirmStatusName: function (type) {
            if (!type) {
                return nlsStrings.Unknown || 'Unknown';
            }
            switch (type.toUpperCase().trim()) {
                case "CHANGE":
                    return nlsStrings.confirmTypeChanged || 'Changed';
                case "CONFIRM":
                    return nlsStrings.confirmTypeConfirmed || 'Confirmed';
                case "DELETED":
                    return nlsStrings.confirmTypeDeleted || 'Deleted';
                case "LEADER":
                    return nlsStrings.Leader || 'Leader';
                case "NEW":
                    return nlsStrings.New || 'New';
                default:
                    return type;
            }
        },
        isReocurringId: function (id) {
            if (id.charAt(12) === ';') {
                return true;
            }
            return false;
        },
        findFailedRequestMessage: function (request, def) {
            if (request.responseText) {
                var rsp = eval(request.responseText);
                if (dojo.isArray(rsp)) {
                    if (rsp[0]) {
                        return rsp[0].message || def;
                    }
                }
            }
            return def;
        },
        removeMember: function (actvityEditorId, memberId) {
            var editor = dijit.byId(actvityEditorId);
            if (editor) {
                var args = {
                    memberId: memberId
                };
                editor._removeMember(args);
            }
        },
        getActivityEditLink: function (activity) {
            var key = activity.id;
            var fmtStr = '<a href="${0}" >${1}</a>';
            var recurring = Sage.Utility.Activity._getReccurenceFlag(activity);
            var desc = activity.Description || Sage.Utility.Activity.getActivityTypeName(Sage.Utility.Activity.getActivityTypeEnumCode(activity.Type));
            var href = 'javascript:Sage.Link.editActivity(\'' + key + '\', ' + recurring + ')';
            return dstring.substitute(fmtStr, [href, desc]);
        },
        getActivitySummaryHeader: function (activity) {
            var key = activity.id;
            var fmtStr = '<a href="${0}" >${1}</a>';
            var sHtml = '';
            if (activity.Alarm) {
                sHtml += '<div class="Global_Images icon24x24 icon_Alarm_24x24" > </div>&nbsp;';
            }
            if ((Sage.Utility.Activity.isReocurringId(activity.id)) || (activity.Recurring)) {
                sHtml += '<div class="Global_Images icon16x16 icon_recurring" > </div>&nbsp;';
            }
            sHtml += '<div class="Global_Images icon24x24 ' + Sage.Utility.Activity.getActivityImageClass(activity.Type, 'medium') + '"> </div>&nbsp;';
            var recurring = Sage.Utility.Activity._getReccurenceFlag(activity);
            var desc = activity.Description || Sage.Utility.Activity.getActivityTypeName(Sage.Utility.Activity.getActivityTypeEnumCode(activity.Type));
            var href = 'javascript:Sage.Link.editActivity(\'' + key + '\', ' + recurring + ')';
            sHtml += dstring.substitute(fmtStr, [href, desc]);
            return sHtml;
        },
        getUserActivitySummaryHeader: function (userActivity) {
            var activity = userActivity.Activity;
            var sHtml = '';
            if (userActivity.Status === "asUnconfirmed") {
                sHtml += '<div class="Global_Images icon16x16 icon_unconfirmedActivity16x16" > </div>';
            }

            if (activity.Alarm) {
                sHtml += '<div class="Global_Images icon24x24 icon_Alarm_24x24" > </div>&nbsp;';
            }
            if ((Sage.Utility.Activity.isReocurringId(activity.$key)) || (activity.Recurring)) {
                sHtml += '<div class="Global_Images icon16x16 icon_recurring" > </div>&nbsp;';
            }
            sHtml += '<div class="Global_Images icon24x24 ' + Sage.Utility.Activity.getActivityImageClass(activity.Type, 'medium') + '"> </div>&nbsp;';
            var recurring = Sage.Utility.Activity._getReccurenceFlag(activity);
            var fmtStr = '<a href="${0}" >${1}</a>';
            var desc = activity.Description || Sage.Utility.Activity.getActivityTypeName(Sage.Utility.Activity.getActivityTypeEnumCode(activity.Type));
            var href = 'javascript:Sage.Link.editActivity(\'' + activity.$key + '\', ' + recurring + ')';
            if (userActivity.Status === "asUnconfirmed") {
                href = 'javascript:Sage.Link.confirmActivityFor(\'' + activity.$key + '\', ' + userActivity.User.$key + ')';
            }
            sHtml += dstring.substitute(fmtStr, [href, desc]);
            return sHtml;
        },
        getActivityCompleteHref: function (activity) {
            var key = activity.$key;
            var recurring = Sage.Utility.Activity._getReccurenceFlag(activity);
            var href = 'javascript:Sage.Link.completeActivity(\'' + key + '\', ' + recurring + ')';
            return href;
        },
        _getReccurenceFlag: function (activity) {
            if (activity.RecurrenceState) {
                // comeing from system feed;
                // Case where no end of reoccuring range. so let treat this as not reoccuring. 
                if ((activity.Recurring === true) && (activity.RecurrenceState === 'rstMaster')) {
                    return false;
                }
                if ((activity.Recurring === true) && ((activity.RecurIterations) < 0)) {
                    return false;
                }
                if (activity.RecurrenceState === 'rstOccurrence') {
                    return true;
                }
            } else {
                if (activity.Recurring === true) {
                    if ((activity.RecurIterations) < 0) {
                        return false;
                    }
                    return true;
                }
                return false;
            }
            return false;
        },
        activityTypeCell: typeCell,
        activityAlarmCell: alarmCell,
        activityRecurringCell: recurCell,
        activityAttachCell: attachCell,
        activityConfirmStatusCell: confrimStatusCell,
        activityDurationCell: durationCell,
        activityNameCell: nameCell,
        activityNameTypeCell: nameTypeCell,
        activityAccountCell: accountCell,
        activityCompleteCell: completeCell,
        historyTypeCell: historyTypeCell,
        activityLeaderCell: leaderCell
    };
});
},
'Sage/_ConfigurationProvider':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/_ConfigurationProvider", [
    'dojo/_base/declare'
],
function (declare) {
    var _configurationProvider = declare('Sage._ConfigurationProvider', null, {
        _connects: null,
        _subscribes: null,
        constructor: function (options) {
            dojo.mixin(this, options);

            this._connects = [];
            this._subscribes = [];
        },
        // todo: total hack for attribute support
        'set': function (name, value) {
            this['_' + name] = value;
        },
        'get': function (name) {
            return this['_' + name];
        },
        requestConfiguration: function (options) {
            // success: function(configuration, options, provider)
            // failure: function(result, options, provider)
        },
        onConfigurationChange: function () {
        },
        destroy: function () {
            dojo.forEach(this._connects, function (handle) {
                dojo.disconnect(handle);
            });

            dojo.forEach(this._subscribes, function (handle) {
                dojo.unsubscribe(handle);
            });

            this.uninitialize();
        },
        uninitialize: function () {

        }
    });

    var staticProvider = declare('Sage.StaticConfigurationProvider', [_configurationProvider], {
        createConfiguration: function () {
            var configuration = {};

            for (var name in this)
                if (this.hasOwnProperty(name) && !/^_/.test(name))
                    configuration[name] = this[name];

            return configuration;
        },
        requestConfiguration: function (options) {
            if (options.success)
                options.success.call(options.scope || this, this.createConfiguration(options), options, this);
        }
    });

    return _configurationProvider;
});
},
'Sage/Utility/File/nls/AttachmentPropertiesEditForm':function(){
﻿define("Sage/Utility/File/nls/AttachmentPropertiesEditForm", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        fileText: 'File',
        descriptionText: 'Description',
        sizeText: 'Size',
        attachDateText: 'Attached Date',
        attachedByText: 'Attached By',
        uploadFileText: 'Select Different File...',
        editText: 'Edit Attachment',
        okText: 'OK',
        cancelText: 'Cancel',
        browseText: 'Browse',
        urlText: 'URL',
        requestFailedMsg: 'The requested operation could not be completed, please try again later.'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/NumericBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/NumericBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/NumericBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.NumericBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/Data/SingleEntrySDataStore':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/SingleEntrySDataStore", [
        'Sage/Data/BaseSDataStore',
        'Sage/Utility',
        'dojo/_base/declare'
],
function (BaseSDataStore, Utility, declare) {
    var singleEntrySDataStore = declare('Sage.Data.SingleEntrySDataStore', BaseSDataStore, {
        _entity: false,
        _request: false,
        _okToCache: true,
        postMixInProperties: function () {
        },
        getFeed: function (predicate) {
        },
        fetch: function (context) {
            if (context.queryOptions && context.queryOptions.currentEntity && this._entity) {
                this.returnCollectionProperty(context, context.queryOptions.property);
                return;
            }

            this.verifyService();
            var request = this._getRequest();
            if (context.predicate) {
                if (this._entity && (context.predicate === this._entity.$key) && this._okToCache) {
                    if (context.onComplete) {
                        context.onComplete.call(context.scope || this, this._entity, context);
                        return;
                    }
                }
                request.setResourceSelector(context.predicate);
            }

            if (this.select && this.select.length > 0)
                request.setQueryArg('select', this.select.join(','));
            if (this.include && this.include.length > 0)
                request.setQueryArg('include', this.include.join(','));
            if (this.predicate && this.predicate.length > 0) {
                request.setResourceSelector(this.predicate);
            }

            if (context.beforeRequest) {
                context.beforeRequest.call(context.scope || this, request);
            }
            request.read({
                success: dojo.hitch(this, this.onSuccess, context),
                failure: dojo.hitch(this, this.onFailure, context)
            });
        },
        save: function (options) {
            if (this._request && this._entity) {
                this._okToCache = false;
                this._request.update(this._entity, options);
            }
        },
        setValue: function (item, attribute, value) {
            var entity = item || this._entity;
            if (entity) {
                var oldValue = this.getValue(entity, attribute, '');
                Utility.setValue(entity, attribute, value);
                this.onSet(entity, attribute, oldValue, value);
            }
        },
        getCurrentEntity: function () {
            return this._entity;
        },
        newItem: function (args /*, parentInfo */) {
            var request = new Sage.SData.Client.SDataTemplateResourceRequest(this.service);
            request.setResourceKind(this.resourceKind);
            request.read({
                success: function (entry) {
                    this._entity = entry;
                    if ((args.onComplete) && (typeof args.onComplete === 'function')) {
                        args.onComplete.call(args.scope || this, entry);
                    }
                },
                failure: function (err) {
                    if (args.onError) {
                        args.onError.call(args.scope || this, err);
                    }
                },
                scope: this
            });
        },
        saveNewEntity: function (entity, success, failure, scope, beforePost) {
            if (!entity) {
                entity = this._entity;
            }
            var request = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
            request.setResourceKind(this.resourceKind);
            if (beforePost) {
                beforePost.call(scope || this, request, entity);
            }
            request.create(entity, {
                success: success || function (created) {
                    if (typeof console !== 'undefined') {
                        console.log('created item: ' + created.$key);
                    }
                },
                failure: failure || function (response, o) {
                    if (typeof console !== 'undefined') {
                        console.log('Item not created: ' + entity.$key);
                    }
                },
                scope: scope || this
            });
        },
        deleteEntity: function (entity, success, failure, scope) {
            entity = entity || this._entity;
            if (entity) {
                var request = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
                request.setResourceKind(this.resourceKind);
                request.setResourceSelector("'" + entity['$key'] + "'");
                request['delete'](entity, {
                    success: success || function (result) {
                        if (typeof console !== 'undefined') {
                            console.log('item was successfully deleted. ' + result); }
                    },
                    failure: failure || function (response) {
                        if (typeof console !== 'undefined') {
                            console.log('Item not deleted: ' + entity.$key);
                        }
                    },
                    scope: scope || this
                });
            }
        },
        clearCache: function () {
            this._entity = false;
        },
        _getRequest: function () {
            if (!this._request) {
                var req = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
                req.setResourceKind(this.resourceKind);
                this._request = req;
            }
            return this._request;
        },
        returnCollectionProperty: function (context, propertyName) {
            if (this._entity && this._entity.hasOwnProperty(propertyName)) {
                var list = this._entity[propertyName].$resources;
                if (typeof list !== 'unknown') {
                    if (context.onBegin) {
                        context.onBegin.call(context.scope || this, list.length, context);
                    }
                    if (context.onComplete) {
                        context.onComplete.call(context.scope || this, list, context);
                    }
                }
            }
        },
        onSuccess: function (options, data) {
            if (data) {
                this._okToCache = true;
                this._entity = data;
                if (options.onComplete) {
                    options.onComplete.call(options.scope || this, data, options);
                }
            } else {
                if (options.onError) {
                    options.onError.call(options.scope || this, 'invalid feed', options);
                }
            }
        },
        onFailure: function (options, request, requestOptions) {
            this._entity = false;
            if (options.onError) {
                options.onError.call(options.scope || this, request.responseText, options);
            }
        },
        onSet: function (item, attribute, oldValue, value) { }
    });
    return singleEntrySDataStore;
});
},
'Sage/UI/SLXPreviewGrid/main':function(){
define("Sage/UI/SLXPreviewGrid/main", [
    "Sage/UI/SLXPreviewGrid/Grid",
    "Sage/UI/SLXPreviewGrid/FilterPanel",
    "Sage/UI/SLXPreviewGrid/Filter/DateRange",
    "Sage/UI/SLXPreviewGrid/Filter/Text"
], function() {
	// module:
        // Sage/UI/SLXPreviewGrid/main
	// summary:
        // The Sage/UI/SLXPreviewGrid/main provides loading of all Sage/UI/SLXPreviewGrid modules.
});
},
'Sage/Utility/Filters':function(){
/*globals Sage, window, define, sessionStorage */
define("Sage/Utility/Filters", [
        'dojo/_base/lang',
        'Sage/Data/SDataServiceRegistry',
        'dojo/json'
],
function (lang, SDataServiceRegistry, json) {
    Sage.namespace('Utility.Filters');
    lang.mixin(Sage.Utility.Filters, {
        getHiddenFiltersKey: function () {
            // Compatible with 7.5.4 keys..
            var service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                keyPart = 'hidden_filters_',
                groupId = context && context.CurrentGroupID,
                key = '';
            if (groupId) {
                groupId = groupId.toLowerCase();
                groupId = groupId.replace(/ /g, '_').replace(/'/g, '_');
                key = keyPart + groupId;
            }
            
            return key;
        },
        setHiddenFilters: function (key, value) {
            var service, entry, request;

            service = SDataServiceRegistry.getSDataService('system');
            entry = {
                '$name': 'setHiddenFilters',
                'request': {
                    'key': key,
                    'value': value
                }
            };
            request = new Sage.SData.Client.SDataServiceOperationRequest(service);

            request.setOperationName('setHiddenFilters');
            request.execute(entry, {});

            // Invalidate the session storage cache
            sessionStorage.removeItem(key);
        },
        getHiddenFilters: function (key, success, failure) {
            var service, request, entry, data;
            data = sessionStorage.getItem(key);

            if (data === null) {
                service = SDataServiceRegistry.getSDataService('system');
                entry = {
                    '$name': 'getHiddenFilters',
                    'request': {
                        'key': key
                    }
                };

                request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                    .setOperationName('getHiddenFilters');

                request.execute(entry, {
                    success: lang.hitch(this, this._getHiddenFiltersSuccess, success, key),
                    failure: failure
                });
            } else {
                // Cached data is stored as json string, parse it back out, and return to the caller
                success.call(this, json.parse(data));
            }

        },
        _getHiddenFiltersSuccess: function (onSuccess, key, data) {
            if (onSuccess) {
                // Cache as json string
                sessionStorage.setItem(key, json.stringify(data));
                onSuccess.call(this, data);
            }
        },
        resolveDataType: function (dataTypeId) {
            //console.log(dataTypeId);
            switch (dataTypeId) {
                case '47f90249-e4c8-4564-9ae6-e1fa9904f8b8': // Integer
                case '6b0b3d51-0728-4b67-9473-52836a81da53': // Short Integer
                case '2596d57d-89d6-4b72-9036-b18c64c5324c': // Decimal
                case 'f37c635c-9fbf-40d8-98d5-750a54a3cca1': // Double
                    return 'numeric';
                case 'ccc0f01d-7ba5-408e-8526-a3f942354b3a': // Text
                case '76c537a8-8b08-4b35-84cf-fa95c6c133b0': // Unicode Text
                case 'b71918bf-fac1-4b62-9ed5-0b0294bc9900': // PickList
                case '517d5e69-9efa-4d0a-8e7a-1c7691f921ba': // Dependency Lookup
                    return 'string';
                case '8edd8fce-2be5-4d3d-bedd-ea667e78a8af': // Enum
                    return 'enum';
                case '1f08f2eb-87c8-443b-a7c2-a51f590923f5': // DateTime
                    return 'date';
                case '30053f5a-8d40-4db1-b185-1e4128eb26cc': // Standard Id
                    return 'key';
                case '92432b4d-8206-4a96-ba7b-e4cbd374f148': // Boolean
                    return 'boolean';
                case 'f4ca6023-9f5f-4e41-8571-50ba94e8f233': // blob
                    return 'binary';
                default:
                    return 'unknown';
            }
        },
        resolveDataTypeQB: function (dataTypeId) {
            var results;
            switch (dataTypeId) {
                case '47f90249-e4c8-4564-9ae6-e1fa9904f8b8': // Integer
                case '6b0b3d51-0728-4b67-9473-52836a81da53': // Short Integer
                    results = 'Integer';
                    break;
                case '2596d57d-89d6-4b72-9036-b18c64c5324c': // Decimal
                case 'f37c635c-9fbf-40d8-98d5-750a54a3cca1': // Double
                    results = 'Decimal';
                    break;
                case 'ccc0f01d-7ba5-408e-8526-a3f942354b3a': // Text
                case '76c537a8-8b08-4b35-84cf-fa95c6c133b0': // Unicode Text
                case 'b71918bf-fac1-4b62-9ed5-0b0294bc9900': // PickList
                case '517d5e69-9efa-4d0a-8e7a-1c7691f921ba': // Dependency Lookup
                    results = 'String';
                    break;
                case '1f08f2eb-87c8-443b-a7c2-a51f590923f5': // DateTime
                    results = 'Date/Time';
                    break;
                case 'f4ca6023-9f5f-4e41-8571-50ba94e8f233': //blob
                    results = 'Memo/Blob';
                    break;
                default:
                    results = 'String';
            }

            return results;
        }
    });
    
    return Sage.Utility.Filters;
});
},
'Sage/MainView/ActivityMgr/ConfirmListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/ConfirmListPanelConfig", [
    'Sage/MainView/ActivityMgr/BaseListPanelConfig',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/SummaryFormatterScope',
    'Sage/Data/BaseSDataStore',
    'Sage/UI/Columns/DateTime',
    'dojo/_base/declare',
    'dojo/i18n!./nls/ConfirmListPanelConfig'
],

function (
    BaseListPanelConfig,
    SageUtility,
    UtilityActivity,
    SummaryFormatterScope,
    BaseSDataStore,
    ColumnsDateTime,
    declare,
    nlsResources
) {

    var confirmListPanelConfig = declare('Sage.MainView.ActivityMgr.ConfirmListPanelConfig', [BaseListPanelConfig], {

        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'confirmations';
            this._resourceKind = 'UserNotifications';
            this.entityName = 'UserNotification';
            this._contextMenu = 'ConfimationListContextMenu';
            this._scheduleContextMenu = 'ScheduleContextMenu';
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._include = this._getInclude();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.toolBar = this._getToolBars();
            dojo.subscribe('/entity/userNotification/change', this._onListRefresh);
            dojo.subscribe('/entity/userNotification/delete', this._onListRefresh);
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('confirmations');
        },
        _getSelect: function () {
            var select = [
                '$key',
                'Type',
                'ActivityId',
                'Activity/Type',
                'Activity/StartDate',
                'Activity/Description',
                'FromUserId',
                'ToUserId',
                'FromUser/UserInfo/UserName',
                'ToUser/UserInfo/UserName'
            ];
            return select;
        },
        _getInclude: function () {
            var includes = ["UserInfo"];
            return includes;
        },
        _getSort: function () {
            var sort = [
               { attribute: 'Activity.StartDate', descending: true }
            ];
            return sort;
        },
        _getWhere: function () {
            var where = (this._currentUserId) ? dojo.string.substitute('ToUser.Id eq "${0}" ', [this._currentUserId]) : '';
            //var where = (this._currentUserId) ? dojo.string.substitute('(ToUser.UserAccessToOtherCal.OthersAccessToUserCal.Id eq "${0}")', [this._currentUserId]) : '';
            return where;
        },
        _getStructure: function () {

            var colNameType = this._nlsResources.colNameType || 'Activity Type';
            var colNameStatus = this._nlsResources.colNameNotification || 'Notification';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            //var colNameDuration = this._nlsResources.colNameDuration || 'Duration';
            var colNameRegarding = this._nlsResources.colNameRegarding || 'Regarding';
            var colNameFromUser = this._nlsResources.colNameFromUser || 'From';
            var colNameToUser = this._nlsResources.colNameToUser || 'To User';

            var ActivityConfirmCell = declare("Sage.MainView.ActivityMgr.ConfirmListPanelConfig.ActivityConfirmCell", dojox.grid.cells.Cell, {
                format: function (inRowIndex, inItem) {
                    //var type = this.get(inRowIndex, inItem);
                    var key = SageUtility.getValue(inItem, "$key");
                    var type = SageUtility.getValue(inItem, "Type");
                    var activityId = SageUtility.getValue(inItem, "ActivityId");
                    var toUserId = SageUtility.getValue(inItem, "ToUserId");
                    var statusName = UtilityActivity.getConfirmStatusName(type);
                    var html = "<a href='javascript:Sage.Link.editConfirmation(\"" + key + "\")' >" + statusName + "</a>";
                    return html;
                }
            });

            var ActivityTypeCell = declare("Sage.MainView.ActivityMgr.ConfirmListPanelConfig.ActivityTypeCell", dojox.grid.cells.Cell, {
                format: function (inRowIndex, inItem) {
                    var type = this.get(inRowIndex, inItem);
                    //var key = SageUtility.getValue(inItem, "$key");
                    var html = "<div><div class='Global_Images icon16x16 " + UtilityActivity.getActivityImageClass(type, 'small') + "'></div>&nbsp" + UtilityActivity.getActivityTypeName(type) + "</div>";

                    return html;
                }
            });

            var structure = [
                { field: 'Type', name: colNameStatus, type: ActivityConfirmCell, width: '90px' },
                { field: 'Activity.Type', name: colNameType, type: ActivityTypeCell, width: '90px' },
                { field: 'Activity.StartDate', name: colNameStartDate, type: ColumnsDateTime, timelessField: 'Timeless', width: '150px' },
                { field: 'Activity.Description', name: colNameRegarding, width: '300px' },
                { field: 'FromUser.UserInfo.UserName', name: colNameFromUser, width: '100px' },
                { field: 'ToUser.UserInfo.UserName', name: colNameToUser, width: '100px' }
            ];

            return structure;
        },

        _getDetailConfig: function () {
            var formatScope = this._getFormatterScope();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'ConfirmationDetailSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/ConfirmationDetailSummary.html',
                postProcessCallBack: false
            };
            return detailConfig;
        },
        _getFormatterScope: function () {
            var formatScope = new SummaryFormatterScope({
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'ConfirmationListSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/ConfirmationListSummary.html'
            });
            return formatScope;
        },
        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        }

    });

    return confirmListPanelConfig;
});
},
'Sage/QuickForms/Design/HiddenControlDesigner':function(){
define("Sage/QuickForms/Design/HiddenControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/NonVisibleAdvancedPropertyEditor',
    'dojo/i18n!./nls/HiddenControlDesigner'
], function(declare, array, lang, _Templated, _Widget, _Contained, ControlDesigner, NonVisibleAdvancedPropertyEditor, localization) {
    return declare('Sage.QuickForms.Design.HiddenControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: false
        },
        editors: [
            NonVisibleAdvancedPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div data-dojo-attach-point="containerNode">',
            '<span data-dojo-attach-point="designCaptionNode"></span>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },

        helpTopicName: 'Hidden_Text_control',
        quickFormControlType: 'Sage.Platform.QuickForms.QFControls.QFHidden, Sage.Platform.QuickForms.QFControls',

        displayNameText: 'Hidden Text',

        constructor: function() {
            lang.mixin(this, localization);
        },
        _setControlIdAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        startup: function() {
            this.inherited(arguments);

            this.set('designCaption', this.get('controlId'));
        }
    });
});
},
'Sage/MainView/Lead/UpdateLeads':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/Lead/UpdateLeads", [
        'dojo/_base/declare',
        'dojo/i18n!./nls/UpdateLeads',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/lang',
        'dijit/Dialog',
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/UI/Dialogs',
        'Sage/UI/Controls/Lookup',
        'dijit/form/Form',
        'dijit/form/Select',
        'dijit/form/Textarea',
        'dijit/layout/ContentPane',
        'dojox/layout/TableContainer',
        'dojo/i18n!./nls/UpdateLeads'
],
function (declare, i18nStrings, _DialogHelpIconMixin, dojoLang, dijitDialog, _Widget, _Templated, Dialogs, Lookup) {
    var updateLeads = declare('Sage.MainView.Lead.UpdateLeads', [_Widget, _Templated], {
        id: "dlgUpdateMultipleLeads",
        _dialog: false,
        _selectionInfo: false,
        _updateableProperties: false,
        selectedFieldIndex: 1,
        lup_Owner: false,
        lup_AcctMgr: false,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div>',
                '<div data-dojo-type="dijit.Dialog" title="{%= $.updateMultipleLeads_Caption %}" dojoAttachPoint="_dialog" dojoAttachEvent="onCancel:_close">',
                    '<div data-dojo-type="dijit.form.Form" id="{%= $.id %}_frmUpdateMultipleLeads">',
                        '<table cellspacing="20">',
                            '<tr>',
                                '<td>',
                                    '<label>{%= $.update_Property_Caption %}</label>',
                                '</td>',
                                '<td>',
                                    '<select title="{%= $.update_Property_Caption %}" labelWidth="20" name="{%= $.id %}_PropertyName" dojoAttachPoint="propertyNameSelect" dojoAttachEvent="onChange:_propertyChanged" data-dojo-type="dijit.form.Select" style="width:150px">',
                                        '{% for (var i=0; i < $._updateableProperties.length;i++) { %}',
                                            '<option value="{%= $._updateableProperties[i].propertyName %}" {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $._updateableProperties[i].propertyDisplayName %}</option>',
                                        '{% } %}',
                                    '</select>',
                                '</td>',
                                '<td>',
                                    '<div id="divUpdateLeadsTolbl" dojoAttachPoint="divUpdateLeadsTolbl">',
                                        '<label>{%= $.update_To_Caption %}</label>',
                                    '</div>',
                                '</td>',
                                '<td>',
                                    '<div dojoAttachPoint="divOwnerContainer" baseClass="lookup-container">',
                                        '<div data-dojo-type="dijit.layout.ContentPane" label="{%= $.lookupOwnerText %}" dojoAttachPoint="assignOwner_Container" class="removePadding"></div>',
                                    '</div>',
                                    '<div dojoAttachPoint="divAcctMgrContainer" baseClass="lookup-container" class="display-none">',
                                        '<div data-dojo-type="dijit.layout.ContentPane" label="{%= $.update_To_Caption %}" id="{%= $.id %}_luAccountMgr" dojoAttachPoint="accountMgr_Container" allowClearingResult="false" class="removePadding"></div>',
                                    '</div>',
                                '</td>',
                            '</tr>',
                        '</table>',
                        '<div class="button-bar" align="right">',
                            '<div data-dojo-type="dijit.form.Button" id="{%= $.id%}_btn_OK" name="btn_OK" dojoAttachPoint="btn_OK" dojoAttachEvent="onClick:_okClick">{%= $.ok_Text %}</div>',
                            '<div data-dojo-type="dijit.form.Button" id="{%= $.id%}_btn_Cancel" name="btn_Cancel" dojoAttachPoint="btn_Cancel" dojoAttachEvent="onClick:_close">{%= $.btnCancel_Caption %}</div>',
                        '</div>',
                    '</div>',
                '</div>',
            '</div>'
        ]),
        constructor: function (selectionInfo) {
            this._selectionInfo = selectionInfo;
            dojo.mixin(this, i18nStrings);
            if (!this._updateableProperties) {
                this._updateableProperties = [{ propertyName: '', propertyDisplayName: ''}];
                this.loadUpdateableProperties('Owner', this.updateProp_Owner);
                this.loadUpdateableProperties('AcctMgr', this.updateProp_AcctMgr);
            }
        },
        loadUpdateableProperties: function (propertyName, propertyDisplayName) {
            var property = {
                propertyName: propertyName,
                propertyDisplayName: propertyDisplayName
            };
            this._updateableProperties.push(property);
        },
        show: function () {
            if (!this.lup_Owner) {
                this.createOwnerLookup();
            }
            if (!this.lup_AcctMgr) {
                this.createAcctMgrLookup();
            }
            this._dialog.show();
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('updateleads');
            }
        },
        _propertyChanged: function () {
            if (this.propertyNameSelect) {
                this.setDisplayProperty(this.divAcctMgrContainer, (this.propertyNameSelect.value == "AcctMgr"));
                this.setDisplayProperty(this.divOwnerContainer, (this.propertyNameSelect.value == "Owner"));
            }
        },
        setDisplayProperty: function (property, display) {
            if (property && display) {
                dojo.removeClass(property, "display-none");
            }
            else if (property) {
                dojo.addClass(property, "display-none");
            }
        },
        createOwnerLookup: function () {
            this.assignOwnerLookupConfig = {
                id: '_assignOwner',
                structure: [
                    {
                        defaultCell: {
                            sortable: true,
                            width: '150px',
                            editable: false,
                            styles: 'text-align: left;',
                            propertyType: 'System.String',
                            excludeFromFilters: false,
                            useAsResult: false,
                            pickListName: null,
                            defaultValue: ''
                        },
                        cells: [
                            {
                                name: this.lookupDescriptionColText,
                                field: 'Description'
                            }, {
                                name: this.lookupTypeColText,
                                field: 'Type',
                                PropertyType: 'Sage.Entity.Interfaces.OwnerType'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: { resourceKind: 'ownerViews', sort: [{ attribute: "Description"}] },
                isModal: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupOwnerText,
                dialogButtonText: this.ok_Text
            };
            this.lup_Owner = new Lookup({
                id: 'lu_AssignOwner',
                config: this.assignOwnerLookupConfig,
                style: 'width:100%'
            });
            dojo.place(this.lup_Owner.domNode, this.assignOwner_Container.domNode, 'only');
        },
        createAcctMgrLookup: function () {
            this.accountMgrLookupConfig = {
                id: '_acctMgr',
                structure: [
                    {
                        defaultCell: {
                            sortable: true,
                            width: '150px',
                            editable: false,
                            styles: 'text-align: left;',
                            propertyType: 'System.String',
                            excludeFromFilters: false,
                            useAsResult: false,
                            pickListName: null,
                            defaultValue: ''
                        },
                        cells: [
                            {
                                name: this.lookupNameColText,
                                field: 'UserInfo.UserName'
                            }, {
                                name: this.lookupTitleColText,
                                field: 'UserInfo.Title'
                            }, {
                                name: this.lookupDepartmentColText,
                                field: 'UserInfo.Department'
                            }, {
                                name: this.lookupRegionColText,
                                field: 'UserInfo.Region'
                            }, {
                                name: this.lookupTypeColText,
                                field: 'Type',
                                propertyType: 'Sage.Entity.Interfaces.UserType'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: { resourceKind: 'users', sort: [{ attribute: "UserInfo.UserName"}] },
                isModal: true,
                initialLookup: true,
                preFilters: [
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '5'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '6'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '7'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '8'
                    }
                ],
                returnPrimaryKey: true,
                dialogTitle: this.lookupActMgrText,
                dialogButtonText: this.okText
            };
            this.lup_AcctMgr = new Lookup({
                id: 'lu_AcctMgr',
                config: this.accountMgrLookupConfig,
                style: 'width:100%'
            });
            dojo.place(this.lup_AcctMgr.domNode, this.accountMgr_Container.domNode, 'only');
        },
        _okClick: function () {
            var property = this.getPropertySelectionValue();
            var self = this;
            if (!property && !property.value) {
                Dialogs.showError(this.errorUnspecifiedValue);
                return;
            }
            var service = Sage.Data.SDataServiceRegistry.getSDataService('scheduling');
            var request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                .setApplicationName('$app')
                .setOperationName('trigger')
                .setResourceKind("jobs('Sage.SalesLogix.BusinessRules.Jobs.UpdateEntityJob')");
            var entry = {
                "$name": "Sage.SalesLogix.BusinessRules.Jobs.UpdateEntityJob",
                "request": {
                    "parameters": [
                        { "name": "EntityName", "value": "Lead" },
                        { "name": "PropertyNames", "value": property.name },
                        { "name": "PropertyValues", "value": property.value },
                        { "name": "SelectedIds", "value": (this._selectionInfo.selectionCount > 0) ? this._selectionInfo.selectedIds.join(',') || '' : '' },
                        { "name": "GroupId", "value": (this._selectionInfo.selectionCount == 0) ? this.getCurrentGroupId() || '' : '' }
                    ]
                }
            };
            request.execute(entry, {
                success: function (result) {
                    self._close();
                },
                failure: function (result) {
                    Dialogs.showError(this.errorRequestingJobMgr);
                }
            });
        },
        getCurrentGroupId: function () {
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (grpContextSvc) {
                var contextService = grpContextSvc.getContext();
                return contextService.CurrentGroupID;
            }
            return '';
        },
        getPropertySelectionValue: function () {
            if (this.propertyNameSelect) {
                switch (this.propertyNameSelect.value) {
                    case 'AcctMgr':
                        if (this.lup_AcctMgr.selectedObject) {
                            return { name: 'AccountManager', value: this.lup_AcctMgr.selectedObject.$key };
                        }
                        return false;
                    case 'Owner':
                        if (this.lup_Owner.selectedObject) {
                            return { name: 'Owner', value: this.lup_Owner.selectedObject.$key };
                        }
                        return false;
                }
            }
            return false;
        },
        _close: function () {
            this._dialog.hide();
        }
    });
    return updateLeads;
});
},
'Sage/Services/ClientBindingManagerService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/ClientBindingManagerService", [
    'dojo/_base/declare'
],
function (declare) {
    /**
    * summary
    * Class used to create the service for watching bound data fields and notifying the user that they have dirty data.
    * Declare the class and append its methods and properties
    * @constructor
    */
    var widget = declare('Sage.Services.ClientBindingManagerService', null, {
        constructor: function () {
            this._listeners[this.ON_SAVE] = [];
            this.inherited(arguments);
        },
        _WatchChanges: true,
        _PageExitWarningMessage: "",
        _ShowWarningOnPageExit: false,
        _SkipCheck: false,
        //this flag tracks the dirty status of controls that were databound on the server
        _CurrentEntityIsDirty: false,
        _SaveBtnID: "",
        _MsgDisplayID: "",
        _entityTransactionID: "",
        _IgnoreDirtyFlag: false,
        //this keeps track of any Ajax controls that also may have dirty data in them...
        _DirtyAjaxItems: [],
        _listeners: {},
        _init: function () {
            this.positionDirtyDataMessage();
            dojo.subscribe("Sage/events/markDirty", this, "markDirty");
        },
        positionDirtyDataMessage: function () {
            var title = dojo.query('#PageTitle');
            var msgNode = dojo.query('.dirtyDataMessage');
            if (title && title.length > 0 && msgNode && msgNode.length > 0) {
                dojo.place(msgNode[0], title[0], 'after');
                dojo.style(msgNode[0], 'top', dojo.marginBox(title[0]).t + 'px');
                dojo.style(msgNode[0], 'left', dojo.marginBox(title[0]).w + 'px');
            }
        },
        addListener: function (event, listener, scope) {
            //TODO: Refactor with this.connect
            this._listeners[event] = this._listeners[event] || [];
            this._listeners[event].push({ listener: listener, scope: scope });
        },
        removeListener: function (event, listener) {
            //TODO: Refactor with this.disconnect
            this._listeners[event] = this._listeners[event] || [];
            for (var i = 0; i < this._listeners[event].length; i++)
                if (this._listeners[event][i].listener == listener)
                    break;

            this._listeners[event].splice(i, 1);
        },
        onSave: function () {
            for (var i = 0; i < this._listeners[this.ON_SAVE].length; i++) {
                var fn = this._listeners[this.ON_SAVE][i].listener;
                var scope = this._listeners[this.ON_SAVE][i].scope || this;
                if (typeof fn === "function") {
                    fn.call(scope);
                }
            }
        },
        SetShowWarningOnPageExit: function (showMsg) {
            this._ShowWarningOnPageExit = (showMsg);
            if (this._ShowWarningOnPageExit) {
                window.onbeforeunload = this.onExit;
            }
        },
        onExit: function (e) {
            // TODO: 'this'?
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                if (mgr._ShowWarningOnPageExit) {
                    if (mgr._SkipCheck) {
                        //_SkipCheck = false;
                        return;
                    }
                    var hdd = mgr.hasDirtyData();
                    if (hdd && (mgr._IgnoreDirtyFlag == false) || Sage.Utility.getModeId() === 'insert') {
                        window.setTimeout(function () {
                            Sage.Utility.hideRequestIndicator(null, {});
                        }, 1000);
                        if (window.event) {
                            window.event.returnValue = mgr._PageExitWarningMessage;
                        } else {
                            return mgr._PageExitWarningMessage;
                        }
                    }
                }
            }
            return;
        },
        canChangeEntityContext: function () {
            if ((this._WatchChanges) && (this.hasDirtyData()) && (this._ShowWarningOnPageExit)) {
                if (confirm(this._PageExitWarningMessage)) {
                    this.clearDirtyStatus();
                    return true;
                } else {
                    return false;
                }
            }
            return true;
        },
        hasDirtyData: function () {
            return (this._CurrentEntityIsDirty || (this._DirtyAjaxItems && this._DirtyAjaxItems.length > 0));
        },
        markDirty: function (e) {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                if (mgr._WatchChanges) {
                    mgr._CurrentEntityIsDirty = true;
                    if (mgr._IgnoreDirtyFlag == false) {
                        dojo.style(dojo.byId(mgr._MsgDisplayID), 'display', 'inline');
                    }
                }
            }
        },
        addDirtyAjaxItem: function (itemId) {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                //make sure we don't already know about this one...
                var len = this._DirtyAjaxItems.length;
                for (var i = 0; i < len; i++) {
                    if (this._DirtyAjaxItems[i] === itemId) {
                        return;
                    }
                }
                this._DirtyAjaxItems.push(itemId);
                //show the message without marking _CurrentEntityIsDirty so it can be tracked separately.
                if (this._WatchChanges) {
                    if (this._IgnoreDirtyFlag == false) {
                        dojo.style(dojo.byId(mgr._MsgDisplayID), 'display', 'inline');
                    }
                }
            }
        },
        clearDirtyAjaxItem: function (itemId) {
            var len = this._DirtyAjaxItems.length;
            for (var i = 0; i < len; i++) {
                if (this._DirtyAjaxItems[i] === itemId) {
                    this._DirtyAjaxItems.splice(i, 1);
                }
            }
            if (!this.hasDirtyData()) {
                $("#" + this._MsgDisplayID).hide();
            }
        },
        clearDirtyStatus: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                mgr._CurrentEntityIsDirty = false;
                $("#" + mgr._MsgDisplayID).hide();
            }
        },
        notifyIsSaving: function () {
            if (Sage.Utility.Validate._isValid) {
                var mgr = Sage.Services.getService("ClientBindingManagerService");
                if (mgr) {
                    Sys.WebForms.PageRequestManager.getInstance().add_endRequest(mgr.handleEndSaveRequest);
                    mgr.clearDirtyStatus();
                    if (Sage.Utility.getModeId() === 'insert') {
                        mgr._SkipCheck = true;
                    }
                    mgr.onSave();
                }
            }
        },
        handleEndSaveRequest: function (sender, args) {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                if (!args.get_error()) {
                    mgr.clearDirtyStatus();
                } else {
                    mgr.markDirty();
                }
                Sys.WebForms.PageRequestManager.getInstance().remove_endRequest(mgr.handleEndSaveRequest);
            }
        },
        saveForm: function () {
            var btn = dojo.byId(this._SaveBtnID);
            if (btn) {
                if ((btn.tagName.toLowerCase() == "input") && (btn.type == "image")) {
                    this.notifyIsSaving();
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(btn.name, null);
                } else if (btn.onClick) {
                    this.notifyIsSaving();
                    btn.onClick();
                }
            }
        },
        registerResetBtn: function (elemId) {
            if (elemId) {
                var btn = dojo.byId(elemId);
                if (btn) {
                    //TODO: dojo.connect
                    $addHandler(btn, "click", this.resetCurrentEntity);
                }
            }
        },
        registerSaveBtn: function (elemId, workspace) {
            if (elemId) {
                var btn = dojo.byId(elemId);
                if (btn) {
                    //TODO: dojo.connect
                    dojo.connect(btn, 'onclick', function () {
                        Sage.Utility.Validate.onWorkSpaceSave(workspace);
                    });
                    $addHandler(btn, "click", this.notifyIsSaving);
                    if (this._SaveBtnID == "") {
                        this._SaveBtnID = elemId;
                    }
                }
            }
        },
        registerDialogCancelBtn: function (elemId) {
            if (elemId) {
                var btn = dojo.byId(elemId);
                if (btn) {
                    //TODO: dojo.connect
                    $addHandler(btn, "click", this.rollbackCurrentTransaction);
                }
            }
        },
        registerBoundControls: function (controlList) {
            if ((this._WatchChanges) && (controlList)) {
                var ctrlIDs = controlList.split(",");
                var elem;
                for (var i = 0; i < ctrlIDs.length; i++) {
                    if (dojo.byId(ctrlIDs[i])) {
                        elem = dojo.byId(ctrlIDs[i]);
                    }
                    else if (dijit.byId(ctrlIDs[i])) {
                        elem = dijit.byId(ctrlIDs[i]).focusNode;
                    }
                    if (elem) {
                        // check here for attribute saying it is a container - if it is, recurse children looking for the correct one(s)...
                        if (elem.attributes["slxcompositecontrol"]) {
                            this.findChildControls(elem);
                        } else {
                            this.attachChangeHandler(elem);
                        }
                    }
                }
            }
            this.findWarningExceptions();
        },
        findChildControls: function (elem) {
            if ((elem) && (elem.attributes) && (elem.attributes["slxchangehook"]) && (!elem.attributes["slxcompositecontrol"])) {
                //alert("found a changehook: \nID: " + elem.id + "\nname: " + elem.name + "\nelem: " + elem);
                this.attachChangeHandler(elem);
            } else {
                if (elem.childNodes) {
                    for (var n = 0; n < elem.childNodes.length; n++) {
                        this.findChildControls(elem.childNodes[n]);
                    }
                }
            }
        },
        setDijitControlFocus: function (ctrlid) {
            var inputDijit = dijit.byId(ctrlid);
            if (inputDijit) {
                inputDijit.focus();
                if (inputDijit.select) {
                    inputDijit.select();
                }
                return true;
            }
        },
        setControlFocus: function (ctrlid) {
            var trySelect = function (elem) {
                if ((typeof (elem.select) == "function") || (typeof (elem.select) == "object")) {
                    elem.select();
                    // IE needs focus as well as select, or
                    // TAB will move to Navigation bar
                    try {
                        elem.focus();
                    }
                    catch (ex) {
                        // IE will throw an exception
                        // if focus is called on hidden/disabled fields
                        return false;
                    }
                    return true;
                }
                return false;
            };
            var elem = $("#" + ctrlid)[0];
            if (elem) {
                if (trySelect(elem)) { return; }
                elem = $("#" + ctrlid + " TEXTAREA")[0];
                if ((elem) && (trySelect(elem))) { return; }

                elem = $("#" + ctrlid + " INPUT")[0];
                // elem.select() doesn't always give focus to some composite controls
                //  so custom logic may be necessary per input type
                if (elem) {
                    console.log($("#" + ctrlid + " INPUT"));
                    // If this is a drop-down, the button would be selected
                    //  For: Picklist control
                    if (dojo.hasClass(elem, "dijitArrowButtonInner")) {
                        if (this.setDijitControlFocus(ctrlid + '-SingleSelectPickList-Combo')) { return; }
                    }
                    // [0] might be the validation image instead of the textbox
                    // For: Lookup control, Name control
                    else if (dojo.hasClass(elem, "dijitValidationInner")) {
                        elem = $("#" + ctrlid + " INPUT")[1];
                        if ((elem) && (trySelect(elem))) { return; }
                    }
                    // For: DateTime control
                    else if (dojo.style(elem, 'display') == 'none'
                        && elem.classList.length == 0) {
                        elem = $('#' + ctrlid + ' INPUT')[3];

                        if ((elem) && (trySelect(elem))) { return; }
                    }
                    // For: basic control
                    if (trySelect(elem)) { return; }
                }
                elem = $("#" + ctrlid + " SELECT")[0];
                if ((elem) && (trySelect(elem))) { return; }
            }
        },
        attachChangeHandler: function (elem) {
            if (elem) {
                if ((elem.tagName == "A") || ((elem.tagName == "INPUT") && ((elem.type == "button") || (elem.type == "image") || (elem.type == "submit")))) {
                    this.registerChildPostBackWarningExceptions(elem);
                } else {
                    //TODO: dojo.disconnect
                    try { $removeHandler(elem, "change", this.markDirty); } catch (e) { }
                    //TODO: dojo.connect
                    $addHandler(elem, "change", this.markDirty);
                }
            }
        },
        registerPostBackWarningExceptions: function (elem) {
            if (elem) {
                elems = $("a,input[type='INPUT'],input[type='BUTTON'],input[type='IMAGE'],input[type='SUBMIT']", elem).get();
                for (var i = 0; i < elems.length; i++) {
                    this.registerChildPostBackWarningExceptions(elems[i]);
                }
            }
        },
        findWarningExceptions: function () {
            var elems = $("span[slxcompositecontrol], div[slxcompositecontrol]").get();
            for (var i = 0; i < elems.length; i++) {
                this.registerPostBackWarningExceptions(elems[i]);
            }
        },
        registerChildPostBackWarningExceptions: function (elem) {
            if (elem) {
                if ($(elem).hasClass("leavesPage")) {
                    return;
                }
                if ((elem.tagName == "A") || ((elem.tagName == "INPUT") && ((elem.type == "button") || (elem.type == "image") || (elem.type == "submit")))) {
                    try { $removeHandler(elem, "click", this.skipWarning); } catch (e) { }
                    $addHandler(elem, "click", this.skipWarning);
                }
            }
        },
        turnOffWarnings: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                mgr._SkipCheck = true;
                var x = window.setTimeout(function () {
                    var mgr = Sage.Services.getService("ClientBindingManagerService");
                    if (mgr) {
                        mgr._SkipCheck = true;
                    }
                }, 500); //just in case there is a timer waiting to turn it back on
            }
        },
        resumeWarning: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                mgr._SkipCheck = false;
            }
        },
        skipWarning: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            if (mgr) {
                mgr._SkipCheck = true;
                var x = window.setTimeout(function() {
                    var mgr = Sage.Services.getService("ClientBindingManagerService");
                    if (mgr) {
                        mgr._SkipCheck = false;
                    }
                }, 500);
            }
        },
        resetCurrentEntity: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            mgr.doFormReset();
            if (mgr) {
                var contextservice = Sage.Services.getService("ClientContextService");
                if (contextservice) {
                    if (contextservice.containsKey("ResetCurrentEntity")) {
                        contextservice.setValue("ResetCurrentEntity", "true");
                    } else {
                        contextservice.add("ResetCurrentEntity", "true");
                    }
                }
                mgr.clearDirtyStatus();
            }
        },
        rollbackCurrentTransaction: function () {
            var mgr = Sage.Services.getService("ClientBindingManagerService");
            mgr.doSectionReset("dialog");
            if (mgr) {
                var contextservice = Sage.Services.getService("ClientContextService");
                if (contextservice) {
                    if (contextservice.containsKey("RollbackEntityTransaction")) {
                        contextservice.setValue("RollbackEntityTransaction", mgr._entityTransactionID);
                    } else {
                        contextservice.add("RollbackEntityTransaction", mgr._entityTransactionID);
                    }
                }
            }
        },
        doFormReset: function () {
            document.forms[0].reset();
        },
        doSectionReset: function (sectionId) {
            function getElements(sectionId, tagName) {
                if ((sectionId == "main") && (document.getElementById("MainContent"))) {
                    return document.getElementById("MainContent").getElementsByTagName(tagName);
                } else if ((sectionId == "tabs") && (document.getElementById("TabControl"))) {
                    return document.getElementById("TabControl").getElementsByTagName(tagName);
                } else if (document.getElementById("DialogWorkspace_content")) {
                    return document.getElementById("DialogWorkspace_content").getElementsByTagName(tagName);
                }
                return new Array();
            }
            var elem;
            var elems = getElements(sectionId, "INPUT");
            if (elems.length > 0) {
                for (var i = 0; i < elems.length; i++) {
                    elem = elems[i];
                    if ((elem.type == "checkbox") || (elem.type == "radio")) {
                        if (elem.checked != elem.defaultChecked) {
                            elem.checked = elem.defaultChecked;
                        }
                    } else {
                        if (elem.value != elem.defaultValue) {
                            elem.value = elem.defaultValue;
                        }
                    }
                }
                elems = getElements(sectionId, "TEXTAREA");
                for (var i = 0; i < elems.length; i++) {
                    elem = elems[i];
                    if (elem.value != elem.defaultValue) {
                        elem.value = elem.defaultValue;
                    }
                }
                elems = getElements(sectionId, "SELECT");
                for (var i = 0; i < elems.length; i++) {
                    elem = elems[i];
                    for (var k = 0; k < elem.options.length; k++) {
                        elem.options[k].selected = elem.options[k].defaultSelected;
                    }
                }
            } else {
                document.forms[0].reset();
            }
        },
        setCurrentTransaction: function (transaction) {
            this._entityTransactionID = transaction;
        },
        clearReset: function () {
            if (Sage.Services) {
                var contextservice = Sage.Services.getService("ClientContextService");
                if (contextservice) {
                    if (contextservice.containsKey("ResetCurrentEntity")) {
                        contextservice.remove("ResetCurrentEntity");
                    }
                    if (contextservice.containsKey("RollbackEntityTransaction")) {
                        contextservice.remove("RollbackEntityTransaction");
                    }
                }
            }
        }

    });  // end dojo declare

    /**
    * Make an instance of this service available to the
    * Sage.Services.getService method.
    */
    if (!Sage.Services.hasService('ClientBindingManagerService')) {
        Sage.Services.addService('ClientBindingManagerService', new Sage.Services.ClientBindingManagerService());
    }

    return widget;
});
},
'Sage/TaskPane/SecurityManagerTasksTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/SecurityManagerTasksTasklet", [
    'dojo/i18n!./nls/SecurityManagerTasksTasklet',
    'Sage/TaskPane/_BaseTaskPaneTasklet',
    'Sage/TaskPane/TaskPaneContent',
    'Sage/MainView/SecurityMgr/SecurityProfile',
    'dojo/_base/declare'
],
function (i18nStrings, _BaseTaskPaneTasklet, TaskPaneContent, SecurityProfile, declare) {
    var securityManagerTasksTasklet = declare('Sage.TaskPane.SecurityManagerTasksTasklet', [_BaseTaskPaneTasklet, TaskPaneContent], {
        addSecurityProfileTitle: 'Add Profile',
        editSecurityProfileTitle: 'Edit Profile',
        taskItems: [],
        constructor: function () {
            dojo.mixin(this, i18nStrings);
            this.taskItems = [
                {
                    taskId: 'AddSecurityProfile',
                    type: "Link",
                    displayName: this.addSecurityProfileTitle,
                    clientAction: 'securityManagerTasksActions.addSecurityProfile();',
                    securedAction: 'Entities/SecurityManager/AddProfile'
                },
                {
                    taskId: 'EditSecurityProfile',
                    type: "Link",
                    displayName: this.editSecurityProfileTitle,
                    clientAction: 'securityManagerTasksActions.editSecurityProfile();',
                    securedAction: 'Entities/SecurityManager/EditProfile'
                }
            ];
        },
        addSecurityProfile: function () {
            //this.addSecurityProfileActionItem(true);
            var store = this.getStore();
            store.newItem({
                onComplete: this.receiveNewProfileToEdit,
                scope: this
            });
        },
        getStore: function () {
            if (this.store) {
                return this.store;
            }
            var sDataSvc = Sage.Data.SDataServiceRegistry.getSDataService('system');
            this.store = new Sage.Data.SingleEntrySDataStore({
                service: sDataSvc,
                resourceKind: 'securityProfiles',
                include: [],
                select: ['profileDescription', 'defaultPermission', 'profileType']
            });
            return this.store;
        },
        receiveNewProfileToEdit: function (profile) {
            this.receiveProfileToEdit(profile, true);
        },
        receiveProfileToEdit: function (profile, isNew) {
            this._isNew = (isNew === true);
            var dlg = dijit.byId('secProfileDlg');
            if (dlg) {
                dlg.show();
                var description = dijit.byId('secDlg_Description');
                var type = dijit.byId('secDlg_Type');
                
                if(profile.profileDescription) {
                    description.set('value', profile.profileDescription);
                }
                
                if(profile.profileType) {
                    type.set('value', profile.profileType);
                }
                else {
                    type.set('value', 'UserDefined');
                }
            }
        },
        addSecurityProfileActionItem: function (isNew) {
            return function () {
                var addProfileDialog = new SecurityProfile(isNew);
                addProfileDialog.show();
            };
        },
        editSecurityProfile: function () {
            var currentProfileId;
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (grpContextSvc) {
                var ctx = grpContextSvc.getContext();
                currentProfileId = ctx.CurrentGroupID;
                var st = this.getStore();
                st.fetch({
                    predicate: '"' + currentProfileId + '"',
                    onComplete: this.receiveProfileToEdit,
                    scope: this
                });
            }
        },
        save: function (options) {
            if (this.store) {
                var newDescription = dijit.byId('secDlg_Description');
                var newType = dijit.byId('secDlg_Type');
                this.store.setValue(false, 'profileDescription', newDescription.value);
                this.store.setValue(false, 'profileType', newType.value);
                if (this._isNew) {
                    this.store.saveNewEntity(false, options.success, options.failure, this);
                } else {
                    this.store.save(options);
                }
            }
        },
        saveAndClose: function () {
            this.save({
                success: function (entity) {
                    var dlg = dijit.byId('secProfileDlg');
                    dlg.hide();
                    if(this._isNew) {
                        var newTab = new dijit.layout.ContentPane();
                        newTab.id = entity['$key'];
                        newTab.title = entity.profileDescription;
                        var groupTab = dijit.byId('GroupTabs');
                        groupTab.addChild(newTab);
                        groupTab.selectChild(newTab);
                    }
                    else {
                        var existingTab = dijit.byId(entity['$key']);
                        existingTab.set('title', entity.profileDescription);
                    }
                },
                failure: function (err) {
                    alert('The profile could not be saved: ' + err);
                }
            });
        }
        //        editSecurityProfile: function () {
        //            this.prepareSelectedRecords(this.editSecurityProfileActionitem(this.getSelectionInfo()));
        //        },
        //        editSecurityProfileActionitem: function (selectionInfo) {
        //            return function () {
        //                var editProfileDialog = new SecurityProfile(selectionInfo);
        //                editProfileDialog.show();
        //            };
        //        }
    });
    return securityManagerTasksTasklet;
});
},
'Sage/UI/Alarms/UnconfirmedPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/UnconfirmedPane", [
    'dijit/form/Button',
    'Sage/UI/Alarms/AlertPane',
    'Sage/UI/Alarms/UnconfirmedAlarm',
    'Sage/Link',
    'dojo/i18n',
    'dojo/i18n!./nls/UnconfirmedPane',
    'dojo/_base/declare'
],
function (Button, AlertPane, UnconfirmedAlarm, link, i18n, unconfirmedPaneStrings, declare) {
    var unconfirmedPane = declare('Sage.UI.Alarms.UnconfirmedPane', AlertPane, {
        showConfirmationsText: 'Show Confirmations',
        showCalendarText: 'Show Calendar',
        acceptText: 'Accept',
        declineText: 'Decline',
        _acceptButton: false,
        templateString: ['<div>',
            '<div class="alarm-items-contents" dojoAttachPoint="_alertContents"></div>',
            '<div class="alarm-snoozebar" dojoAttachPoint="_confButtonBar">',
                '<table style="width:100%">',
                    '<tr>',
                        '<td class="leftTools"><a href="Calendar.aspx" title="${showCalendarText}">${showCalendarText}</a>',
                        '<td class="leftTools"><a href="javascript: Sage.Link.toActivityListView(\'confirmations\')" title="${showConfirmationsText}">${showConfirmationsText}</a></td>',
                        '<td class="rightTools">',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_acceptSelected" dojoAttachPoint="_acceptButton">${acceptText}</button>',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_declineSelected">${declineText}</button>',
                        '</td>',
                    '</tr>',
                '</table>',
            '</div>',
        '</div>'].join(''),
        constructor: function () {
            dojo.mixin(this, unconfirmedPaneStrings);
        },
        onShow: function () {
            this._acceptButton.focus();
        },
        _addAlert: function (alert) {
            var confWid = new UnconfirmedAlarm({ userNotification: alert, selected: this.selectedAlerts.hasOwnProperty(alert['$key']) });
            this.alertWidgets.push(confWid);
            dojo.place(confWid.domNode, this._alertContents);
        },
        _acceptSelected: function () {
            var len = this.alertWidgets.length - 1;
            for (var i = len; i > -1; i--) {
                var wid = this.alertWidgets[i];
                if (wid.selected) {
                    var activityService = Sage.Services.getService('ActivityService');
                    activityService.acceptConfirmation({
                        notification: wid.userNotification,
                        success: this.onPostSuccess,
                        failure: function () { this._alertChanged(this.alertWidgets.length); },
                        scope: this
                    });
                    this.alertWidgets.splice(i, 1);
                    wid.destroy();
                }
            }
        },
        _declineSelected: function () {
            var len = this.alertWidgets.length - 1;
            for (var i = len; i > -1; i--) {
                var wid = this.alertWidgets[i];
                if (wid.selected) {
                    var activityService = Sage.Services.getService('ActivityService');
                    activityService.declineConfirmation({
                        notification: wid.userNotification,
                        success: this.onPostSuccess,
                        failure: function () { this._alertChanged(this.alertWidgets.length); },
                        scope: this
                    });
                    this.alertWidgets.splice(i, 1);
                    wid.destroy();
                }
            }
        },
        getUnhandledAlertCount: function () {
            return this.alertWidgets.length;
            //            var unconfirmed = 0;
            //            for (var i = 0; i < this.alertItems.length; i++) {
            //                //ToDo: if is still unconfirmed                        <---<<<   <---<<<
            //                unconfirmed++;
            //            }
            //            return unconfirmed;
        },
        onPostSuccess: function () {
            this._alertChanged(this.alertWidgets.length);
        }
    });
    return unconfirmedPane;
});

},
'Sage/MainView/ActivityMgr/AlarmListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/MainView/ActivityMgr/AlarmListPanelConfig", [
        'Sage/MainView/ActivityMgr/BaseListPanelConfig',
        'Sage/Utility',
        'Sage/Utility/Activity',
        'Sage/UI/SummaryFormatterScope',
        'Sage/UI/SDataSummaryFormatterScope',
        'Sage/Data/SDataStore',
        'Sage/UI/Columns/DateTime',
        'dijit/form/FilteringSelect',
        'Sage/MainView/ActivityMgr/SnoozeButton',
        'Sage/MainView/ActivityMgr/SnoozeOptions',
        'Sage/Data/SDataServiceRegistry',
        'dojo/_base/declare',
        'dojo/i18n!./nls/ActivityListPanelConfig'

],

function (
   BaseListPanelConfig,
   SageUtility,
   UtilityActivity,
   SummaryFormatterScope,
   SDataSummaryFormatterScope,
   SDataStore,
   ColumnsDateTime,
   FilteringSelect,
   SnoozeButton,
   SnoozeOptions,
   sDataServiceRegistry,
   declare,
   nlsResources
) {
    //dojo.requireLocalization("Sage.MainView.ActivityMgr", "ActivityListPanelConfig");
    var alarmListPanelConfig = declare('Sage.MainView.ActivityMgr.AlarmListPanelConfig', [BaseListPanelConfig], {

        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'alarms';
            this._resourceKind = 'userActivities';
            this.entityName = 'UserActivity';
            this._contextMenu = 'ActivityListContextMenu';
            this._scheduleContextMenu = 'ScheduleContextMenu';
            //this._service = sDataServiceRegistry.getSDataService('dynamic');
            this._service = sDataServiceRegistry.getSDataService('system');
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._include = this._getInclude();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.toolBar = this._getToolBars();
            this.keyField = "$key";
            this.hasCompositeKey = true;
            this.rebuildOnRefresh = true,
            dojo.subscribe('/entity/activity/change', this._onListRefresh);
            dojo.subscribe('/entity/activity/delete', this._onListRefresh);
            dojo.subscribe('/entity/activity/create', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/change', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/delete', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/create', this._onListRefresh);
            dojo.subscribe('/entity/activity/confirm', this._onListRefresh);
            dojo.subscribe('/entity/activity/decline', this._onListRefresh);
               
        },

        _onListRefresh: function (event) {

            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('alarms');
        },

        _getSelect: function () {
            var select = [
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Alarm',
                      'Activity/AlarmTime',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'UserId',
                      'AlarmTime',
                      'Alarm',
                      'Status'
                     ];
            return select;
        },
        _getInclude: function () {
            var includes = ["Activity", "$descriptors"];
            return includes;
        },
        _getSort: function () {
            var sort = [];
            return sort;
        },
        _getWhere: function () {
            var where; 
            where = dojo.string.substitute("(User.Id eq '${0}' and Status ne 'asDeclned') and ((Alarm eq true and AlarmTime ne null and AlarmTime lt '${1}') or (Alarm eq null and AlarmTime eq null and Activity.Alarm eq true and Activity.AlarmTime lt '${1}'))", [this._currentUserId, Sage.Utility.Convert.toIsoStringFromDate(new Date())]);
            return where;
        },
        _getStructure: function () {

            var colNameAttachment = "<div class='Global_Images icon16x16 icon_attach_to_16' title='" + this._nlsResources.colNameAttachment + "' />"; 
            var colNameRecurring = "<div class='Global_Images icon16x16 icon_recurring' title='" + this._nlsResources.colNameRecurring + "' />"; 
            var colNameStatus = "<div class='Global_Images icon16x16 icon_unconfirmedActivity16x16' title='" + this._nlsResources.colNameUnConfirmStatus + "' />";
            var colNameType = this._nlsResources.colNameType || 'Activity Type';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            var colNameDuration = this._nlsResources.colNameDuration || 'Duration';
            var colNameContact = this._nlsResources.colNameContact || 'Name';
            var colNameAccount = this._nlsResources.colNameAccount || 'Account/Company';
            var colNameRegarding = this._nlsResources.colNameRegarding || 'Regarding';
            var colNamePriority = this._nlsResources.colNamePriority || 'Priority';
            var colNameUserId = this._nlsResources.colNameUserId || 'Leader';
            var colNameTypeName = this._nlsResources.colNameTypeName || 'Type';

            var structure = [
                { field: 'Status', name: colNameStatus, type: UtilityActivity.activityConfirmStatusCell, width: '20px' },
                { field: 'Activity.Attachment', name: colNameAttachment, type: UtilityActivity.activityAttachCell, width: '20px' },
                { field: 'Activity.Recurring', name: colNameRecurring, type: UtilityActivity.activityRecurringCell, width: '20px' },
                { field: 'Activity.Type', name: colNameType, type: UtilityActivity.activityTypeCell, width: '90px'},
                { field: 'Activity.StartDate', name: colNameStartDate, type: ColumnsDateTime, timelessField: 'Activity.Timeless', width: '100px' },
                { field: 'Activity.Duration', name: colNameDuration, type: UtilityActivity.activityDurationCell, width: '40px' },
                { field: 'Activity.ContactId', name: colNameTypeName, type: UtilityActivity.activityNameTypeCell, width: '40px' },
                { field: 'Activity.ContactName', name: colNameContact, type: UtilityActivity.activityNameCell, width: '200px' },
                { field: 'Activity.AccountName', name: colNameAccount, type: UtilityActivity.activityAccountCell, width: '200px' },
                { field: 'Activity.Description', name: colNameRegarding, width: '100px' },
                { field: 'Activity.Priority', name: colNamePriority, width: '40px' },
                {field: 'Activity.Leader', name: colNameUserId, type: UtilityActivity.activityLeaderCell, width: '200px' }

            ];

            return structure;
        },

        _getSummaryConfig: function () {
            var store = new SDataStore({
                id: this._listId,
                service: this._service,
                resourceKind: this._resourceKind,
                include: ['Activity', '$descriptors'],
                select: ['$key'],
                expandRecurrences: false,
                // sort: this._sort,
                //query: {conditions:this._where }
                where: this._where
            });

            var structure = [
                {
                    field: '$key',
                    formatter: 'formatSummary',
                    width: '100%',
                    name: 'Summary View'
                }
            ];
            var formatScope = this._getFormatterScope();
            var summaryConfig = {
                structure: structure,
                layout: 'layout',
                store: store,
                rowHeight: 170,
                rowsPerPage: 10,
                formatterScope: formatScope
            };

            return summaryConfig;
        },

        _getDetailConfig: function () {

            var formatScope = this._getFormatterScope();
            var requestConfig = this._getSummaryDetailRequestConfig();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: requestConfig,
                templateLocation: 'MainView/ActivityMgr/Templates/UserActivityDetailSummary.html'
            };
            return detailConfig;

        },
        _getSummaryListRequestConfig: function () {

            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'User',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/Notes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity', '$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getSummaryDetailRequestConfig: function () {
            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'User',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/LongNotes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity', '$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getFormatterScope: function () {
            var requestConfig = this._getSummaryListRequestConfig();
            var formatScope = new SDataSummaryFormatterScope({
                templateLocation: 'MainView/ActivityMgr/templates/UserActivityListSummary.html',
                resetDataManager: true,
                requestConfiguration: requestConfig

            });
            return formatScope;

        },

        _getToolBars: function () {
            var toolBars = {
                items: [
                // {
                //   custom:true,
                //   toolBarItem: new Sage.MainView.ActivityMgr.SnoozeButton()                  
                //},
                {
                custom: true,
                imageClass: 'icon_SnoozeAlarm_16x16',
                tooltip: this._nlsResources.SnoozeAlarm || 'Snooze Alarm',
                onClick: function () {
                    var snoozeOptions = new SnoozeOptions();
                    snoozeOptions.show();

                }
            },
                 {
                     custom: true,
                     imageClass: 'icon_DismissAlarm_16x16',
                     tooltip: this._nlsResources.DismissAlarm || 'Dismiss Alarm',
                     onClick: function () {
                         var activityService = Sage.Services.getService('ActivityService');
                         activityService.dismissAlarm();
                     }
                 }]
        };
        this.updateToolBar = true;
        return toolBars;
    },
    getTimelessProperty: function (propertyName) {
        return "Activity.Timeless";

    }

});

return alarmListPanelConfig;

});
},
'Sage/UI/Alarms/nls/AlarmPane':function(){
﻿define("Sage/UI/Alarms/nls/AlarmPane", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dismissAllText: 'Dismiss all',
            dismissText: 'Dismiss',
            fiveMinText: '5 minutes',
            tenMinText: '10 minutes',
            fifteenMinText: '15 minutes',
            thirtyMinText: '30 minutes',
            oneHourText: '1 hour',
            twoHourText: '2 hours',
            fourHourText: '4 hours',
            eightHourText: '8 hours',
            oneDayText: '1 day',
            twoDayText: '2 days',
            threeDayText: '3 days',
            oneWeekText: '1 week',
            twoWeekText: '2 weeks',
            snoozeText: 'Snooze',
            snoozeByText: 'Snooze by:',
            snoozeAllText: 'Snooze All',
            showCalendarText: 'Show Calendar'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Filters/LookupFilter':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/LookupFilter", [
       'dijit/_Widget',
       'dijit/_Contained',
       'dojo/NodeList-traverse',
       'Sage/_Templated',
       'Sage/_ActionMixin',
       'dojo/string',
       'dojo/_base/lang',
       'dojo/_base/array',
       'dijit/form/Select',
       'dijit/form/TextBox',
       'dojo/on',
       'dojo/i18n!../nls/ConditionManager',
       'dojo/_base/declare'
],
function (
        _Widget,
        _Contained,
        NodeList,
        _Templated,
        _ActionMixin,
        dString,
        lang,
        array,
        Select,
        TextBox,
        on,
        conditionManagerResource,
        declare) {
    var widget = declare('Sage.UI.Filters.LookupFilter', [_Widget, _Contained, _ActionMixin, _Templated], {
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="filter-type-checkbox filter-collapsed">',
                '<h3 data-action="toggleExpand" data-dojo-attach-point="filterNameNode">{%: $.filter.displayName || $.filter.filterName %}',
                '</h3>',
                '<ul class="filter-list" data-dojo-attach-point="listNode">',
                '<select class="lookup-filter-operators" data-dojo-attach-point="operators" data-dojo-type="dijit.form.Select"></select><br/>',
                '<input class="filter-lookup-input" data-dojo-attach-point="textInput" data-dojo-type="dijit.form.TextBox" />',
                '</ul>',
            '</div>'
        ]),
        _loaded: false,
        _filterGroup: 'default',
        appliedValues: null,
        _hasApplied: false,
        operatorsMapping: {
            'Equal': conditionManagerResource.equalTo,
            'NotEqual': conditionManagerResource.notEqualTo,
            'LessThan': conditionManagerResource.lessThan,
            'LessThanEqual': conditionManagerResource.equalOrLessThan,
            'GreaterThan': conditionManagerResource.greaterThan,
            'GreaterThanEqual': conditionManagerResource.equalOrGreaterThan,
            'StartsWith': conditionManagerResource.startingWith,
            'EndsWith': conditionManagerResource.endsWith,
            'Contains': conditionManagerResource.contains
        },
        filter: null,
        store: null,
        _autoSearchHandle: null,
        _autoSearchDelay: 1000,
        _selectedOp: 'Contains',
        postMixInProperties: function () {
            this.inherited(arguments);
            if (this.appliedValues) {
                setTimeout(lang.hitch(this, this.toggleExpand), 500);               
            }
        },
        postCreate: function () {
            this.inherited(arguments);
            this.textInput.on('keyDown', lang.hitch(this, this._onInputKeyDown));
            if (this.appliedValues) {
                this.textInput.set('value', this.appliedValues.value.value);
                this._selectedOp = this.appliedValues.value.operator;
                this._hasApplied = true;
            }
       
        },
        _setupAutoSearch: function () {
            if (this._autoSearchHandle > 0) {
                window.clearTimeout(this._autoSearchHandle);
            }

            this._autoSearchHandle = setTimeout(lang.hitch(this, function () {
                this.doSearch();
            }), this._autoSearchDelay);
        },
        uninitialize: function() {
            this.inherited(arguments);
        },
        toggleExpand: function(params, evt, el) {
            var ops = this.filter &&
                        this.filter.details && 
                        this.filter.details.userLookupFilter &&
                        this.filter.details.userLookupFilter.operators;
            if (this.domNode) {
                dojo.toggleClass(this.domNode, 'filter-collapsed');
            }
            if(this.operators){
                if (!this._loaded) {
                    this._loaded = true;
                    array.forEach(ops, lang.hitch(this, function (op) {
                        opSelected = false;
                        if (op === this._selectedOp) {
                            opSelected = true;
                        }
                        this.operators.addOption({
                            disabled: false,
                            label: this.operatorsMapping[op],
                            selected: opSelected,
                            value: op
                        });
                    }));
                   this.operators.set('value', this._selectedOp);
                }     

            }
        },
        _onInputKeyDown: function (event) {
            if (event.keyCode === 13 || event.keyCode === 0) {
                this.doSearch();
            } else {
                // Any time a key other than enter is pressed,
                // reset the auto search timeout
                this._setupAutoSearch();
            }
        },
        doSearch: function () {
            var value,
                name = this.filter.filterName,
                source = this;
                
            value = {
                operator: this.operators.get('value'),
                value: this.textInput.get('value')
            };
            
            this.onSelectionChange(name, value, source);
        },
        onSelectionChange: function(name, value, source) {
            dojo.publish(dString.substitute("/ui/filters/${0}/change", [this._filterGroup]), [this.filter, name, value, source]);
        }
    });

    return widget;
});
},
'Sage/UI/MenuBarItem':function(){
require({cache:{
'url:Sage/templates/MenuBarItem.html':"<div class=\"dijitReset dijitInline dijitMenuItem\" data-dojo-attach-point=\"focusNode\" waiRole=\"menuitem\" tabIndex=\"-1\"\r\n    data-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n    <span>\r\n    <img src=\"${_blankGif}\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\r\n    <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\r\n    <span class=\"dijitMenuItemLabel\" data-dojo-attach-point=\"containerNode\"></span>\n    </span>\n</div>\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/MenuBarItem", [
        'Sage/UI/MenuItem',
        'dojo/text!../templates/MenuBarItem.html',
        'dojo/_base/declare'
],
function (menuItem, template, declare) {
    var widget = declare("Sage.UI.MenuBarItem", menuItem, {
        iconClass: '',
        _setIconClassAttr: { node: 'iconNode', type: 'class' },
        
        label: '',
        _setLabelAttr: { node: 'containerNode', type: 'innerHTML' },
        
        icon: '',
        _setIconAttr: { node: 'iconNode', type: 'attribute', attribute: 'src' },
        
        imageClass: 'noIcon',
        
        iconStyle: '',
        _setIconStyleAttr: { node: 'iconNode', type: 'style' },
        
        templateString: template
    });
    
    return widget;
});
},
'Sage/TaskPane/ActivityManagerTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/ActivityManagerTasklet", [
        'dijit/_Widget',
        'dijit/_Container',
        'Sage/_Templated',
        'Sage/Services/_ServiceMixin',
        'Sage/UI/Dialogs',
        'Sage/Services/ActivityService',
        'dojo/_base/declare'
],

function (
   _Widget,
   _Container,
   _Templated,
   _ServiceMixin,
   Dialogs,
   ActivityService,
   declare
) {
    var activityManagerTasklet = declare('Sage.TaskPane.ActivityManagerTasklet', [_Widget, _Container, _ServiceMixin, _Templated], {
        serviceMap: {
            'groupContextService': 'ClientGroupContext',
            'metaDataService': { type: 'sdata', name: 'metadata' }
        },

        widgetsInTemplate: false,
        widgetTemplate: new Simplate([
             '<div class="activityTask-panel"  dojoAttachPoint="containerNode">',
            '</div>'
        ]),
        _configuration: null,
        _configurationConnects: null,
        _configurationProvider: null,
        _configurationProviderType: null,
        _appliedSet: null,
        configurationProvider: null,
        configurationProviderType: null,
        autoConfigure: true,
        taskGroup: 'default',
        paneContents: null,
        constructor: function () {


        },
        postCreate: function () {

            this.inherited(arguments);

            if (!this._configurationProvider && this._configurationProviderType)
                this.set('configurationProvider', new this._configurationProviderType());

            if (this.autoConfigure) this.requestConfiguration();
        },
        uninitialize: function () {
            this.inherited(arguments);

            if (this._configurationProvider) this._configurationProvider.destroy();
        },

        _handleConfigurationChange: function () {
            this.requestConfiguration();
        },
        _setConfigurationProviderAttr: function (configurationProvider) {
            if (this._configurationConnects) {
                dojo.forEach(this._configurationConnects, function (connection) {
                    this.disconnect(connection);
                }, this);
            }

            if (this._configurationProvider && this._configurationProvider !== value) this._configurationProvider.destroy();

            this._configurationProvider = configurationProvider;
            this._configurationConnects = [];

            if (this._configurationProvider) {
                this._configurationConnects.push(this.connect(this._configurationProvider, 'onConfigurationChange', this._handleConfigurationChange));

                this._configurationProvider.set('owner', this);

                // only request configuration here if the widget has been fully created, otherwise
                // it will be handled by postCreate.
                if (this._created)
                    if (this.autoConfigure)
                        this.requestConfiguration();
            }
        },
        _getConfigurationProviderAttr: function () {
            return this._configurationProvider;
        },
        _setConfigurationProviderTypeAttr: function (value) {
            this._configurationProviderType = value;
        },
        _getConfigurationProviderTypeAttr: function () {
            return this._configurationProviderType;
        },
        requestConfiguration: function () {
            if (this._configurationProvider) {
                this._configurationProvider.requestConfiguration({
                    success: dojo.hitch(this, this._applyConfiguration)
                });
            }
        },
        _applyConfiguration: function (configuration) {
            this._configuration = configuration;

            if (!this._configuration) {
                return;
            }
            if (this.paneContents) {
                this.paneContents.destroyRecursive();
            }


            dojo.place(this._configuration.taskPane.domNode, this.containerNode, 'only');
            this.paneContents = this._configuration.taskPane;

        }

    });

    return activityManagerTasklet;

});    


},
'Sage/TaskPane/nls/LiteratureManagementTasks':function(){
﻿define("Sage/TaskPane/nls/LiteratureManagementTasks", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        errFulFillmentCancelled: 'The fulfillment of the literature request was canceled for LitReqId {0}.',
        errFulFillmentFailed: 'The literature request could not be fulfilled for LitReqId {0}.',
        errMailMergeService: 'The literature request(s) could not be fulfilled because the mail merge service could not be loaded. This may happen if Sage SalesLogix Desktop Integration is not installed or is not installed properly.',
        errFulFillmentRequest: 'The literature request(s) could not be fulfilled.',
        errFulFillmentRequestEx: 'The following literature request(s) could not be fulfilled:',
        fulFillmentSuccess: 'The literature request fulfillment was successful.'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/DateTimePickerBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/DateTimePickerBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/DateTimePickerBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.DateTimePickerBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.displayDateTooltipText %}">',
                        '<label>{%= $.displayDateText %}</label>',
                        '<div data-dojo-attach-point="_displayDate" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onDisplayDateChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.displayTimeTooltipText %}">',
                        '<label>{%= $.displayTimeText %}</label>',
                        '<div data-dojo-attach-point="_displayTime" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onDisplayTimeChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _displayDate: null,
        _displayTime: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        displayDateText: 'Display Date:',
        displayDateTooltipText: 'Display the date portion.',
        displayTimeText: 'Display Time:',
        displayTimeTooltipText: 'Display the time portion.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._displayDate.set('value', this._designer.get('displayDate'));
            this._displayTime.set('value', this._designer.get('displayTime'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        },
        _onDisplayDateChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('displayDate', value);
        },
        _onDisplayTimeChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('displayTime', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/TaskPane/LiteratureManagementTasks':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/LiteratureManagementTasks", [
        'Sage/TaskPane/_BaseTaskPaneTasklet',
        'Sage/UI/Dialogs',
        'dojo/i18n!./nls/LiteratureManagementTasks',
        'dojo/_base/declare'
],
// ReSharper disable InconsistentNaming
function (_BaseTaskPaneTasklet, Dialogs, i18nStrings, declare) {
    // ReSharper restore InconsistentNaming
    var literatureManagementTasks = declare('Sage.TaskPane.LiteratureManagementTasks', _BaseTaskPaneTasklet, {
        nlsLitManagementResources: i18nStrings,
        selectionInfo: false,
        fulfillLiteratureTask: function () {
            this.selectionInfo = this.getSelectionInfo();
            if (this.verifySelection(this.selectionInfo)) {
                this.saveSelections(this.actionItem, this.selectionInfo);
                return this.doFulfillment();
            }
            else {
                Dialogs.showWarning(this.selectRecords, this.selectRecordsTitle);
                return false;
            }
        },
        validateLiteratureTask: function () {
            this.selectionInfo = this.getSelectionInfo();
            if (this.selectionInfo != null) {
                this.saveSelections(this.actionItem, this.selectionInfo);
                return true;
            }
            else {
                return false;
            }
        },
        doFulfillment: function () {
            var successCount = 0;
            var attemptCount = this.selectionInfo.selectionCount;
            var arrErrors = [];
            var arrFulfilledIds = [];
            var sId = dojo.string.substitute("${0}_hfLastFulfilledIds", [this.clientId]);
            var oLastFulfilledIds = $get(sId);

            if (oLastFulfilledIds) {
                oLastFulfilledIds.value = "";
            }

            var self = this;
            
            require(['Sage/MailMerge/Helper', 'Sage/MailMerge/Service'], function(Helper, DesktopService) {
                var oService = Helper.GetMailMergeService();
                var i;
                if (oService) {
                    for (i = 0; i < attemptCount; i++) {
                        var sError;
                        var sLitReqId = self.selectionInfo.selections[i].id;
                        var arrResult = oService.FulfillLitRequest(sLitReqId);
                        if (dojo.isArray(arrResult)) {
                            var bSuccess = arrResult[LitReqResult.lrSuccess];
                            if (bSuccess) {
                                successCount++;
                                arrFulfilledIds.push(sLitReqId);
                                continue;
                            }
                            var bCanceled = arrResult[LitReqResult.lrCanceled];
                            if (bCanceled)
                                sError = dojo.string.substitute(self.nlsLitManagementResources.errFulFillmentCancelled, [sLitReqId]);
                            else {
                                sError = dojo.string.substitute(self.nlsLitManagementResources.errFulFillmentFailed, [sLitReqId]);
                                sError += dojo.string.substitute(" ${0}", [arrResult[LitReqResult.lrError]]);
                            }
                        } else {
                            sError = dojo.string.substitute(self.nlsLitManagementResources.errFulFillmentFailed, [sLitReqId]);
                        }
                        if (sError == "") {
                            sError = dojo.string.substitute(self.nlsLitManagementResources.errFulFillmentFailed, [sLitReqId]);
                        }
                        arrErrors.push(sError);
                    }
                } else {
                    Dialogs.showError(self.nlsLitManagementResources.errMailMergeService);
                    return false;
                }

                if (oLastFulfilledIds) {
                    oLastFulfilledIds.value = arrFulfilledIds.join();
                }

                if (successCount == attemptCount) {
                    Dialogs.showInfo(self.nlsLitManagementResources.fulFillmentSuccess);
                    return true;
                } else {
                    var sErrorMsg = self.nlsLitManagementResources.errFulFillmentRequest;
                    if (dojo.isArray(arrErrors) && arrErrors.length > 0) {
                        sErrorMsg = self.nlsLitManagementResources.errFulFillmentRequestEx;
                        for (i = 0; i < arrErrors.length; i++) {
                            sErrorMsg += dojo.string.substitute(" [${0}] ${1}", i + 1, [arrErrors[i]]);
                        }
                    }
                    Dialogs.showError(sErrorMsg);
                    return false;
                }
            });
        },
        refreshList: function () {
            var panel = dijit.byId('list');
            if (panel) {
                panel.refreshGrid();
            }
        },
        printLabels: function (pluginId, contactIdList) {
            require(["Sage/Reporting/Service"], function (ReportingService) {
                dojo.ready(function () {
                    if (Sage.Services.hasService("ReportingService")) {
                        var oReportingService = Sage.Services.getService("ReportingService");
                        if (oReportingService.checkReporting(true)) {
                            oReportingService.showReport(pluginId, "CONTACT", contactIdList);
                        }
                    }
                });
            });
        },
        actionItem: function () {
            // Some client-side action required for LitComplete
        }
    });
    return literatureManagementTasks;
});
},
'Sage/UI/Dashboard/nls/DashboardWidget':function(){
define("Sage/UI/Dashboard/nls/DashboardWidget", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            noQueryDataText: 'The server has no data for query ',
            initializingText: 'Initializing'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/_PropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/_PropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dojo/dom-class',
    '../PropertyValueError',
    'dojo/i18n!./nls/_PropertyEditor'
], function(
    declare,
    lang,
    array,
    domClass,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors._PropertyEditor', null, {
        _designer: null,
        _suspended: false,

        titleText: 'Properties',
        _setTitleTextAttr: function(value) {
            this.set('title', value);
        },

        designer: null,

        constructor: function() {
            lang.mixin(this, localization);
        },
        buildRendering: function() {
            this.inherited(arguments);

            domClass.add(this.domNode, 'design-property-editor');
        },
        suspend: function() {
            this._suspended = true;
        },
        resume: function() {
            this._suspended = false;
        },
        isSuspended: function() {
            return this._suspended;
        },
        setup: function(designer) {
        },
        _setDesignerAttr: function(value) {
            this.suspend();
            this._designer = value;
            this.setup(value);

            // in order to work around an issue with dijit (firing onChange using setTimeout) we have to
            // set our flag in the same manner in order to ensure it comes *after* setup phase
            // notification events.
            setTimeout(lang.hitch(this, this.resume), 0);
        },
        _getDesignerAttr: function() {
            return this._designer;
        }
    });
});
},
'Sage/QuickForms/Design/Editors/nls/NumericAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/NumericAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            decimalDigitsText: "Decimal Digits:",
            decimalDigitsTooltipText: "The number of digits after the decimal to display and allow for data entry.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            formatTypeText: "Format Type:",
            formatTypeTooltipText: "Type of format to use when converting number to string.",
            maxLengthText: "Max Length:",
            maxLengthTooltipText: "Maximum number of characters user can enter.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            strictText: "Strict:",
            strictTooltipText: "Pads display of number with trailing zeros as necessary.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            numberFormatText: {
                Number: "Number",
                Percent: "Percent",
                Decimal: "Decimal",
                Scientific: "Scientific"
            },
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Services/ActivityActionProcessor':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/Services/ActivityActionProcessor", [
    'dojo/i18n',
    'Sage/UI/Dialogs',
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/i18n!./nls/ActivityActionProcessor',
    'dojo/_base/declare'
],
function (
    i18n,
    Dialogs,
    _Widget,
    _Templated,
    nlsStrings,
    declare
) {
    var activityActionProcessor = declare('Sage.Services.ActivityActionProcessor', [_Widget, _Templated], {
        _dialog: false,
        _currentUserId: null,
        _action: false,
        _processing: false,
        _selectionContext: false,
        btnOkayText: 'OK',
        btnCancelText: 'Cancel',
        btnCloseText: 'Close',
        btnHelpText: 'Help',
        processingText: 'Processing request please wait...',
        failureText: 'I\'m sorry, the action was not successful an error occurred.',
        titleText: 'Process',

        //end l18n strings.
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div>',
                '<div data-dojo-type="dijit.Dialog" id="activityProcessActionDialog" title="{%= $.titleText%}" dojoAttachPoint="_dialog" style="width:400px">',
                     '<div class="activityProcess-dialog">',
                        '<div data-dojo-type="dijit.layout.ContentPane" id="{%= $.id%}_cp_envet_General" title="" dojoAttachPoint="cp_General">',
                             '<div data-dojo-type="dojox.layout.TableContainer" orientation="horiz" cols="1" class="controlPropForm" labelWidth="140">',
                                 '<div id="{%= $.id%}_div_actionMessage"  name="div_actionMessage" dojoAttachPoint="div_actionMessage"></div>',
                             '</div>',
                        '</div>',
                       '<table class="button-bar"><tr><td class="alignright valignbottom">',
                            '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_OK" name="btn_OK" dojoAttachPoint="btn_OK" dojoAttachEvent="onClick:_okClick">{%= $.btnOkayText %}</div>',
                            '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_Cancel" name="btn_Cancel" dojoAttachPoint="btn_Cancel" dojoAttachEvent="onClick:_cancelClick">{%= $. btnCancelText %}</div>',
                            '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_Close" name="btn_Close" dojoAttachPoint="btn_Close" dojoAttachEvent="onClick:_closeClick">{%= $. btnCloseText %}</div>',
                       '</td><tr></table>',
                   '</div>',
               '</div>',
           '</div>'
        ]),

        constructor: function () {
            this._currentUserId = Sage.Utility.getClientContextByKey('userID') || '';
            dojo.mixin(this, nlsStrings);
        },
        //postMixInProperties: function() {
        //    this.inherited(arguments); 
        //},
        //startup: function(){
        //    this.inherited(arguments);
        //    this._loadData();             

        //},
        destroy: function () {

            this.inherited(arguments);
        },
        start: function (silent) {
            this._processing = false;
            if (this._selectionContext.count < 1) {
                return;
            }
            if (!silent) {
                this._setDisplay();
                this.show();
            } else {
                this._execute();
            }
        },
        show: function () {
            this._dialog.show();
        },
        hide: function () {
            //this._dialog.destroyRecursive();
            this._action = null;
            this._dialog.hide();

        },
        resize: function () {

        },
        _setDisplay: function () {

            dojo.style(this.btn_Close.domNode, "visibility", "hidden");
            dojo.style(this.btn_OK.domNode, "visibility", "visible");
            dojo.style(this.btn_Cancel.domNode, "visibility", "visible");

            if (this._selectionContext) {
                this.div_actionMessage.innerHTML = this._action.message;
                this._dialog.set('title', this._action.description);
            }
        },
        _setActionAttr: function (action) {
            this._action = action;
        },
        _getActionAttr: function () {
            return this._action;
        },
        _setSelectionContextAttr: function (selectionContext) {
            this._selectionContext = selectionContext;
        },
        _getSelectionContextAttr: function () {
            return this._selectionContextInfo;
        },

        _execute: function () {
            if (this._processing) {
                return;
            }
            var me = this;
            this.div_actionMessage.innerHTML = this.processingText;
            this._processing = true;
            dojo.style(this.btn_Close.domNode, "visibility", "visible");
            dojo.style(this.btn_OK.domNode, "visibility", "hidden");
            dojo.style(this.btn_Cancel.domNode, "visibility", "hidden");            
            if (this._action) {
                //this._action._selectionContext = this._selectionContext;
                this._action.execute({
                    scope: this,
                    success: function (result, scope) {
                        scope.hide();
                        scope.onActionComplete(result);
                    },
                    failure: function (result, scope) {
                        scope.onActionComplete(result);
                        Sage.UI.Dialogs.showError(me.failureText);
                    }
                });
            }
        },
        _okClick: function () {
            this._execute();
        },
        _cancelClick: function () {
            this.hide();
        },
        _closeClick: function () {
            this.hide();
        },
        onActionComplete: function (result) { }
        // ... endregion      
    });

    return activityActionProcessor;
});

},
'Sage/MainView/IntegrationContract/nls/CustomerPaymentsRTDV':function(){
﻿define("Sage/MainView/IntegrationContract/nls/CustomerPaymentsRTDV", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dialogCaption: "Payment Details",
            loadingText: "loading...",
            lblReferenceCaption: "Receipt Number:",
            lblDateCaption: "Payment Date:",
            lblProcessDateCaption: "Process Date:",
            lblNameCaption: "Name:",
            lblTypeCaption: "Type:",
            lblStatusCaption: "Status:",
            lblCurrencyCaption: "Currency:",
            lblTenderTypeCaption: "Tender Type:",
            lblTenderReferenceCaption: "Tender Reference:",
            lblNetTotalCaption: "Net Total:",
            lblDiscountsCaption: "Discounts:",
            lblChargesCaption: "Charges:",
            lblTaxesCaption: "Taxes:",
            lblGrossTotalCaption: "Payment Amount:",
            lblSourceCaption: "Source:",
            lblTaxCodeCaption: "Tax Code:",
            grdPayments_Reference: "Receipt Number",
            grdPayments_Date: "Payment Date",
            grdPayments_Type: "Type",
            grdPayments_Status: "Status",
            grdPayments_GrossTotal: "Payment Amount",
            grdPayments_Currency: "Currency",
            btnCloseCaption: "Close"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Filters/nls/FilterPanel':function(){
define("Sage/UI/Filters/nls/FilterPanel", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            editText: 'Edit Filters',
            noneText: 'No filters selected',
            clearText: 'Clear All'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Data/SDataSummaryViewDataManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/SDataSummaryViewDataManager", [
    'Sage/Data/SDataServiceRegistry',
    'Sage/Data/SDataStore',
    'dojo/_base/declare',
    'dojo/_base/lang'
],
function (sDataServiceRegistry, SDataStore, declare, lang) {
    var sDataSummaryRequestQueue = declare('Sage.Data.SDataSummaryRequestQueue', null, {
        select: [],
        resourceKind: '',
        fetching: false,
        serviceName: 'dynamic',
        include: [],
        service: null,
        useBathRequest: false,
        expandRecurrences: null,
        constructor: function (options) {
            lang.mixin(this, options);
            this.requestHash = {};
            this.fetching = false;
            //this.service = sDataServiceRegistry.getSDataService(this.serviceName);
        },
        add: function (entityid, context) {

            var currentContext = this.requestHash[entityid];
            if ((currentContext) && (currentContext.id !== context.id)) {
                if (!currentContext.duplicates) {
                    currentContext.duplicates = [];
                }
                var found = false;
                for (var i = 0; i < currentContext.duplicates.length; i++) {
                    if (currentContext.duplicates[i].context.id === context.id) {
                        found = true;
                    }
                }
                if (!found) {
                    currentContext.duplicates.push({ id: context.id, context: context });
                }

            } else {
                this.requestHash[entityid] = context;
            }


        },
        send: function (callback, manager) {
            this.fetching = true;
            this.service = sDataServiceRegistry.getSDataService(this.serviceName);
            var context = this;
            if (this.useBatchRequest) {
                var batch = new Sage.SData.Client.SDataBatchRequest(this.service);
                batch.setResourceKind(this.resourceKind);
                batch.setQueryArg('select', this.select.join(','));
                batch.setQueryArg('include', this.include.join(','));

                batch.using(function () {
                    for (var bid in context.requestHash) {
                        var brequest = new Sage.SData.Client.SDataSingleResourceRequest(context.service);
                        brequest.setResourceKind(context.resourceKind);
                        brequest.setResourceSelector("'" + bid + "'");
                        if (context.expandRecurrences !== null) {
                            brequest.uri.queryArgs['_expandRecurrences'] = context.expandRecurrences;
                        }
                        brequest.setQueryArg('include', context.include.join(','));
                        brequest.read();
                    }
                });

                batch.commit({
                    success: lang.hitch(manager, callback, context),
                    failure: lang.hitch(this, this.requestFailed, context)
                });

            } else {
                var quotedIds = [];
                for (var id in this.requestHash) {
                    quotedIds.push('\'' + id + '\'');
                }
                var request = new Sage.SData.Client.SDataResourceCollectionRequest(this.service);
                var where = "Id in (" + quotedIds.join(',') + ")";
                request.setResourceKind(this.resourceKind);
                request.setQueryArg('select', this.select.join(','));
                request.setQueryArg('where', where);
                request.setQueryArg('include', this.include.join(','));
                request.read({
                    success: lang.hitch(manager, callback, context),
                    failure: lang.hitch(this, this.requestFailed, context)
                });
            }
        },
        requestFailed: function (a, b, c) {
            console.log('request failed %o %o %o', a, b, c);
        }
    });

    var sDataSummaryVewDataManager = declare('Sage.Data.SDataSummaryViewDataManager', null, {
        keyField: "$key",
        constructor: function () {
            this._createNewQueue();
        },
        _createNewQueue: function () {
            this.queue = new sDataSummaryRequestQueue();
            this.requestTimeout = false;
        },
        requestData: function (entityid, widget, requestConfiguration) {
            if (this.queue.fetching) {
                this.oldQueue = this.queue;
                this._createNewQueue();
            }
            if (requestConfiguration.keyField) {
                this.keyField = requestConfiguration.keyField;
            }
            this.queue.select = requestConfiguration.select;
            this.queue.resourceKind = requestConfiguration.resourceKind;
            this.queue.serviceName = requestConfiguration.serviceName;
            this.queue.include = requestConfiguration.include;
            this.queue.useBatchRequest = requestConfiguration.useBatchRequest;
            if (requestConfiguration.expandRecurrences !== null) {
                this.queue.expandRecurrences = requestConfiguration.expandRecurrences;
            }
            this.queue.add(entityid, widget);
            if (this.requestTimeout) {
                window.clearTimeout(this.requestTimeout);
            }
            var q = this.queue;
            var self = this;
            this.requestTimeout = window.setTimeout(function () { q.send(self.receiveData, self); }, 250);
        },
        requestDataNoWait: function (entityid, widget, requestConfiguration) {
            var tempQueue = new sDataSummaryRequestQueue();
            if (requestConfiguration.keyField) {
                this.keyField = requestConfiguration.keyField;
            }
            tempQueue.select = requestConfiguration.select;
            tempQueue.resourceKind = requestConfiguration.resourceKind;
            tempQueue.serviceName = requestConfiguration.serviceName;
            tempQueue.include = requestConfiguration.include;
            tempQueue.useBatchRequest = requestConfiguration.useBatchRequest;
            if (requestConfiguration.expandRecurrences !== null) {
                tempQueue.expandRecurrences = requestConfiguration.expandRecurrences;
            }
            tempQueue.add(entityid, widget);
            tempQueue.send(this.receiveData, this);
        },
        receiveData: function (context, data) {
            for (var i = 0; i < data.$resources.length; i++) {
                var entity = data.$resources[i];
                var id = entity.id;
                if (!id) {
                    id = entity[this.keyField];
                    entity.id = id;
                }

                var currentContext = context.requestHash[entity.id];
                if (currentContext) {
                    // Certain requests have duplicate entities.
                    if (currentContext.duplicates) {
                        try {
                            if (!currentContext.applied) {
                                currentContext.applied = true;
                                currentContext.set('entity', entity);
                                // Set all of the widgets for the given entity id and set the (duplicate) content.
                                for (var i = 0; i < currentContext.duplicates.length; i++) {
                                    try {

                                        if (!currentContext.duplicates[i].context.applied) {
                                            currentContext.duplicates[i].context.applied = true;
                                            currentContext.duplicates[i].context.set('entity', entity);
                                        }
                                    }
                                    catch (err) {
                                        console.error(err);
                                    }
                                }
                            }
                        }
                        catch (err) {
                            console.error(err);
                        }

                    }
                    else {
                        try {
                            if (!currentContext.applied) {
                                currentContext.applied = true;
                                currentContext.set('entity', entity);
                            }
                        }
                        catch (err) {
                            console.error(err);
                        }
                    }
                }
            }
        }
    });
    return sDataSummaryVewDataManager;
});
},
'Sage/TaskPane/nls/_BaseTaskPaneTasklet':function(){
﻿define("Sage/TaskPane/nls/_BaseTaskPaneTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        selectRecordsTitle: 'Invalid Selection',
        selectRecords: 'Please select a record before continuing.',
        selectSingleRecord: 'Please select a single record before continuing.',
        noRecordsSelectedProcessAll: 'No records selected. The full group, ${0} record(s), will be processed.  Proceed?',
        invalidSelectionTitle: 'Invalid Selection',
        errorSelectionInfo: 'There was an error retrieving information about the selected records.',
        errorNoData: 'No data available.',
        yesButtonText: 'Yes',
        noButtonText: 'No',
        salesLogixPageTitle: 'SalesLogix'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/nls/OwnerType':function(){
define("Sage/UI/nls/OwnerType", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            teamText: 'Team',
            departmentText: 'Department',
            systemText: 'System',
            userText: 'User'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/PropertyEditorContainer':function(){
define("Sage/QuickForms/Design/PropertyEditorContainer", [
    'dojo/string',
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/dom-class',
    'dojo/dom-construct',
    'dijit/layout/TabContainer',
    'dijit/layout/BorderContainer',
    'Sage/_EventMapMixin',
    'Sage/_Templated',
    'Sage/Utility',
    './ControlDesigner',
    './Help',
    'dojo/i18n!./nls/PropertyEditorContainer'
], function(
    string,
    declare,
    array,
    lang,
    domClass,
    domConstruct,
    TabContainer,
    BorderContainer,
    _EventMapMixin,
    _Templated,
    Utility,
    ControlDesigner,
    Help,
    localization
) {
    return declare('Sage.QuickForms.Design.PropertyEditorContainer', [BorderContainer, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<div class="design-editor-container-toolbar" data-dojo-type="dijit.Toolbar" data-dojo-props="region: \'top\', align: \'right\', splitter: false">',
            '<span class="design-editor-title" data-dojo-attach-point="titleNode"></span>',
            '<div data-dojo-type="Sage.UI.ImageButton" icon="images/icons/Help_16x16.png" tooltip="{%: $.helpText %}" data-dojo-attach-event="onClick:help" class="design-panel-help"></div>',
            '</div>',
            '<div data-dojo-type="dijit.layout.TabContainer" data-dojo-attach-point="editorTabContainer" data-dojo-props="region: \'center\'"></div>'
        ]),
        _setTitleAttr: {
            node: 'titleNode', type: 'innerText'
        },

        _designGroup: null,
        _designGroupTopics: null,
        _designer: null,
        _designerSource: null,

        editorTabContainer: null,
        titleNode: null,

        helpTopicName: 'webFormDesigner',
        helpSubSystemName: 'WebForms',
        designGroup: 'default',

        specificTitleFormatText: '${0} Properties (${1})',
        genericTitleFormatText: '${0} Properties',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _getDesignGroupAttr: function() {
            return this._designGroup;
        },
        _setDesignGroupAttr: function(value) {
            if (this._designGroupTopics)
            {
                array.forEach(this._designGroupTopics, function(topic) {
                    this.unsubscribe(topic);
                }, this);
            }

            this._designGroup = value;
            this._designGroupTopics = [
                this.subscribe(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), this._onDesignerSelected),
                this.subscribe(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), this._onDesignerMoved)
            ];
        },
        help: function() {
            if (this._designer)
            {
                Help.open(this._designer.helpTopicName, this.helpSubSystemName);
            }
            else
            {
                Help.open(this.helpTopicName, this.helpSubSystemName);
            }
        },
        buildRendering: function() {
            this.inherited(arguments);

            domClass.add(this.domNode, 'design-editor-container');
        },
        uninitialize: function() {
            this.inherited(arguments);
        },
        clear: function() {
            array.forEach(this.editorTabContainer.getChildren(), function(child) {
                this.editorTabContainer.removeChild(child);
                child.destroyRecursive(false); // todo: keep editor instances around
            }, this);

            this._designer = null;

            this.set('title', '');

            this.layout();
        },
        _setDesignerAttr: function(value, source) {
            if (value === this._designer) return;

            var previous = this.editorTabContainer.selectedChildWidget && this.editorTabContainer.selectedChildWidget.constructor,
                active;

            this.clear();

            array.forEach(value.editors, function(editor) {
                var instance = new editor({
                    /* designer: value */
                });

                this.editorTabContainer.addChild(instance);

                if (editor === previous) {
                    active = instance;
                }
            }, this);

            if (value.get('controlId'))
                this.set('title', string.substitute(this.specificTitleFormatText, [value.displayNameText, value.get('controlId')]));
            else
                this.set('title', string.substitute(this.genericTitleFormatText, [value.displayNameText]));

            this._designer = value;
            this._designerSource = source;

            if (active) this.editorTabContainer.selectChild(active);

            this.layout();

            array.forEach(this.editorTabContainer.getChildren(), function(editor) {
                editor.set('designer', this._designer);
            }, this);
        },
        _getDesignerAttr: function() {
            return this._designer;
        },
        _onDesignerSelected: function(designer, append, source) {
            if (designer && designer.editors)
            {
                this.set('designer', designer, source);
            }
            else
            {
                this.clear();
            }
        },
        _onDesignerMoved: function(designer, source) {
            if (designer !== this._designer) return; /* only update if it is the current one */

            array.forEach(this.editorTabContainer.getChildren(), function(editor) {
                editor.set('designer', this._designer);
            }, this);
        }
    });
});
},
'Sage/UI/Columns/ActivityType':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/ActivityType", [
       'dojox/grid/cells/_base',
       'Sage/Utility',
       'Sage/Utility/Activity',
       'dojo/string',
       'dojo/_base/declare'
],
function (_base, util, activity, dString, declare) {
    var widget = declare("Sage.UI.Columns.ActivityType", _base, {
        keyField: false,
        format: function (inRowIndex, inItem) {
            var type = this.get(inRowIndex, inItem);
            if (!type) {
                return this.defaultValue;
            }
            var key = util.getValue(inItem, this.keyField || "$key");
            var fmt = '<div class="Global_Images icon16x16 ${0}"></div>&nbsp;<a href="javascript:Sage.Link.editActivity(\'${1}\')">${2}</a>';
            return dString.substitute(fmt, [activity.getActivityImageClass(type, 'small'), key, activity.getActivityTypeName(type)]);
        }
    });

    return widget;
});

},
'Sage/TaskPane/nls/LeadTasksTasklet':function(){
﻿define("Sage/TaskPane/nls/LeadTasksTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            updateLeadsTitle: 'Update Leads',
            deleteLeadsTitle: 'Delete Leads',
            deleteJobError: 'Sorry an error occured during the delete lead job: ${0}',
            confirmDeleteLeads: 'Are you sure you want to delete the selected records?'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'url:Sage/templates/ToggleButton.html':"<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\r\t><span class=\"dijitReset dijitInline dijitButtonNode\"\r\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\r\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\r\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\r\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\t\t\t\tid=\"${id}_label\"\r\t\t\t\tdata-dojo-attach-point=\"containerNode\"\r\t\t\t></span\r\t\t></span\r\t></span\r\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\r\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\r/></span>\r",
'Sage/UI/Dashboard/DashboardWidgetCell':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/DashboardWidgetCell", [
       'dojo/i18n',
       'dojo/i18n!./nls/DashboardWidgetCell',
       'Sage/UI/WidgetEditor',
       'Sage/UI/Dashboard/DashboardWidget',
       'dojox/data/dom',
       'dojox/widget/Portlet',
       'dojo/_base/declare'
],
function (i18n, DashboardWidgetCell, widgetEditor, dashboardWidget, dom, portlet, declare) {
    // dojo.requireLocalization("Sage.UI", "DashboardWidgetCell");
    var widget = declare('Sage.UI.Dashboard.DashboardWidgetCell', [portlet], {
        //summary:
        //		Class responsible for the housing of widgets, this class augments
        //		the default titlepane template with a toolbar as well as a 
        //		div specifically intended to be a target for the rendering 
        //		of a dojox.chart. We also override a few methods pertaining to XHR
        //		from the original classes
        //options: Object
        //		A container of information about this container's child 
        //		DashboardWidget class instance

        onClose: function (evt) {
            // remove *this* from the parentCell childWidget collection
            // get the parent page
            var pg = dijit.byId(this._parentId);
            pg._childWidgets.removeByAttr('id', this.id);
            dojo.publish('/ui/dashboard/pageSave', [pg._page]);
            this.inherited(arguments);
        },
        _onShow: function() {
            this.inherited(arguments);
            if(this.redrawOnShow) {
                this.redrawOnShow = false;
                this.refresh(true);
            }
        },
        onHide: function() {
            this.redrawOnShow = true;
            this.inherited(arguments)
        },
        onDownloadEnd: function (data) {
            if (data) {
                var doc = data.documentElement;
                // iterate over the childNodes and
                // get the definition
                for (var i = 0, len = doc.childNodes.length; i < len; i++) {
                    if (doc.childNodes[i].tagName === 'Content') {
                        var textContent = dom.textContent(doc.childNodes[i]);
                        // set the UI definition first
                        // TODO look into local storage for these
                        // TODO get the definitions while in this loop as well
                        Sage.UI.WidgetDefinitions[this.widgetOptions.name] =
                            dojo.fromJson(textContent);

                        this.widgetDefined = true;
                        dojo.publish('/ui/widget/defined');
                        this._widgetInit();
                    }
                }
            } else {
                console.warn('Error fetching widget definition for' +
                        this.widgetOptions.name);
            }
        },
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "DashboardWidgetCell"));
            // am I on a hidden tab? This will actually not preload but
            // will ensure widget loading on show (because of the _selectedChild shortcircuit)
            if (this._page >= 0) { this.preload = true; }
            this.href = 'slxdata.ashx/slx/crm/-/dashboard/widget';
            this.ioArgs = {
                handleAs: 'xml',
                content: {
                    name: this.widgetOptions.name,
                    family: this.widgetOptions.family || 'system'
                }
            };
            this._drawLegend();
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            this.subscribe('/ui/widget/dropped', function (id, p, c, i) {
                // don't listen to myself
                if (id === this.id) { return; }
                // not my page
                if (p !== this._page) { return; }
                // not my column
                if (c !== this.column) { return; }
                // index > than mine
                if (i > this.index) { return; }
                this._indexUp();
            });
            // Prevent dragging of the portlet if it's within the content,
            //  as scrollbars within the content won't be scrollable
            this.connect(this.containerNode, "onmousedown", function(evt){
                if (dojo.hasClass(evt.target, "dojoxGridScrollbox")) {
                    dojo.stopEvent(evt);
                    return false;
                }
                return true;
            });
            this.arrowNode.title = this.minimizeTooltipText;
        },
        refresh: function (redraw) {
            if (redraw) {
                var dashboardWidget = this._dashboardWidget;
                if(dashboardWidget) {
                    dojo.disconnect(dashboardWidget._winResize);
                    dojo.unsubscribe(dashboardWidget.dropSub);
                }
                // delete the portletSettings
                this.destroyDescendants();
                this._removeIcons();
            }
            this.inherited(arguments);
            this._drawLegend();
        },
        _drawLegend: function() {
            if (this.widgetOptions.showLegend === 'true') {
                this.chartWidth = '67';
                this.legendDisplay = 'block';
            } else {
                this.chartWidth = '100';
                this.legendDisplay = 'none';
            }
        },
        _redrawCharts: function () {
            // call refresh on charting types only
            if (this._dashboardWidget && this._dashboardWidget.definition &&
                this._dashboardWidget.definition.declaredClass === 'Sage.UI.Dashboard.ChartingWidget') {
                this.refresh(true);
            }
        },
        _createIcon: function (clazz, hoverClazz, fn) {
            var imgTooltip = '';
            
            if(clazz === 'dojoxPortletSettingsIcon') {
                imgTooltip = this.settingsTooltipText;
            }
            else if(clazz === 'dojoxCloseNode') {
                imgTooltip = this.closeTooltipText;
            }
            
            if (!this._tbarIcons) { this._tbarIcons = []; }
			
            var icon = dojo.create("div", {
                "class": "dojoxPortletIcon " + clazz,
                "waiRole": "presentation",
                "title": imgTooltip
            });
            
			// If this is a newly created widget, the order of settings icon and close icon is flipped
			if(this.isNew) {
				if(clazz === 'dojoxPortletSettingsIcon' || this._tbarIcons.length < 1) {
					dojo.place(icon, this.arrowNode, "before");
				}
				else {
					dojo.place(icon, this._tbarIcons[0], "before");
				}
			}
			else if(this._tbarIcons.length == 1 && clazz === 'dojoxPortletSettingsIcon') {
				try {
					dojo.place(icon, this._tbarIcons[0], "replace");
				}
				catch(e) { // Widgets with the same name will try a replace which will error out
					dojo.place(icon, this.arrowNode, "before");
				}
			}
			else {
				dojo.place(icon, this.arrowNode, "before");
			}
            
            if (hoverClazz) {
                this.iconMouseOverEvent = this.connect(icon, "onmouseover", function () {
                    dojo.addClass(icon, hoverClazz);
                });
                this.iconMouseOutEvent = this.connect(icon, "onmouseout", function () {
                    dojo.removeClass(icon, hoverClazz);
                });
            }
            // NOTE (help,refresh) go here as well
            if (clazz === 'dojoxPortletSettingsIcon') {
                if(this._tbarIcons.length == 1) {
                    this._tbarIcons[0] = icon;
                }
                else {
                    this._tbarIcons.push(icon);
                }
                
                this.iconClickEvent = this.connect(icon, "onclick", fn);
            }
            else {
                this.connect(icon, "onclick", fn);
            }
            return icon;
        },
        _removeIcons: function () {
            this.disconnect(this.iconClickEvent);
            this.disconnect(this.iconMouseOverEvent);
            this.disconnect(this.iconMouseOutEvent);
            if(this._tbarIcons.length > 0) {
                dojo.empty(this._tbarIcons[0]);
            }
        },
        _editorAdded: function () {
            // widgets created with 'add content' should call this
            var children = this.getChildren();
            this._placeSettingsWidgets();

            // Start up the children
            dojo.forEach(children, function (child) {
                try {
                    if (!child.started && !child._started) {
                        child.startup();
                    }
                }
                catch (e) {
                    console.log(this.id + ":" + this.declaredClass, e);
                }
            });
        },
        _load: function () {
            if(!this.preventRender) {
                // summary:
                //		Load/reload the href specified in this.href. we redefine this
                //		method for our widget as the xhr process is a bit more complex
                //		than the OOB version expected by content/title panes
                this._setContent(this.onDownloadStart(), true);
                // don't actually make the request if one has already been made
                if (!Sage.UI.WidgetDefinitions[this.widgetOptions.name] &&
                        !this.requestPending) {
                    this.requestPending = true;
                    var that = this;
                    var getArgs = {
                        preventCache: false,
                        url: this.href
                    };
                    if (dojo.isObject(this.ioArgs)) {
                        dojo.mixin(getArgs, this.ioArgs);
                    }
                    var hand = (this._xhrDfd = (this.ioMethod || dojo.xhrGet)(getArgs));
                    hand.addCallback(function (data) {
                        try {
                            that._isDownloaded = true;
                            that.requestPending = false;
                            that._setContent(that.processingData || '', true);
                            that.onDownloadEnd(data);
                        } catch (err) {
                            that._onError('Content', err); // onContentError
                        }
                        delete that._xhrDfd;
                        //return html;
                    });
                    hand.addErrback(function (err) {
                        if (!hand.canceled) {
                            // show error message in the pane
                            that._onError('Download', err); // onDownloadError
                        }
                        delete that._xhrDfd;
                        return err;
                    });
                    // Remove flag saying that a load is needed
                    delete this._hrefChanged;
                } else if (this.requestPending) {
                    this._waitForDefinition();
                } else {
                    this.widgetDefined = true;
                    this._widgetInit();
                }
            }
        },
        _setColumn: function (n) {
            this.column = n;
        },
        _setIndex: function (n) {
            this.index = n;
        },
        _indexUp: function () {
            this.index += 1;
        },
        _waitForDefinition: function () {
            this.subscription = this.subscribe('/ui/widget/defined', this,
                function () {
                    this.widgetDefined = true;
                    this._widgetInit();
                });
        },
        _widgetInit: function () {
            //summary:
            //		Method to instantiate a new dashboard widget and append it to
            //		this DashboardWidgetCell 
            //tags:
            //		protected
            if (this.widgetDefined && !this._Widget) {
                this._dashboardWidget = new dashboardWidget({
                    options: this.widgetOptions,
                    parentCell: this
                });
            }
        }
    });
    
    return widget;
});




},
'Sage/UI/Dashboard/Dashboard':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/Dashboard", [
       'dojo/i18n',
       'dijit/layout/ContentPane',
       'dijit/layout/TabContainer',
       'Sage/UI/Dashboard/DashboardTabController',
       'Sage/UI/Dashboard/DashboardPage',
       'Sage/Utility',
       "dijit/Menu",
       "dijit/MenuItem",
       'dojo/_base/declare',
       'dojo/i18n!./nls/DashboardTabController',
       'dojo/i18n!./nls/Dashboard'
],
function (i18n, contentPane, tabContainer, dashboardTabController, dashboardPage, Utility, menu, menuItem, declare) {
    //    dojo.requireLocalization("Sage.UI.Dashboard", "DashboardTabController");
    //    dojo.requireLocalization("Sage.UI.Dashboard", "Dashboard");
    //    dojo.requireLocalization("dijit", "common");

    var widget = declare('Sage.UI.Dashboard.Dashboard', tabContainer, {
        //summary:
        //		Initialize a container class to manage functionality for a user's 
        //		dashboard. The Dashboard class will manage the implementation of
        //		the tab container dijit as well as functions which affect the 
        //		dashboard as a whole. Individual tab pages will manage themselves
        //		through the DashboardPage class which Dashboard will consume
        //options: Object 
        //		information about to the Dashboard/pages:
        controllerWidget: 'Sage.UI.Dashboard.DashboardTabController',
        // for the show tabs dialog
        _stTableOuter: new Simplate([
            '<div id="stTable" class="show-tab-table"><table>',
            '{%= $.content %}',
            '</table><div class="button-bar alignright"><button data-dojo-type="dijit.form.Button" type="button"',
            ' id="btnSTOk" title="{%= $.buttonOk %}">{%= $.buttonOk %}</button>',
            '</div></div>'
        ]),
        _stTableInner: new Simplate([
            '<tr id="row_{%= $.id %}"><td><button data-dojo-type="dijit.form.Button"',
            'type="button" id="btn_{%= $.id %}" class="btn-show-tab">{%= $.showText %}</button></td>',
            '<td><span>{%= $.title %}</span></td></tr>'
        ]),
        _copyNameForm: new Simplate([
            '<div id="copyNameForm"><table width="100%">',
            '<tr><td>{%= $.titleText %}</td><td><div data-dojo-type="dijit.form.ValidationTextBox" id="txtCopyName"',
            ' regExp="[^<>;]*" value="" required="true" invalidMessage="{%= $.invalidMessage %}"></div></td></tr>',
            '<tr><td colspan="2" align="right"><div class="button-bar"><button data-dojo-type="dijit.form.Button" type="button"',
            ' id="btnCNOK" title="{%= $.buttonOk %}">{%= $.buttonOk %}</button>',
            '<button data-dojo-type="dijit.form.Button" type="button"',
            ' id="btnCNCancel" title="{%= $.buttonCancel %}" >{%= $.buttonCancel %}</button>',
            '</div></td></tr></table></div>'
        ]),
        resources: {}, // TODO: move the other resource calls in Dashboard.js into here
        // Since the context menu is pinned to tabs, if there are none
        // then the user can't add new ones. Call this to make a context menu that just has add/show
        // appear on the page OR remove it if a tab is added (it will override tab context menus otherwise)
        addRemovePageContextMenu: function () {
            var addContext = true;

            for (var i = 0; i < this._childPages.length; i++) {
                if (!this._childPages[i]._beingDestroyed) {
                    var childTab = dijit.byId('Dashboard_tablist_' + this._childPages[i].id);

                    addContext = false;

                    if (childTab && childTab.tabContent.style.display == 'none') {
                        addContext = true;
                    }
                    else {
                        break;
                    }
                }
            }

            if (addContext) {
                if (this._contextMenu) {
                    this._contextMenu.destroyRecursive();
                }

                this._contextMenu = new menu({
                    id: this.id + "_ContextMenu",
                    dir: this.dir,
                    targetNodeIds: [this.domNode]
                });

                this._contextMenu.addChild(new menuItem({
                    label: this.newTabText,  //'New Tab'
                    dir: this.dir,
                    onClick: function () {
                        // get the dashboard
                        var db = dijit.byId('Dashboard');
                        db._createPage(true, db.newTabText); //'New Tab'
                    }
                }));

                this._contextMenu.addChild(new menuItem({
                    label: this.showTabText, // 'Show Tab'
                    dir: this.dir,
                    onClick: dojo.hitch(this, function () {
                        var d = dijit.byId('Dashboard');
                        d._showTabMenu();
                    })
                }));

                this.selectShownTab = true;
            }
            else if (this._contextMenu) {
                // TO-DO: Figure out how to remove the context menu when children (widgets, for instance)
                //          are right-clicked, and this won't have to be destroyed
                this._contextMenu.destroyRecursive();
                this.selectShownTab = false;
            }
        },
        postCreate: function () {
            // ensure that a widgetDefinitions object exists by this point
            if (!Sage.UI.WidgetDefinitions) {
                Sage.UI.WidgetDefinitions = {};
            }
            this._getUserOptions();

            this.subscribe('/ui/dashboard/pageDelete', function (pg) {
                // close (and destroy?) the UI
                this.closeChild(pg);
                // remove from db
                this._deletePage(pg);

                this.addRemovePageContextMenu();
            });

            this.inherited(arguments);
        },
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "Dashboard"));
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "DashboardTabController"));
            dojo.mixin(this.resources, i18n.getLocalization("Sage.UI.Dashboard", "WidgetDefinition"));
            dojo.mixin(this, i18n.getLocalization("dijit", "common"));
            this.inherited(arguments);
        },
        _childPages: [],
        _createPage: function (ans, name) {
            if (!ans) { return; }
            var obj = {
                closable: true,
                onClose: function () { return true; },
                name: name,
                title: name,
                family: 'System',
                acceptTypes: ['Portlet'],
                hasResizableColumns: false,
                _columns: [],
                // will add to the total
                _page: this._childPages.length,
                _parentId: this.id,
                permission: true,
                _childWidgets: []
            };
            var newPage = new dashboardPage(obj);
            this._childPages.push(newPage);
            this.addChild(this._childPages[this._childPages.length - 1]);
            // go to the new page
            this.selectChild(this._childPages[this._childPages.length - 1]);
            newPage.isNew = true;
            newPage._editOptionsMenu();
        },
        // Look through tabs until a matching title is found and make that tab visible
        _showPage: function (hiddenId) {
            var hidden = Sage.UI.DataStore.Dashboard.userOptions.hidden,
                pg = hidden[hiddenId],
                found = false;

            for (var i = 0; i < this._childPages.length; i++) {
                if (this._childPages[i].title == pg) {
                    var childTab = dijit.byId('Dashboard_tablist_' + this._childPages[i].id);

                    if (childTab) {
                        dojo.style(childTab.tabContent, 'display', 'block');
                        found = true;

                        if (this.selectShownTab) {
                            this.selectChild(this._childPages[i]);
                            this._showChild(this._childPages[i]);
                        }

                        break;
                    }
                }
            }

            if (!found) {
                var closeConfirm = function () { return true; };
                for (var i = 0, len = this.info.userPages.length; i < len; i++) {
                    var ttl = Sage.Utility.htmlDecode(this.pages[i]['@title']);
                    var _id = ttl;
                    while (_id.indexOf(' ') !== -1) { _id = _id.replace(' ', '_'); }
                    _id = _id.replace(/'/g, '_').replace(/"/g, '_');
                    if (ttl == pg) {
                        var columnCount;

                        if (this.pages[i]['@colWidths']) {
                            columnCount = this.pages[i]['@colWidths'].split(',').length;
                        }

                        var permission = this.info.permissions[_id];

                        // If there is only 1 column, it may not be an array, which causes nothing to get rendered later
                        this.pages[i].Columns.Column = Utility.Convert.toArrayFromObject(this.pages[i].Columns.Column);
                        this._childPages.push(new dashboardPage({
                            id: _id,
                            closable: true,
                            onClose: closeConfirm,
                            name: ttl,
                            title: this.resources[_id] || ttl,
                            family: this.pages[i]['@family'] || 'System',
                            nbZones: columnCount || 1,
                            acceptTypes: ['Portlet'],
                            hasResizableColumns: false,
                            firstButNotDefault: false,
                            colWidths: this.pages[i]['@colWidths'],
                            _columns: this.pages[i].Columns.Column,
                            _page: i,
                            _parentId: this.id,
                            permission: permission,
                            _childWidgets: []
                        }));
                        // save the column widths if present
                        if (this.pages[i]['@colWidths']) {
                            // unfortunately we cant set these here, we have to wait 
                            // until the tab is visible (init)
                            this._childPages[this._childPages.length - 1]._colWidths = this.pages[i]['@colWidths'];
                        }

                        this.addChild(this._childPages[this._childPages.length - 1]);

                        if (this.selectShownTab) {
                            this.selectChild(this._childPages[this._childPages.length - 1]);
                        }

                        break;
                    }
                }
            }

            if (hiddenId in hidden) {
                delete hidden[hiddenId];
                this._updateUserOptions();
            }
        },
        _copyPageContent: function (pg, new_title) { // new_title for copy()
            var page = pg.Dashboard;
            var len = this._childPages.length;
            var ttl = new_title ? new_title : page['@title'];
            var _id = page['@id'];
            // cannot have whitespace
            while (_id.indexOf(' ') !== -1) { _id = _id.replace(' ', '_'); }
            var columnCount;
            if (page['@colWidths']) {
                columnCount = page['@colWidths'].split(',').length;
            }
            var permission = false;
            if (new_title) {
                permission = true;
            }
            else if (page['@permission']) {
                permission = page['@permission'];
            }
            this._childPages.push(new dashboardPage({
                closable: true,
                onClose: function () { return true; },
                name: ttl, // name is the plugin name in the database
                title: ttl,
                family: page['@family'] || 'System',
                nbZones: columnCount || 1,
                acceptTypes: ['Portlet'],
                hasResizableColumns: false,
                colWidths: page['@colWidths'],
                _columns: page.Columns.Column,
                _page: len, // make it the new last page
                _parentId: this.id,
                permission: permission,
                _childWidgets: []
            }));
            // save the column widths if present
            if (page['@colWidths']) {
                // unfortunately we cant set these here, we have to wait 
                // until the tab is visible (init)
                this._childPages[len]._colWidths = page['@colWidths'];
            }
            this.addChild(this._childPages[len]); // NOT len-1
            // go to the page so we can save it correctly
            this._childPages[len]._init();
            this._childPages[len].copyNotDrawn = true;
            //remove this from the hidden hash
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            if (uo.hidden && _id in uo.hidden) {
                delete uo.hidden[_id];
                this._updateUserOptions();
            }

            this._childPages[len]._save();
        },
        _copyPage: function (pg) {
            var d = new dijit.Dialog({
                title: this.copyTabText,
                style: "width:250px"
            });
            d.set('content', this._copyNameForm.apply({
                titleText: this.titleText,
                buttonOk: this.okButton,
                buttonCancel: this.buttonCancel,
                invalidMessage: this.invalidMessage
            }));

            var fnDestroy = function () {
                dojo.disconnect(_closed);
                dojo.disconnect(ok);
                dojo.disconnect(cancel);
                d.destroyRecursive();
            };

            var ok = dojo.connect(dijit.byId('btnCNOK'), 'onClick', this,
                function () {
                    var txtCopyName = dijit.byId('txtCopyName');
                    if (!txtCopyName.isValid() || !this._isTitleUnique(txtCopyName.value)) {
                        return false;
                    }

                    if (!pg.pageRendered) {
                        pg.copyNotDrawn = true; // Flag to redraw widgets if this tab is selected
                        pg._init();
                    }

                    var ttl = txtCopyName.value;
                    var clone = pg._copy();
                    this._copyPageContent(clone, ttl);
                    d.hide();
                });

            var cancel = dojo.connect(dijit.byId('btnCNCancel'), 'onClick', this,
                function () {
                    d.hide();
                });

            var _closed = dojo.connect(d, "hide", this, fnDestroy);

            d.show();
        },
        _createPages: function () {
            //summary:
            //		Parse the user's pages into JSON objects
            //		and append them to this as pages.1 pages.2 etc...
            //		Then create the pages in the tab container
            this.pages = {};
            var def = this.info.userOptions.defaultTab;
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            var defIndex;
            var childPageIndex = 0;
            var closeConfirm = function () { return true; };
            for (var i = 0, len = this.info.userPages.length; i < len; i++) {
                var page = dojo.fromJson(this.info.userPages[i]);
                this.pages[i] = page.Dashboard;
                var ttl = Sage.Utility.htmlDecode(this.pages[i]['@title']);
                var _id = ttl;
                while (_id.indexOf(' ') !== -1) { _id = _id.replace(' ', '_'); }
                _id = _id.replace(/'/g, '_').replace(/"/g, '_');

                if (!uo.hidden || !uo.hidden[_id]) {
                    var columnCount;

                    if (this.pages[i]['@colWidths']) {
                        columnCount = this.pages[i]['@colWidths'].split(',').length;
                    } else {

                        this.pages[i]['@colWidths'] = 0;
                        columnCount = 1;
                    }

                    var permission = this.info.permissions[_id];

                    // If there is only 1 column, it may not be an array, which causes nothing to get rendered later
                    this.pages[i].Columns.Column = Utility.Convert.toArrayFromObject(this.pages[i].Columns.Column);
                    this._childPages.push(new dashboardPage({
                        id: _id,
                        closable: true,
                        onClose: closeConfirm,
                        name: ttl,
                        title: this.resources[_id] || ttl,
                        family: this.pages[i]['@family'] || 'System',
                        nbZones: columnCount || 1,
                        acceptTypes: ['Portlet'],
                        hasResizableColumns: false,
                        firstButNotDefault: i === 0 && ttl !== def,
                        colWidths: this.pages[i]['@colWidths'],
                        _columns: this.pages[i].Columns.Column,
                        _page: i,
                        _parentId: this.id,
                        permission: permission,
                        _childWidgets: []
                    }));
                    // save the column widths if present
                    if (this.pages[i]['@colWidths']) {
                        // unfortunately we cant set these here, we have to wait 
                        // until the tab is visible (init)
                        this._childPages[childPageIndex]._colWidths = this.pages[i]['@colWidths'];
                    }

                    this.addChild(this._childPages[childPageIndex]);

                    if (ttl === def) {
                        defIndex = childPageIndex;
                    }

                    childPageIndex++;
                }
            }
            // select the default tab if there was one
            // (don't call selectChild() to do this, as the tabs not yet being
            //  rendered results in failure)
            if (defIndex) {
                this._childPages[defIndex].selected = true;
                this._childPages[defIndex]._init();
            } else if (this._childPages.length > 0) {
                this._childPages[0].selected = true;
                this._childPages[0]._init();
            }

            this.addRemovePageContextMenu();
        },
        _deletePage: function (pg, no_update) {
            // prevent 'deleted-my-default-tab-no-init'
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            if (pg.title === uo.defaultTab) {
                uo.defaultTab = '';
                if (!no_update) { this._updateUserOptions(); }
            }
            var vURL = "SLXGroupBuilder.aspx?method=GetGroupIdFromNameFamilyAndType&name=" + pg.name + "&family=System&type=36";
            dojo.xhrGet({
                url: vURL,
                error: dojo.hitch(this, function (pluginData) { console.log(['Page ', pg.id, ' not deleted.'].join('')); }),
                load: dojo.hitch(this, function (pluginData) {
                    Sage.Groups.GroupManager.GetFromServer(Sage.Groups.GroupManager.GMUrl + 'DeleteGroup&gid=' + pluginData,
                        'text',
                        function () { },
                        function (req) { }
                    );
                })
            });
        },
        _hidePage: function (pg) {
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            // same as _delete but store the data item (36) intact so that
            // the page can be 'shown'
            var tabToHide = dijit.byId('Dashboard_tablist_' + pg.id);
            dojo.style(tabToHide.tabContent, 'display', 'none');

            if (this.selectedChildWidget == pg) {
                this.selectFirstVisible();
            }

            // add the json representation of the page to _userOptions.hidden
            if (!uo.hidden) { uo.hidden = {}; }
            uo.hidden[pg.id] = pg._hide();
            // update the userOptions
            this._updateUserOptions();

            this.addRemovePageContextMenu();
        },
        _showTabMenu: function () {
            // get a reference to the hidden tabs
            var hidden = Sage.UI.DataStore.Dashboard.userOptions.hidden;
            var inner = [];
            // need content if there are objects in the hash
            if (hidden && Sage.Utility.size(hidden)) {
                for (var id in hidden) {
                    inner.push(this._stTableInner.apply({
                        title: hidden[id],
                        id: id,
                        buttonCancel: this.buttonCancel,
                        showText: this.showText
                    }));
                }
            }
            // build a dialog
            var d = new dijit.Dialog({
                title: this.showTabText,
                style: "width:350px"
            });
            d.set('content', this._stTableOuter.apply({
                content: inner.join(''),
                buttonOk: this.buttonOk // this should be 'close' and not cancel
            }));

            d.show();
            var listeners = []; // so we can disconnect them
            if (hidden) {
                for (var id in hidden) {
                    var showButton = dijit.byId('btn_' + id);
                    listeners.push(dojo.connect(showButton, 'onClick',
                        showButton, function () {
                            var db = dijit.byId('Dashboard'),
                                hiddenId = this.id.replace('btn_', ''),
                                thisRow = dojo.byId('row_' + hiddenId);
                            db._showPage(hiddenId);
                            db.addRemovePageContextMenu();
                            dojo.style(thisRow, 'display', 'none');
                        }));
                }
            }
            var ok = dojo.connect(dijit.byId('btnSTOk'), 'onClick', null,
                function () {
                    d.hide();
                });
            var cancel = dojo.connect(d, 'hide', null,
                function () {
                    dojo.disconnect(ok);
                    dojo.disconnect(cancel);
                    dojo.forEach(listeners, dojo.disconnect);
                    d.destroyRecursive();
                });
        },
        _isTitleUnique: function (title, tabId) {
            var isUnique = true;
            var dashboardPages = this._childPages;
            var checkId = '';

            if (tabId) {
                checkId = tabId;
            }

            for (var i = 0; i < dashboardPages.length; i++) {
                if (dashboardPages[i].id != checkId && !dashboardPages[i]._destroyed && dashboardPages[i].title === title) {
                    isUnique = false;

                    var opts = {
                        title: this.warningText,
                        query: this.invalidDuplicateMessage,
                        yesText: this.okButton,
                        style: { width: '300px' }
                    }
                    Sage.UI.Dialogs.raiseQueryDialogExt(opts);

                    break;
                }
            }

            return isUnique;
        },
        selectFirstVisible: function () {
            var found = false;

            for (var i = 0; i < this._childPages.length; i++) {
                var childTab = dijit.byId('Dashboard_tablist_' + this._childPages[i].id);

                if (childTab && childTab.tabContent.style.display != 'none') {
                    found = true;
                    this.selectChild(this._childPages[i]);
                    break;
                }
            }

            if (!found) {
                try {
                    this.selectChild();
                }
                catch (err) {
                    // This will happen when we're setting selected to null
                }
            }
        },
        selectChild: function (child) {
            this.inherited(arguments);
            if (child._init) {
                child._init();
            }
            if (child.copyNotDrawn) {
                child.copyNotDrawn = false;
                child._redrawWidgets();
            }
        },
        _getUserOptions: function () {
            //summary:
            //		If the data is not there, subscribe to the event
            //		published by the Sage.UI.DataStore.Dashboard
            if (Sage.UI.DataStore.Dashboard) {
                this.info = Sage.UI.DataStore.Dashboard;
                this._createPages();
            } else {
                this.subscribe('/ui/dashboard/info', function (info) {
                    this.info = info;
                    this._createPages();
                });
            }
        },
        /*_updateUserOptions: function () {
        var uo = dojo.toJson(Sage.UI.DataStore.Dashboard.userOptions);
            
        var svc = Sage.Services.getService("UserOptions");
        if (svc) {
        svc.set('Options', 'Dashboard', uo, function (data) {
                
        });
        } else {
        console.log('Error updating user options service');
        }
        }*/
        _updateUserOptions: function () {
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            var uri = 'slxdata.ashx/slx/crm/-/dashboard/useroption?name=Options&category=Dashboard';

            var def = dojo.xhrPut({
                url: uri,
                handleAs: 'text',
                postData: dojo.toJson(uo),
                load: function (data) {

                },
                error: function (error) {
                    console.log('error updating userOptions');
                }
            });
        }
    });

    return widget;
});
},
'Sage/UI/NumberTextBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/NumberTextBox", [
       'dijit/form/NumberTextBox',
       'dijit/form/ValidationTextBox',
       'dojo/number',
       'Sage/Utility',
       'dojo/_base/declare'
],
function (NumberTextBox, ValidationTextBox, number, Utility, declare) {
    var widget = declare("Sage.UI.NumberTextBox", NumberTextBox, {
        shouldPublishMarkDirty: true,
        //.Net control behavior
        autoPostBack: false,
        hotKey: '',
        maxLength: '',
        formatType: '',
        attributeMap: {
            hotKey: { node: 'textbox', type: 'attribute', attribute: 'accessKey' },
            maxLength: { node: 'textbox', type: 'attribute', attribute: 'maxLength' }
        },
        textAlign: '',
        _getValueAttr: function () {            
           
            var results = this.inherited(arguments);        
           // the inherited stuff is too picky about decimal digits, we handle it our way,
           // when dojo doesn't like the number of digits, it returns undefined.
           //for Percent values, we need to keep the value without rounding off
           if ((typeof results === 'undefined' || isNaN(results) || this.formatType === 'Percent') && this.textbox.value !== '') {
               results = this.getTextBoxValue();            
           }    
         
           return results;
        },
        _setValueAttr: function (v) {
            this.constraints['locale'] = Sys.CultureInfo.CurrentCulture.name;
            this.inherited(arguments);
        },
        _onFocus: function () {
            this.onFocusFiring = true;
            this.inherited(arguments); // Dojo will format this as a decimal

            // HACK
            if (this.constraints.type === 'percent') {
                this.textbox.value = Math.round(this.value * 10000) / 100;
            }
            this.onFocusFiring = false;
        },
        _onBlur: function () {
            this.onBlurFiring = true;
            // HACK
            if (this.formatType === 'Percent' || this.constraints.type === 'percent') {
                // Strange issue if the control is focused on page load,
                // the textbox value should NOT contain a percent sign on blur
                if (this.textbox.value.indexOf('%') === -1) {
                    var enteredValue = this.getTextBoxValue();
                    var toDecimal = enteredValue / 100;
                    this.set('displayedValue', toDecimal); // trick dojo into thinking we entered a decimal
                }
            }
            this.onBlurFiring = false;
            this.inherited(arguments);
        },
        _sageUINumberTextBox_IsValid: function () {
            //In IE dojo makes two passes through validation.  Only on the second pass is the new value present.
            if (this.formatType !== 'Percent' || this.constraints.type !== 'percent') {
                if (dojo.isIE) {
                    if (this.oldValue !== this.textbox.value) {
                        var trim = this._restrictDD();
                        if (trim !== this.textbox.value) {
                            this.textbox.value = trim;
                        }
                    }
                    this.oldValue = this.textbox.value;
                } else {
                    this.textbox.value = this._restrictDD();
                }
            }
            this.inherited(arguments);
        },
        _restrictDD: function () {
            var retVal = this.textbox.value;
            if (this.onBlurFiring || this.onFocusFiring) {
                // Prevent this from running when onFocus or onBlur are firing (dojo makes changes to the text at that point).
                return retVal;
            }
            if (this.constraints.places) {
                retVal = Utility.restrictDecimalDigit(this.textbox.value, this.constraints.places);
            }
            return retVal;
        },
        _sageUINumberTextBox_KeyPress: function (e) {
            var type = this.constraints.type;
            if (!Utility.restrictToNumberOnKeyPress(e, type)) {
                dojo.stopEvent(e);
            }
        },
        _sageUINumberTextBox_OnFocus: function (/*Event*/e) {
            // Templated widgets are having difficulty remaining selectable in IE.  Reset their attribute to ensure access.
            dojo.setSelectable(this.domNode, true);
        },
        startup: function () {
            this.inherited(arguments);
            //summary:
            // Wire up event handlers and to add keystroke restrictions.
            var self = this;
            //Set the text alignment preference from the configuration object.
            dojo.style(self.focusNode, 'textAlign', self.textAlign);
            self.value = self.value || 0;
            self.onBlurFiring = false;
            self.onFocusFiring = false;
            //Event handlers
            this.connect(self, 'isValid', self._sageUINumberTextBox_IsValid);
            this.connect(self, 'onKeyPress', self._sageUINumberTextBox_KeyPress, true);
            this.connect(self, 'onFocus', self._sageUINumberTextBox_OnFocus, true);

            if (!this.ignorechange) {
                this.connect(self, 'onChange', self.valueChanged);
            }
        },
        valueChanged: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if (this.autoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.id, null);
                }
            }
        },
        getTextBoxValue: function () {
            var results = 0;
            var tbVal = this.textbox.value;
            if (tbVal.lastIndexOf(Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalSeparator) === tbVal.length - 1) {
                tbVal = tbVal.slice(0, tbVal.length - 1);
            }

            results = tbVal;
            if (isNaN(results)) {
                results = number.parse(tbVal, { locale: Sys.CultureInfo.CurrentCulture.name });
            }
            if (isNaN(results)) {
                results = this.value;
            }
            return results;
        }
    });
    return widget;
});
},
'Sage/UI/_DetailPane':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/_DetailPane", [
        'dijit/_Widget',
        'dojo/_base/declare'
],
function (_Widget, declare) {
    var detailPane = declare('Sage.UI._DetailPane', [_Widget], {
        constructor: function () {
        },
        _applyConfiguration: function (configuration) {
            this._configuration = configuration;
        },
        _setConfigurationAttr: function (configuration) {
            this._applyConfiguration(configuration);
        },
        _setOwnerAttr: function (owner) {
            if (this._owner === owner) return;
            if (this._owner) throw new Error('Sage.UI._DetailPane can only be bound to a single Sage.UI.ListPanel.');
            this._owner = owner;
            this.connect(this._owner, 'onRowClick', this._onRowClick);
            this.connect(this._owner, 'onSelected', this._onSelected);
        },
        _getOwnerAttr: function() {
            return this._owner;
        },
        _onRowClick: function (index, row, grid) {
        },
        _onSelected: function (index, row, grid) {
        }
    });
    
    return detailPane;
});

},
'Sage/Services/CalendarSecurityService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/Services/CalendarSecurityService", [
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility',
    'dojo/_base/declare'
],
function (sDataServiceRegistry, utility, declare) {
    var service = declare('Sage.Services.CalendarSecurityService', null, {
        /*
        allowAdd : true,
        allowDelete: true,
        allowEdit: true,
        allowSync: true
        */
        _rawList: [],
        _accessList: {},
        _dataAvailable: false,
        constructor: function (opts) {
            this._dataAvailable = false;
            this._loading = false;
            //this._loadData();
        },
        _waiting: [],
        hasAccess: function (userid, accesslevel, callback, scope) {
            //console.log('hasAccess has been called... userid: ' + userid + '    accessLevel: ' + accesslevel + '    %o', scope);
            if (this._dataAvailable) {
                var item = this._accessList[userid];
                var access = false;
                if (item) {
                    access = item[accesslevel];
                }
                if (callback) {
                    callback.call(scope || this, access);
                }
            } else {
                //console.log('connecting to onDataAvailable...');
                this._waiting.push(dojo.connect(this, 'onDataAvailable', this, function () {
                    this.hasAccess(userid, accesslevel, callback, scope);
                }));
                if (!this._loading) {
                    this._loadData();
                }
            }
        },
        getListByAccessLevel: function (level, callback, scope, idAttr, nameAttr) {
            var idattr = idAttr || 'userid';
            var nameattr = nameAttr || 'name';
            if (this._dataAvailable) {
                var list = [];
                for (var i = 0; i < this._rawList.length; i++) {
                    var item = this._rawList[i];
                    if (level === "view" || item[level]) {
                        var obj = {};
                        obj[idattr] = item['accessUserId'];
                        obj[nameattr] = item['accessUserName'];
                        list.push(obj);
                    }
                }
                callback.call(scope || this, list);
            } else {
                this._waiting.push(dojo.connect(this, 'onDataAvailable', this, function () {
                    this.getListByAccessLevel(level, callback, scope, idAttr, nameAttr);
                }));
                if (!this._loading) {
                    this._loadData();
                }
            }
        },
        _loadData: function () {
            this._loading = true;
            var svc = sDataServiceRegistry.getSDataService('mashups', false, true, true); // cached one...
            //var svc = sDataServiceRegistry.getSDataService('mashups', false, true, false); // not cached one...
            var uid = utility.getClientContextByKey('userID') || '';
            var request = new Sage.SData.Client.SDataNamedQueryRequest(svc);
            request.setApplicationName('$app');
            request.setResourceKind('mashups');
            request.uri.setCollectionPredicate("'UserCalendarQueries'");
            request.setQueryName('execute');
            request.setQueryArg('_resultName', 'UserHasAccessToTheseCalendars');
            request.setQueryArg('_userId', uid);
            request.read({
                success: this._dataReceived,
                failure: function () { console.log('user calendar request failed... %o', arguments); },
                scope: this
            });
        },
        _dataReceived: function (data) {
            this._rawList = data['$resources'];
            for (var i = 0; i < this._rawList.length; i++) {
                var item = this._rawList[i];
                this._accessList[item['accessUserId']] = {
                    'name': item['accessUserName'],
                    'userid': item['accessUserId'],
                    'allowAdd': item['allowAdd'],
                    'allowDelete': item['allowDelete'],
                    'allowEdit': item['allowEdit'],
                    'allowSync': item['allowSync']
                };
            }
            this._dataAvailable = true;
            this._loading = false;
            //fire event for things that were waiting...
            this.onDataAvailable();
            //clean up waiting connections now that they have fired...
            console.log('cleaning up waiting list');
            for (var i = 0; i < this._waiting.length; i++) {
                dojo.disconnect(this._waiting[i]);
            }
            this._waiting = [];
        },
        onDataAvailable: function () { }
    });
    Sage.Services.addService('CalendarSecurityService', new service());
});
},
'Sage/UI/Filters/FilterPanel':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/FilterPanel", [
        'dijit/_Widget',
        'dijit/_Container',
        'Sage/_Templated',
        'Sage/Services/_ServiceMixin',
        'Sage/_ConfigurationProvider',
        'Sage/UI/Filters/CheckBoxFilter',
        'Sage/UI/Filters/LookupFilter',
        'Sage/UI/Filters/EditFilters',
        'dojo/_base/declare',
        'dojo/i18n',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dojo/query',
        'dojo/on',
        'dojo/i18n!./nls/FilterPanel',
        'dojo/has',
        'dojo/_base/sniff',
        'dojo/ready',
        'dojo/json'
    ], function (
        _Widget,
        _Container,
        _Templated,
        _ServiceMixin,
        _ConfigurationProvider,
        CheckBoxFilter,
        LookupFilter,
        EditFilters,
        declare,
        i18n,
        array,
        lang,
        query,
        on,
        nls,
        has,
        sniff,
        ready,
        json
    ) {
        var widget = declare('Sage.UI.Filters.FilterPanel', [_Widget, _Container, _ServiceMixin, _Templated], {
            serviceMap: {
                'groupContextService': 'ClientGroupContext',
                'metaDataService': {
                    type: 'sdata',
                    name: 'metadata'
                }
            },
            knownFilterTypes: {
                'checkedList': CheckBoxFilter,
                'comboWithArgument': LookupFilter
            },
            widgetsInTemplate: false,
            widgetTemplate: new Simplate([
            '<div class="filter-panel" data-dojo-attach-point="containerNode">',
            '<div class="filter-edit"><a href="#" data-dojo-attach-point="clearAllFiltersNode">{%= $.clearText %}</a> | <a href="#" data-dojo-attach-point="editFiltersNode">{%= $.editText %}</a></div>',
            '<div class="filter-summary" data-dojo-attach-point="filterSummaryNode">{%= $.noneText %}</div>', // TODO
            '</div>'
        ]),
            _filterGroup: null,
            _filterSubscriptions: null,
            _configuration: null,
            _configurationConnects: null,
            _configurationProvider: null,
            _configurationProviderType: null,
            _appliedSet: null,
            configurationProvider: null,
            configurationProviderType: null,
            autoConfigure: true,
            store: null,
            filterGroup: 'default',
            filterManager: null,
            _appliedFilters: null,
            _isApplyingConfig: false,
            // filter editor
            _editFilters: null,
            _editFiltersHandle: null,
            _isFetchingData: false,

            // i18n
            editText: 'Edit Filters',
            noneText: 'No filters selected.',
            clearText: 'Clear All',

            constructor: function () {
                var filterStore = Sage.Utility.getValue(window, 'Sage.UI.DataStore.Filters');

                if (filterStore && filterStore[this.filterGroup]) {
                    this._appliedSet = filterStore[this.filterGroup].applied;
                }

                if (nls) {
                    this.editText = nls.editText;
                    this.noneText = nls.noneText;
                    this.clearText = nls.clearText;
                }

                this._appliedFilters = [];
            },
            postCreate: function () {
                this.inherited(arguments);
                this.startup();
            },
            startup: function () {
                this.inherited(arguments);
                if (!this._configurationProvider && this._configurationProviderType) {
                    this.set('configurationProvider', new this._configurationProviderType());
                }
                if (this.autoConfigure) {
                    this.requestConfiguration();
                }
            },
            uninitialize: function () {
                this.inherited(arguments);

                if (this._editFilters) {
                    this._editFilters.destroy();
                    this._editFiltersHandle.remove();
                }

                if (this._configurationProvider) {
                    this._configurationProvider.destroy();
                }
            },
            _setFilterGroupAttr: function (value) {
                if (this._filterSubscriptions) {
                    dojo.forEach(this._filterSubscriptions, function (subscription) {
                        this.unsubscribe(subscription);
                    }, this);
                }

                this._filterGroup = value;
                this._filterSubscriptions = [];
                this._filterSubscriptions.push(
                this.subscribe(dojo.string.substitute("/ui/filters/${0}/apply", [this._filterGroup]), lang.hitch(this, this._onApply)));

                this._filterSubscriptions.push(
                this.subscribe(dojo.string.substitute("/ui/filters/${0}/change", [this._filterGroup]), lang.hitch(this, this._onChange)));
            },
            _getFilterGroupAttr: function () {
                return this._filterGroup;
            },
            _onChange: function (definition, name, value, source) {
                var updated = false,
                appliedFilter,
                lookupFilter = false;
                if ((definition.details.lookupFilter)||(definition.details.userLookupFilter)) {                    
                    lookupFilter = true;
                    if (value !== null) {
                        if(value.hasOwnProperty("value")){
                            if ((value.value === null) || (value.value === '')) {
                                updated = true;
                            }
                        }else{
                            if ((value === null) || (value === '')) {
                                updated = true;
                            }
                        } 
                    } 
                }
                array.forEach(this._appliedFilters, function (filter, i) {
                    var hasItem = false;
                    // If we have an existing filter in the collection,
                    // update its selected items.
                    if (filter.filterName === definition.filterName) {
                        appliedFilter = this._appliedFilters[i];
                        hasItem = array.some(appliedFilter.items, function (item) {
                            return item === name;
                        });

                        if (hasItem) {
                            if (lookupFilter) {
                                if (value === null) {

                                } else {
                                    if((value.value === null) ||(value.value === '')){
                                        //clear items
                                        appliedFilter.items = [];
                                        this._appliedFilters.splice(i, 1);
                                    } 
                                }
                            }
                            else {
                                array.forEach(appliedFilter.items, function (item, x) {
                                    if (item === name) {
                                        appliedFilter.items.splice(x, 1);
                                    }
                                }, this);
                            }
                        } else {
                            appliedFilter.items.push(name);
                        }

                        updated = true;
                    }
                }, this);

                // Did we update the exising filter?
                if (!updated) {
                    this._appliedFilters.push({ 'filterName': definition.filterName, 'displayName': definition.$descriptor || definition.displayName, items: [name] });
                }

                this._updateFilterSummary();
            },
            _updateFilterSummary: function () {
                var displayItems = [];
                array.forEach(array.filter(this._appliedFilters,
                    function (filter) {
                        return (typeof filter.displayName !== 'undefined' && filter.displayName !== '') && (filter.items && filter.items.length > 0);
                    }),
                    function (filter) {
                        displayItems.push(filter.displayName + " (" + filter.items.length + ")");
                    },
                    this
                );

                if (displayItems.length === 0) {
                    this.filterSummaryNode.innerHTML = this.noneText;
                } else {
                    this.filterSummaryNode.innerHTML = displayItems.join(', ');
                }
            },
            _onApply: function (applied, definitionSet, source) {
                var key,
                items,
                itemProp,
                definition;

                //Lets check an make sure that the appliedInfo belongs to the curent group.
                //If not Ignore and return.
                if (source && this._configuration) {
                    var context = source.getContext();
                    if (context.CurrentGroupID.toUpperCase() !== this._configuration.groupId.toUpperCase()) {
                        return;
                    }
                }

                this._appliedFilters = [];
                this._appliedSet = applied;
                var hasProperties = false;
                for (key in this._appliedSet) {
                    if (this._appliedSet.hasOwnProperty(key)) {
                        hasProperties = true;
                        // definitionSet object shares the same prop as applied
                        definition = definitionSet[key];
                        items = this._appliedSet[key];
                        if (definition.details.lookupFilter) {
                            if (items.hasOwnProperty("value")) {
                                this._onChange(definition, definition.filterName, items.value);
                            }
                        }
                        else {

                            // Iterate the filter items that are selected for this set,
                            // pass it to _onChange so we can update our summary.
                            for (itemProp in items) {
                                if (items.hasOwnProperty(itemProp)) {
                                    this._onChange(definition, itemProp);
                                }
                            }
                        }
                    }

                }
                if ((this._configuration)) {
                    this.requestData();
                }
            },
            _handleConfigurationChange: function () {
                this.requestConfiguration();
            },
            _setConfigurationProviderAttr: function (configurationProvider) {
                if (this._configurationConnects) {
                    dojo.forEach(this._configurationConnects, function (connection) {
                        this.disconnect(connection);
                    }, this);
                }

                if (this._configurationProvider && this._configurationProvider !== configurationProvider) {
                    this._configurationProvider.destroy();
                }

                this._configurationProvider = configurationProvider;
                this._configurationConnects = [];

                if (this._configurationProvider) {
                    this._configurationConnects.push(this.connect(this._configurationProvider, 'onConfigurationChange', this._handleConfigurationChange));

                    this._configurationProvider.set('owner', this);

                    // only request configuration here if the widget has been fully created, otherwise
                    // it will be handled by postCreate.
                    if (this._created) {
                        if (this.autoConfigure) {
                            this.requestConfiguration();
                        }
                    }
                }
            },
            _getConfigurationProviderAttr: function () {
                return this._configurationProvider;
            },
            _setConfigurationProviderTypeAttr: function (value) {
                this._configurationProviderType = value;
            },
            _getConfigurationProviderTypeAttr: function () {
                return this._configurationProviderType;
            },
            requestConfiguration: function () {
                if (this._configurationProvider && !this._isApplyingConfig) {
                    this._isApplyingConfig = true;
                    this._configurationProvider.requestConfiguration({
                        success: lang.hitch(this, this._applyConfiguration)
                    });
                }
            },
            _applyConfiguration: function (configuration) {
                //this._updateFilterSummary();
                this._configuration = configuration;
                this.store = configuration.store;
                this.filterManager = configuration.getFilterManager();

                if (this._editFilters) {
                    this._editFilters.destroy();
                    this._editFiltersHandle.remove();
                }

                this._editFilters = new EditFilters({
                    store: this.store,
                    filterPanel: this
                });

                this._editFiltersHandle = on(this.editFiltersNode, 'click', lang.hitch(this, function () {
                    this._editFilters.showDialog();
                }));

                on(this.clearAllFiltersNode, 'click', lang.hitch(this, this._clearAllFilters));
                //Need to clear the Previous filters.

                this._appliedSet = {};
                this._appliedFilters = [];
                this._updateFilterSummary();
                if (this._appliedSet) {
                    this.requestData(function () {
                        var service = Sage.Services.getService("ClientGroupContext");
                        service.publishFiltersApplied();
                    });
                }

                this._ensureApplyFilterWasPublished();
            },
            _ensureApplyFilterWasPublished: function () {
                // Hack: If we missed the filters/apply event, we will force the group context service to fire it.
                // This problem is in ListPanel as well.
                var service, context;
                service = Sage.Services.getService('ClientGroupContext');
                context = service && service.getContext();
                if (context && context.AppliedFilterInfo) {
                    service.publishFiltersApplied(context.AppliedFilterInfo);
                }
            },
            _clearAllFilters: function () {
                // De-select all selected filters.
                var q = query('li.filter-selected', this.containerNode),
                evt;
                array.forEach(q, function (node) {
                    if (node.click) {
                        node.click();
                    } else {
                        evt = document.createEvent('MouseEvents');
                        evt.initMouseEvent('click', true, true, window,
                        0, 0, 0, 0, 0, false, false, false, false, 0, null);
                        node.dispatchEvent(evt);
                    }
                });

                q = query('.filter-lookup-input input', this.containerNode);
                array.forEach(q, function (node) {
                    if (node.value) {
                        node.value = '';

                        if (has("ie") < 9) {
                            // IE
                            node.fireEvent('onkeydown');
                        } else {
                            evt = document.createEvent('KeyboardEvent');
                            if (evt.initKeyEvent) {
                                evt.initKeyEvent('keydown', true, true,
                                null, false, false, false, false, 13, 0);
                            } else {
                                evt.initKeyboardEvent('keydown', true, true,
                                null, 13, null, null, 1, null);
                            }

                            node.dispatchEvent(evt);
                        }
                    }
                });
            },
            refreshFilters: function (keepSelected) {
                this._refreshing = true;
                if (keepSelected !== true) {
                    this._clearAllFilters();
                }
                this.requestConfiguration();
            },
            requestData: function (onRequestComplete) {
                if (this._isFetchingData) {
                    return;
                }

                this._isFetchingData = true;
                this.destroyDescendants();

                var cacheKey, service, context, cacheData, data;

                service = Sage.Services.getService("ClientGroupContext");
                context = service && service.getContext();
                cacheKey = "METADATA_FILTERS_" + context.CurrentGroupID;

                cacheData = sessionStorage.getItem(cacheKey);
                if (cacheData) {
                    data = json.parse(cacheData);
                    this._iterateFetchedItems(data);
                    if (onRequestComplete) {
                        onRequestComplete();
                    }
                } else {
                    this.store.fetch({
                        onError: lang.hitch(this, this._onFetchError),
                        onComplete: lang.hitch(this, this._onFetchComplete, cacheKey, onRequestComplete)
                    });
                }
            },
            onRequestDataFailure: function (response) {
            },
            _onFetchError: function () {
                this._isFetchingData = false;
            },
            _onFetchItem: function (entry) {
                var data = this._configuration._hiddenFilters || {},
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                prop = context.CurrentEntity + '_' + entry.filterName,
                hidden = false,
                type = entry.filterType,
                expanded = false;

                if (data[prop]) {
                    hidden = data[prop].hidden;
                    expanded = data[prop].expanded;
                }

                if (this.knownFilterTypes[type]) {
                    // Load filter if nothing is in storage for it,
                    // or a user set to visible.
                    if (hidden === false || typeof hidden === 'undefined' || hidden === null) {
                        this.addChild(new this.knownFilterTypes[type]({
                            configurationProvider: this._configurationProvider,
                            filter: entry,
                            store: this._configuration.createStoreForFilter(entry),
                            appliedValues: this._appliedSet && this._appliedSet[entry.$key],
                            parent: this,
                            groupId: context.CurrentGroupID,
                            expanded: expanded
                        }));
                    }
                }
            },
            _onFetchComplete: function (cacheKey, onReqestCompleteCallBack, items) {
                sessionStorage.setItem(cacheKey, json.stringify(items));
                this._iterateFetchedItems(items);
                if (onReqestCompleteCallBack) {
                    onReqestCompleteCallBack();
                }
            },
            _iterateFetchedItems: function (items) {
                if (!items || !items.length) {
                    return;
                }

                var i, length;
                length = items.length;

                for (i = 0; i < length; i++) {
                    this._onFetchItem(items[i]);
                }
                this._isFetchingData = false;
                this._isApplyingConfig = false;
            }
        });

        return widget;
    });

},
'url:Sage/MainView/Lead/templates/LeadDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Lead.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svCompany_Caption || \"Company:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountname %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Caption || \"Title:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.title %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWorkPhone_Caption || \"Work Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.workphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svHomePhone_Caption || \"Home Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.homephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMobilePhone_Caption || \"Mobile Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mobilephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n]",
'Sage/MainView/ActivityMgr/ActivityGroupContextService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/ActivityGroupContextService", [
    'Sage/Groups/BaseGroupContextService',
    'Sage/Services/ActivityService',
    'dojo/string',
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/lang',
    'Sage/MainView/ActivityMgr/ActivityListPanelConfig',
    'Sage/MainView/ActivityMgr/AlarmListPanelConfig',
    'Sage/MainView/ActivityMgr/AllOpenListPanelConfig',
    'Sage/MainView/ActivityMgr/ConfirmListPanelConfig',
    'Sage/MainView/ActivityMgr/EventListPanelConfig',
    'Sage/MainView/ActivityMgr/LitRequestListPanelConfig',
    'Sage/MainView/ActivityMgr/PastDueListPanelConfig',
    'dojox/storage/LocalStorageProvider',
    'dojo/_base/declare',
    'dojo/i18n!./nls/ActivityGroupContextService'
],
function (
  BaseGroupContextService,
  ActivityService,
  dString,
  SDataServiceRegistry,
  lang,
  ActivityListPanelConfig,
  AlarmListPanelConfig,
  AllOpenListPanelConfig,
  ConfirmListPanelConfig,
  EventListPanelConfig,
  LitRequestListPanelConfig,
  PastDueListPanelConfig,
  LocalStorageProvider,
  declare,
  i18nStrings
  ) {

    var activityGroupContextService = declare('Sage.MainView.ActivityMgr.ActivityGroupContextService', BaseGroupContextService, {
        _currentContext: null,
        _currentTabId: false,
        _currentTabDescription: false,
        _currentUserId: false,
        _currentKeyField: '$key',
        _currentListConfiguration: false,
        groupConfigTypes: [
            {
                key: 'activities',
                descriptor: i18nStrings.activityTabDisplayName,
                keyField: "$key",
                configProviderType: ActivityListPanelConfig
            }, {
                key: 'allopen',
                descriptor: i18nStrings.allOpenTabDisplayName,
                keyField: "$key",
                configProviderType: AllOpenListPanelConfig
            }, {
                key: 'pastdue',
                descriptor: i18nStrings.pastDueTabDisplayName,
                keyField: "$key",
                isCompostie: true,
                configProviderType: PastDueListPanelConfig
            }, {
                key: 'alarms',
                descriptor: i18nStrings.alarmTabDisplayName,
                keyField: "$key",
                isCompostie: true,
                configProviderType: AlarmListPanelConfig
            }, {
                key: 'events',
                descriptor: i18nStrings.eventTabDisplayName,
                keyField: "$key",
                configProviderType: EventListPanelConfig
            }, {
                key: 'confirmations',
                descriptor: i18nStrings.confirmTabDisplayName,
                keyField: "$key",
                configProviderType: ConfirmListPanelConfig
            }, {
                key: 'literature',
                descriptor: i18nStrings.litTabDisplayName,
                keyField: "$key",
                configProviderType: LitRequestListPanelConfig
            }
        ],
        _configsHash: false,
        _LOCALSTORE_NAMESPACE: 'Sage-ActivityManagerView',
        _STORE_KEY_LASTAB: '_LASTTAB',
        _tabNameCache: {},
        constructor: function () {
            this.inherited(arguments);
            this._currentContext = {};
            dojo.mixin(this._currentContext, this._emptyContext);
            this._currentContext.CurrentTableKeyField = "$key";
            this._currentContext.AppliedFilterInfo = {};
            this._currentContext.CurrentFamily = null; // 'Actvitiy';
            this._currentContext.notGroupBased = true;

            var defaultTabId = this._getDefaultTabId();

            this.setContext(defaultTabId, 'default');
            this.unsubscribeConnects();
            this._subscribes = [];
            this._subscribes.push(
                dojo.subscribe(dString.substitute("/ui/filters/default/refresh"), this, this._onDefaultFilterRefresh)
            );
            this._onDefaultFilterLoad();

        },
        buildCurrentEntityContext: function () {
            var groupId = this._currentContext.CurrentGroupID;

            if (!groupId) {
                return;
            }

            if (this._currentListConfiguration) {
                this._currentContext.CurrentEntity = this._currentListConfiguration.entityName;
                this._currentContext.CurrentTableKeyField = this.getKeyField(groupId);
                if (!this._currentContext.CurrentName) {
                    this._currentContext.CurrentName = this.getGroupName(groupId);
                }
            }
        },
        _ensureConfigsHash: function () {
            if (!this._configsHash) {
                var hash = {};
                for (var i = 0; i < this.groupConfigTypes.length; i++) {
                    var cfg = this.groupConfigTypes[i];
                    hash[cfg.key] = lang.mixin(cfg, { instance: false });
                }
                this.configsHash = hash;
            }
        },
        _setListConfig: function () {
            this._ensureConfigsHash();

            var tabId = this._currentContext.CurrentGroupID;
            var currConfig = (this.configsHash.hasOwnProperty(tabId)) ? this.configsHash[tabId] : this.configsHash['activities'];
            if (!currConfig.instance) {
                currConfig.instance = new currConfig.configProviderType();
                this.onTabConfigCreated(currConfig.instance);
            } else {
                currConfig.instance.rebuild();
            }
            this._currentListConfiguration = currConfig.instance;
            return;
        },

        getCurrentListConfig: function () {
            this._setListConfig();
            return this._currentListConfiguration;
        },

        getKeyField: function (tabid) {
            this._ensureConfigsHash();
            var keyField = '$key';
            if (this.configsHash[tabid]) {
                keyField = this.configsHash[tabid]['keyField'] || '$key';
            }
            return keyField;
        },
        getGroupName: function (tabid) {
            this._ensureConfigsHash();
            var name = 'default';
            if (this.configsHash[tabid]) {
                name = this.configsHash[tabid]['descriptor'] || 'default';
            }
            return name;
        },

        onCurrentGroupChanged: function (options) {
            //We need to clear out the filter manager  
            this._clearFilterManager();
            var self = this;
            this._onDefaultFilterLoad(function () {
                var context = self.getContext();
                dojo.publish('/group/context/changed', [options, self]);
                self._saveToLocalStorage(self._STORE_KEY_LASTAB, context.CurrentGroupID);
                // The Filter Panel will ask to get the appled filters form the group context service.
                //self.publishFiltersApplied();
            });

        },

        _clearFilterManager: function () {
            var applied = {};
            var definitionSet = {};
            dojo.publish('/ui/filters/default/apply', [applied, definitionSet, this]);

        },
        getContext: function () {
            if (this._currentContext.CurrentGroupID === null) {
                this.requestContext();
            }

            this.buildCurrentEntityContext();
            return this._currentContext;
        },
        requestContext: function () {
            if (this._isRetrievingContext === true) {
                return;
            }
            //this.setContext('activityTab', 'Activity Tab');
        },
        setContext: function (id, name) {
            this._currentContext.CurrentGroupID = id;
            this._currentContext.CurrentName = name;
            this._setListConfig();
            this.buildCurrentEntityContext();
            this._isRetrievingContext = false;
            this.onContextSet(this._currentContext);
        },
        isContextRequired: function () {
            return !(Sage && Sage.Groups && Sage.Groups._groupContext);
        },
        setCurrentGroup: function (id, name, keyField) {
            if (this._currentContext.CurrentGroupID === id) {
                return;
            }
            if (!name || !keyField) {
                this._currentContext.CurrentGroupID = id;
                this._currentContext.CurrentName = false;
                this.buildCurrentEntityContext();  //this sets the keyField and name
                name = this._currentContext.CurrentName;
            } else {
                this._currentContext.CurrentTableKeyField = keyField;
            }
            this.setContext(id, name);
            this.onCurrentGroupChanged({ current: this._currentContext });
        },
        _onDefaultFilterLoad: function (onSuccessCallBack) {
            var context = this.getContext(),
                service = SDataServiceRegistry.getSDataService('system'),
                request,
                entry = {
                    '$name': 'getEntityFilters',
                    'request': {
                        'entityName': context.CurrentEntity,
                        'key': context.CurrentGroupID
                    }
                };
            request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                .setOperationName('getEntityFilters');

            request.execute(entry, {
                success: lang.hitch(this, function (result) {
                    try {
                        if (result.response.appliedFilterInfo) {
                            this._currentContext.AppliedFilterInfo.applied = result.response.appliedFilterInfo.applied;
                            this._currentContext.AppliedFilterInfo.definitionSet = result.response.appliedFilterInfo.definitionSet;
                            if (onSuccessCallBack) {
                                onSuccessCallBack();
                            }
                        }
                    } catch (err) {
                        console.error(err);
                    }
                }),
                failure: function (result) {
                    console.error(result);
                },
                async: false
            });
        },
        _onDefaultFilterRefresh: function (applied, definitionSet, filterManager) {
            var context = this.getContext(),
                service = SDataServiceRegistry.getSDataService('system'),
                entry = {
                    '$name': 'applyFilterToEntity',
                    'request': {
                        'entityName': context.CurrentEntity,
                        'filter': dojo.toJson(filterManager.createValueSet()),
                        'key': context.CurrentGroupID
                    }
                },
                request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                .setOperationName('applyFilterToEntity');

            request.execute(entry, {});
        },

        getStaticTabs: function () {
            return this.groupConfigTypes;
        },

        _saveToLocalStorage: function (key, value, namespace) {

            this._saveToSessionStorage(key, value, namespace);
            return;
            /*var localStore = new LocalStorageProvider();
            if (!namespace) {
            namespace = this._LOCALSTORE_NAMESPACE;
            }
            localStore.initialize();
            localStore.put(key, value, function (status, key, message) {
            if (status === localStore.FAILED) {
            console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
            }
            }, namespace);
            */
        },
        _getFromLocalStorage: function (key, namespace) {

            return this._getFromSessionStorage(key, namespace);
            /*
            var localStore = new LocalStorageProvider();
            localStore.initialize();
            if (!namespace) {
            namespace = this._LOCALSTORE_NAMESPACE;
            }
            return localStore.get(key, namespace); // returns null if key does not exist. 
            */
        },
        _getFromSessionStorage: function (key, namespace) {
            if (!namespace) {
                namespace = this._LOCALSTORE_NAMESPACE;
            }
            var storeKey = namespace + "_" + key;
            return sessionStorage.getItem(storeKey);
        },
        _saveToSessionStorage: function (key, value, namespace) {
            if (!namespace) {
                namespace = this._LOCALSTORE_NAMESPACE;
            }
            var storeKey = namespace + "_" + key;
            sessionStorage.setItem(storeKey, value);
        },

        _getDefaultTabId: function () {

            var defaultTabId = 'activities',
                urlTab = this._getUrlTabId(),
                activityService;

            if (urlTab) {
                urlTab = this._validateTabId(urlTab);
                if (urlTab) {
                    return urlTab;
                }
            }
            var lastTab = this._getFromLocalStorage(this._STORE_KEY_LASTAB);
            if (lastTab) {
                defaultTabId = lastTab;
            } else {
                activityService = Sage.Services.getService('ActivityService');
                if (activityService) {
                    defaultTabId = activityService.getDefaultActivityManagerTabId();
                }
            }
            //double check to make sure we really do have a config for this tab...
            if (!this._configsHash) {
                for (var i = 0; i < this.groupConfigTypes; i++) {
                    if (defaultTabId === this.groupConfigTypes[i]['key']) {
                        return defaultTabId;
                    }
                }
            }
            return defaultTabId;
        },
        _getUrlTabId: function () {
            var tabId = false,
                regexS = "[\\?&]tabId=([^%#]*)",
                regex = new RegExp(regexS),
                results = regex.exec(window.location.href);

            if (results !== null) {
                tabId = results[1];
            }

            return tabId;
        },
        _validateTabId: function (tabId) {
            if (tabId) {
                for (var i = 0; i < this.groupConfigTypes.length; i++) {
                    var cfg = this.groupConfigTypes[i];
                    if (cfg.key.toUpperCase() === tabId.toUpperCase()) {
                        return cfg.key;
                    }
                }
            }
            return null;
        },
        onTabConfigCreated: function (tabConfig) { }
    });
    if (!Sage.Services.hasService('ClientGroupContext')) {
        Sage.Services.addService('ClientGroupContext', new activityGroupContextService());

    } else {
        var actSvc = Sage.Services.getService('ClientGroupContext');
        if (actSvc.declaredClass !== 'Sage.MainView.ActivityMgr.ActivityGroupContextService') {
            actSvc.unsubscribeConnects();
            Sage.Services.removeService('ClientGroupContext');
            Sage.Services.addService('ClientGroupContext', new activityGroupContextService());
        }
    }

    return activityGroupContextService;
});
},
'Sage/MainView/ActivityMgr/nls/SnoozeOptions':function(){
﻿define("Sage/MainView/ActivityMgr/nls/SnoozeOptions", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            fiveMinText: '5 minutes',
            tenMinText: '10 minutes',
            fifteenMinText: '15 minutes',
            thirtyMinText: '30 minutes',
            oneHourText: '1 hour',
            twoHourText: '2 hours',
            fourHourText: '4 hours',
            eightHourText: '8 hours',
            oneDayText: '1 day',
            twoDayText: '2 days',
            threeDayText: '3 days',
            oneWeekText: '1 week',
            twoWeekText: '2 weeks',
            snoozeText: 'Snooze',
            snoozeByText: 'Snooze by:',
            snoozeAllText: 'Snooze All',
            snoozeTitle: 'Snooze Alarms'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'url:Sage/UI/Controls/templates/AddressEdit.html':"<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n<div>\r\n        <table style=\"width:100%;height:100%;\">\r\n                {% for (var i = 0; i < $.fields.length; i++) { %}\r\n                {% if ($.fields[i].visible) { %}\r\n                    <tr>\r\n                        <td><label>{%= $.fields[i].fieldLabel %}</label></td>\r\n                        <td style=\"width: 150px;\">\r\n                            {% if ($.fields[i].xtype === 'picklistcombo') { %}\r\n                            <select data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\"\r\n                                dojoAttachPoint=\"_valueBox\"\r\n                                pickListName=\"{%= $.fields[i].pickList.pickListName %}\"\r\n                                storeMode=\"text\"\r\n                                style=\"width: 100%;\"\r\n                                value=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                           {% if ($.fields[i].xtype === 'checkbox') { %}\r\n                                <input data-dojo-type=\"Sage.UI.Controls.CheckBox\"\r\n                                checked=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                           {% if ($.fields[i].xtype === 'textfield') { %}\r\n                                <input data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                                style=\"width: 100%;\" type=\"text\"\r\n                                value=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                                id=\"{%= $.id %}-{%= $.fields[i].name %}\"\r\n                                name=\"{%= $.fields[i].formClientId %}\"\r\n                                shouldPublishMarkDirty=\"false\"\r\n                                onChange=\"dijit.byId('{%= $.id %}').editorChange();\"\r\n                                textAlign=\"{%= $.fields[i].textAlign %}\" data-dojo-attach-point=\"focusNode\"\r\n                                maxLength=\"{%= $.fields[i].maxLength %}\" />\r\n                        </td>\r\n                   </tr>\r\n                {% } %}          \r\n                {% } %}            \r\n        </table>                    \r\n        <div class=\"button-bar alignright\" style=\"clear: both\">\r\n            <button id=\"{%= $.id %}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId('{%= $.id %}')._okClicked();\">\r\n                {%= $.okText %}\r\n            </button>\r\n            <button id=\"{%= $.id %}-CancelButton\" data-dojo-type=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId('{%= $.id %}')._cancelClicked();\">\r\n                {%= $.cancelText %}\r\n            </button>\r\n        </div>\r\n</div>",
'Sage/QuickForms/Design/Editors/nls/OwnerAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/OwnerAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Groups/main':function(){
define("Sage/Groups/main", [
    "Sage/Groups/GroupNavigator",
    "Sage/Groups/GroupContextService",
    "Sage/Groups/GroupLookup",
    "Sage/Groups/GroupManager"
    ], function() {
	// module:
	    // Sage/Groups/main
	// summary:
        // The Sage/Groups/main module provides loading of all Sage/Groups modules.
});
},
'Sage/QuickForms/Design/Editors/nls/NonVisibleAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/NonVisibleAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            controlInfoText: "Control Info",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/IntegrationContract/nls/InvoiceRTDV':function(){
﻿define("Sage/MainView/IntegrationContract/nls/InvoiceRTDV", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dialogCaption: "Invoice Details",
            loadingText: "loading...",
            lblInvoiceCaption: "Invoice:",
            lblNetTotalCaption: "Invoice Amount:",
            lblInvoiceDateCaption: "Invoice Date:",
            lblInvoiceDiscountAmountCaption: "Discount:",
            lblDueDateCaption: "Due Date:",
            lblInvoiceDiscountPercentCaption: "Discount Percent:",
            lblCustomerPOCaption: "Customer PO:",
            lblCarrierTotalPriceCaption: "Shipping:",
            lblSettlementDiscountPercentCaption: "Settlement Discount Percent:",
            lblTaxCaption: "Tax:",
            lblSettlementDiscountTermsCaption: "Payment Terms:",
            lblNotesCaption: "Comments:",
            lblOperatingCompanyCurrencyCaption: "Operating Company Currency:",
            lblCostTotalCaption: "Total Cost:",
            lblOperatingCompanyCurrencyExchangeRateDateCaption: "Exchange Rate Date:",
            lblProfitTotalCaption: "Profit Total:",
            lblOperatingCompanyCurrencyExchangeRateCaption: "Exchange Rate:",
            lblPriceListCaption: "Price List:",
            lblOCCurrencyCaption: "Operating Company Currency:",
            lblCurrencyCaption: "Currency:",
            lblSalesPersonCaption: "Sales Person:",
            detailsTabTitle: "Details",
            addressTabTitle: "Addresses",
            invoiceLinesTabTitle: "Invoice Lines",
            paymentsTabTitle: "Payments",
            deliveriesTabTitle: "Deliveries",
            grdInvoice_Name: "Invoice #",
            grdInvoice_Date: "Invoice Date",
            grdInvoice_Amount: "Invoice Amount",
            grdInvoice_PO: "Customer PO",
            grdInvoice_PaymentTerms: "Payment Terms",
            grdInvoice_NetTotal: "Net Total",
            grdInvoice_Tax: "Tax",
            grdAddress_Name: "Description",
            grdAddress_address1: "Address 1",
            grdAddress_address2: "Address 2",
            grdAddress_City: "City",
            grdAddress_State: "State",
            grdAddress_Zip: "Postal Code",
            grdItems_ActualPrice: "Actual Price",
            grdItems_ChargesTotal: "Charges Total",
            grdItems_Commodity: "Commodity",
            grdItems_CommodityDimension: "Dimension",
            grdItems_CommodityVariant: "Variant",
            grdItems_DiscountTotal: "Discount Total",
            grdItems_GrossTotal: "Gross Total",
            grdItems_InitialPrice: "Initial Price",
            grdItems_Line: "Line Number",
            grdItems_NetTotal: "Net Total",
            grdItems_Quantity: "Quantity",
            grdItems_Status: "Status",
            grdItems_TaxTotal: "Tax Total",
            grdItems_Type: "Line Type",
            grdItems_UnitOfMeasure: "Unit",
            grdPayments_Charges: "Charges",
            grdPayments_Currency: "Currency",
            grdPayments_Date: "Date",
            grdPayments_Discounts: "Discounts",
            grdPayments_GrossTotal: "Gross Total",
            grdPayments_Name: "Name",
            grdPayments_NetTotal: "Net Total",
            grdPayments_ProcessDate: "Date Processed",
            grdPayments_Status: "Status",
            grdPayments_Tax: "Taxes",
            grdPayments_TenderReference: "Tender Reference",
            grdPayments_TenderType: "Tender Type",
            grdPayments_Type: "Type",
            grdDeliveries_ActualDate: "Actual Date",
            grdDeliveries_ActualTime: "Actual Time",
            grdDeliveries_Carrier: "Carrier",
            grdDeliveries_CarrierReference: "Carrier Reference",
            grdDeliveries_DeliveredQuantity: "Delivered Quantity",
            grdDeliveries_ExceptionReason: "Exception Reason",
            grdDeliveries_Method: "Method",
            grdDeliveries_Number: "Number",
            grdDeliveries_RequestedDate: "Requested Date",
            grdDeliveries_RequestedQuantity: "Requested Quantity",
            grdDeliveries_Status: "Status",
            grdDeliveries_Type: "Type",
            btnCloseCaption: "Close"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/ToggleButton':function(){
require({cache:{
'url:Sage/templates/ToggleButton.html':"<span class=\"dijit dijitReset dijitInline\" role=\"presentation\"\r\t><span class=\"dijitReset dijitInline dijitButtonNode\"\r\t\tdata-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\"\r\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\r\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" data-dojo-attach-point=\"iconNode\"></span\r\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\t\t\t\tid=\"${id}_label\"\r\t\t\t\tdata-dojo-attach-point=\"containerNode\"\r\t\t\t></span\r\t\t></span\r\t></span\r\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\r\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\r/></span>\r"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/ToggleButton", [
       'dijit/form/Button',
       'dijit/_Widget',
       'dojo/text',
       'dojo/text!../templates/ToggleButton.html',
       'dojo/_base/declare'
],
function (button, _Widget, text, template, declare) {
    var widget = declare('Sage.UI.ToggleButton', button, {
        templateString: template,

        __setValueAttr: { node: 'valueNode', type: 'attribute', attribute: 'value' },
        getValue: function () {
            return this.get('label');
        },
        setValue: function (val) {
            this.set('label', val);
        },
        _onButtonClick: function (e) {
        }
    });

    return widget;
});

},
'Sage/UI/nls/SDataLookup':function(){
﻿define("Sage/UI/nls/SDataLookup", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            closeText: 'Close',
            cancelText: 'Cancel',
            loadingText: 'Loading...',
            noDataText: 'No records returned'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/nls/RowDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/RowDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Row"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/ActivityListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/MainView/ActivityMgr/ActivityListPanelConfig", [
        'dojo/i18n',
        'Sage/MainView/ActivityMgr/BaseListPanelConfig',
        'Sage/Utility/Activity',
        'Sage/UI/SummaryFormatterScope',
        'Sage/UI/SDataSummaryFormatterScope',
        'Sage/Data/BaseSDataStore',
        'Sage/Data/SDataStore',
        'Sage/UI/Columns/DateTime',
        'Sage/Data/SDataServiceRegistry',
        'dojo/_base/declare',
        'dojo/i18n!./nls/ActivityListPanelConfig'
],

function (
   i18n,
   BaseListPanelConfig,
   UtilityActivity,
   SummaryFormatterScope,
   SDataSummaryFormatterScope,
   BaseSDataStore,
   SDataStore,
   ColumnsDateTime,
   sDataServiceRegistry,
   declare,
   nlsResources
) {
    var activityListPanelConfig = declare('Sage.MainView.ActivityMgr.ActivityListPanelConfig', [BaseListPanelConfig], {

        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'Activities';
            this._resourceKind = 'userActivities';
            this.entityName = 'UserActivity';
            this._contextMenu = 'ActivityListContextMenu';
            this._scheduleContextMenu = 'ScheduleContextMenu';
            //this._service = sDataServiceRegistry.getSDataService('dynamic');
            this._service = sDataServiceRegistry.getSDataService('system');
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._include = this._getInclude();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.detail = this._getDetailConfig();
            this.toolBar = this._getToolBars();
            this.keyField = "$key";
            this.hasCompositeKey = true;
            dojo.subscribe('/entity/activity/change', this._onListRefresh);
            dojo.subscribe('/entity/activity/delete', this._onListRefresh);
            dojo.subscribe('/entity/activity/create', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/change', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/delete', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/create', this._onListRefresh);
            dojo.subscribe('/entity/activity/confirm', this._onListRefresh);
            dojo.subscribe('/entity/activity/decline', this._onListRefresh);
            dojo.subscribe('/entity/userNotification/delete', this._onListRefresh);             
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('activities');
        },
        _getSelect: function () {
         
            var select = [
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Alarm',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'UserId',
                      'AlarmTime',
                      'Alarm',
                      'Status'
                     ];
            return select;


        },
        _getInclude: function () {
            var includes = ["Activity", "$descriptors"];
            return includes;
        },
        _getSort: function () {
            var sort = [
               { attribute: 'Activity.StartDate', descending: true }
            ];
            return sort;
        },
        _getWhere: function () {
            //var where = (this._currentUserId) ? dojo.string.substitute('(UserActivities.User.Id eq "${0}") and (UserActivities.Status ne "asDeclned" ) and (Type ne "atLiterature" ) ', [this._currentUserId]) : '';
            var where = (this._currentUserId) ? dojo.string.substitute('(User.Id eq "${0}") and (Status ne "asDeclned" ) and (Activity.Type ne "atLiterature" ) ', [this._currentUserId]) : '';
            return where;
        },

       // _getStore: function () {
       //     var store = new SDataStore({
       //         id: this._listId,
       //         service: this._service,
       //         resourceKind: this._resourceKind,
       //         include: this._include,
       //         select: this._select,
       //         sort: this._sort,
       //         expandRecurrences: false,
                //query: {conditions:this._where }
      //          where: this._where
      //      });
      //      return store;
      //  },
        _getStructure: function () {

            var colNameAttachment = "<div class='Global_Images icon16x16 icon_attach_to_16' title='" + this._nlsResources.colNameAttachment + "' />";  //this._nlsResources.colNameAttachment || 'Attachment';
            var colNameRecurring = "<div class='Global_Images icon16x16 icon_recurring' title='" + this._nlsResources.colNameRecurring + "' />"; // this._nlsResources.colNameRecurring || 'Recurring';
            var colNameAlarm = "<img src='images/icons/Alarm_16x16.gif' title='" + this._nlsResources.colNameAlarm + "' alt='" + this._nlsResources.colNameAlarm + "' />"; // this._nlsResources.colNameAlarm || 'Alarm';
            var colNameStatus = "<div class='Global_Images icon16x16 icon_unconfirmedActivity16x16' title='" + this._nlsResources.colNameUnConfirmStatus + "' />";
            var colNameType = this._nlsResources.colNameType || 'Activity Type';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            var colNameDuration = this._nlsResources.colNameDuration || 'Duration';
            var colNameAccount = this._nlsResources.colNameAccount || 'Account/Company';
            var colNameRegarding = this._nlsResources.colNameRegarding || 'Regarding';
            var colNamePriority = this._nlsResources.colNamePriority || 'Priority';
            var colNameUserId = this._nlsResources.colNameUserId || 'Leader';
            var colNameTypeName = this._nlsResources.colNameTypeName || 'Type';
            var colNameContactName = this._nlsResources.colNameContactName || 'Name';

            var structure = [
                { field: 'Status', name: colNameStatus, type: UtilityActivity.activityConfirmStatusCell, width: '20px' },
                { field: 'Alarm', name: colNameAlarm, type: UtilityActivity.activityAlarmCell, width: '20px' },
                { field: 'Activity.Attachment', name: colNameAttachment, type: UtilityActivity.activityAttachCell, width: '20px' },
                { field: 'Activity.Recurring', name: colNameRecurring, type: UtilityActivity.activityRecurringCell, width: '20px' },
                { field: 'Activity.Type', name: colNameType, type: UtilityActivity.activityTypeCell, width: '90px' },
                { field: 'Activity.StartDate', name: colNameStartDate, type: ColumnsDateTime, timelessField: 'Activity.Timeless', width: '100px' },
                { field: 'Activity.Duration', name: colNameDuration, type: UtilityActivity.activityDurationCell, width: '40px' },
                { field: 'Activity.ContactId', name: colNameTypeName, type: UtilityActivity.activityNameTypeCell, width: '40px' },
                { field: 'Activity.ContactName', name: colNameContactName, type: UtilityActivity.activityNameCell, width: '200px' },
                { field: 'Activity.AccountName', name: colNameAccount, type: UtilityActivity.activityAccountCell, width: '200px' },
                { field: 'Activity.Description', name: colNameRegarding, width: '100px' },
                { field: 'Activity.Priority', name: colNamePriority, width: '40px' },
                {field: 'Activity.Leader', name: colNameUserId, type: UtilityActivity.activityLeaderCell, width: '200px' }
            ];

            return structure;
        },

        _getSummaryConfig: function () {
            var store = new SDataStore({
                id: this._listId,
                service: this._service,
                resourceKind: this._resourceKind,
                include: ['Activity','$descriptors'],
                select: ['$key'],
                expandRecurrences: false,
                // sort: this._sort,
                //query: {conditions:this._where }
                where: this._where
            });

            var structure = [
                {
                    field: '$key',
                    formatter: 'formatSummary',
                    width: '100%',
                    name: 'Summary View'
                }
            ];
            var formatScope = this._getFormatterScope();
            var summaryConfig = {
                structure: structure,
                layout: 'layout',
                store: store,
                rowHeight: 170,
                rowsPerPage: 10,
                formatterScope: formatScope
            };

            return summaryConfig;
        },
       
        _getDetailConfig: function () {

            var formatScope = this._getFormatterScope();
            var requestConfig = this._getSummaryDetailRequestConfig();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: requestConfig,
                templateLocation: 'MainView/ActivityMgr/Templates/UserActivityDetailSummary.html'
            };
            return detailConfig;

        },
        _getSummaryListRequestConfig: function () {

            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'User',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/Notes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity','$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getSummaryDetailRequestConfig: function () {
            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'User',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/LongNotes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity', '$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getFormatterScope: function () {
            var requestConfig = this._getSummaryListRequestConfig();
            var formatScope = new SDataSummaryFormatterScope({
                templateLocation: 'MainView/ActivityMgr/templates/UserActivityListSummary.html',
                resetDataManager: true,
                requestConfiguration: requestConfig

            });
            return formatScope;

        },
        
        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        },
        getTimelessProperty: function (propertyName) {
            return "Activity.Timeless";

        }
    });

    return activityListPanelConfig;

});

},
'Sage/Utility/_LocalStorageMixin':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/_LocalStorageMixin", [
        'dojo/_base/declare',
        'dojox/storage/LocalStorageProvider'
], function (
        declare,
        LocalStorageProvider
) {
    return declare('Sage.Utility._LocalStorageMixin', null, {
        localStorageProvider: null,
        _setLocalStorageProviderAttr: function (provider) {
            this.localStorageProvider = provider;
        },
        _getLocalStorageProviderAttr: function () {
            this._ensureProvider();
            return this.localStorageProvider;
        },
        _ensureProvider: function () {
            var localStore;
            if (!this.localStorageProvider) {
                localStore = new LocalStorageProvider();
                localStore.initialize();
                this._setLocalStorageProviderAttr(localStore);
            }
        },
        saveToLocalStorage: function (key, value, ns) {
            var localStore = this._getLocalStorageProviderAttr(),
                validNS = ns,
                validKey = key;
            
            if (!localStore.isValidKey(key)) {
                //console.warn('Invalid key supplied to local storage provider. Key: ' + key);
                validKey = this._stripBadValues(key);
            }
            
            if (!localStore.isValidNamespace(ns)) {
                //console.warn('Invalid namespace supplied to local storage provider. Namespace: ' + ns);
                validNS = this._stripBadValues(ns);
            }
            
            localStore.put(validKey, value, function(status, key, message) {
                if(status === localStore.FAILED) {
                    console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
                }
            }, validNS);


            // Update the modified_at flag for the item
            var mod = new Date(Date.now());
            localStore.put(validKey + '_modified_at', mod, function(status, key, message) {
                if(status === localStore.FAILED) {
                    console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
                }
            }, validNS);

            // Update a modified_at flag so we know when the last time this namespace was updated 
            localStore.put('modified_at', mod, function(status, key, message) {
                if(status === localStore.FAILED) {
                    console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
                }
            }, validNS);
        },
        getFromLocalStorage: function (key, ns) {
            var localStore = this._getLocalStorageProviderAttr(),
                validNS = ns,
                validKey = key;
                
            if (!localStore.isValidKey(key)) {
                //console.warn('Invalid key supplied to local storage provider. Key: ' + key);
                validKey = this._stripBadValues(key);
            }
            
            if (!localStore.isValidNamespace(ns)) {
                //console.warn('Invalid namespace supplied to local storage provider. Namespace: ' + ns);
                validNS = this._stripBadValues(ns);
            }
            
            return localStore.get(validKey, validNS);// returns null if key does not exist. 
        },
        getKeys: function (ns) {
            var localStore = this._getLocalStorageProviderAttr();
            return localStore.getKeys(ns);
        },
        clear: function (ns /* optional */) {
            var localStore = this._getLocalStorageProviderAttr();
            if (ns) {
                localStore.clear(ns);
            } else {
                localStore.clear();
            }
        },
        _stripBadValues: function (key) {
            // This is going to blow up for unicode.
            return key.replace(/[^A-Za-z0-9]/g, '-');
        }
    });
});
},
'url:Sage/MainView/IntegrationContract/templates/SalesOrderRTDV.html':"﻿[\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_salesOrderDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\r\n        '<div dojoAttachPoint=\"loadingContainer\">',\r\n            '<br />',\r\n            '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n            '<br />',\r\n            '<br />',\r\n        '</div>',\r\n        '<table cellspacing=\"5\" dojoAttachPoint=\"salesOrderDetails\" border=\"0\" width=\"100%\" class=\"display-none\">',\n            '<div>',\r\n                '<tr>',\n\t\t\t        '<td>',\r\n\t\t\t             '<label for=\"SalesOrder_reference\">{%= $.lblSalesOrderCaption %}</label>',\r\n\t\t\t        '</td>',\r\n                    '<td>',\r\n                        '<input type=\"text\" id=\"{%= $.id%}_reference\" name=\"reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                    '<td>',\n                        '<label for=\"SalesOrder_status\">{%= $.lblStatusCaption %}</label>',\n                    '</td>',\n                    '<td>',\n                        '<input type=\"text\" id=\"{%= $.id%}_status\" name=\"status\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                    '<td>',\n                        '<label for=\"SalesOrder_grossTotal\">{%= $.lblGrossTotalCaption %}</label>',\r\n                    '</td>',\n                    '<td>',\n                        '<input type=\"text\" id=\"{%= $.id%}_grossTotal\" name=\"grossTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                '</tr>',\r\n            '</div>',\r\n        '</table>',\r\n        '<div style=\"height:370px;width:800px\" dojoAttachPoint=\"tabContentDetails\" class=\"display-none\">',\r\n            '<div id=\"{%= $.id%}_salesOrderContainer\" dojoAttachPoint=\"salesOrderContainer\" dojoType=\"dijit.layout.TabContainer\" style=\"width:100%;height:100%;\">',\r\n                '<div id=\"{%= $.id%}_salesOrderContent\" dojoAttachPoint=\"salesOrderContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.detailsTabTitle %}\" selected=\"true\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"{%= $.id%}_divDetails\">',\r\n                        '<table cellspacing=\"5\">',\r\n                            '<col style=\"width:200px\" />',\r\n                            '<col style=\"width:200px\" />',\r\n                            '<tr>',\r\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_OrderDate\">{%= $.lblOrderDateCaption %}</label>',\r\n                                '</td>',\r\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_OrderDate\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\r\n                                '<td>',\n                                    '<label for=\"SalesOrder_TaxTotal\">{%= $.lblTaxTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_TaxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\r\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_HoldStatus\">{%= $.lblHoldStatusCaption %}</label>',\r\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_HoldStatus\" name=\"statusFlagText\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Currency\">{%= $.lblCurrencyCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Type\">{%= $.lblTypeCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Type\" name=\"type\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_CostTotal\">{%= $.lblCostTotalCaption %}</label>',\r\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_CostTotal\" name=\"costTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_PONumber\">{%= $.lblPONumberCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_PONumber\" name=\"customerReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_ProfitTotal\">{%= $.lblProfitTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_ProfitTotal\" name=\"profitTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Quotation\">{%= $.lblQuotationCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Quotation\" name=\"quotation.reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_InvoiceStatus\">{%= $.lblInvoiceStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_InvoiceStatus\" name=\"invoiceStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Contact\">{%= $.lblContactCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Contact\" name=\"buyerContact.fullName\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DeliveryDate\">{%= $.lblDeliveryDateCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DeliveryDate\" name=\"deliveryDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_PriceList\">{%= $.lblPriceListCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_PriceList\" name=\"pricelist.name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DueDate\">{%= $.lblDueDateCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DueDate\" name=\"dueDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_NetTotal\">{%= $.lblNetTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_NetTotal\" name=\"netTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Carrier\">{%= $.lblCarrierCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Carrier\" name=\"carrierCompany\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DiscountTotal\">{%= $.lblDiscountTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DiscountTotal\" name=\"discountTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_AllocationStatus\">{%= $.lblAllocationStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_AllocationStatus\" name=\"allocationStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DeliveryStatus\">{%= $.lblDeliveryStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DeliveryStatus\" name=\"deliveryStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_ChargesTotal\">{%= $.lblChargesTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_ChargesTotal\" name=\"chargesTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                        '</table>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soAddressesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.addressTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"sdgrdSalesOrderAddresses\" dojoAttachPoint=\"sdgrdSalesOrderAddresses\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesOrderAddresses_Grid\" dojoAttachPoint=\"sdgrdSalesOrderAddresses_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soSalesPersonsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.salesPersonsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_SalesPersons\" dojoAttachEvent=\"onShow:initSalesPersons\">',\r\n                    '<div id=\"sdgrdSalesPersons\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesPersons_Grid\" dojoAttachPoint=\"sdgrdSalesPersons_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soLinesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.salesOrderLinesTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"sdgrdSalesOrderLines\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesOrderLines_Grid\" dojoAttachPoint=\"sdgrdSalesOrderLines_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soPaymentsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.paymentsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Payments\" dojoAttachEvent=\"onShow:initPayments\">',\r\n                    '<div id=\"sdgrdSOPayments\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSOPayments_Grid\" dojoAttachPoint=\"sdgrdSOPayments_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soDeliveriesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.deliveriesTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Deliveries\" dojoAttachEvent=\"onShow:initDeliveries\">',\r\n                    '<div id=\"sdgrdSODeliveries\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSODeliveries_Grid\" dojoAttachPoint=\"sdgrdSODeliveries_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n            '</div>',\r\n        '</div>',\r\n        '<div class=\"button-bar alignright\">',\r\n            '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_soBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]",
'Sage/UI/SummaryContents':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, require */
define("Sage/UI/SummaryContents", [
        'dijit/_Widget',
        'Sage/_Templated',
        'dojo/_base/lang',
        'dojo/_base/declare'
],
function (_Widget, _Templated, lang, declare) {
    var summaryContents = declare('Sage.UI.SummaryContents', [_Widget, _Templated], {
        widgetsInTemplate: true,
        templateLocation: '', // 'SummaryTemplates/Account.html',
        templateString: '', // dojo . cache('Sage', 'SummaryTemplates/Account.html'),
        widgetTemplate: '',
        constructor: function (config) {
            var moduleNameParts = ['Sage'];
            var templateParts = config.templateLocation.split('/');
            for (var i = 0; i < templateParts.length - 1; i++) {
                moduleNameParts.push(templateParts[i]);
            }
            var path = 'dojo/i18n!' + moduleNameParts.join('/') + '/nls/' + templateParts[templateParts.length - 1].replace('.html', '');
            require([path],
                lang.hitch(this, function (nls) {
                    lang.mixin(this, nls);
                })
            );
            //Dynamic caching need to be obscured from the builder by using the dojo['cache'] calling method
            this.templateString = dojo['cache']('Sage', config.templateLocation || this.templateLocation),
            this.widgetTemplate = new Simplate(eval(this.templateString));
        }
    });

    return summaryContents;
});


},
'Sage/TaskPane/nls/OpportunityTasksTasklet':function(){
﻿define("Sage/TaskPane/nls/OpportunityTasksTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        updateOpportunitiesTitle: 'Update Opportunities',
        opportunityStatisticsTitle: 'Opportunity Statistics'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Filters/nls/CheckBoxFilter':function(){
define("Sage/UI/Filters/nls/CheckBoxFilter", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            loadingText: 'Loading...',
            moreText: 'Edit Items',
            clearText: 'Clear',
            emptyText: '(Blank)',
            nullText: '(Null)',
            ofText: '/'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Alarms/UnconfirmedAlarm':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/UnconfirmedAlarm", [
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/form/CheckBox',
    'Sage/Utility/Activity',
    'Sage/UI/Alarms/AlarmCountDown',
    'Sage/Link',
    'Sage/UI/Controls/EntityInfoToolTip',
    'dojo/i18n',
    'dojo/i18n!./nls/ActivityAlarm',
    'dojo/_base/declare'
],
function (_Templated, _Widget, CheckBox, activityUtility, AlarmCountDown,
    link, EntityInfoToolTip, i18n, alarmStrings, declare) {
    var unconfirmedAlarm = declare('Sage.UI.Alarms.UnconfirmedAlarm', [_Widget, _Templated], {
        widgetsInTemplate: true,
        userNotification: null,
        selected: false,
        key: '',
        _tooltips: [],
        widgetTemplate: new Simplate([
            '<div class="alarm-item">',
                '<table style="width:100%" dojoAttachPoint="_item" dojoAttachEvent="onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick">',
                    '<col width="50px" />',
                    '<col width="50%" />',
                    '<col width="50%" />',
                    '<tr>',
                        '{% var imageClass = Sage.Utility.Activity.getActivityImageClass($.userNotification.Activity.Type, "medium"); %}',
                        '<td class="alarm-icon">',
                            '<div class="dijitIcon dijitMenuItemIcon Global_Images icon24x24 {%= imageClass %}" title="{%= $.cleanText($.userNotification.Activity.Description) %}"></div>',
                            '<input type="checkbox" data-dojo-type="dijit.form.CheckBox" size="30px" dojoAttachPoint="_checkbox" />',
                        '</td>',
                        '<td class="alarm-content">',
                            '{% var desc = $.userNotification.Activity.Description;if (!desc) { desc = Sage.Utility.Activity.getActivityTypeName($.userNotification.Activity.Type); } %}',
                            '<div class="alarm-description">',
                                '{% if ($.userNotification.Activity.Recurring) { %}<div class="Global_Images icon16x16 icon_recurring" title="{%= $.recurringText %}" > </div>&nbsp;&nbsp;{% } %}',
                                '<a href="javascript:Sage.Link.editConfirmation(\'{%= $.userNotification.$key %}\')">{%= desc %}</a>', 
                            '</div>',
                            '<div>{%= Sage.Utility.Activity.formatActivityStartDate($.userNotification.Activity.StartDate) %}</div>',
                            '<div>{%= $.leaderText %}: {%= $.userNotification.Activity.Leader.$descriptor %}</div>',
                            '{% if (($.userNotification.Activity.LeadId) && ($.userNotification.Activity.LeadId.trim() !== "")) { %}',  //Lead...
                                '<div id="{%= $.userNotification.Activity.$key %}_lead" dojoAttachPoint="_leadnode">',
                                    '{%= $.leadText %}: <a href="Lead.aspx?entityid={%= $.userNotification.Activity.LeadId %}">{%= $.userNotification.Activity.LeadName %}</a>',
                                '</div>',
                                '{% if ($.userNotification.Activity.AccountName !== "") { %}',
                                    '<div>{%= $.companyText %}: {%= $.userNotification.Activity.AccountName %}</div>',
                                '{% } %}',
                            '{% } else { %}',   // ... or Contact?    
                                '{% if ($.userNotification.Activity.ContactName !== "") { %}',
                                    '<div id="{%= $.userNotification.Activity.$key %}_con" dojoAttachPoint="_connode">',
                                        '{%= $.contactText %}: <a href="Contact.aspx?entityid={%= $.userNotification.Activity.ContactId %}">{%= $.userNotification.Activity.ContactName %}</a>',
                                    '</div>',
                                '{% } %}',
                                '{% if ($.userNotification.Activity.AccountName !== "") { %}',
                                    '<div id="{%= $.userNotification.Activity.$key %}_acc" dojoAttachPoint="_accnode">',
                                        '{%= $.accountText %}: <a href="Account.aspx?entityid={%= $.userNotification.Activity.AcountId %}">{%= $.userNotification.Activity.AccountName %}</a>',
                                    '</div>',
                                '{% } %}',
                            '{% } %}',
                        '</td><td class="alarm-content">',
                            '{% if ($.userNotification.Activity.Location) { %}',
                                '<div id="{%= $.userNotification.Activity.$key %}_Location" dojoAttachPoint="_location">',
                                    '{%= $.locationText %}: {%= $.userNotification.Activity.Location %}&nbsp;',
                                '</div>',
                            '{% } %}',
                            '{% if ($.userNotification.Activity.OpportunityName) { %}',
                                '<div id="{%= $.userNotification.Activity.$key %}_opp" dojoAttachPoint="_oppnode">',
                                    '{%= $.opportunityText %}: <a href="Opportunity.aspx?entityid={%= $.userNotification.Activity.OpportunityId %}">{%= $.userNotification.Activity.OpportunityName %}</a>',
                                '</div>',
                            '{% } %}',
                            '{% if ($.userNotification.Activity.TicketNumber) { %}',
                                '<div id="{%= $.userNotification.Activity.$key %}_tick" dojoAttachPoint="_ticknode">',
                                    '{%= $.ticketText %}: <a href="Ticket.aspx?entityid={%= $.userNotification.Activity.TicketId %}">{%= $.userNotification.Activity.TicketNumber %}</a>',
                                '</div>',
                            '{% } %}',
                        '</td>',
                    '</tr>',
                '</table>',
            '</div>'
        ]),
        constructor: function () {
            dojo.mixin(this, alarmStrings);
        },
        postCreate: function () {
            this.inherited(arguments);
            this._checkbox.set('checked', this.selected);
            this._setupTooltips();
        },
        _setuserNotificationAttr: function (un) {
            this.userNotification = un;
            this.key = un['$key'];
        },
        _setupTooltips: function () {
            if (this.userNotification.Activity.AccountName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._accnode,
                    position: ['below'],
                    entityName: 'accounts',
                    entityId: this.userNotification.Activity.AccountId
                }));
            }
            if (this.userNotification.Activity.ContactName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._connode,
                    position: ['below'],
                    entityName: 'contacts',
                    entityId: this.userNotification.Activity.ContactId
                }));
            }
            if (this.userNotification.Activity.LeadName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._leadnode,
                    position: ['below'],
                    entityName: 'leads',
                    entityId: this.userNotification.Activity.LeadId
                }));
            }
        },
        closeTooltips: function () {
            for (var i = 0; i < this._tooltips.length; i++) {
                this._tooltips[i].close();
            }
        },
        cleanText: function (str) {
            if (!str) {
                return '';
            }
            var oRegExp = new RegExp('[/:"*?\<\>|\r\n\'\"`]+', "g");
            return str.replace(oRegExp, "");
        },
        _onHover: function () {
            dojo.addClass(this.domNode, 'alarm-item-hover');
        },
        _onUnhover: function () {
            dojo.removeClass(this.domNode, 'alarm-item-hover');
        },
        _onClick: function () {
            this.selected = !this.selected;
            this._checkbox.set('checked', this.selected);
            this._setSelectedStyle();
        },
        _setSelectedAttr: function (selected) {
            this.selected = selected;
            this._checkbox.set('checked', this.selected);
            this._setSelectedStyle();
        },
        _getSelectedAttr: function () {
            return this.selected;
        },
        _setSelectedStyle: function () {
            if (this.selected) {
                dojo.addClass(this.domNode, 'alarm-item-selected');
            } else {
                dojo.removeClass(this.domNode, 'alarm-item-selected');
            }
        }
    });
    return unconfirmedAlarm;
});
},
'Sage/Utility/File/nls/LibraryDocument':function(){
﻿define("Sage/Utility/File/nls/LibraryDocument", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            failureNumber: 'Failure #${0}: ',
            percentComplete: 'Uploading, please wait...',
            uploadError: 'There was an error attempting to upload one or more files (failed: ${0}; succeeded: ${1}).',
            invalidContext: 'The file(s) cannot be uploaded outside of the Sales Library.',
            unknownError: 'An unknown error occurred uploading a file.'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/EntityInfoToolTip':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/EntityInfoToolTip", [
       'dijit/Tooltip',
       'Sage/Data/SingleEntrySDataStore',
       'Sage/Utility',
       'dojo/string',
       'dojo/html',
       'dojo/i18n!./nls/EntityInfoToolTip',
       'dojo/_base/lang',
       'dojo/_base/declare'
],
function (tooltip, SingleEntrySDataStore, util, dString, dhtml, nlsStrings, lang, declare) {
    var widget = declare('Sage.UI.Controls.EntityInfoToolTip', tooltip, {

        /*
        Example:
        var t = new Sage.UI.Controls.EntityInfoToolTip({
        connectId: '<some Dom element id',
        position: ['below'],
        entityName: 'accounts',
        entityId: 'AA2EK0013106',
        dataProps: [
        { label: 'Co:', property: 'AccountName' },
        { label: 'Ph:', property: 'MainPhone' },
        { label: 'URL:', property: 'WebAddress' }
        ]
        });
        */


        /**
        * @property {string} Entity name. Required.
        */
        entityName: '',

        /**
        * @property {string} Entity ID to fetch. Required.
        */
        entityId: '',

        /**
        * @property {array} configuration of objects specifying label and property for requesting and displaying data
        */
        dataProps: [],
        /**
        * @property {aray} specifies relationship includes when needed for items defined in dataProps
        */
        include: [],

        /* Resource strings from nls/{language}/EntityInfoToolTip.js
        errorText: 'Information not found.',
        loadingText: 'Loading...',
        noInfoText: 'No information to show.',
        mainText: 'Main:',
        faxText: 'Fax:',
        tollFreeText: 'Toll Free:',
        urlText: 'Web URL:',
        workText: 'Work:',
        mobileText: 'Mobile:',
        emailText: 'Email:',
        contactNameText: 'Name:',
        phoneText: 'Phone:',
        accountText: 'Account:',
        */

        _store: null,
        _storeOptions: null,

        constructor: function (options) {
            lang.mixin(this, nlsStrings);
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            this.label = 'Loading...';
        },
        //onShow: function () {
        open: function (target) {
            if (!this.entityId || this.entityId.trim() === '') {
                this.set('label', this.noInfoText);
            } else if (!this._store) {
                if (this.dataProps.length < 1) {
                    this.dataProps = this._findPredefined(this.entityName);
                }
                if (this.dataProps.length < 1) {
                    this.set('label', this.errorText);
                    return;
                }
                this._setupStore();
                this._fetchData(target);
            }
            this.inherited(arguments);
        },
        _setDataPropsAttr: function (dataProps) {
            this._store = false;
            this.set('label', this.loadingText);
            this.dataProps = dataProps;
        },
        _getDataPropsAttr: function () {
            return this.dataProps;
        },
        _setEntityIdAttr: function (entityId) {
            this._store = false;
            this.set('label', (entityId === '') ? this.noInfoText : this.loadingText);
            this.entityId = entityId;
        },
        _getEntityIdAttr: function () {
            return this.entityId;
        },
        _setupStore: function () {
            var select = [], sel = '', include = [], included = {};
            for (var i = 0; i < this.dataProps.length; i++) {
                sel = this.dataProps[i].property;
                if (sel.indexOf('.') > 0) {
                    var parts = sel.split('.'), inc = '';
                    for (var p = 0; p < parts.length - 1; p++) {
                        inc += parts[p];
                        if (!included[inc]) {
                            include.push(inc);
                            included[inc] = true;
                        }
                        inc += '/';
                    }
                    sel = sel.replace(/\./g, '/');
                }

                select.push(sel);
            }
            var self = this;
            var storeOptions = {
                include: dojo.isArray(this.include) ? this.include : [],
                select: select,
                resourceKind: self.entityName
            };
            if (include.length > 0) {
                storeOptions['include'] = include;
            }
            var dataStore = new SingleEntrySDataStore(storeOptions);

            self._storeOptions = storeOptions;
            self._store = dataStore;
        },
        _fetchData: function (target) {
            var t = target;
            this._store.fetch({
                predicate: '"' + this.entityId + '"',
                onComplete: function (data) { this.displayResults(data, t) },
                // when we implement "auto" mode, we can use this...
                //                beforeRequest: function (request) { 
                //                    request.setQueryArg('precedence', '1');
                //                },
                onError: function (e) {
                    this.set('label', this.errorText);
                },
                scope: this
            });
        },
        displayResults: function (data, target) {
            //console.log(data);
            var html = '<table class="propertyTip">';
            for (var i = 0; i < this.dataProps.length; i++) {
                var dp = this.dataProps[i];
                var val = util.getValue(data, dp.property);
                if (val) {
                    html += dString.substitute('<tr><td class="caption">${0}</td><td class="value">${1}</td></tr>', [dp.label, val]);
                }
            }
            html += '</table>';
            this.set('label', html);
            this.close();
            this.open(target);
        },
        _findPredefined: function (entity) {
            switch (entity) {
                case 'accounts':
                    return [
                        { label: this.mainText || 'Main Phone:', property: 'MainPhone' },
                        { label: this.faxText || 'Fax:', property: 'Fax' },
                        { label: this.tollFreeText || 'Toll Free', property: 'TollFree' },
                        { label: this.urlText || 'Web URL', property: 'WebAddress' }
                    ];
                case 'contacts':
                    return [
                        { label: this.workText || 'Work:', property: 'WorkPhone' },
                        { label: this.mobileText || 'Mobile:', property: 'Mobile' },
                        { label: this.faxText || 'Fax:', property: 'Fax' },
                        { label: this.emailText || 'Email:', property: 'Email' }
                    ];
                case 'leads':
                    return [
                        { label: this.workText || 'Work:', property: 'WorkPhone' },
                        { label: this.mobileText || 'Mobile:', property: 'Mobile' },
                        { label: this.faxText || 'Fax:', property: 'Fax' },
                        { label: this.emailText || 'Email:', property: 'Email' }
                    ];
                case 'tickets':
                    return [
                        { label: this.contactNameText || 'Contact:', property: 'Contact.Name' },
                        { label: this.phoneText || 'Phone:', property: 'Contact.WorkPhone' },
                        { label: this.emailText || 'Email:', property: 'Contact.Email' }
                    ];
                case 'opportunities':
                    return [
                        { label: this.accountText || 'Account:', property: 'Account.AccountName' },
                        { label: this.mainText || 'Main Phone:', property: 'Account.MainPhone' }
                    ];
            }
            return [];
        }
    });

    return widget;
});


},
'Sage/QuickForms/Design/Editors/TextBoxBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/TextBoxBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/dom-style',
    'dijit/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/TextBoxBasicPropertyEditor'
], function(
    declare,
    lang,
    domStyle,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.TextBoxBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.linesTooltipText %}">',
                        '<label>{%= $.linesText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_lines" data-dojo-props="constraints:{min:0,max:1000,places:0}" data-dojo-attach-event="onChange:_onLinesChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _lines: null,
        _isReadOnly: null,
        _tooltip: null,

        //Localization
        titleText: 'Basic',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        linesText: 'Lines:',
        linesTooltipText: 'Number of lines of text displayed.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._lines.set('value', this._designer.get('lines'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));

            var D = Sage.QuickForms.Design,
                designer = this._designer;
            if(designer instanceof D.PhoneControlDesigner || designer instanceof D.UrlControlDesigner || designer instanceof D.EmailControlDesigner) {
                domStyle.set(this._lines.domNode.parentNode, 'display', 'none');
            }
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('captionAlignment', value);
        },
        _onLinesChange: function(value){
            if(this.isSuspended() || !this._lines.isValid()) return;
            this._designer.set('lines', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/DataGridAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/DataGridAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/DataGridAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.DataGridAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.renderVerticalTooltipText %}">',
                        '<label>{%= $.renderVerticalText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_renderVertical" data-dojo-attach-event="onChange:_onRenderVerticalChange"></div>',
                    '</div>',
                    '<div class="editor-field" style="display:none;" title="{%= $.showSortIconTooltipText %}">',
                        '<label>{%= $.showSortIconText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_showSortIcon" data-dojo-attach-event="onChange:_onShowSortIconChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.emptyTableRowTooltipText %}">',
                        '<label>{%= $.emptyTableRowText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_emptyTableRowString" data-dojo-attach-event="onChange:_onEmptyTableRowStringChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.expandableRowsTooltipText %}">',
                        '<label>{%= $.expandableRowsText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_expandableRows" data-dojo-attach-event="onChange:_onExpandableRowsChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.dataSourceTooltipText %}">',
                        '<label>{%= $.dataSourceText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_dataSource" data-dojo-attach-event="onChange:_onDataSourceChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '<div class="editor-content-half">',
            '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlId: null,
        _controlType: null,
        _dataSource: null,
        _emptyTableRowString: null,
        _expandableRows: null,
        _renderVertical: null,
        _showSortIcon: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        dataSourceText: 'Data Source:',
        dataSourceTooltipText: 'Source of the data for this control such as another control or an entity.',
        emptyTableRowText: 'Empty Table Row Text:',
        emptyTableRowTooltipText: 'Text to display if grid shows no data.',
        expandableRowsText: 'Expandable Rows:',
        expandableRowsTooltipText: 'Allows user to expand grid rows to show more text.',
        renderVerticalText: 'Render Vertically:',
        renderVerticalTooltipText: 'Show grid rows as columns.',
        showSortIconText: 'Show Sort Icon:',
        showSortIconTooltipText: 'Show sort icon on columns that are sortable.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._dataSource.set('value', this._designer.get('dataSource'));
            this._emptyTableRowString.set('value', this._designer.get('emptyTableRowText'));
            this._expandableRows.set('value', this._designer.get('expandableRows'));
            this._renderVertical.set('value', this._designer.get('renderVertical'));
            this._showSortIcon.set('value', this._designer.get('showSortIcon'));
            this._visible.set('value', this._designer.get('visible'));
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDataSourceChange: function(value){
        },
        _onEmptyTableRowStringChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('emptyTableRowText', value);
        },
        _onExpandableRowsChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('expandableRows', value);
        },
        _onRenderVerticalChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('renderVertical', value);
        },
        _onShowSortIconChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('showSortIcon', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/UI/Alarms/AlertPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/AlertPane", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/_Widget',
       'dojo/_base/declare'
],
function (_TemplatedMixin, _WidgetsInTemplateMixin, _Widget, declare) {
    var widget = declare('Sage.UI.Alarms.AlertPane', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        widgetsInTemplate: true,
        constructor: function () {
            this.alertItems = [];
            this.alertWidgets = [];
            this.store = null;
            this._drawn = false;
            this.selectedAlerts = {};
        },
        onShow: function () { },
        _hasDifferentItems: function (items) {
            if (items.length !== this.alertWidgets.length) {
                return true;
            }
            if (this.alertItems.length === items.length) {
                for (var i = 0; i < items.length; i++) {
                    if (this.alertItems[i]['$key'] !== items[i]['$key']) {
                        return true;
                    }
                }
                return false;
            }
            return true;
        },
        _setAlertItemsAttr: function (items, isOpen) {
            if (!this._hasDifferentItems(items)) { return; }
            this.alertItems = items;
            this._drawn = false;
            this.selectedAlerts = {};
            var len = this.alertWidgets.length;
            for (var i = 0; i < len; i++) {
                var wid = this.alertWidgets.pop();
                if (wid.selected) {
                    this.selectedAlerts[wid.key] = 1;
                }
                wid.destroy();
            }
            if (len === 0 && this.alertItems.length > 0) {
                //select the first one...
                this.selectedAlerts[this.alertItems[0]['$key']] = 1;
            }
            //if (isOpen) {
            this._drawAlerts();
            //}
            this._alertChanged(this.alertWidgets.length);
        },
        _ensureOneSelected: function () {
            var len = this.alertWidgets.length - 1;
            //is one already selected
            for (var i = 0; i < len; i++) {
                if (this.alertWidgets[i].get('selected')) {
                    return;
                }
            }
            //nope, select the first...
            if (this.alertWidgets.length > 0) {
                this.alertWidgets[0].set('selected', true);
            }
        },
        _drawAlerts: function () {
            if (this._drawn) {
                return;
            }
            dojo.html.set(this._alertContents, '');
            if (this.alertItems) {
                for (var i = 0; i < this.alertItems.length; i++) {
                    this._addAlert(this.alertItems[i]);
                }
                this._drawn = true;
            }
        },
        getUnhandledAlertCount: function () {
            return this.alertWidgets.length;
        },
        _addAlert: function (alert) { },
        closeTooltips: function () {
            for (var i = 0; i < this.alertWidgets.length; i++) {
                this.alertWidgets[i].closeTooltips();
            }
        },
        _alertChanged: function (count) {
            this._ensureOneSelected();
            this.onAlertChanged(count);
        },
        onAlertChanged: function (count) { }

    });

    return widget;
});

},
'Sage/TaskPane/SecuredActionTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/SecuredActionTasklet", [
    'dojo/i18n!./nls/SecuredActionTasklet',
    'Sage/TaskPane/_BaseTaskPaneTasklet',
    'Sage/TaskPane/TaskPaneContent',
    'Sage/Utility',
    'dojo/_base/declare'
],
function (i18nStrings, _BaseTaskPaneTasklet, TaskPaneContent, Utility, declare) {
    var securedActionTasklet = declare('Sage.TaskPane.SecuredActionTasklet', [_BaseTaskPaneTasklet, TaskPaneContent], {
        addToRoleTitle: 'Add To Role',
        taskItems: [],
        constructor: function () {
            dojo.mixin(this, i18nStrings);
            this.taskItems = [
                { taskId: 'AddToRole', type: "Link", displayName: this.addToRoleTitle, clientAction: 'securedActionTaskletActions.addSecuredActionToRole();',
                    securedAction: 'Entities/SecuredAction/Add'
                }
            ];
        },
        addSecuredActionToRole: function () {
            if (Utility.getModeId() === "detail") {
                dojo.byId([this.clientId, '_tskAddSecuredActionsToRole'].join('')).click();
            }
            else {
                this.prepareSelectedRecords(this.actionItem(this));
            }
        },
        actionItem: function (self) {
            return function() {
                dojo.byId([self.clientId, '_tskAddSecuredActionsToRole'].join('')).click();
            };
        }
    });
    return securedActionTasklet;
});
},
'Sage/QuickForms/Design/DesignPanel':function(){
define("Sage/QuickForms/Design/DesignPanel", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/_base/json',
    'dojo/string',
    'dojo/topic',
    'dojo/dom-construct',
    'dojo/dom-class',
    'dojo/dom-attr',
    'dijit/layout/BorderContainer',
    'dijit/layout/ContentPane',
    'dijit/form/Select',
    'Sage/Services/_ServiceMixin',
    'Sage/_Templated',
    'Sage/Utility',
    'Sage/UI/ImageButton',
    './Help',
    './DesignSurface',
    './FormDesigner',
    './NonVisibleControlContainer',
    './PropertyEditorContainer',
    'dojo/i18n!./nls/DesignPanel'
], function (
    declare,
    array,
    lang,
    json,
    string,
    topic,
    domConstruct,
    domClass,
    domAttr,
    BorderContainer,
    ContentPane,
    Select,
    _ServiceMixin,
    _Templated,
    Utility,
    ImageButton,
    Help,
    DesignSurface,
    FormDesigner,
    NonVisibleControlContainer,
    PropertyEditorContainer,
    localization
) {
    return declare('Sage.QuickForms.Design.DesignPanel', [BorderContainer, _ServiceMixin, _Templated], {
        serviceMap: {
            'dataService': { type: 'sdata', name: 'metadata' }
        },
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<div class="design-panel-toolbar" data-dojo-type="dijit.Toolbar" data-dojo-props="region: \'top\', align: \'right\', splitter: false">',
            '<span class="design-panel-culture-label">{%: $.cultureText %}</span><div class="design-panel-culture" data-dojo-type="dijit.form.Select" data-dojo-attach-point="_cultureSelect" data-dojo-attach-event="onChange:_onCultureChange"></div>',
            '<div data-dojo-type="Sage.UI.ImageButton" icon="images/icons/Save_16x16.gif" tooltip="{%: $.saveText %}" data-dojo-attach-point="saveIcon" data-dojo-attach-event="onClick:save" class="design-panel-save"></div>',
            '<div data-dojo-type="Sage.UI.ImageButton" icon="images/icons/Help_16x16.png" tooltip="{%: $.helpText %}" data-dojo-attach-event="onClick:help" class="design-panel-help"></div>',
            '</div>',
            '<div class="design-panel-surface" data-dojo-type="Sage.QuickForms.Design.DesignSurface"  data-dojo-attach-point="designSurface" data-dojo-props="region: \'center\'"></div>',
            '<div class="design-panel-hidden" data-dojo-type="Sage.QuickForms.Design.NonVisibleControlContainer" data-dojo-attach-point="nonVisibleContainer" data-dojo-props="region: \'bottom\', layoutPriority:2, splitter: true"></div>',
            '<div class="design-panel-editor" data-dojo-type="Sage.QuickForms.Design.PropertyEditorContainer" data-dojo-attach-point="editorContainer" data-dojo-props="region: \'bottom\', layoutPriority:1, splitter: true"></div>'
        ]),
        loadingTemplate: new Simplate([
            '<div class="design-panel-loading-indicator"><span>{%: $.loadingText %}</span></div>'
        ]),
        savingTemplate: new Simplate([
            '<div class="design-panel-saving-indicator"><span>{%: $.savingText %}</span></div>'
        ]),

        _designGroup: null,
        _designGroupTopics: null,
        _cultureSelect: null,
        _previousName: null,
        _previousEntry: null,
        currentCulture: 'iv',
        designSurface: null,
        nonVisibleContainer: null,
        editorContainer: null,
        form: null,
        formDirty: false,
        helpTopicName: 'Working_with_forms',
        helpSubSystemName: 'WebForms',
        designGroup: 'default',
        _saveMode: false,

        cultureList: [
            'iv',
            'de-DE',
            'fr-FR',
            'it-IT',
            'ru-RU'
        ],
        cultureListText: {
            'iv': '[invariant]',
            'de_DE': 'de-DE',
            'fr_FR': 'fr-FR',
            'it_IT': 'it-IT',
            'ru_RU': 'ru-RU'
        },

        helpText: 'Help',
        saveText: 'Save',
        cultureText: 'Culture:',
        loadingText: 'Loading...',
        savingText: 'Saving...',
        saveErrorText: 'An error occurred saving the form.',
        readErrorText: 'Could not load the requested form.',
        cultureReloadConfirmText: 'You have unsaved changes.  Are you sure you want to reload the form with a different culture?',

        constructor: function () {
            lang.mixin(this, localization);
        },
        _getDesignGroupAttr: function () {
            return this._designGroup;
        },
        _setDesignGroupAttr: function (value) {
            if (this._designGroupTopics) {
                array.forEach(this._designGroupTopics, function (topic) {
                    this.unsubscribe(topic);
                }, this);
            }

            this._designGroup = value;
            this._designGroupTopics = [
                this.subscribe('/quickforms/design/designerModified', this._onDesignerModified)
            ];
        },
        _ignoreModifiedOn: {
            'focused': true
        },
        _onDesignerModified: function (designer, name, value, result, source) {
            if (!this._ignoreModifiedOn[name] && designer.get('form') === this.form)
                this.formDirty = true;
        },
        buildRendering: function () {
            this.inherited(arguments);

            domClass.add(this.domNode, 'design-panel');

            domConstruct.place(this.loadingTemplate.apply(this), this.designSurface.domNode);
            domConstruct.place(this.savingTemplate.apply(this), this.designSurface.domNode);
        },
        startup: function () {
            this.inherited(arguments);

            array.forEach(this.cultureList, function (item) {
                this._cultureSelect.addOption({
                    value: item,
                    label: this.cultureListText[item.replace('-', '_')] || item,
                    selected: item == this.currentCulture
                });
            }, this);
        },
        _onCultureChange: function (value) {
            if (this.currentCulture === value) return;

            if (this.form && this.formDirty) {
                if (!confirm(this.cultureReloadConfirmText)) {
                    this._cultureSelect._onChangeActive = false;
                    this._cultureSelect.set('value', this.currentCulture);
                    this._cultureSelect._onChangeActive = true;

                    return;
                }
            }

            this.currentCulture = value;

            if (this._previousName)
                this.read(this._previousName);
            else if (this._previousEntry)
                this.load(this._previousEntry);
        },
        help: function () {
            Help.open(this.helpTopicName, this.helpSubSystemName);
        },
        save: function () {
            console.info('original:');
            if (this._saveMode) {
                return;
            }
            this._saveMode = true;
            console.info(json.toJson(this.original, true));
            console.info('updated to be sent:');
            console.info(json.toJson(this.form.entry, true));

            var request = new Sage.SData.Client.SDataSingleResourceRequest(this.dataService)
                .setResourceKind('forms')
                .setResourceSelector(string.substitute('"${0}"', [this.form.get('name')]))
                .setQueryArg('language', this.currentCulture != 'iv' ? this.currentCulture : '');

            var entry = lang.clone(this.form.get('entry'));

            entry['$etag'] = entry['etag'];

            delete entry['etag'];
            delete entry['ifMatch'];
            delete entry['httpStatus'];

            this._showSavingIndicator();
            request.update(entry, {
                success: lang.hitch(this, this._onSaveFormSuccess, this.form),
                failure: lang.hitch(this, this._onSaveFormFailure, this.form)
            });
        },
        _onSaveFormSuccess: function (form, entry) {
            this._hideSavingIndicator();
            this._saveMode = false;
            console.info('update success, this is the new result:');
            console.info(json.toJson(entry, true));
            /* two options: update etag from result, though etag is not currently require, or... */
            form.set('etag', entry['etag']);
            this.formDirty = false;
            /* ...completely reload in order to load any (unlikely) server changes that have occurred. */
            /* this.load(entry); */
        },
        _onSaveFormFailure: function (form, xhr) {
            this._hideSavingIndicator();
            this._saveMode = false;
            alert(this.saveErrorText);
        },
        _showLoadingIndicator: function () {
            domClass.add(this.domNode, 'design-panel-loading');
        },
        _showSavingIndicator: function () {
            domAttr.set(this.saveIcon, "disabled", true);
            domClass.add(this.domNode, 'design-panel-saving');
        },
        _hideLoadingIndicator: function () {
            domClass.remove(this.domNode, 'design-panel-loading');
        },
        _hideSavingIndicator: function () {
            domClass.remove(this.domNode, 'design-panel-saving');
            domAttr.set(this.saveIcon, "disabled", false);
        },
        read: function (form) {
            this.clear();

            this._previousName = form;
            this._previousEntry = null;

            var request = new Sage.SData.Client.SDataSingleResourceRequest(this.dataService)
                .setResourceKind('forms')
                .setResourceSelector(string.substitute('"${0}"', [form]))
                .setQueryArg('language', this.currentCulture != 'iv' ? this.currentCulture : '');

            this._showLoadingIndicator();
            request.read({
                success: lang.hitch(this, this._onRequestFormSuccess),
                failure: lang.hitch(this, this._onRequestFormFailure)
            });
        },
        _onRequestFormSuccess: function (entry) {
            this._hideLoadingIndicator();
            this._apply(entry);
        },
        _onRequestFormFailure: function (xhr) {
            this._hideLoadingIndicator();
            alert(this.readErrorText);
        },
        clear: function () {
            topic.publish(string.substitute('/quickforms/design/${0}/clear', [this._designGroup]), this);

            this.designSurface.clear();
            this.nonVisibleContainer.clear();
            this.editorContainer.clear();

            if (this.form) this.form.destroy();

            this.form = null;
            this.formDirty = false;
        },
        load: function (entry) {
            this.clear();

            this._previousName = null;
            this._previousEntry = entry;

            this._apply(entry);
        },
        _apply: function (entry) {
            this.original = entry;

            this.form = new FormDesigner({
                entry: lang.clone(entry)
            });

            this.designSurface.set('form', this.form);

            array.forEach(this.form.get('controls'), function (control) {
                if (control.designSupport && control.designSupport.visible) {
                    this.designSurface.addChild(control);
                }
                else {
                    this.nonVisibleContainer.addChild(control);
                }
            }, this);

            this.designSurface.layout();
            this.nonVisibleContainer.layout();

            topic.publish(string.substitute('/quickforms/design/${0}/load', [this._designGroup]), entry, this);
            topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), this.form, false, this);
        }
    });
});
},
'Sage/Services/SelectionContextService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/SelectionContextService", [
    'dojo/_base/declare'
],
function (declare) {
    var widget = declare('Sage.Services.SelectionContextService', null, {
        _url: '',
        constructor: function() {
            this._url = "slxdata.ashx/slx/crm/-/SelectionService"; 
        },
        getSelectionInfo: function(key, callback) {
            if (typeof key === "undefined" || key == null)
                key = '';
            dojo.xhrGet({
                url: this._url,
                handleAs: 'json',
                load: function (data) {
                    callback(data);
                },
                error: function (request, status, error) {
                }
            });
        }, 
        getSelectedIds: function(options, callback) {
            if (typeof options === "undefined" || options == null)
                key = '';
            dojo.xhrGet({
                url:  this._url,
                handleAs: 'json',
                load: function(data) { 
                    callback(data);
                },
                error: function(request, status, error) { 
                }
            });
        },
        setSelectionContext: function(key, selectionInfo, callback) {
            dojo.xhrPost({
                url : dojo.string.substitute("${0}/SetSelectionContext?key=${1}", [this._url, key]),
                handleAs: 'json',
                load:  function(data) { 
                    callback(data);
                },
                error:function(request, status, error) { 
                    callback(error);
                },
                postData: dojo.toJson(selectionInfo)
            }); 
        }
    });

    Sage.Services.addService("SelectionContextService", new Sage.Services.SelectionContextService());

    return widget;
});
},
'Sage/UI/_DialogLoadingMixin':function(){
﻿/*globals define, window  */
define("Sage/UI/_DialogLoadingMixin", [
    'dojo/_base/declare',
    'dojox/widget/Standby'
],
function (declare, Standby) {
    return declare('Sage.UI._DialogLoadingMixin', null, {
        _standby: false,
        showLoading: function () {
            if (!this._standby && this.domNode) {
                var hideNode = this.domNode;
                if (this.containerNode) {
                    hideNode = this.containerNode;
                }
                this._standby = new Standby({
                    target: hideNode,
                    color: 'white',
                    image: 'images/loader_lg.gif',
                    duration: 50
                });
                document.body.appendChild(this._standby.domNode);
                this._standby.startup();
            }
            var self = this;
            window.setTimeout(function () {
                self._standby.show();
            }, 0);
        },
        hideLoading: function () {
            var self = this;
            window.setTimeout(function () {
                if (self._standby) {
                    self._standby.hide();
                }
            }, 1);
        }

    });
});
},
'Sage/UI/nls/ConditionManager':function(){
﻿define("Sage/UI/nls/ConditionManager", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
                addimgalttext: 'Add Condition',
                hideimgalttext: 'Remove Condition',
                addrowlabel: 'Lookup by:',
                hiderowlabel: 'And:',
                srchBtnCaption: 'Search',
                errorOperatorRequiresValue: 'The operator requires a value',
                startingWith: 'Starting With',
                endsWith: 'Ends With',
                contains: 'Contains',
                equalTo: 'Equal to',
                notEqualTo: 'Not Equal to',
                equalOrLessThan: 'Equal or Less than',
                equalOrGreaterThan: 'Equal or Greater than',
                lessThan: 'Less than',
                greaterThan: 'Greater than'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Dashboard/nls/WidgetDefinition':function(){
define("Sage/UI/Dashboard/nls/WidgetDefinition", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            defaultWidgetText: 'Edit Widget Settings',
            settingsText: 'Settings',
            viewGroupText: 'View Group',
            Bar_Chart: 'Bar Chart',
            Column_Chart: 'Column Chart',
            Group_List: 'Group List',
            Pie_Chart: 'Pie Chart',
            Funnel_Chart: 'Funnel Chart',
            Line_Chart: 'Line Chart',
            Default: 'Default',
            Links: 'Link',
            Recently_Viewed: 'Recently Viewed',
            Todays_Activities: 'Today\'s Activities',
            Today_s_Activities: 'Today\'s Activities',
            Welcome: 'Welcome',
            Closing_Opportunities: 'Closing Opportunities',
            Quick_Actions: 'Quick Actions',
            Do_You_Know___: 'Do You Know...',
            All_Leads: 'All Leads',
            My_Notes: 'My Notes',
            Open_Opportunities: 'Open Opportunities',
            My_Top_Opportunities: 'My Top Opportunities',
            My_Pipeline: 'My Pipeline',
            Recent_Lead_Creation_History: 'Recent Lead Creation History',
            My_Activity_trend: 'My Activity trend',
            My_Completed_Activities_by_Type: 'My Completed Activities by Type',
            Active_Campaigns: 'Active Campaigns',
            All_Open_Opportunities: 'All Open Opportunities',
            Top_Opportunities: 'Top Opportunities',
            Open_Defect_Distribution: 'Open Defect Distribution',
            My_Dashboard: 'My Dashboard',
            Sales: 'Sales',
            Group_List_Description: 'Displays a list of group records by entity. For example, a group of active campaigns.',
            Welcome_Description: 'Displays an introduction to Sage SalesLogix with a link to the help topic Introducing Sage SalesLogix for Web.',
            Line_Chart_Description: 'Displays data as a series of data points connected by a line. Useful when the data represents many groups or categories.',
            Bar_Chart_Description: 'Displays data as a set of horizontal bars. Useful for comparing several sets of data.',
            Column_Chart_Description: 'Displays data as a set of vertical bars grouped by category. Useful for showing data changes over a period of time or for illustrating comparisons among items.',
            Funnel_Chart_Description: 'Displays data as progressive proportions in a funnel shape. The data is represented as portions of 100%, and there are no axes.',
            Pie_Chart_Description: 'Displays data as proportions of the whole. Each value is calculated as a percentage of the total. This chart has no axes.',
            Recently_Viewed_Description: 'Displays links to recently viewed records with an icon that identifies the type. For example, Account or Contact.',
            Todays_Activities_Description: 'Displays links to your activities for today.',
            Links_Description: 'Displays links you create. For example, to a detail view in Sage SalesLogix or to an external Web site.'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/SummaryDetailPane':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SummaryDetailPane", [
        'Sage/UI/_DetailPane',
        'Sage/_Templated',
        'Sage/UI/SummaryContainer',
        'dojo/_base/declare'
],
function (_DetailPane, _Templated, summaryContainer, declare) {
    var summaryDetailPane = declare('Sage.UI.SummaryDetailPane', [_DetailPane, _Templated], {
        widgetsInTemplate: false,
        contentNode: null,
        paneContents: null,
        attributeMap: {
            'content': { node: 'contentNode', type: 'innerHTML' }
        },
        widgetTemplate: new Simplate([
            '<div class="EntityCard">',
                '<div dojoAttachPoint="contentNode"></div>',
            '</div>'
        ]),
        clear: function () {
            if (this.paneContents) {
                this.paneContents.destroyRecursive();
            }
        },
        _onSelected: function (index, row, grid) {
            if (!this._configuration) {
                return;
            }
            if (this.paneContents) {
                this.paneContents.destroyRecursive();
            }
            var groupContextSvc = Sage.Services.getService('ClientGroupContext');
            var context = groupContextSvc.getContext();
            var keyFieldName = context.CurrentTableKeyField;

            if (keyFieldName && this._configuration.requestConfiguration) {
                if (this._configuration.keyField) {
                    keyFieldName = this._configuration.keyField;
                }
                var keyValue = this._getKeyValue(row, keyFieldName);
                var dataManager = Sage.Services.getService('SummaryViewDataManager');
                var pane = new summaryContainer({
                    id: 'det_' + keyValue,
                    templateLocation: this._configuration.templateLocation
                });
                pane.postProcessCallBack = this._configuration.postProcessCallBack;
                dojo.place(pane.domNode, this.contentNode, 'only');
                this.paneContents = pane;
                dataManager.requestDataNoWait(keyValue, pane, this._configuration.requestConfiguration);
            } else {
                this.set('content', 'Please check the configuration for this panel.');
            }
        },
        _getKeyValue: function (data, keyFieldName) {
            var parts = keyFieldName.split('.');
            if (parts.length < 2) {
                return data[keyFieldName];
            } else {
                return this._getKeyValue(data[parts[0]], parts[1]);  //lets do just do one level        
            }
        }
    });

    return summaryDetailPane;
});

},
'Sage/QuickForms/Design/Editors/ColumnBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/ColumnBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojox/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/ColumnBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.ColumnBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.indexTooltipText %}">',
                        '<label>{%= $.indexText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_index" data-dojo-attach-event="onChange:_onIndexChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.widthTooltipText %}">',
                        '<label>{%= $.widthText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_width" data-dojo-attach-event="onChange:_onWidthChange" required="true" data-dojo-props="constraints:{min:0}"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.sizeTypeTooltipText %}">',
                        '<label>{%= $.sizeTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_sizeType" data-dojo-attach-event="onChange:_onSizeTypeChange">',
                            '{% for (var type in $.rowSizeTypeText) { %}',
                                '<span value="{%= type %}">{%= $.rowSizeTypeText[type] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _index: null,
        _width: null,
        _sizeType: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',

        indexText: 'Index:',
        indexTooltipText: 'Number of the row or column, beginning with zero.',
        widthText: 'Width:',
        widthTooltipText: 'Width of this column of controls.',
        sizeTypeText: 'Size Type:',
        sizeTypeTooltipText: 'Method of sizing: Absolute, AutoSize, or Percent.',

        rowSizeTypeText: {
            'Absolute': 'Absolute',
            'Percent': 'Percent',
            'AutoSize': 'AutoSize'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._index.set('value', this._designer.get('index'));
            this._width.set('value', this._designer.get('width'));
            this._sizeType.set('value', this._designer.get('sizeType'));
        },

        _onWidthChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('width', value);
        },
        _onSizeTypeChange: function(value) {
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('sizeType', value);
        },
        _onIndexChange: function(value) {
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('index', value);
        }
    });
});
},
'Sage/Utility/File/AddURLAttachment':function(){
﻿/*globals dojo, define, Sage, Simplate  */
define("Sage/Utility/File/AddURLAttachment", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/string',
    'dijit/Dialog',
    'Sage/UI/_DialogLoadingMixin',
    'dojo/_base/lang',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/MainView/BindingsManager',
    'Sage/Utility/File',
    'Sage/Utility',
    'Sage/Utility/File/Attachment',
    'Sage/UI/Dialogs',
    'dojo/i18n',
    'dojo/i18n!./nls/AddURLAttachment',
    'dojo/_base/declare'
],
function (_Widget,
    _Templated,
    dString,
    Dialog,
    _DialogLoadingMixin,
    dojoLang,
    SingleEntrySDataStore,
    sDataServiceRegistry,
    BindingsManager,
    fileUtility,
    sageUtility,
    attachmentUtility,
    sageDialogs,
    i18n,
    nlsResource,
    declare) {
    var urlAttachForm = declare('Sage.Utility.File.AddURLAttachment', [_Widget, _Templated], {
        //i18n strings
        descriptionText: 'Description',
        urlText: 'URL',
        titleText: 'Add URL Attachment',
        okText: 'OK',
        cancelText: 'Cancel',
        requestFailedMsg: 'The requested operation could not be completed, please try again later.',
        urlBlankMsg:'The URL or description property cannot be blank.',
        //end i18n strings
        attachmentId: '',
        attachment: false,
        widgetsInTemplate: true,
        _bindingMgr: false,
        _store: false,
        id: '',
        widgetTemplate: new Simplate([
            '<div>',
                '<div dojoType="dijit.Dialog" id="addUrlAttachDialog" title="{%= $.titleText %}" dojoAttachPoint="_dialog">',
                    '<div  class="attachment-properties-form">',
                        '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="160" >',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.urlText %}" id="{%= $.id %}_tb_Url" dojoAttachPoint="tb_Url" ></div>',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.descriptionText %}" name="description" id="{%= $.id %}_tb_Description" dojoAttachPoint="tb_Description" maxlength="128" ></div>',
                        '</div>', //tableContainer
                        '<div class="general-dialog-actions">', //buttons
                            '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnOK" name="_btnOK" dojoAttachPoint="_btnOK" dojoAttachEvent="onClick:_okClick" >{%= $.okText %}</div>',
                            '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnCancel" name="_btnCancel" dojoAttachPoint="_btnCancel" dojoAttachEvent="onClick:_cancelClick">{%= $.cancelText %}</div>',
                        '</div>', //buttons
                    '</div>', // container
                '</div>', //dialog
            '</div>'// root
        ]),
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.Utility.File", "AddURLAttachment"));
            this.inherited(arguments);
        },
        show: function () {
            this._dialog.show();
            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
            }
            this._loadData();
        },
        hide: function () {
            this.attachmentId = '';
            this.attachment = false;
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this._dialog.hide();
        },
        _loadData: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            if (!this._store) {
                this._store = new SingleEntrySDataStore({
                    include: [],
                    resourceKind: 'attachments',
                    service: sDataServiceRegistry.getService('system')
                });
            }
            this._store.newItem({
                onComplete: this._receiveAttachment,
                onError: this._requestFail,
                scope: this
            });
        },
        _receiveAttachment: function (attachment) {
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this.attachment = attachment;
            attachmentUtility.getKnownRelationships(this._receiveRelationships, this);
        },
        _ensureBindings: function () {
            if (!this._bindingMgr) {
                this._bindingMgr = new BindingsManager({
                    defaultBinding: { boundEntity: this.attachment },
                    items: [
                        {
                            boundWidget: this.tb_Description,
                            entityProperty: 'description'
                        }, {
                            boundWidget: this.tb_Url,
                            entityProperty: 'url',
                            onChange: dojo.hitch(this, this._urlChange)
                        }
                    ]
                });
            }
        },
        _bind: function () {
            if (!this._bindingMgr.boundEntity || (this.attachment.$key !== this._bindingMgr.boundEntity.$key)) {
                this._bindingMgr.setBoundEntity(this.attachment);
            } else {
                this._bindingMgr.bind();
            }
            //console.dir(this.attachment);
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
        },
        _receiveRelationships: function (rels) {
            this.attachment = dojoLang.mixin(this.attachment, rels);
            this.attachment.user = { '$key': sageUtility.getClientContextByKey('userID') || '' };
            this.attachment.attachDate = sageUtility.Convert.toIsoStringFromDate(new Date());
            this._ensureBindings();
            this._bind();
        },
        _urlChange: function () {
            var desc = this.tb_Description.get('value');
            if (!desc) {
                var newUrl = this.tb_Url.get('value');
                if (newUrl) {
                    var r = new RegExp(/\.([\w]*)/);
                    var matches = r.exec(newUrl);
                    if (matches.length > 1) {
                        this.tb_Description.set('value', matches[1]);
                    }
                }
            }
        },
        _cancelClick: function () {
            this.hide();
        },
        _okClick: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            if ((this.attachment.url == null) || (this.attachment.url.trim() == '')) {
                 sageDialogs.showError(this.urlBlankMsg);
                return;
            }
            if ((this.attachment.description == null)|| (this.attachment.description.trim() == '')) {
                sageDialogs.showError(this.urlBlankMsg);
                return;
            }
            this._saveAndHide();
        },
        _saveAndHide: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            //pop this into another thread so change events of the currently focused control have a chance to fire
            var self = this;
            window.setTimeout(function () {
                var attachment = self.attachment;


                self._store.saveNewEntity(attachment,
                    function (newattachment) {
                        dojo.publish('/entity/attachment/create', newattachment);
                        this.hide();
                    },
                    self._requestFail,
                    self
                );
            }, 10);
        },
        _requestFail: function (req) {
            console.warn('url attachment failed: ' + req);
            sageDialogs.showError(this.requestFailedMsg);
            this.hide();
        }
    });
    return urlAttachForm;
});
},
'Sage/QuickForms/Design/UserControlDesigner':function(){
define("Sage/QuickForms/Design/UserControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/UserBasicPropertyEditor',
    './Editors/UserAdvancedPropertyEditor',
    'dojo/i18n!./nls/UserControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    UserBasicPropertyEditor,
    UserAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.UserControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            UserBasicPropertyEditor,
            UserAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="{%= $.fieldClass %}-icon"></div>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

		fieldClass: 'design-user',
        helpTopicName: 'User_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXUser, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'User',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'LookupResultValue');
            });
        },
        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },
        _getLookupBindingModeAttr: function() {
            return lang.getObject('LookupBindingMode', false, this.entry);
        },
        _setLookupBindingModeAttr: function(value) {
            lang.setObject('LookupBindingMode', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('lookupBindingMode', 'Object');
            this.set('required', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'LookupResultValue',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: 'null'
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/UI/nls/SearchConditionWidget':function(){
define("Sage/UI/nls/SearchConditionWidget", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            trueText: 'True',
            falseText: 'False',
            networkText: 'Network',
            remoteText: 'Remote',
            webText: 'Web',
            webViewerText: 'Web Viewer',
            concurrentText: 'Concurrent',
            retiredText: 'Retired',
            templateText: 'Template',
            addonText: 'Addon',
            adminText: 'Admin',
            userText: 'User',
            teamText: 'Team',
            departmentText: 'Department',
            systemText: 'System'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/SearchConditionWidget':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SearchConditionWidget", [
       'dojo/parser',
       'dojo/i18n',
       'dojo/_base/lang',
       'dojo/has',
       'dojo/_base/array',
       'dijit/_Widget',
       'dijit/form/Button',
       'dijit/form/TextBox',
       'dijit/form/NumberTextBox',
       'dijit/form/Select',
       'dijit/form/DateTextBox',
       'Sage/_Templated',
       'Sage/UI/ImageButton',
       'Sage/UI/Controls/DropDownSelectPickList',
       'Sage/UI/Controls/DropDownSelectUser',
       'Sage/UI/Controls/Phone',
       'dojo/i18n!./nls/SearchConditionWidget',
       'dojo/_base/declare'
],
function (
    parser, 
    i18n,
    lang,
    has,
    array,
    _Widget, 
    Button, 
    TextBox, 
    NumberTextBox, 
    Select, 
    DateTextBox, 
    _Templated, 
    ImageButton, 
    DropDownSelectPickList, 
    DropDownSelectUser, 
    Phone,
    resource,
    declare) {
    var searchWidget = declare('Sage.UI.SearchConditionWidget', [_Widget, _Templated], {
        widgetsInTemplate: true,
        isFirstCondition: false,
        conditionManager: false,
        label: '',
        defaultOperator: null,
        defaultField: null,
        defaultValue: null,
        id: '',
        _valueBox: null,
        visible: true,
        
        _loaded: false,
        
        // localized strings
        trueText: 'true',
        falseText: 'false',
        networkText: 'Network',
        remoteText: 'Remote',
        webText: 'Web',
        webViewerText: 'Web Viewer',
        concurrentText: 'Concurrent',
        retiredText: 'Retired',
        templateText: 'Template',
        addonText: 'Addon',
        adminText: 'Admin',
        userText: 'User',
        teamText: 'Team',
        departmentText: 'Department',
        systemText: 'System',
        // end localized strings

        // Static
        propertyTypeHandler: {},
        widgetTemplate: new Simplate([
            '<div id="{%= $.id %}" class="lookup-condition-row" dojoAttachPoint="_conditionRow">',
                '<label class="slxlabel lookupLabel">',
                    '{%= $.label %}',
                '</label>',
                '<select id="{%= $.id %}_fieldName" name="{%= $.id %}_fieldName" dojoAttachPoint="_fieldNameSelect" data-dojo-type="dijit.form.Select" style="width:150px">',
                    '{% for (var i=0; i < $.conditionManager.fields.length;i++) { %}',
                        '<option id="{%= $.id %}_fieldOption{%= i %}" value="{%= $.conditionManager.fields[i][$.conditionManager.fieldNameProperty] %}">{%= $.conditionManager.fields[i][$.conditionManager.fieldDisplayNameProperty] %}</option>',
                    '{% } %}',
                '</select>',
                '<select id="{%= $.id %}_operators" name="{%= $.id %}_operators" dojoAttachPoint="_operatorSelect" data-dojo-type="dijit.form.Select" style="width:130px">',
                '</select>',
                '<div style="display: inline;" class="searchConditionInput" dojoAttachPoint="_inputWidgetPlaceHolder"></div>',
                '<div class="conditionButton">',
                '{% if ( $.isFirstCondition ) { %}',
                    '<div id="{%= $.id %}-AddImageButton" data-dojo-type="Sage.UI.ImageButton" icon="{%= $.conditionManager.addimgurl %}" tooltip="{%= $.conditionManager.addimgalttext %}" dojoAttachPoint="_addConditionButton" dojoAttachEvent="onClick:_addLookupCondition"></div>',
                '{% } else { %}',
                    '<div id="{%= $.id %}-RemoveImageButton" data-dojo-type="Sage.UI.ImageButton" icon="{%= $.conditionManager.hideimgurl %}" tooltip="{%= $.conditionManager.hideimgalttext %}" dojoAttachPoint="_removeConditionButton" dojoAttachEvent="onClick:_removeLookupCondition"></div>',
                '{% } %}',
                '</div>',
            '</div>']),
        constructor: function(options) {
            if(resource) {
                this.trueText = resource.trueText;
                this.falseText = resource.falseText;
                this.networkText = resource.networkText;
                this.remoteText = resource.remoteText;
                this.webText = resource.webText;
                this.webViewerText = resource.webViewerText;
                this.concurrentText = resource.concurrentText;
                this.retiredText = resource.retiredText;
                this.templateText = resource.templateText;
                this.addonText = resource.addonText;
                this.adminText = resource.adminText;
                this.userText = resource.userText;
                this.teamText = resource.teamText;
                this.departmentText = resource.departmentText;
                this.systemText = resource.systemText;
            }
            
            this.registerTypeHandlers();
        },
        registerTypeHandlers: function () {
            this.propertyTypeHandler['default'] = {
                getValue: function () {
                    var value = this._valueBox.get('value');
                    return value;
                },
                getTemplate: function () {
                    return ['<input id="{%= $.id %}-TextValue" data-dojo-type="dijit.form.TextBox" dojoAttachPoint="_valueBox" />'];
                }
            };
            
            this.propertyTypeHandler['System.Boolean'] = {
                getValue: function () {
                    var value;
                    if(this._valueBox.value === 'true') {
                        value = true;
                    } else {
                        value = false;
                    }
                    
                    return value;
                },
                getTemplate: function () {
                    return [
                        '<select id="{%= $.id %}-SelectValue" class="dijitDropDown" data-dojo-type="dijit.form.Select" dojoAttachPoint="_valueBox">',
                        '<option id="{%= $.id %}-BooleanOptionTrue" value="true">{%= $.trueText %}</option>',
                        '<option id="{%= $.id %}-BooleanOptionFalse" value="false">{%= $.falseText %}</option>',
                        '</select>'
                    ];
                }
            };
            
            this.propertyTypeHandler['Boolean'] = {
                getValue: function () {
                    var value;
                    if(this._valueBox.value === 'true') {
                        value = 'T';
                    } else {
                        value = 'F';
                    }
                    return value;
                },
                getTemplate: function () {
                    return lang.hitch(this, this.propertyTypeHandler['System.Boolean'].getTemplate)();
                }
            };
            
            this.propertyTypeHandler['SalesLogix.PickList'] = {
                getValue: function () {
                    return lang.hitch(this, this.propertyTypeHandler['default'].getValue)();
                },
                getTemplate: function () {
                    return [
                        '<select id="{%= $.id %}-PickValue" class="dijitDropDown" ',
                        'data-dojo-type="Sage.UI.Controls.DropDownSelectPickList" ',
                        'dojoAttachPoint="_valueBox" ',
                        'pickListName="{%= $.pickListName %}" ',
                        'storeMode="{%= $.pickListStorageMode %}" ',
                        'style="display: inline-block"',
                        '/>'
                    ];
                }
            };
            
            this.propertyTypeHandler['System.DateTime'] = {
                getValue: function () {
                    var value = this._valueBox.value;// returns a Date object
                    return value;
                },
                getTemplate: function () {
                    return [
                        '<input data-dojo-type="dijit.form.DateTextBox" id="{%= $.id %}-Date" dojoAttachPoint="_valueBox"',
                        '/>'
                    ];
                }
            };
            this.propertyTypeHandler['DateTime'] = this.propertyTypeHandler['System.DateTime'];
            
            this.propertyTypeHandler['Fixed'] = {
                getValue: function () {
                    var value = this._valueBox.get('value');
                    return value;
                },
                getTemplate: function () {
                    return ['<input id="{%= $.id %}-NumericValue" data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_valueBox" constraints="{ type: \'decimal\' }" value="0" name="{%= $.id %}-NumberValue" />'];
                }
            };
            
            this.propertyTypeHandler['Integer'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['Positive Integer'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['Percent'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['Currency'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['System.Int32'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['System.Double'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['System.Decimal'] = this.propertyTypeHandler['Fixed'];
            this.propertyTypeHandler['System.Int16'] = this.propertyTypeHandler['Fixed'];
            
            this.propertyTypeHandler['Phone'] = {
                getValue: function () {
                    var value = this._valueBox.get('unformattedValue');
                    return value;
                },
                getTemplate: function () {
                    return ['<input id="{%= $.id %}-PhoneValue" data-dojo-type="Sage.UI.Controls.Phone" shouldPublishMarkDirty="false" dojoAttachPoint="_valueBox" />'];
                }
            };
            
            this.propertyTypeHandler['User'] = {
                getValue: function () {
                    var value = this._valueBox.get('value');
                    return value;
                },
                getTemplate: function () {
                    return [
                        '<select id="{%= $.id %}-UserValue" ',
                        'data-dojo-type="Sage.UI.Controls.DropDownSelectUser" ',
                        'dojoAttachPoint="_valueBox" ',
                        'style="display: inline-block;" ',
                        '></select>'
                    ];
                }
            };
            
            this.propertyTypeHandler['Sage.Entity.Interfaces.UserType'] = {
                getValue: function () {
                    var value = parseInt(this._valueBox.get('value'), 10);
                    return value;
                },
                getTemplate: function () {
                    return [
                        '<select id="{%= $.id %}-UserTypeValue" class="dijitDropDown" data-dojo-type="dijit.form.Select" dojoAttachPoint="_valueBox">',
                        '<option id="{%= $.id %}-UserTypeOption0" value="0">{%= $.networkText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption1" value="1">{%= $.remoteText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption2" value="2">{%= $.webText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption3" value="3">{%= $.webViewerText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption4" value="4">{%= $.concurrentText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption5" value="5">{%= $.retiredText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption6" value="6">{%= $.templateText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption7" value="7">{%= $.addonText %}</option>',
                        '<option id="{%= $.id %}-UserTypeOption8" value="8">{%= $.adminText %}</option>',
                        '</select>'
                    ];
                }
            };
            
            this.propertyTypeHandler['Sage.Entity.Interfaces.OwnerType'] = {
                getValue: function () {
                    var value = parseInt(this._valueBox.get('value'), 10);
                    return value;
                },
                getTemplate: function () {
                    return [
                        '<select id="{%= $.id %}-OwnerTypeValue" class="dijitDropDown" data-dojo-type="dijit.form.Select" dojoAttachPoint="_valueBox">',
                        '<option id="{%= $.id %}-OwnerTypeOption0" value="1">{%= $.userText %}</option>',
                        '<option id="{%= $.id %}-OwnerTypeOption1" value="2">{%= $.teamText %}</option>',
                        '<option id="{%= $.id %}-OwnerTypeOption2" value="3">{%= $.departmentText %}</option>',
                        '<option id="{%= $.id %}-OwnerTypeOption3" value="0">{%= $.systemText %}</option>',
                        '</select>'
                    ];
                }
            };
            
            this.propertyTypeHandler['Owner'] = this.propertyTypeHandler['default'];
            this.propertyTypeHandler['None'] = this.propertyTypeHandler['default'];
            this.propertyTypeHandler['System.String'] = this.propertyTypeHandler['default'];
            this.propertyTypeHandler['defaultOperators'] = this.propertyTypeHandler['default'];
        },
        postCreate: function() {
            //set up the operators based on default field selection...
            this.refreshDefaults();
            if(!this.visible) {
                dojo.style(this._conditionRow, 'display', 'none');
            }

            this._fieldNameSelect.on('change', lang.hitch(this, this._fieldChanged));
            this.inherited(arguments);
        },
        getCondition: function() {
            var results = false;
            if (this.isValidCondition()) {
                results = {
                    fieldname: this._fieldNameSelect.get('value'),
                    operator: this._operatorSelect.get('value'),
                    val: this._getFieldValue()
                };
            }
            
            return results;
        },
        isValidCondition: function() {
            var val = this._getFieldValue(),
                results = false;
            if(typeof val === 'string') {
                results = (val.trim() !== '');
            } else {
                results = (val !== null && val !== undefined);
            }

            return results;
        },
        _getFieldValue: function() {
            var fieldName = this._fieldNameSelect.get('value'),
                operator = this._operatorSelect.get('value'),
                field = this._getField(fieldName),
                value,
                fieldPropertyType,
                mapper;

            if (field) {
                fieldPropertyType = this._getFieldPropertyTypeValue(field);
                mapper = this.propertyTypeHandler[fieldPropertyType];
                if (typeof mapper === 'undefined') {
                    console.warn('Property ' + fieldPropertyType + ' has no mapping.');
                    mapper = this.propertyTypeHandler['default'];
                }
                value = lang.hitch(this, mapper.getValue)();
            }

            return value;
        },
        _renderFieldTemplates: function() {
            var operators, templateArray, simplate, template,
                val = this._fieldNameSelect.get('value'),
                field = this._getField(val),
                fieldPropertyType,
                temp,
                mapper;
                
            if (field) {
                fieldPropertyType = this._getFieldPropertyTypeValue(field);
                mapper = this.propertyTypeHandler[fieldPropertyType];
                if (typeof mapper === 'undefined') {
                    console.warn('Property ' + fieldPropertyType + ' has no mapping.');
                    mapper = this.propertyTypeHandler['default'];
                }
                
                templateArray = lang.hitch(this, mapper.getTemplate)();

                // Create widget for user input based on type of field.
                simplate = new Simplate(templateArray);

                // Copy 'this' into a temp object for the simplate.apply call
                temp = {};
                dojo.mixin(temp, this);
                dojo.mixin(temp, { pickListName: field.pickListName });
                dojo.mixin(temp, { pickListStorageMode: field.pickListStorageMode });
                template = simplate.apply(temp);

                if (template) {
                    dojo.forEach(dijit.findWidgets(this._inputWidgetPlaceHolder), function(wid) {
                        wid.destroy();
                    }, this);

                    this._inputWidgetPlaceHolder.innerHTML = '';
                    dojo.place(template, this._inputWidgetPlaceHolder);
                    parser.parse(this._inputWidgetPlaceHolder);
                    dojo.forEach(dijit.findWidgets(this._inputWidgetPlaceHolder), function(wid) {
                        wid.startup();
                        this._valueBox = wid;
                        dojo.connect(this._valueBox, 'onKeyDown', this, '_onKeyDown');
                    }, this);
                }
            }
        },
        uninitialize: function() {
            if (this._inputWidgetPlaceHolder) {
                dojo.forEach(dijit.findWidgets(this._inputWidgetPlaceHolder), function(wid) {
                    wid.destroy();
                }, this);
            }
            this.inherited(arguments);
        },
        _fieldChanged: function(newValue) {
            var val = this._fieldNameSelect.get('value'),
                field = this._getField(val),
                operators,
                opSel,
                len,
                i;

            if (field) {
                this._renderFieldTemplates();

                operators = this.conditionManager.getOperatorsByField(field);
                // reset ops
                if (operators) {
                    opSel = this._operatorSelect;
                    len = opSel.options.length;
                    for (i = len - 1; i >= 0; i--) {
                        opSel.removeOption(i);
                    }
                    
                    // Ensure none are selected
                    for (i = 0; i < operators.length; i++) {
                        operators[i].selected = false;
                    }
                    
                    opSel.addOption(operators);
                }
                
                this._setToDefaultOperator();
                this._setToDefaultValue();
            }
        },
        _onKeyDown: function(event) {
            if (event.keyCode === 13) {
                this.conditionManager._doSearch();

            }
        },
        _getField: function(fieldName) {
            if (this.conditionManager.fieldsHash.hasOwnProperty(fieldName)) {
                return this.conditionManager.fieldsHash[fieldName];
            }
            
            return false;
        },
        _getFieldPropertyTypeValue: function(field) {
            if(field && field.hasOwnProperty(this.conditionManager.fieldTypeProperty)) {
                return field[this.conditionManager.fieldTypeProperty];
            }
            
            return null;
        },
        _addLookupCondition: function() {
            this.onAddLookupCondition();
            dojo.publish('onAddLookupCondition', this);
        },
        onAddLookupCondition: function() {
        },
        _removeLookupCondition: function() {
            this.onRemoveLookupCondition(this);
            dojo.publish('onRemoveLookupCondition', this);
        },
        onRemoveLookupCondition: function(widget) {

        },
        _setToDefaultValue: function() {
            if (!this._isOnDefaultField()) {
                return;
            }
            
            if(this.defaultValue) {
                // Set the condition value
                this._valueBox.set('value', this.defaultValue);
            }
        },
        _setToDefaultField: function() {
            var i, fieldOptions;
            
            if(this.defaultField) {
                // Set the condition field
                fieldOptions = this._fieldNameSelect.getOptions();
                for(i = 0; i < fieldOptions.length; i++) {
                    if(fieldOptions[i].value === this.defaultField) {
                        this._fieldNameSelect.set('value', fieldOptions[i].value);
                        break;
                    }
                }
            }
        },
        _setToDefaultOperator: function() {
            var operatorOptions,
                j;
                
            if (!this._isOnDefaultField()) {
                return;
            }
            
            if(this.defaultOperator && typeof this.defaultOperator === 'string') {
                // Set the condition operator
                operatorOptions = this._operatorSelect.getOptions();
                for(j = 0; j < operatorOptions.length; j++) {
                    if(operatorOptions[j].label === this.defaultOperator ||
                        operatorOptions[j].value === this.defaultOperator) {
                        this._operatorSelect.set('value', operatorOptions[j].value);
                        break;
                    }
                }
            }
        },
        _isOnDefaultField: function () {
            var results = false,
                fieldOptions;
                
            if (this.defaultField) {
                // Set the condition field
                fieldOptions = this._fieldNameSelect.get('value');
                results = (fieldOptions === this.defaultField);
            } else {
                results = true;
            }
            
            return results;
        },
        refreshDefaults: function() {
            // Order is important here.
            // 1.) _setToDefaultField will set the default field search condition
            // 2.) _fieldChanged depends on this to get the operator
            this._setToDefaultField();
            this._fieldChanged();
        }
    });

    return searchWidget;
});

},
'Sage/MainView/ActivityMgr/FilterConfigurationProvider':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/FilterConfigurationProvider", [
        'Sage/Services/_ServiceMixin',
        'Sage/_ConfigurationProvider',
        'Sage/Utility',
        'Sage/Utility/Activity',
        'Sage/Data/SDataStore',
        'Sage/Services/ActivityService',
        'Sage/MainView/ActivityMgr/ActivityGroupContextService',
        'dijit/registry',
        'dojo/_base/declare',
        'Sage/Utility/Filters',
        'dojo/_base/lang',
        'dojo/json'
    ],
function (
        _ServiceMixin,
        _ConfigurationProvider,
        SageUtility,
        UtilityActivity,
        SDataStore,
        ActivityService,
        ActivityGroupContextService,
        registry,
        declare,
        FiltersUtility,
        lang,
        json
    ) {
    var FilterConfigurationProvider = declare('Sage.MainView.ActivityMgr.FilterConfigurationProvider', [_ConfigurationProvider, _ServiceMixin], {
        _configuration: null,
        _hasLayoutConfiguration: false,
        _hasFilterHiddenConfiguration: false,
        _currentUserId: false,
        serviceMap: {
            'groupContextService': 'ClientGroupContext',
            'metaDataService': { type: 'sdata', name: 'metadata' },
            'systemDataService': { type: 'sdata', name: 'system' }
        },
        constructor: function (options) {
            this.inherited(arguments);

            if (this.groupContextService.declaredClass !== 'Sage.MainView.ActivityMgr.ActivityGroupContextService') {
                Sage.Services.removeService('ClientGroupContext');
                this.groupContextService = new ActivityGroupContextService();
                Sage.Services.addService('ClientGroupContext', this.groupContextService);
            }

            var clientContextSvc = Sage.Services.getService('ClientContextService');
            if (clientContextSvc) {
                if (clientContextSvc.containsKey("userID")) {
                    this._currentUserId = clientContextSvc.getValue("userID");
                }
            }
            this._subscribes.push(dojo.subscribe('/group/context/changed', this, this._onGroupContextChanged));

            // todo: subscribe to filter reload to capture state?
        },
        _onGroupContextChanged: function () {
            this.onConfigurationChange();
        },
        onConfigurationChange: function () {
        },
        _createConfiguration: function (entry, options) {
            var currentListConfig = this.groupContextService.getCurrentListConfig();
            this._configuration = currentListConfig.getFilterConfig(this.metaDataService, entry, options);
            if (!this._configuration) {

                this._configuration = {};
            }

            this._configuration.getFilterManager = function () {
                var listPanel = registry.byId('list');
                return listPanel && listPanel.get('filterManager');
            };

            this._hasLayoutConfiguration = true;
        },
        requestConfiguration: function (options) {
            this._configuration = {};
            this._hasLayoutConfiguration = false;
            this._hasFilterHiddenConfiguration = false;

            this._onRequestConfigurationSuccess(options, null);
            this._getHiddenFilters(options);
        },
        _onRequestConfigurationSuccess: function (options, entry) {
            this._createConfiguration(entry, options);
            this._callOptionsSuccess(options);
        },
        _onRequestConfigurationFailure: function (options, response) {
            if (options.failure) {
                options.failure.call(options.scope || this, response, options, this);
            }
        },
        getFilterFormatter: function (filter) {
            if (filter) {
                if (filter.filterName === 'Duration') {
                    return UtilityActivity.formatDuration;
                }
            }
            return false;
        },
        ModifyFilterQuery: function (filter, query) {
            var hasQuery = false;
            if (query) {
                hasQuery = true;
            }
            if (filter.propertyName === 'Activity.Duration') {
                if (hasQuery) {
                    query = '(' + query + ') and (Activity.Timeless ne true)';
                } else {
                    query = '(Activity.Timeless ne true)';
                }
            } else if (filter.propertyName === 'Duration') {
                if (hasQuery) {
                    query = '(' + query + ') and (Timeless ne true)';
                } else {
                    query = '(Timeless ne true)';
                }
            }
            return query;
        },
         _getHiddenFilters: function (options) {
            var key = this._getHiddenFiltersKey();
            if (key) {
                FiltersUtility.getHiddenFilters(key,
                    lang.hitch(this, this._onHiddenFiltersFetchComplete, options || {}),
                    function (err) {
                        console.error(err);
                    }
                );
            }
        },
        _getHiddenFiltersKey: function () {
            var key = FiltersUtility.getHiddenFiltersKey();
            return key;
        },
        _onHiddenFiltersFetchComplete: function (options, result) {
            if (result && result.response && result.response.value) {
                this._configuration._hiddenFilters = json.parse(result.response.value);
                // Getting a key without data will return "[]"
                if (this._configuration._hiddenFilters && this._configuration._hiddenFilters.constructor === Array) {
                    this._configuration._hiddenFilters = {};
                }
            }

            this._configuration._hiddenFiltersKey = this._getHiddenFiltersKey();

            this._hasFilterHiddenConfiguration = true;
            this._callOptionsSuccess(options);
        },
        _callOptionsSuccess: function (options) {
            if (!this._hasLayoutConfiguration || !this._hasFilterHiddenConfiguration) {
                return;
            }

            if (options.success) {
                options.success.call(options.scope || this, this._configuration, options, this);

                this._hasLayoutConfiguration = false;
                this._hasFilterHiddenConfiguration = false;
            }
        }
    });
    return FilterConfigurationProvider;
});
},
'Sage/QuickForms/Design/Editors/nls/GenericBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/GenericBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Columns/RadioGroup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/RadioGroup", [
    'dojox/grid/cells/_base',
    'dojo/_base/declare'
],
function (cellsBase, declare) {
    var widget = declare('Sage.UI.Columns.RadioGroup', dojox.grid.cells.AlwaysEdit, {
            // summary:
            // grid cell that provides a set of radio buttons that are always available for editing
            options: null,
            values: null,
            labels: [],
            constructor: function(inCell) {
            //if they only provide options, we use them as the values...
            this.values = this.values || this.options;
            if (this.labels && this.labels.length > 0) {
                var caption = ['<table style="width:100%"><tr>'];
                for (var i = 0; i < this.labels.length; i++) {
                    caption.push('<td style="text-align: center;">' + this.labels[i] + '</td>');
                }
                this.name = caption.join('');
            }
        },
            formatEditing: function(inData, inRowIndex) {
            //console.log('formatting the Access column... ' + inData + " ... " + inRowIndex);
            var markup = ['<table style="width:100%"><tr>'];

            for (var i = 0; i < this.values.length; i++) {
                markup.push([
                    '<td style="text-align: center;">',
                    '<input type="radio"',
                    ' id="' + this.values[i] + "_" + inRowIndex + '"',
                    ' name="' + this.field + "_" + inRowIndex + '"',
                    ' value="' + this.values[i] + '"',
                    inData === this.values[i] ? ' checked="checked" />' : ' />'
                    ].join(''));
            }
            markup.push('</tr></table>');
            return markup.join('');
        },
        doclick: function(e) {
            if (e.target.tagName === 'INPUT') {
                var editMgr = this.grid.edit;
                editMgr.applyCellEdit(e.target.value, this, e.rowIndex);
            }
        }
        });
        return widget;
    });
},
'Sage/UI/Columns/Cell':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Cell", [
        'dojox/grid/cells',
        'dojox/grid/cells/dijit',
        'dojo/_base/declare'
],
function (cells, dijitCells, declare) {
    // TO-DO: cell._Widget is an internal base class we shouldn't be using,
    //        but lots of our cell types currently rely on it. Should be changed
    //        alongside all of our custom cell types
    var widget = declare('Sage.UI.Columns.Cell', cells._Widget, {
        // summary:
        // This class provides overrides of dojo's implementation of certain cell functions.
        formatNode: function (inNode, inDatum, inRowIndex) {
            //summary
            // This override ensures that a unique control gets created for each cell.  
            // Normal grid controls are created one for the entire column.
            if (!this.widgetClass) {
                return inDatum;
            }
            // Check to see if the instance for the selected node already exists
            var thisWidget = dijit.byId(this._getControlId());
            // If it doesn't, create one.
            if (!thisWidget) {
                this.widget = this.createWidget.apply(this, arguments);
                // If it does, use the existing one.
            } else {
                this.widget = thisWidget;
                //Check to see if the value has been changed outside of the control and update the control if it has.
                if (thisWidget.value !== inDatum || this.widget.focusNode.value !== inDatum) {
                    //This one is a widget in a templated.
                    if (this.widget.focusNode.set) this.widget.focusNode.set('value', inDatum);
                    //This one is not.
                    else this.widget.set('value', inDatum);
                }
                this.attachWidget.apply(this, arguments);
            }
            this.sizeWidget.apply(this, arguments);
            this.grid.views.renormalizeRow(inRowIndex);
            this.grid.scroller.rowHeightChanged(inRowIndex, true/*fix #11101*/);
            this.focus();
            return undefined;
        },
        setCurrentItems: function () {
            this.editInfo = this.grid.edit.info;
            this.item = this.grid.getItem(this.editInfo.rowIndex);
        },
        _getControlId: function () {
            //summary:
            //  Generates an Id for this instance of the numbertextbox widget from the item key and cell field name
            //  Example XXXXXXX_Price
            this.setCurrentItems();
            return [this.item.$key, this.editInfo.cell.field, this.index].join("_");
        }
    });

    return widget;
});
},
'Sage/UI/Columns/UserType':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/UserType", [
    'Sage/Utility',
    'dojo/i18n!../nls/UserType',
    'dojo/_base/declare'
],
function (Utility, resource, declare) {
    var widget = declare('Sage.UI.Columns.UserType', dojox.grid.cells._Base, {
        constructor: function(){
            dojo.mixin(this, resource);
            this.inherited(arguments);
        },
        formatter: function(val, index) {
            var userTypes = { 
                'W': this.administratorText,
                'P': this.templateText,
                'M': this.remoteText,
                'T': this.webOnlyText,
                'R': this.retiredText,
                'C': this.concurrentText,
                'V': this.webViewerText,
                'N': this.networkText,
                'A': this.addOnUserText
            };
            return (userTypes[val] ? Utility.htmlEncode(userTypes[val]) : val);
        }
    });
    return widget;
});

},
'Sage/QuickForms/Design/nls/DataSourcePanel':function(){
﻿define("Sage/QuickForms/Design/nls/DataSourcePanel", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            loadingText: "Loading..."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/TaskPane/CommonTasksTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, __doPostBack, GroupAdHocListMenu, getCookie, commonTaskActions, $ */
define("Sage/TaskPane/CommonTasksTasklet", [
        'dijit/Menu',
        'dijit/Dialog',
        'dijit/form/Button',
        'dijit/form/CheckBox',
        'Sage/TaskPane/_BaseTaskPaneTasklet',
        'Sage/UI/MenuItem',
        'Sage/UI/Dialogs',
        'Sage/Utility/Email',
        'Sage/Groups/GroupManager',
        'dojo/_base/xhr',
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/string',
        'dojo/i18n!./nls/CommonTasksTasklet',
        'dojo/dom-class'
],
function (
    DijitMenu,
    DijitDialog,
    dijitButton,
    dijitCheckBox,
    _BaseTaskPaneTasklet,
    MenuItem,
    Dialogs,
    email,
    GroupManager,
    xhr,
    lang,
    declare,
    dString,
    nlsResource,
    domClass) {
    var commonTasksTasklet = declare('Sage.TaskPane.CommonTasksTasklet', _BaseTaskPaneTasklet, {
        constructor: function (args) {
            lang.mixin(this, nlsResource);
        },
        removeCurrentFromGroup: function () {
            this.getCurrentEntity();
            var svc = Sage.Services.getService("ClientGroupContext"),
                grpctxt,
                firstid;

            if (svc !== null) {
                grpctxt = svc.getContext();
                firstid = grpctxt.FirstEntityID;
                if (firstid === this.currentEntityId) {
                    firstid = grpctxt.NextEntityID;
                }
                if (firstid !== "") {
                    if (this.contextService) {
                        this.contextService.navigateSLXGroupEntity(firstid, this.currentEntityId);
                    }
                }

                Sage.Groups.GroupManager.removeIds(grpctxt.CurrentGroupID, grpctxt.CurrentName, grpctxt.CurrentFamily, [this.currentEntityId], function () {
                    __doPostBack("MainContent", "");
                }, function (err) {
                    console.error(err);
                }, this);
            }
        },
        removeSelectionsFromGroup: function () {
            GroupManager.removeSelectionsFromGroup();
        },
        saveSelectionsAsNewGroup: function () {
            GroupManager.saveSelectionsAsNewGroup();
        },
        //        addSelectionsToGroup: function (groupId) {
        //            GroupManager.addSelectionsToGroup(groupId);
        //        },
        showAdHocList: function (e) {
            var svc = Sage.Services.getService('ClientGroupContext'),
                i,
                item,
                parentNode;

            if (typeof (GroupAdHocListMenu) === 'undefined') {
                GroupAdHocListMenu = new DijitMenu({
                    id: 'GroupAdHocList'
                });
                GroupAdHocListMenu.addChild(new MenuItem({
                    label: this.loadingText
                }));
            }

            svc.getAdHocGroupList(function (list) {

                GroupAdHocListMenu.destroyDescendants();
                for (i = 0; i < list.length; i++) {
                    item = list[i];
                    GroupAdHocListMenu.addChild(new MenuItem({
                        label: item.$descriptor || item.name,
                        ref: dString.substitute("javascript:Sage.Groups.GroupManager.addSelectionsToGroup('${0}')", [item.$key]),
                        onClick: function () {
                            if (this.ref !== '') {
                                try {
                                    window.location.href = this.ref;
                                    dijit.popup.close(GroupAdHocListMenu);
                                } catch (err) { }
                            }
                        }
                    }));
                }
                GroupAdHocListMenu.on('blur', function () { dijit.popup.close(GroupAdHocListMenu); });
                GroupAdHocListMenu.startup();
            }, this);

            if (!e.pageX && !e.pageY) {
                // IE8 won't have e.pageX and e.pageY values
                e.pageX = e.clientX + document.body.scrollLeft;
                e.pageY = e.clientY + document.body.scrollTop;
            }

            dijit.popup.open({
                popup: GroupAdHocListMenu,
                x: e.pageX || 250,
                y: e.pageY || 250
            });

            parentNode = GroupAdHocListMenu.domNode.parentNode;
            if (parentNode && !domClass.contains(parentNode, 'commonTaskAdHoc')) {
                domClass.add(parentNode, 'commonTaskAdHoc');
            }
        },
        exportToExcel: function () {
            this.getCurrentEntity();
            this.prepareSelectedRecords(this.fileFormatCheck(this));
        },
        fileFormatCheck: function (self) {
            return function () {
                var formatIsSaved = cookie.getCookie("formatIsSaved"),
                format = cookie.getCookie("format");
                //Check for cookie of file format type preference
                if (formatIsSaved === "true" && format.length > 0) {
                    dojo.byId([self.clientId, '_tskExportToExcel'].join('')).click();
                } else {
                    self.promptForFileFormat();
                }
            };
        },
        // Prompt the user to select which delimiter the export should use.
        // Their cultural version of csv or Excel preferred Tab.
        // Also allow the user to save this preference, and not be prompted again.
        promptForFileFormat: function () {
            var self = this,
                promptForFileFormatDialogId = "promptForFileFormat-Dialog",
                promptForFileFormatDialog = dijit.byId(promptForFileFormatDialogId);

            if (!promptForFileFormatDialog) {
                promptForFileFormatDialog = new DijitDialog({
                    id: promptForFileFormatDialogId,
                    title: self.exportToFile_DialogTitle
                });
            }

            promptForFileFormatDialog.attr("content", this.getPromptForFileFormatTemplate().apply({ dialogId: promptForFileFormatDialogId }));
            promptForFileFormatDialog.show();
        },
        getPromptForFileFormatTemplate: function () {
            return new Simplate([
                '<div>',
                    '<label style="padding-left:5px">{%= commonTaskActions.selectFileFormat %}</label>',
                    '<br />',
                    '<div style="padding-left:10px; padding-top:7px">',
                        '<input id="radioCSV" name="format_type" type="radio" data-dojo-type="dijit.form.RadioButton" value="csv" checked="true" />{%= commonTaskActions.exportToFile_OptionCSV %}',
                    '</div>',
                    '<div style="padding-left:10px; padding-top:7px">',
                        '<input id="radioTab" name="format_type" type="radio" data-dojo-type="dijit.form.RadioButton" value="tab" />{%= commonTaskActions.exportToFile_OptionTab %}',
                    '</div>',
                    '<div style="padding-left:11px; padding-top:7px">',
                        '<input id="exportFormatSaved" dojoAttachPoint="exportFormatSaved" data-dojo-type="dijit.form.CheckBox" value="true" />{%= commonTaskActions.exportToFile_OptionSaveFormat %}',
                    '</div>',
            //buttons
                    '<div style="padding-right:5px; padding-bottom:5px; text-align:right;">',
                        '<button data-dojo-type="dijit.form.Button" type="submit" class="ok-button" onClick="commonTaskActions.onExportToFileClick();">{%= commonTaskActions.exportToFile_OK %}</button>',
                        '<button data-dojo-type="dijit.form.Button" type="button" class="cancel-button" onClick="dijit.byId(\'promptForFileFormat-Dialog\').hide();">{%= commonTaskActions.exportToFile_Cancel %}</button>',
                    '</div>',
                '</div>'
            ]);
        },
        onExportToFileClick: function () {
            //Get the user preference
            var typeIsSaved = dojo.byId("exportFormatSaved");
            var formatType;
            //Save the user preference
            if (typeIsSaved !== undefined && typeIsSaved.checked) {
                document.cookie = "formatIsSaved=true; expires=1/01/2020";
            }
            if (dojo.byId("radioCSV").checked) {
                formatType = "csv";
            }
            else {
                formatType = "tab";
            }
            document.cookie = "format=" + formatType + "; expires=1/01/2020";
            //Call the click event for the hidden sumbit button.
            dojo.byId([this.clientId, '_tskExportToExcel'].join('')).click();
        },
        emailSend: function () {
            this.getCurrentEntity();
            var url = "slxdata.ashx/slx/crm/-/namedqueries?columnaliases=email&format=json&hql=";
            var sHql = this.getURL(this.currentEntityTableName);

            if (sHql === null) {
                Dialogs.showError(this.noPrimaryEmail);
                return;
            }
            url = url + sHql;
            var self = this;
            dojo.xhrGet({
                url: url,
                handleAs: 'json',
                load: function (data) {
                    self.sendEmail(data);
                },
                error: function (error) {
                    Dialogs.showError(error.StatusText);
                }
            });
        },
        getURL: function (entity) {
            var url = null;
            switch (entity) {
                // Example when using cached Named Query       
                case 'CONTACT': url = dojo.string.substitute("select con.Email from Contact con where con.id like '${0}'", [this.currentEntityId]);
                    break;
                case 'ACCOUNT': url = dojo.string.substitute("select con.Email from Contact as con where con.Account.id like '${0}' and con.IsPrimary like 'T'", [this.currentEntityId]);
                    break;
                case 'OPPORTUNITY': url = dojo.string.substitute("select con.Email from Opportunity as opp left join opp.Contacts as oppCon left join oppCon.Contact as con where opp.id like '${0}' and oppCon.IsPrimary like 'T'", [this.currentEntityId]);
                    break;
                case 'LEAD': url = dojo.string.substitute("select le.Email from Lead le where le.id like '${0}'", [this.currentEntityId]);
                    break;
                case 'CAMPAIGN': url = dojo.string.substitute("select ufo.Email from Campaign as cam left join cam.AccountManager as usr left join usr.UserInfo as ufo where cam.id like '${0}'", [this.currentEntityId]);
                    break;
                case 'TICKET': url = dojo.string.substitute("select ufo.Email from User as usr left join usr.UserInfo as ufo where usr.DefaultOwner in  (select own.id from Ticket as tic left join tic.AssignedTo as own where tic.id like '${0}')", [this.currentEntityId]);
                    break;
                case 'DEFECT': url = dojo.string.substitute("select ufo.Email from User as usr left join usr.UserInfo as ufo where usr.DefaultOwner in (select own.id from Defect as def left join def.AssignedTo as own where def.id like '${0}')", [this.currentEntityId]);
                    break;
                case 'CONTRACT': url = dojo.string.substitute("select con.Email from Contract as crt left join crt.Contact as con where crt.id like '${0}'", [this.currentEntityId]);
                    break;
                case 'SALESORDER': url = dojo.string.substitute("select so.ShippingContact.Email from SalesOrder as so where so.Id eq '${0}'", [this.currentEntityId]);
                    break;
            }
            return url;
        },
        sendEmail: function (email) {
            if (email.count > 0) {
                var sEmail = email.items[0].email;
                if (sEmail) {
                    sEmail = "mailto:" + sEmail;
                    document.location.href = sEmail;
                    return;
                }
            }
            Dialogs.showError(this.noPrimaryEmail);
        },
        // this is a callback method that calls a method on the Sage.ClientLinkHandler which has a global
        // module that converts the client call into a code-behind call that is handled in the ClientLinkHandler.ascx.cs
        // file.  The method in the Sage.ClientLinkHandler calls a method in the server-side LinkHandler which lives in App_Code.
        // From there, a dialog can be created and displayed.  The dialog takes the selection key and uses the
        // client selection service to get the selected records from the grid.  This callback method is defined in the
        // FillDictionaries method in CommonTasksTasklet.ascx.cs.
        copyUser: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'CopyUser', selectionInfoKey: selectionKey });
        },
        copyUserProfile: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'CopyUserProfile', selectionInfoKey: selectionKey });
        },
        deleteUsers: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'DeleteUsers', selectionInfoKey: selectionKey });
        },
        addToTeam: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'AddToTeam', selectionInfoKey: selectionKey });
        },
        removeFromTeam: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'RemoveFromTeam', selectionInfoKey: selectionKey });
        },
        removeFromAllTeams: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'RemoveFromAllTeams', selectionInfoKey: selectionKey });
        },
        assignRole: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'AssignRole', selectionInfoKey: selectionKey });
        },
        replaceTeamMember: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'ReplaceTeamMember', selectionInfoKey: selectionKey });
        },
        deleteTeam: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'DeleteTeam', selectionInfoKey: selectionKey });
        },
        deleteDepartment: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'DeleteDepartment', selectionInfoKey: selectionKey });
        },
        copyTeam: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'CopyTeam', selectionInfoKey: selectionKey });
        },
        copyDepartment: function () {
            var selectionKey = dojo.byId([commonTaskActions.clientId, '_hfSelections'].join('')).value;
            Sage.ClientLinkHandler.request({ request: 'Administration', type: 'CopyDepartment', selectionInfoKey: selectionKey });
        },
        showDetailReport: function () {
            // Do not load the reporting service unless it is needed.
            require(['Sage/Reporting/Service'], function (Service) {
                var oReporting = Sage.Services.getService("ReportingService");
                if (oReporting) {
                    oReporting.showDefaultReport();
                }
            });
        },
        writeEmailToGroupSelection: function () {
            email.writeEmailToGroupSelection();
        }
    });
    return commonTasksTasklet;
});
},
'Sage/QuickForms/Design/Editors/ComboBoxAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/ComboBoxAdvancedPropertyEditor", [
    'dojo/string',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dojo/store/Memory',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/ComboBoxAdvancedPropertyEditor'
], function(
    string,
    declare,
    lang,
    array,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Memory,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.ComboBoxAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.itemGroupText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.dataSourceTooltipText %}">',
                        '<label>{%= $.dataSourceText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_dataSource" data-dojo-attach-event="onChange:_onDataSourceChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.itemsTooltipText %}">',
                        '<label>{%= $.itemsText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_items" data-dojo-attach-event="onChange:_onItemsChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.textFieldTooltipText %}">',
                        '<label>{%= $.textFieldText %}</label>',
                        '<div data-dojo-type="dijit.form.ComboBox" data-dojo-attach-point="_textField" data-dojo-attach-event="onChange:_onTextFieldChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.valueFieldTooltipText %}">',
                        '<label>{%= $.valueFieldText %}</label>',
                        '<div data-dojo-type="dijit.form.ComboBox" data-dojo-attach-point="_valueField" data-dojo-attach-event="onChange:_onValueFieldChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlId: null,
        _controlLabelPlacement: null,
        _controlType: null,
        _dataSource: null,
        _defaultDataBinding: null,
        _enabled: null,
        _items: null,
        _textField: null,
        _valueField: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',
        itemGroupText: 'Items',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        dataSourceText: 'Data Source:',
        dataSourceTooltipText: 'Source of the data for this control such as another control or an entity.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        itemsText: 'Items:',
        itemsTooltipText: 'Values the user can select.',
        textFieldText: 'Text Field:',
        textFieldTooltipText: 'The name of the data source field used to populate the visible text portion of the list items.',
        valueFieldText: 'Value Field:',
        valueFieldTooltipText: 'The name of the data source field used to populate the value portion of the list items.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },
        hasItemsText: 'Set',
        noItemsText: 'Not Set',

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._controlId.set('value', this._designer.get('controlId'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._items.set('value', this._designer.get('hasItems')? this.hasItemsText : this.noItemsText);
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');

            this.setDataSources();
            this._dataSource.set('value', this._designer.get('dataSource'));
            this._textField.set('value', this._designer.get('textField'));
            this._valueField.set('value', this._designer.get('valueField'));
        },

        setDataSources: function(){
            var dataSources = this.getDataSources(),
                dataSourceNode = this._dataSource;

            dataSourceNode.removeOption(dataSourceNode.getOptions());

            // Add Empty option for user resetting
            dataSourceNode.addOption({
                label: '',
                value: '_-1'
            });
            dataSourceNode.addOption({
                label: 'MainEntity',
                value: 'MainEntity'
            });

            array.forEach(dataSources, function(source){
                this.addOption(lang.mixin({
                    label: source.get('controlId'),
                    value: source.get('controlId')
                }, source.entry));
            }, dataSourceNode);

            // Disabled until support for Items and DataSources Added
            //dataSourceNode.set('disabled', false);
        },
        getDataSources: function(){
            var controls = this._designer.get('form').get('controls'),
                sources = [];
            array.forEach(controls, function(control){
                if (control instanceof Sage.QuickForms.Design.DataSourceDesigner)
                    this.push(control);
            }, sources);

            return sources;
        },
        getSelectedItem: function(value){
            var dataSourceNode = this._dataSource;
            for(var i = 0; i < dataSourceNode.options.length; i++)
            {
                var item = dataSourceNode.options[i];
                if (item.value === value)
                    return item || null;
            }
            return null;
        },
        updateFieldStore: function(field, store, searchAttr){
            field.store.destroy && field.store.destroy();
            field.set('store', store);
            field.set('searchAttr', searchAttr);
            field.set('disabled', false);
        },
        createSDataPropertyStore: function(entity){
            return new Sage.Data.SDataStore({
                service: Sage.Data.SDataServiceRegistry.getService('metadata'),
                collection: '$resources.0.properties.$resources',
                resourceKind: 'entities',
                resourcePredicate: string.substitute("'${0}'", [entity])
            });
        },

        _onControlIdChange: function(value){
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onControlTypeChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onDataSourceChange: function(value){
            // Disabled until support for Items and DataSources Added
            /*
            var item = this.getSelectedItem(value),
                entity = (item && item.EntityTypeName) || null,
                textFieldNode = this._textField,
                valueFieldNode = this._valueField,
                store = (entity)
                    ? this.createSDataPropertyStore(entity)
                    : new Memory(); // empty store

            this.updateFieldStore(textFieldNode, store, 'propertyName');
            this.updateFieldStore(valueFieldNode, store, 'propertyName');

            if (this.isSuspended()) return;

            textFieldNode.set('value', '');
            valueFieldNode.set('value', '');
            this._designer.set('dataSource', item.ControlId || value);
            */
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onItemsChange: function(value){
        },
        _onTextFieldChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('textField', value);
        },
        _onValueFieldChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('valueField', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/UI/SLXPreviewGrid/Filter/Text':function(){
/*globals define */
define("Sage/UI/SLXPreviewGrid/Filter/Text", [
        'dijit/form/TextBox',
        'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin',
        'dojo/_base/declare'
],
function (textBox, filterMixin, declare) {
    var text = declare("Sage.UI.SLXPreviewGrid.Filter.Text", [textBox, filterMixin], {
        // summary:
        //  a simple free-form text filter.  by default a "contains" search is performed

        postMixInProperties: function () {
            // reset the type to "text" - this overrides any type that is inherited from the column config 
            // (typically the type of grid cell that would be used)
            this.type = 'text';
            this.style = "width: 200px";
            this.inherited(arguments);
        },
        reset: function () {
            this.set('displayedValue', '');
            this.set('value', '');
        }
    });
    return text;
});
},
'Sage/UI/nls/GroupsTitlePaneConfigProvider':function(){
define("Sage/UI/nls/GroupsTitlePaneConfigProvider", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            groupText: 'Groups',
            addGroupButtonTooltip: 'Add Group',
            groupButtonTooltip: 'Manage Groups',
            lookupText: 'Lookup',
            lookupResultsText: 'Lookup Results',
            groupColumnText: 'Group',
            visibleColumnText: 'Visible'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/EditEventEditor':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/MainView/ActivityMgr/EditEventEditor", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Toolbar',
    'dijit/layout/TabContainer',
    'dijit/layout/ContentPane',
    'dijit/form/Textarea',
    'dijit/form/ComboBox',
    'Sage/UI/TextBox',
    'Sage/UI/Controls/DateTimePicker',
    'Sage/UI/SDataLookup',
    'dojox/layout/TableContainer',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/MainView/BindingsManager',
    'dijit/Dialog',
    'Sage/UI/Dialogs',
    'Sage/Utility',
    'Sage/Data/SDataServiceRegistry',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'dojo/_base/declare',
    'dojo/i18n!./nls/EditEventEditor',
    'dijit/focus',
    'dojo/_base/lang'
],

function (
    _Widget,
    _Templated,
    Toolbar,
    TabContainer,
    ContentPane,
    Textarea,
    ComboBox,
    TextBox,
    DateTimePicker,
    SDataLookup,
    TableContainer,
    SingleEntrySDataStore,
    BindingsManager,
    Dialog,
    sageDialogs,
    utility,
    sDataServiceRegistry,
    _DialogHelpIconMixin,
    dojoLang,
    declare,
    eventEditorStrings,
    focusUtil,
    lang
) {

    var editEventEditor = declare('Sage.MainView.ActivityMgr.EditEventEditor', [_Widget, _Templated], {
        eventId: null,
        mode: false,
        _dialog: false,
        _currentUserId: null,
        _eventService: false,
        _eventData: false,
        _eventStore: false,
        _bindingMgr: false,
        _eventChangeConnection: false,
        lup_User: false,
        eventDefaultValues: {},
        eventConnections: [],
        widgetsInTemplate: true,

        widgetTemplate: new Simplate([
            '<div>', //root
                '<div data-dojo-type="dijit.Dialog" id="eventDialog" title="" dojoAttachPoint="_dialog" >', //dialog
                    '<div class="event-dialog">', //body
                     '<div data-dojo-type="dijit.layout.ContentPane" id="{%= $.id%}_cp_event" title="" dojoAttachPoint="cp_Event" class="tabContent">',
                        '<div data-dojo-type="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="140">',
                              '<div data-dojo-type="Sage.UI.Controls.DateTimePicker" shouldPublishMarkDirty="false" label="{%= $.lblStartDateText %}" id="{%= $.id%}_tb_StartDate" name="tb_StartDateName" dojoAttachPoint="tb_StartDate" displayDate="true" displayTime="false"  ></div>',
                              '<div data-dojo-type="Sage.UI.Controls.DateTimePicker" shouldPublishMarkDirty="false" label="{%= $.lblEndDateText %}" id="{%= $.id%}_tb_EndDate" name="tb_EndDateName" dojoAttachPoint="tb_EndDate" displayDate="true" displayTime="false" ></div>',
                              '<select  dojoAttachPoint="tb_DayType" data-dojo-type="dijit.form.ComboBox" required="false" name="tb_DayType"  label="{%= $.lblDayTypeText %}" id="{%= $.id%}_tb_DayType" >',
                                  '<option value="Active" >{%=$.eventTypeActiveText %}</option>',
                                  '<option value="Business Trip" >{%=$.eventTypeBusinessTripText %}</option>',
                                  '<option value="Conference" >{%=$.eventTypeConferenceText%}</option>',
                                  '<option value="Holiday" selected="selected" >{%=$.eventTypeHolidayText%}</option>',
                                  '<option value="Off" >{%=$.eventTypeOffText%}</option>',
                                  '<option value="Trade Show" >{%=$.eventTypeTradeShowText%}</option>',
                                  '<option value="Unavailable" >{%=$.eventTypeUnavailableText%}</option>',
                                  '<option value="Vacation" >{%=$.eventTypeVacationText%}</option>',
                               '</select>',
                               '<input data-dojo-type="dijit.form.TextBox" id="{%= $.id %}_tb_Location" label="{%= $.lblLocationText %}" dojoAttachPoint="tb_Location" maxLength="255" />',
                               '<textarea data-dojo-type="dijit.form.SimpleTextarea" label="{%= $.lblDescriptionText %}" id="{%= $.id%}_tb_Description" name="tb_Description" dojoAttachPoint="tb_Description" rows="4" cols="1"  maxLength="128"  ></textarea>',
                               '<div class="event-dialog remove-padding">',
                               '<div dojoType="dijit.layout.ContentPane" label="{%= $.lblUserText %}" dojoAttachPoint="container_UserLup" class="remove-padding lookup-container"></div>',
                                '</div>',
                           '</div>',
                      '</div>',
                       '<div class="button-bar alignright">',
                          '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_OK" name="btn_OK" dojoAttachPoint="btn_OK" dojoAttachEvent="onClick:_okClick">{%= $.btnOkayText %}</div>',
                          '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_Cancel" name="btn_Cancel" dojoAttachPoint="btn_Cancel" dojoAttachEvent="onClick:_cancelClick">{%= $. btnCancelText %}</div>',
                       '</div>',
                  '</div>', //body                     
                '</div>',  //dialog        
           '</div>' //root                       
        ]),
        constructor: function () {
            dojo.mixin(this, eventEditorStrings);
            this._eventService = sDataServiceRegistry.getSDataService('dynamic');
            this._setEventStore();
            this._currentUserId = utility.getClientContextByKey('userID') || '';
        },
        //postMixInProperties: function() {
        //    this.inherited(arguments); 
        //},
        //startup: function(){
        //    this.inherited(arguments);
        //    this._loadData();             

        //},
        destroy: function () {

            if (this._eventChangeConnection) {
                dojo.disconnect(this._eventChangeConnection);
                this._eventChangeConnection = false;
            }
            if (this._bindingMgr) {
                this._bindingMgr.destroy();
            }
            if (this.lup_User) {
                this.lup_User.destroy();
            }
            this.inherited(arguments);
        },
        show: function (mixinProperties) {
            if (!this.lup_User) {
                this._createUserLookup();
            }

            if (this.mode === 'New') {
                this._dialog.set('title', this.titleScheduleText);
            }
            else {
                this._dialog.set('title', this.titleEditText);
            }
            this.eventDefaultValues = mixinProperties || {};
            this._loadData();
            this._dialog.set('refocus', false);
            this._dialog.show();
            // Create help icon
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('addevent');
            }
        },
        hide: function () {
            this._dialog.hide();
        },
        resize: function () {

        },

        _setModeAttr: function (mode) {
            this.mode = mode;
            if (mode.indexOf('New') === 0) {
                this.mode = 'New';
                this._eventData = false;
                //this._loadData();
            }
        },
        _setEventIdAttr: function (eventId) {
            if (this.eventId !== eventId) {
                this.eventId = eventId;
                this._eventData = false;
                //this._loadData();
            }
        },
        _getEventIdAttr: function () {
            return this.eventId;
        },

        _setEventStore: function () {
            if (!this._eventStore) {
                this._eventStore = new SingleEntrySDataStore({
                    include: [],
                    select: ['StartDate', 'EndDate', 'Description', 'Type', 'Location', 'UserId'],
                    resourceKind: 'events',
                    service: this._eventService
                });
            }
        },

        onChange: function (/* control */control,
        /*attribute-name-string*/attribute,
        /*object | array*/oldValue,
        /*object | array*/newValue) {

        },
        setMode: function (mode) {
            this._mode = mode;
        },

        _loadData: function () {
            this._eventData = false;
            if (this._eventStore) {
                if (this.mode !== 'New') {
                    this._eventStore.fetch({
                        predicate: "'" + this.eventId + "'",
                        onComplete: this._receivedEvent,
                        onError: this._requestFailure,
                        scope: this
                    });
                } else {
                    this._eventStore.newItem({
                        onComplete: function (event) {
                            utility.setValue(event, 'UserId', this._currentUserId);
                            this._receivedEvent(event);
                        },
                        scope: this
                    });
                }
            }
        },

        _receivedEvent: function (event) {
            if (this.mode === 'New') {
                this._eventData = (dojo.mixin(event, this.eventDefaultValues));
            }
            else {
                this._eventData = event;
            }
            this._bind();
        },
        _requestFailure: function (msg, request, opts) {
            console.warn('error requesting data');
        },
        _bind: function () {

            if (this._eventData) {
                if (!this._bindingMgr) {
                    this._bindingMgr = new BindingsManager({
                        defaultBinding: { boundEntity: this._eventData },
                        items: [{
                            boundWidget: this.tb_StartDate,
                            entityProperty: 'StartDate',
                            dataType: 'date'
                        }, {
                            boundWidget: this.tb_EndDate,
                            entityProperty: 'EndDate',
                            dataType: 'date'
                        }, {
                            boundWidget: this.tb_DayType,
                            entityProperty: 'Type'
                        }, {
                            boundWidget: this.tb_Description,
                            entityProperty: 'Description'
                        }, {
                            boundWidget: this.tb_Location,
                            entityProperty: 'Location'
                        }]
                    });

                    this._eventChangeConnection = dojo.connect(this._bindingMgr, 'onChange', this, 'onChange');
                } else {
                    if (!this._bindingMgr.boundEntity || (this._eventData['$key'] !== this._bindingMgr.boundEntity['$key'])) {
                        this._bindingMgr.setBoundEntity(this._eventData);
                    } else {
                        this._bindingMgr.bind();
                    }
                }
                this._bindUserLookup();
            }
        },
        _bindUserLookup: function () {
            if (this._eventData.UserId) {
                if (this._eventData.UserId === this._currentUserId) {
                    var mockUser = {
                        '$key': this._currentUserId,
                        '$descriptor': utility.getClientContextByKey('userPrettyName')
                    };
                    this.lup_User.set('selectedObject', mockUser);
                } else {
                    this._getUserInfoFor(this._eventData.UserId, function (user) {
                        this.lup_User.set('selectedObject', user);
                    });
                }
            } else {
                this.lup_User.set('selectedObject', null);
            }
        },
        _getUserInfoFor: function (userId, callback) {
            var request = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('dynamic', false, true, true)); //go ahead and cache this...
            request.setResourceKind('userInfo');
            request.setResourceSelector("'" + userId + "'");
            //using precedence of 0 we only get $descriptor which is <lastname, firstname>, 
            //...but do we want the UserName property which is <firstname lastname>???
            request.setQueryArg('precedence', '0');
            request.read({
                success: callback,
                scope: this,
                failure: function () { }
            });
        },
        _createUserLookup: function () {
            var userLookupConfig = {
                id: '_eventUser',
                structure: [
                    {
                        cells:
                            [
                                {
                                    name: this.nameText,
                                    field: 'Name',
                                    sortable: true,
                                    width: "400px",
                                    editable: false,
                                    propertyType: "System.String",
                                    excludeFromFilters: false,
                                    defaultValue: ""
                                }
                            ]
                    }
                ],
                gridOptions: {
                    contextualCondition: function () {
                        return 'AllowAdd AND (AccessId eq \'' + utility.getClientContextByKey('userID') + '\' OR AccessId eq \'EVERYONE\') AND Type eq \'User\'';
                    },
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'activityresourceviews',
                    sort: [{ attribute: 'Name'}]
                },
                isModal: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupUserText,
                dialogButtonText: this.btnOkayText
            };
            this.lup_User = new Sage.UI.Controls.Lookup({
                id: 'event_lu_user',
                config: userLookupConfig
            });
            this.eventConnections.push(dojo.connect(this.lup_User, 'onChange', this, '_userChanged'));
            dojo.place(this.lup_User.domNode, this.container_UserLup.domNode, 'only');
        },
        _userChanged: function (newUser) {
            utility.setValue(this._eventData, 'UserId', (newUser) ? newUser['$key'].substr(0, 12) : '');
        },
        datesValid: function () {
            var startDate = this.tb_StartDate.value;
            startDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 0,0);
            var endDate = this.tb_EndDate.value;
            endDate = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 0, 0);
            if (startDate > endDate) {
                sageDialogs.showError(this.invaildDatesText);
                return false;
            }
            return true;
        },
        // ... region click/action handlers
        _okClick: function () {
            var activeElement = focusUtil.curNode;
            if(activeElement){
                activeElement.blur();
            }
            // IE8 has an issue where the value is saved before the blur realizes the value has changed
            //  and setting a timeout of 1 is enough for the change to be seen after the blur
            setTimeout(lang.hitch(this, function() {
            if (!this.datesValid()) {
                return;
            }

            if (this.mode === 'New') {
                this._eventStore.saveNewEntity(this._eventData, this._successEventCreated, this._failedEventCreated, this);
            }
            else {
                this._eventStore.save({
                    scope: this,
                    success: this._successEventUpdated,
                    failure: this._failedEventUpdated
                });
            }
            }), 1);
        },
        _cancelClick: function () {
            this.hide();
        },

        _successEventCreated: function (event) {
            dojo.publish('/entity/event/create', [event, this]);
            //dojo.publish('/entity/event/change', [event, this]);
            this.hide();
        },

        _failedEventCreated: function (request) {

            console.log('an error occured saving event %o', request);
            sageDialogs.showError(this.errorText);

        },
        _successEventUpdated: function (event) {

            dojo.publish('/entity/event/change', [event, this]);
            this.hide();
        },

        _failedEventUpdated: function (request) {
            console.log('an error occured saving event %o', request);
            sageDialogs.showError(this.errorText);
        }
        // ... endregion      

    });
    return editEventEditor;
});

},
'Sage/UI/SLXPreviewGrid/Grid':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, TabControl */
define("Sage/UI/SLXPreviewGrid/Grid", [
    'Sage/UI/EditableGrid',
    'dijit/layout/BorderContainer',
    'dijit/form/SimpleTextarea',
    'dijit/_Widget',
    'dijit/_Templated',
    'dojo/i18n!../nls/SLXPreviewGrid',
    'dojo/_base/declare'
],
function (EditableGrid, BorderContainer, SimpleTextarea, _Widget, _Templated, i18nStrings, declare) {
    //dojo.requireLocalization("Sage.UI", "SLXPreviewGrid");
    var Grid = declare("Sage.UI.SLXPreviewGrid.Grid", [_Widget, BorderContainer], {
        // summary: 
        //  Editable grid with support for filter + preview area    

        // i18n strings:
        filterText: 'Filter',
        // end i18n strings

        // Fields    
        // name of sdata resource
        ////    resourceKind: "",
        // name of field to be displayed in preview pane (XXX: do we need a template?)
        previewField: "",
        // array of column configuration objects, with following properties:
        //   - field (SData field)
        //   - name (column header)
        //   - filterConfig: optional filter configuration, the "widgetType" property is 
        //      the type of filter widget to use, the rest is passed to the widget
        //   - width: the width can be specified as a pixel width ('30px')
        columns: null,
        // optional array of tools to be added to the toolbar (see EditableGrid)
        tools: null,
        // SLX context parameter: workspace, tabId
        slxContext: null,
        // optional function to be invoked when the user double clicks a row.  
        // Will be invoked with an "id" parameter (sdata $key for the selected row), 
        //    and the record object itself (use Sage.Utility.getValue to extract data from it)
        dblClickAction: null,
        contextualConditionFunction: null,
        liveSplitters: true,
        gutters: false,
        gridNodeId: '',
        _filter: null, // filter panel
        _grid: null, // EditableGrid instance
        _preview: null, // preview widget
        constructor: function () {
            this.connections = [];
        },
        amIInATab: function () {
            if (this.slxContext && this.slxContext.workspace) {
                return (this.slxContext.workspace.indexOf('TabWorkspace') > -1);
            }
            return false;
        },
        isMyTabVisible: function () {
            if (this.amIInATab() && TabControl) {
                return TabControl.getState().isTabVisible(this.slxContext.tabId);
            }

            return true;
        },

        // Widget lifecycle

        postMixInProperties: function () {
            dojo.mixin(this, i18nStrings);
            this.inherited(arguments);
        },

        buildRendering: function () {
            this.inherited(arguments);

            if (this.previewField) {
                this._preview = this._buildPreview();
            }

            this._filter = this._buildFilter();
            this._grid = this._buildGrid();
        },

        startup: function () {
            if (this._started) {
                return;
            }

            console.warn('ToDo: SLXPreviewGrid needs to connect to tab change events to properly refresh themselves.   SLXPreviewGrid - startup()');
            this.inherited(arguments);

            this.domNode.style.visibility = "visible";
            if (this._preview) {
                var splitter = this.getSplitter('right');
                this.connections.push(dojo.connect(splitter, "_stopDrag", this, function () {
                    this._setPref('previewSize', this._preview.domNode.style.width);
                    this.layout();
                }));
            }
        },

        // Public API

        getSelectedRecords: function (fields) {
            // summary:
            //  Retrieve an array of records selected in the grid.
            // fields:
            //  array of fields to extract data for.  For example, ["LongNotes", "ContactName"].  The returned objects
            //  will be plain JS objects with LongNotes and ContactName properties.
            var selIndices = this._grid.selection.getSelected();
            return dojo.map(selIndices, function (rec) {
                var result = {};
                dojo.forEach(fields, function (fieldName) {
                    result[fieldName] = this._grid.store.getValue(rec, fieldName);
                }, this);
                return result;
            }, this);
        },
        refresh: function () {
            // summary:
            //  Refreshes the grid's data (this does not affect the filter)
            this._grid.refresh();
        },

        setSortIndex: function (index, isAsend) {
            // summary:
            //  Set the Default sort column.
            this._grid.setSortIndex(index, isAsend);
        },
        setSortColumn: function (columnName, isAsend) {
            // summary:
            //  Set the Default sort column.
            var index = 0;
            for (var i = 0; i < this.columns.length; i++) {
                if (columnName === this.columns[i].field) {
                    index = i;
                }
            }
            this._grid.setSortIndex(index, isAsend);
        },

        addAssociatedItems: function () {
            // summary:
            //  Redirects to the grid's methods - this is a convenience for when the grid is used on a QF
            this._grid.addAssociatedItems.apply(this._grid, arguments);
        },

        // Events

        onSelected: function () {
            // summary:
            //  Fires when a record is selected in the grid       
        },

        // Private Helpers
        _buildPreview: function () {
            // summary:
            //  build and return preview widget
            var preview = new SimpleTextarea({
                style: 'height:100%; overflow: auto; width: ' + this._getPref('previewSize', '150px'),
                region: 'right',
                splitter: true,
                readOnly: true
            });
            this.addChild(preview);
            dojo.addClass(preview.domNode, 'preview-grid-text');
            return preview;
        },
        _buildGrid: function () {
            // summary:
            //  build and return grid widget        
            var tools = [];
            if (this._filter) {
                tools.push({
                    id: this.id + '_Filter',
                    imageClass: 'icon_Filter_16x16',
                    tooltip: this.filterText,
                    handler: dojo.hitch(this, function () {
                        this._filter.toggle();
                        this.layout();
                    })
                });
            }
            if (this.tools) {
                dojo.forEach(this.tools, function (item) { tools.push(item); });
            }

            var contextualCondition = { fn: this.contextualConditionFunction ||
                this.contextualCondition, conditions: this._filter ? this._filter.getQuery() : null
            };

            if (!this.storeOptions) {
                throw ("SLXPreviewGrid configuration is missing storeOptions");
            }

            this.storeOptions.select = this.storeOptions.select || [];
            this.storeOptions.select.push('Id');
            this.storeOptions.select.push(this.previewField);
            var grid = new EditableGrid({
                id: this.domNode.id + "_grid",
                gridNodeId: this.id,
                tabId: this.slxContext.tabId,
                context: this.slxContext,
                region: 'center',
                columnDefaults: { editable: false },
                //readOnly: true,
                columns: this.columns,
                tools: tools,
                contextualCondition: contextualCondition,
                storeOptions: this.storeOptions,
                keepSelection: true
            });

            this.connections.push(dojo.connect(grid, 'onSelected', this, this._updatePreviewText));
            this.connections.push(dojo.connect(grid.store, 'onSuccess', this, this._updatePreviewText));

            if (this.dblClickAction) {
                dojo.connect(grid, 'onRowDblClick', this, function (e) {
                    // Edit the selected item.
                    var rec = grid.getItem(e.rowIndex);
                    var id = grid.store.getValue(rec, "$key");
                    this.dblClickAction(id, rec);
                });
            }
            if (this._filter) {
                dojo.connect(this._filter, 'onFilterApply', this, function (conditions) {
                    contextualCondition.conditions = this._filter.getQuery();
                    grid.refresh();
                });
            }

            this.addChild(grid);
            return grid;
        },
        destroy: function () {
            var len = this.connections.length;
            for (var i = 0; i < len; i++) {
                dojo.disconnect(this.connections.pop());
            }
            this.inherited(arguments);
        },
        resetContextualCondition: function (contextualConditionFunction) {

            this.contextualConditionFunction = contextualConditionFunction;
            var contextualCondition = { fn: this.contextualConditionFunction ||
                this.contextualCondition, conditions: this._filter ? this._filter.getQuery() : null
            };
            this._grid.resetContextualCondition(contextualCondition);

        },
        _updatePreviewText: function () {
            if (this.previewField) {
                // Update the preview textbox.
                var sel = this._grid.selection.getSelected();
                var note = '';
                if (sel.length > 0 && sel[0]) {
                    note = sel[0][this.previewField] || this._grid.store.getValue(sel[0], this.previewField);
                }
                this._preview.set('value', note);
            }
        },
        _buildFilter: function () {
            // summary:
            //  build and return filter widget.
            //  If the grid has no filter configuration then it will return null.

            var filterConfig = [];
            dojo.forEach(this.columns, function (cc) {
                if (cc.filterConfig) {
                    // the filterconfig is supplemented with the column config itself, this way we keep the same label etc.
                    var fc = dojo.mixin(dojo.clone(cc), cc.filterConfig);
                    if (!fc.label) {
                        fc.label = cc.name;
                    }
                    filterConfig.push(fc);
                }
            });
            if (filterConfig.length === 0) {
                return null;
            }
            var filter = new Sage.UI.SLXPreviewGrid.FilterPanel({
                id: this.id + '_filterpanel',
                region: 'top',
                filterConfig: filterConfig,
                style: 'display: none'
            });
            this.addChild(filter);

            return filter;
        },
        _getPref: function (prefName, defaultValue) {
            var storage = window['localStorage'];
            var key = this.id + prefName;
            if (storage && storage[key]) {
                return storage[key];
            }
            return defaultValue;
        },
        _setPref: function (prefName, value) {
            var storage = window['localStorage'];
            if (storage) {
                storage[this.id + prefName] = value;
            }
        }

    });
    return Grid;
});
},
'Sage/QuickForms/Design/nls/NonVisibleControlContainer':function(){
﻿define("Sage/QuickForms/Design/nls/NonVisibleControlContainer", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            headerText: "Non-Visual Controls"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/EntityRelationships':function(){
﻿/*globals define, Sage, window, dojo */
define("Sage/Utility/EntityRelationships", [
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/UI/Dialogs',
    'dojo/_base/lang',
    'dojo/string',
    'Sage/Utility'
    //'dojo/i18n',
    //'dojo/i18n!./nls/EntityRelationShips'
],
    function (
        SingleEntrySDataStore,
        SDataServiceRegistry,
        dialogs,
        dLang,
        dString,
        Utility
        //i18n
        ) {
        Sage.namespace('Utility.EntityRelationships');
        Sage.Utility.EntityRelationships = {
            _store: false,
            getRelationships: function (entityContext, callback, scope) {
                               
                     var retobj = {};               
                    if (entityContext.EntityId !== "") {
                        var id = entityContext.EntityId ;
                          var parts = entityContext.EntityType.split('.');
                          var entityType = parts[parts.length - 1];
                        switch (entityType) {
                            case 'IAccount':
                                this._getAccountRelationships(id, callback, scope);
                                return;
                            case 'IContact':
                                this._getContactRelationships(id, callback, scope);
                                return;
                            case 'IOpportunity':
                                this._getOpportunityRelationships(id, callback, scope);
                                return;
                            case 'ITicket':
                                this._getTicketRelationships(id, callback, scope);
                                return;
                            case 'ISalesOrder':
                                this._getSalesOrderRelationships(id, callback, scope);
                                return;
                            case 'IActivity':
                                this._getActivityRelationships(id, callback, scope);
                                return;
                            case 'IHistory':
                                this._getHistoryRelationships(id, callback, scope);
                                return;
                            case 'IContract':
                                this._getContractRelationships(id, callback, scope);
                                return;
                            case 'IReturn':
                                this._getReturnRelationships(id, callback, scope);
                                return;
                        }
                        var propname = entityContext.EntityTableName.toLowerCase() + 'Id';
                        retobj[propname] = id;
                        callback.call(scope || this, retobj);
                        return;
                    } 
                
                callback.call(scope || this, {});
            },
            _getRequest: function (resourceKind, id) {
                var req = new Sage.SData.Client.SDataSingleResourceRequest(SDataServiceRegistry.getSDataService('dynamic'));
                req.setResourceKind(resourceKind);
                req.setResourceSelector('"' + id + '"');
                req.setQueryArg('precedence', '0');
                return req;
            },
            _getAccountRelationships: function (id, callback, scope) {
                var req = this._getRequest('accounts', id);
                req.setQueryArg('include', 'Contacts,$descriptors');
                req.setQueryArg('select', 'Contacts/IsPrimary');
                req.read({
                    success: function (acc) {
                        var obj = {
                            AccountId: Utility.getValue(acc, '$key'),
                            AccountName: Utility.getValue(acc, '$descriptor')                          
                        };
                        var contactId = '';
                        var contactName = '';
                        var contacts = acc.Contacts.$resources;
                        if (contacts.length > 0) {
                            contactId = contacts[0].$key;
                        }
                        for (var i = 0; i < contacts.length; i++) {
                            if (contacts[i].IsPrimary) {
                                contactId = contacts[i].$key;
                                contactName =  Utility.getValue(contacts[i], '$descriptor');
                            }
                        }
                        obj['ContactId'] = contactId;
                        obj['ContactName'] =  contactName;
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'AccountId': id });
                    },
                    scope: this
                });
            },
            _getContactRelationships: function (id, callback, scope) {
                var req = this._getRequest('contacts', id);
                req.setQueryArg('include', 'Account,$descriptors');
                 req.setQueryArg('select', 'Account');
                req.read({
                    success: function (contact) {
                        var obj = {
                            AccountId: Utility.getValue(contact, 'Account.$key'),
                            AccountName: Utility.getValue(contact, 'Account.$descriptor'),
                            ContactId: contact.$key,
                            ContactName: Utility.getValue(contact, '$descriptor')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ContactId': id });
                    },
                    scope: this
                });
            },
            _getOpportunityRelationships: function (id, callback, scope) {
                var req = this._getRequest('opportunities', id);
                req.setQueryArg('include', 'Account,Contacts,$descriptors');
                req.setQueryArg('select', 'Account,Contacts/IsPrimary');
                req.read({
                    success: function (opp) {
                        var obj = {
                            AccountId: Utility.getValue(opp, 'Account.$key'),
                            AccountName: Utility.getValue(opp, 'Account.$descriptor'),
                            OpportunityId: opp.$key,
                            OpportunityName: Utility.getValue(opp, '$descriptor')
                        };
                        var contactId = '';
                        var contactName = '';
                        var contacts = opp.Contacts.$resources;
                        if (contacts.length > 0) {
                            contactId = contacts[0].$key;
                        }
                        for (var i = 0; i < contacts.length; i++) {
                            if (contacts[i].IsPrimary) {
                                contactId = contacts[i].$key;
                                contactName =  Utility.getValue(contacts[i], '$descriptor');
                            }
                        }
                        obj['ContactId'] = contactId;
                        obj['ContactName'] =  contactName;
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'OpportunityId': id });
                    },
                    scope: this
                });
            },
            _getSalesOrderRelationships: function (id, callback, scope) {
                var req = this._getRequest('salesorders', id);
                req.setQueryArg('include', 'Account,$descriptors');
                req.read({
                    success: function (so) {
                        //console.dir(so);
                        var obj = {
                            AccountId: Utility.getValue(so, 'Account.$key'),
                            SalesOrderId: so.$key
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'SalesOrderId': id });
                    },
                    scope: this
                });
            },
            _getTicketRelationships: function (id, callback, scope) {
                var req = this._getRequest('tickets', id);
                req.setQueryArg('include', 'Account,Contact,$descriptors');
                req.read({
                    success: function (ticket) {
                        var obj = {
                            AccountId: Utility.getValue(ticket, 'Account.$key'),
                            AccountName: Utility.getValue(ticket, 'Account.$descriptor'),
                            ContactId: Utility.getValue(ticket, 'Contact.$key'),
                            ContactName: Utility.getValue(ticket, 'Contact.$descriptor'),
                            TicketId: ticket.$key,
                            TicketNumber: Utility.getValue(ticket, '$descriptor')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ticketId': id });
                    },
                    scope: this
                });
            },
            _getReturnRelationships: function (id, callback, scope) {
                var req = this._getRequest('returns', id);
                req.setQueryArg('include', 'Account,ReturnedBy,Ticket,$descriptors');
                req.read({
                    success: function (rma) {
                        var obj = {
                            ReturnId: rma.$key,
                            ReturnNumber: Utility.getValue(rma, '$descriptor'),
                            AccountId: Utility.getValue(rma, 'Account.$key'),
                            AccountName: Utility.getValue(rma, 'Account.$descriptor'),
                            TicketId: Utility.getValue(rma, 'Ticket.$key'),
                            TicketNumber: Utility.getValue(rma, 'Ticket.$descriptor'),
                            ContactId: Utility.getValue(rma, 'ReturnedBy.$key'),
                            ContactName: Utility.getValue(rma, 'ReturnedBy.$descriptor')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { returnId: id });
                    },
                    scope: this
                });
            },
            _getActivityRelationships: function (id, callback, scope) {
                var req = this._getRequest('activities', id);
                req.setQueryArg('select', 'AccountId,ContactId,LeadId,OpportunityId,TicketId');
                req.read({
                    success: function (activity) {
                        //console.dir(activity);
                        var obj = {
                            AccountId: Utility.getValue(activity, 'AccountId'),
                            ActivityId: activity.$key,
                            ContactId: Utility.getValue(activity, 'ContactId'),
                            LeadId: Utility.getValue(activity, 'LeadId'),
                            OpportunityId: Utility.getValue(activity, 'OpportunityId'),
                            TicketId: Utility.getValue(activity, 'TicketId')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ActivityId': id });
                    },
                    scope: this
                });
            },
           _getHistoryRelationships: function (id, callback, scope) {
                var req = this._getRequest('history', id);
                req.setQueryArg('select', 'AccountId,ContactId,LeadId,OpportunityId,TicketId');
                req.read({
                    success: function (history) {
                        //console.dir(history);
                        var obj = {
                            AccountId: Utility.getValue(history, 'AccountId'),
                            HistoryId: history.$key,
                            ContactId: Utility.getValue(history, 'ContactId'),
                            LeadId: Utility.getValue(history, 'LeadId'),
                            OpportunityId: Utility.getValue(history, 'OpportunityId'),
                            TicketId: Utility.getValue(history, 'TicketId')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'HistoryId': id });
                    },
                    scope: this
                });
            },
            _getContractRelationships: function (id, callback, scope) {
                var req = this._getRequest('contracts', id);
                req.setQueryArg('include','Account,Contact,$descriptors');
                req.read({
                    success: function (contract) {
                        var obj = {
                            AccountId: Utility.getValue(contract, 'Account.$key'),
                            AccountName: Utility.getValue(contract, 'Account.$descriptor'),
                            ContractId: contract.$key,
                            ContractNumber: Utility.getValue(contract, '.$descriptor'),
                            ContactId: Utility.getValue(contract, 'Contact.$key'),
                            ContactName: Utility.getValue(contract, 'Contact.$descriptor')
                        };
                        callback.call(scope || this, obj);
                    },
                    failure: function () {
                        callback.call(scope || this, { 'ContractId': id });
                    },
                    scope: this
                });
            }
        };
        return Sage.Utility.EntityRelationships;
    });
},
'Sage/UI/Controls/nls/Name':function(){
define("Sage/UI/Controls/nls/Name", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            okText: 'OK',
            cancelText: 'Cancel',
            dialogTitle: 'Edit Name',
            prefixText: 'Prefix:',
            nameFirstText: 'First:',
            nameMiddleText: 'Middle:',
            nameLastText: 'Last:',
            suffixText: 'Suffix:',
            buttonTooltip: 'Edit'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/GridMenuItem':function(){
require({cache:{
'url:Sage/templates/GridMenuItem.html':"<tr class=\"dijitGridMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"4\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\" style=\"display:none\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"display:none\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n    <td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\" style=\"display:none\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n</tr>\n"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GridMenuItem", [
       'dijit/MenuItem',
       'dojox/grid/EnhancedGrid',
       'dojo/text!../templates/GridMenuItem.html',
       'dojo/_base/declare',
       'dojo/dom-style',
       'dojo/dom-construct',
       'dojo/aspect',
       'dojo/_base/lang',
       'dojo/topic'
],
function (MenuItem, EnhancedGrid, template, declare, domStyle, domConstruct, aspect, lang, topic) {
    var widget = declare('Sage.UI.GridMenuItem', MenuItem, {
        grid: null,
        templateString: template,
        startup: function() {
            this.inherited(arguments);
            aspect.after(this.getParent(), 'onOpen', lang.hitch(this, this.startGrid));
            var h = this.gridOptions.height || this.height || '250px',
                w = this.gridOptions.width || this.width || '150px';
            domStyle.set(this.focusNode, {height: h, width: w});
        },
        startGrid: function() {
            if (this.started) {
                this.grid.resize();
                this.grid._refresh();
                return;
            }
            if (typeof this.gridOptions !== 'undefined') {
                var cssClass = (this.gridOptions.hasOwnProperty('cssClass')) ? this.gridOptions.cssClass : '',
                    handle;
                this.gridOptions.cssClass = cssClass + ' menuGrid';
                this.grid = new EnhancedGrid(this.gridOptions);
                domConstruct.place(this.grid.domNode, this.containerNode, 'only');
                
                this.grid.canSort = function(col) {
                    // Disable sorting of the active group column
                    if (Math.abs(col) === 1) {
                        return false;
                    }
                    
                    return true;
                };
                
                //ToDo:  these are for trying out purposes - probably want to remove this...
                if (this.gridOptions.hasOwnProperty('_onCellClick')) {
                    this.grid.on('cellClick', lang.hitch(this.gridOptions, this.gridOptions._onCellClick));
                }        
                if (this.gridOptions.hasOwnProperty('_onCanSelect')) {
                    this.grid.on('canSelect', lang.hitch(this.gridOptions, this.gridOptions._onCanSelect));
                }         
                //end of trying out...
                this.grid.startup();
            }
            this.started = true;
            handle = aspect.after(this.grid, "_onFetchComplete", lang.hitch(this, function () {
                topic.publish("sage/ui/groups/gridMenuStarted", this);
                handle.remove();
            }));
        },
        _onClick: function(e) {
            // because we live in a menu, we don't want the menu's click handling to hide 
            // us when the user selects a row.
            e.stopPropagation();
        }
    });

    return widget;
});


},
'Sage/UI/Controls/DependencyLookup':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/DependencyLookup", [
       'dijit/Dialog',
       'Sage/UI/Controls/DependControl',
       'dojo/_base/declare'
],
function (dialog, dependControl, declare) {
    // Basically just ripped from sage-controls. Removed Ext and YAHOO
    // TODO: Use SData
    var widget = declare('Sage.UI.Controls.DependencyLookup', null, {
        ClientId: '',
        PanelId: '',
        InitCall: null,
        LookupControls: null,
        CurrentIndex : 0,
        AutoPostBack: false,
        panel: null,
        Title: '',
        Size: '',
        constructor: function(clientId, initCall, size, autoPostBack, title) {
            this.ClientId = clientId;
            this.PanelId = clientId + '_Panel';
            this.InitCall = initCall;
            this.LookupControls = [];
            this.CurrentIndex = 0;
            this.Size = size + 'px';
            this.AutoPostBack = autoPostBack;
            this.panel = null;
            this.Title = title;
        },
        CanShow: function() {
            var inPostBack = false;
            if (Sys) {
                var prm = Sys.WebForms.PageRequestManager.getInstance();
                inPostBack = prm.get_isInAsyncPostBack();
            }
            if (!inPostBack) {
                return true;
            } else {
                var id = this.ClientId + '_obj';
                var handler = function () {
                    window[id].Show('');
                }
                Sage.SyncExec.call(handler);
                return false;
            }
        },
        Show: function () {
            if (this.CanShow()) {
                if (this.panel == null) {
                    this.panel = dijit.byId(this.PanelId + '_Dialog');
                    var lookup = dojo.byId(this.PanelId);
                    
                    if(!this.panel) {
                        lookup.style.display = 'block';
                        dojo.place(lookup, dojo.byId('mainform'), 'last');
                        this.panel = new dialog({
                            id: this.PanelId + '_Dialog',
                            content: lookup,
                            title: this.Title || ''
                        });
                        this.panel.startup();
                        dojo.place(this.panel.domNode, dojo.byId('mainform'), 'last');
                        
                    }
                    else {
                        this.panel.setContent(lookup);
                        lookup.style.display = 'block';
                    }
                    
                    if ((this.CurrentIndex == 0) || (this.LookupControls[i] != undefined)) {
                        this.Init();
                    }
                    
                    for (var i = 0; i < this.CurrentIndex; i++) {
                        if (this.LookupControls[i] != undefined) {
                            var text = dojo.byId(this.LookupControls[i].TextId);
                            var seedVal = '';
                            if (i > 0) {
                                seedVal = this.GetSeeds(i);
                            }
                            if ((text.value != '') || (seedVal != '') || (i == 0)) {
                                this.LookupControls[i].CurrentValue = text.value;
                                var listId = this.LookupControls[i].ListId;
                                var list = dojo.byId(listId);
                                if (list.options.length == 0) {
                                    this.LookupControls[i].LoadList(seedVal);
                                }
                            }
                        }
                    }
                }
                this.panel.show();
            }
        },
        AddControl: function (baseId, listId, textId, type, displayProperty, seedProperty) {
            var dependCtrl = new dependControl(baseId, listId, textId, type, displayProperty, seedProperty);
            this.LookupControls[this.CurrentIndex] = dependCtrl;
            this.CurrentIndex++;
        },
        AddFilters: function (FilterProp, FilterValue) {
            var dependCtrl = new dependControl(listId, textId, type, displayProperty, seedProperty);
            this.LookupControls[this.CurrentIndex] = dependCtrl;
            this.CurrentIndex++;
        },
        SelectionChanged: function (index) {
            if ((index + 1) < this.CurrentIndex) {
                this.LookupControls[index + 1].LoadList(this.GetSeeds(index + 1));
                for (var i = index + 2; i < this.CurrentIndex; i++) {
                    this.LookupControls[i].ClearList();
                }
            }
        },
        Ok: function () {
            this.panel.hide();
            for (var i = 0; i < this.CurrentIndex; i++) {
                var text = document.getElementById(this.LookupControls[i].TextId);
                var list = document.getElementById(this.LookupControls[i].ListId);
                if ((list.selectedIndex != undefined) && (list.selectedIndex != -1)) {
                    text.value = list.options[list.selectedIndex].text;
                }
                else {
                    text.value = '';
                }
                this.InvokeChangeEvent(text);
            }
            if (this.AutoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.ClientId, null);
                }
                else {
                    document.forms(0).submit();
                }
            }
        },
        Init: function () {
            eval(this.InitCall);
        },
        InvokeChangeEvent: function (cntrl) {
            if (document.createEvent) {
                //FireFox
                var evObj = document.createEvent('HTMLEvents');
                evObj.initEvent('change', true, true);
                cntrl.dispatchEvent(evObj);
            }
            else {
                //IE
                cntrl.fireEvent('onchange');
            }
        },
        GetSeeds: function (index) {
            var result = '';
            for (var i = index; i > 0; i--) {
                var dependParent = this.LookupControls[i - 1];
                var dependChild = this.LookupControls[i];
                var list = dojo.byId(dependParent.ListId);
                if (list.selectedIndex == -1) {
                    return result;
                }
                var seed = list.options[list.selectedIndex];
                result += dependChild.SeedProperty + ',' + seed.text + '|'
            }
            result = result.substr(0, result.length - 1);
            return result;
        },
        close: function () {
            this.panel.hide();
        }
    });

    return widget;
});




},
'Sage/UI/Columns/SlxEdit':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/SlxEdit", [
    'dojo/i18n!./nls/SlxEdit',
    'dojo/_base/declare'
],
function (resource, declare) {
    var widget = declare("Sage.UI.Columns.SlxEdit", dojox.grid.cells.Cell, {
        // Field: string
        //      The name of the field to be used as the entityid in the querystring
        field: '',
        // entityType: string
        //      The name of the entity.
        entityType: '',
        // cellValue: string
        //      The display value of the cell
        cellValue: '',
        // smartPart: string
        //      The name of the smartpart to load
        smartPart: '',
        // appliedSecurity: string
        //      The 'key' of the secured action the user must have in order to follow the link.
        //      If the user does not have access to the action specified, this field will contain only text.
        appliedSecurity: '',
        // dialogTitle: string
        //      Overrides the default title description if specified.
        dialogTitle: '',
        //
        //
        isCentered: true,
        dialogTop: 0,
        dialogLeft: 0,
        dialogHeight: 0,
        dialogWidth: 0,
        formObjectName: '',
        constructor: function () {
            dojo.mixin(this, resource);
            if (!this.hidden) {
                // From templates, this.appliedSecurity is set, but the code
                // originally checked arguments.appliedSecurity. Just a precaution
                if(!this.appliedSecurity && arguments.appliedSecurity) {
                    this.appliedSecurity = arguments.appliedSecurity;
                }
                if (this.appliedSecurity) {
                    var svc = Sage.Services.getService("RoleSecurityService");
                    if (svc) {
                        this.hidden = !svc.hasAccess(this.appliedSecurity);
                    }
                }
            }
            this.inherited(arguments);
        },
        format: function (inRowIndex, inItem) {
            // summary:
            //      returns: html for a given grid cell
            if (inItem === null) { return this.defaultValue; }
            var cellDisplayText = this.cellValue;
            if (this.cellValue === "" && this.field != "") {
                cellDisplayText = Sage.Utility.getValue(inItem, this.field);
            }
            //need to have some default value
            if (this.cellValue === "" && cellDisplayText === "") {
                cellDisplayText = this.editText;
            }
            var entityId = Sage.Utility.getValue(inItem, '$key');
            //if this is entity has a composite key we need to parse it so that the dialog service recognizes it
            if (entityId.match(/[=]/)) {
                entityId = entityId.match(/[=]\S{12}/g).join(',').replace(/=/g, "");
            }
            return String.format('<a href="{0}">{1}</a>', String.format("javascript:Sage.Utility.loadDetailsDialog( {{ entityType:'{0}', smartPart:'{1}', entityId:'{2}', dialogTitle:'{3}', isCentered:{4}, dialogTop:{5}, dialogLeft:{6}, dialogHeight:{7}, dialogWidth:{8} }} );",
                this.entityType, this.smartPart, entityId, this.dialogTitle, this.isCentered, this.dialogTop, this.dialogLeft, this.dialogHeight, this.dialogWidth),
                cellDisplayText);
        }
    });
    return widget;
});
},
'Sage/Services/RoleSecurityService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/RoleSecurityService", [
    'dijit/_Widget',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility/_LocalStorageMixin',
    'dojo/_base/declare'
],
function (_Widget, SDataServiceRegistry, _LocalStorageMixin, declare) {
    /**
    * Declare the UserOptions class and append its methods and properties
    * @constructor
    */
    var widget = declare('Sage.Services.RoleSecurityService', [_Widget, _LocalStorageMixin], {
        _currentUserId: '',
        _accessListCache: false,
        _enabled: true,
        _nameSpace: 'Sage_SalesLogix_RoleSecurityService',
        _clearCache: false,
        constructor: function (options) {
            this.inherited(arguments);
            dojo.mixin(this, options);
            this._currentUserId = this._getCurrentUserId();           
        },
        postCreate: function (options) {
            this._getFromCache();
        },

        _getCurrentUserId: function () {

            if (!this._currentUserId) {
                var clientContextSvc = Sage.Services.getService('ClientContextService');
                if (clientContextSvc) {
                    if (clientContextSvc.containsKey("userID")) {
                        this._currentUserId = clientContextSvc.getValue("userID");
                    }
                }
            }

            return this._currentUserId;
        },
        _virtuald: function () {
            var match = /^\/([^\/]+)\//.exec(location.pathname);
            return match ? match[1] : '';
        },
        hasAccess: function (actionName, callback) {
            var result = this._internalHasAccess(actionName);
            if (callback) {
                callback(result);
            }
            return result;
        },
        _internalHasAccess: function (actionName) {

            if (!this._enabled) {
                return true;
            }

            if (!actionName) {
                return true;
            }
            if (actionName.trim() === '') {
                return true;
            }

            if (this._getCurrentUserId().trim() === 'ADMIN') {
                return true;
            }
            var accessList = this._getAccessList();
            if (accessList) {
                for (var i = 0; i < accessList.length; i++) {
                    if (accessList[i] === actionName) {
                        return true;
                    }
                }
            }
            return false;
        },
        _getAccessList: function () {
            if (this._accessListCache) {
                return this._accessListCache.securedActions;
            }
            else {
                var accessList = this._getFromCache();
                if (accessList) {
                    return accessList.securedActions;
                }
            }
            return false;
        },
        _getFromCache: function () {
            var me = this;
            var currentUserId = this._getCurrentUserId();
            var rsData = this.getFromLocalStorage(this._nameSpace, this._nameSpace);
            if (rsData) {
                for (var i = 0; i < rsData.length; i++) {
                    if (rsData[i].userId === currentUserId) {
                        if (this._clearCache) {
                            this._clearCache = false;
                            rsData.splice(i, 1);
                        }
                        else {
                            this._accessListCache = rsData[i];
                            return rsData[i];
                        }
                    }
                }
            }
            this._loadUserAccessList(function (userData) {
                if (!rsData) {
                    rsData = [];
                }
                me._accessListCache = userData;
                rsData.push(userData);
                me.saveToLocalStorage(me._nameSpace, rsData, me._nameSpace);
            });
            return false;
        },
        _loadUserAccessList: function (callBack) {
            var request = new Sage.SData.Client.SDataServiceOperationRequest(Sage.Data.SDataServiceRegistry.getSDataService('system')) .setContractName('system') .setOperationName('getCurrentUser');
            request.execute({}, {

                success: function (data) {
                    if (callBack) {
                        callBack(data.response);
                    }
                    //console.warn('succsess role security');

                },
                failure: function (data) {
                    console.warn('Error reading request');
                    //console.log(data);
                },
                scope: this
            });

        }

    }); // end dojo declare

    /**
    * Make an instance of this service available to the 
    * Sage.Services.getService method.
    */
    if (!Sage.Services.hasService('RoleSecurityService')) {
        Sage.Services.addService('RoleSecurityService', new Sage.Services.RoleSecurityService());
    }

    return widget;
});
},
'url:Sage/MainView/IntegrationContract/templates/InvoiceRTDV.html':"﻿[\n'<div>',\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_invoiceDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\n        '<div dojoAttachPoint=\"loadingContainer\">',\r\n            '<br />',\r\n            '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n            '<br />',\r\n            '<br />',\r\n        '</div>',\n        '<div dojoAttachPoint=\"invoiceDialogContent\" class=\"display-none\">',\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\">',\n                 '<input dojoType=\"dijit.form.TextBox\" name=\"reference\" id=\"{%= $.id%}_reference\" label=\"{%= $.lblInvoiceCaption %}\" readonly=\"true\" />',\n                 '<input dojoType=\"dijit.form.TextBox\" name=\"grossTotal\" id=\"{%= $.id%}_grossTotal\" label=\"{%= $.lblNetTotalCaption %}\" readonly=\"readonly\" />',\n            '</div >',\n            '<div style=\"height:350px;width:800px\">',\r\n                '<div id=\"{%= $.id%}_invoiceTabContainer\" dojoAttachPoint=\"invoiceTabContainer\" dojoType=\"dijit.layout.TabContainer\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"{%= $.id%}_invoiceContent\" dojoAttachPoint=\"invoiceContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.detailsTabTitle %}\" selected=\"true\">',\r\n                        '<div id=\"{%= $.id%}_divInvoiceDetails\">',\r\n                            '<table cellspacing=\"5\">',\n                                '<col style=\"width:200px\" />',\r\n                                '<col style=\"width:200px\" />',\n                                '<tr>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_date\">{%= $.lblInvoiceDateCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_invoiceDate\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"invoiceDiscountPercent\">{%= $.lblInvoiceDiscountPercentCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_discountPercent\" name=\"invoiceDiscountPercent\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_deliveryDate\">{%= $.lblDueDateCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_deliveryDate\" name=\"deliveryDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_carrierTotalPrice\">{%= $.lblCarrierTotalPriceCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_carrierTotalPrice\" name=\"carrierTotalPrice\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_customerReference\">{%= $.lblCustomerPOCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_customerReference\" name=\"customerReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\r\n                                        '<label for=\"Invoice_taxTotal\">{%= $.lblTaxCaption %}</label>',\r\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_taxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"settlementDiscountPercent\">{%= $.lblSettlementDiscountPercentCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_settlementDiscountPercent\" name=\"settlementDiscountPercent\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_notes\">{%= $.lblNotesCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_notes\" name=\"notes\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"settlementDiscountTerms\">{%= $.lblSettlementDiscountTermsCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_settlementDiscountTerms\" name=\"settlementDiscountTerms\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_costTotal\">{%= $.lblCostTotalCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_costTotal\" name=\"costTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"operatingCompanyCurrency\">{%= $.lblOCCurrencyCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_operatingCompanyCurrency\" name=\"operatingCompanyCurrency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_profitTotal\">{%= $.lblProfitTotalCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_profitTotal\" name=\"profitTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"operatingCompanyCurrencyExchangeRateDate\">{%= $.lblOperatingCompanyCurrencyExchangeRateDateCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_operatingCompanyCurrencyExchangeRateDate\" name=\"operatingCompanyCurrencyExchangeRateDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_priceList\">{%= $.lblPriceListCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_priceList\" name=\"pricelist.name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_currency\">{%= $.lblCurrencyCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                    '<td>',\n                                        '<label for=\"Invoice_salesPerson\">{%= $.lblSalesPersonCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_salesPerson\" name=\"buyerContact.fullName\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\n                                '<tr>',\n                                    '<td>',\n                                        '<label for=\"Invoice_invoiceDiscountAmount\">{%= $.lblInvoiceDiscountAmountCaption %}</label>',\n                                    '</td>',\n                                    '<td>',\n                                        '<input type=\"text\" id=\"{%= $.id%}_invoiceDiscountAmount\" name=\"invoiceDiscountAmount\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                    '</td>',\n                                '</tr>',\r\n                            '</table>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_addressesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.addressTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"sdgrdInvoiceAddresses\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdInvoiceAddresses_Grid\" dojoAttachPoint=\"sdgrdInvoiceAddresses_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_invoiceLinesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.invoiceLinesTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"sdgrdInvoiceLines\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdInvoiceLines_Grid\" dojoAttachPoint=\"sdgrdInvoiceLines_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_paymentsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.paymentsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Payments\" dojoAttachEvent=\"onShow:initPayments\">',\r\n                        '<div id=\"sdgrdPayments\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdPayments_Grid\" dojoAttachPoint=\"sdgrdPayments_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div id=\"{%= $.id%}_deliveriesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.deliveriesTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Deliveries\" dojoAttachEvent=\"onShow:initDeliveries\">',\r\n                        '<div id=\"sdgrdDeliveries\" style=\"width:100%;height:100%;\">',\r\n                            '<div id=\"{%= $.id%}_sdgrdDeliveries_Grid\" dojoAttachPoint=\"sdgrdDeliveries_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                        '</div>',\r\n                    '</div>',\r\n                '</div>',\r\n            '</div>',\r\n            '<div class=\"button-bar alignright\">',\r\n                 '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_invoiceBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]",
'Sage/QuickForms/Design/nls/PhoneControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/PhoneControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Phone"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Controls/templates/CopyToClipboard.html':"<div>\r\n    <div data-dojo-type=\"dijit.Dialog\" dojoAttachPoint=\"dialogNode\">\r\n        \r\n        <span>${helpText}</span>\r\n        <div style=\"width: 550px; height: 400px;\">\r\n            <div data-dojo-type=\"dijit.layout.TabContainer\" dojoAttachPoint=\"tabNode\" style=\"width: 100%; height: 100%;\">\r\n                <div data-dojo-type=\"dijit.layout.ContentPane\" title=\"${textTab}\">\r\n                    <div dojoAttachPoint=\"contentNode\"></div>\r\n                </div>\r\n            \r\n                <div data-dojo-type=\"dijit.layout.ContentPane\" title=\"${sourceTab}\">\r\n                    <textarea dojoAttachPoint=\"textNode\" data-dojo-type=\"dijit.form.SimpleTextarea\" style=\"width: 100%; height: 95%;\"></textarea>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            \r\n        <div style=\"float:right;padding-bottom:8px;\">\r\n            <button data-dojo-type=\"dijit.form.Button\" type=\"submit\" dojoAttachEvent=\"onClick:_closeClicked\">\r\n                ${closeText}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
'Sage/MainView/Lead/nls/UpdateLeads':function(){
﻿define("Sage/MainView/Lead/nls/UpdateLeads", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            updateMultipleLeads_Caption: 'Update Multiple Leads',
            labelWidth: '100',
            btnCancel_Caption: 'Cancel',
            ok_Text: 'OK',
            update_To_Caption: 'To:',
            update_Property_Caption: 'Update:',
            updateProp_Owner: 'Owner',
            lookupOwnerText: 'Lookup Owner:',
            lookupDescriptionColText: 'Description',
            updateProp_AcctMgr: 'Account Manager',
            lookupActMgrText: 'Lookup Account Manager',
            lookupNameColText: 'Name',
            lookupTitleColText: 'Title',
            lookupDepartmentColText: 'Department',
            lookupRegionColText: 'Region',
            lookupTypeColText: 'Type',
            errorUnspecifiedValue: 'Please specify a value before continuing.',
            errorRequestingJobMgr: 'An error occurred requesting the job manager.'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/MainView/BindingsManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/BindingsManager", [
    'dijit/_Widget',
    'dojo/_base/declare',
    'Sage/Utility/Activity'
],
function (_Widget, declare, activityUtility) {
    var dataBinding = declare('Sage.MainView.DataBinding', _Widget, {
        boundEntity: false,
        boundWidget: false,
        widgetEvent: 'onChange',
        widgetProperty: 'value',
        entityProperty: false,
        defaultValue: '',
        // if twoWay is true, when the user changes the value in the control, 
        // it will update the bound entity.  If it is false, it will not listen
        // for changes in the control.
        twoWay: true,
        _connection: false,
        bind: function () {
            if (this.boundWidget && this.boundEntity && this.entityProperty) {
                this.boundWidget.set(this.widgetProperty, this._formatValueFromEntity(Sage.Utility.getValue(this.boundEntity, this.entityProperty, this.defaultValue)));
                if (this.twoWay && !this._connection) {
                    this._connection = dojo.connect(this.boundWidget, this.widgetEvent, dojo.hitch(this, 'applyWidgetChange', this.boundWidget));
                }
            }
        },
        _formatValueFromEntity: function (val) {
            //override this function to handle special formatting such as dates or other data type conversions.
            return val;
        },
        applyWidgetChange: function (widget, newValue) {
            if (!newValue) {
                newValue = widget.get(this.widgetProperty);
            }
            var oldValue = Sage.Utility.getValue(this.boundEntity, this.entityProperty);
            var formatted = this._formatValueFromControl(newValue);
            if (oldValue != formatted) {
                //console.log('setting new value to entity' + this.entityProperty + ': %o  %o', this.boundEntity, newValue);
                Sage.Utility.setValue(this.boundEntity, this.entityProperty, formatted);
                this.onChange(this.boundEntity, this.entityProperty, oldValue, newValue);
            }
        },
        _formatValueFromControl: function (val) {
            //override this function to handle special formatting such as dates or other data type conversions.
            return val;
        },
        _setBoundEntityAttr: function (entity) {
            this.boundEntity = entity;
            this.bind();
        },
        destroy: function () {
            dojo.disconnect(this._connection);
            this.inherited(arguments);
        },
        onChange: function (entity, propertyName, oldValue, newValue) {

        }
    });
    var dateDataBinding = declare('Sage.MainView.DateDataBinding', dataBinding, {
        //Use this type of databinding when the value needs to be converted to and from SData standard string formats
        // to date types for the controls.
        _formatValueFromEntity: function (val) {
            var dateval = Sage.Utility.Convert.toDateFromString(val);
            if (dateval && activityUtility.isDateFiveSecondRuleTimeless(dateval)) {
                dateval = new Date(dateval.getUTCFullYear(), dateval.getUTCMonth(), dateval.getUTCDate(), 0, 0, 5);
            }
            return dateval;
        },
        _formatValueFromControl: function (val) {
            if (!val || !val.getUTCFullYear) {
                val = this.boundWidget.get(this.widgetProperty);
                if (!val || !val.getUTCFullYear) {
                    return '';
                }
            }
            return Sage.Utility.Convert.toIsoStringFromDate(val);
        }
    });

    var bindingManager = declare('Sage.MainView.BindingsManager', null, {
        constructor: function (opts) {
            //_entity: false,
            this._bindings = [];
            this._connections = [];
            this.boundEntity = false;
            this._defaultBindingOptions = {
                boundEntity: false,
                boundWidget: false,
                widgetEvent: 'onChange',
                widgetProperty: 'value',
                entityProperty: false,
                defaultValue: '',
                twoWay: true,
                dataType: 'string'
            };

            var o = opts || {};
            var def = dojo.mixin(this._defaultBindingOptions, o.defaultBinding || {});
            var bdgs = o.items || [];
            for (var i = 0; i < bdgs.length; i++) {
                this._addNew(dojo.mixin({}, def, bdgs[i]));
            }
        },
        add: function (binding) {
            if (binding instanceof Sage.MainView.DataBinding) {
                this._connections.push(dojo.connect(binding, 'onChange', this, 'onChange'));
                this._bindings.push(binding);
            }
        },
        _addNew: function (bindingConfig) {
            if (bindingConfig.dataType === 'date') {
                this.add(new dateDataBinding(bindingConfig));
            } else {
                this.add(new dataBinding(bindingConfig));
            }
        },
        addBindings: function (configs) {
            if (dojo.isArray(configs)) {
                for (var i = 0; i < configs.length; i++) {
                    this._addNew(dojo.mixin(this._defaultBindingOptions, configs[i]));
                }
            } else {
                this._addNew(dojo.mixin(this._defaultBindingOptions, configs));
            }
        },
        bind: function () {
            for (var i = 0; i < this._bindings.length; i++) {
                if (this._bindings[i] instanceof Sage.MainView.DataBinding) {
                    this._bindings[i].bind();
                }
            }
        },
        setBoundEntity: function (entity) {
            this._entity = entity;
            for (var i = 0; i < this._bindings.length; i++) {
                if (this._bindings[i] instanceof Sage.MainView.DataBinding) {
                    this._bindings[i].set('boundEntity', entity);  //it binds itself in its setter...
                }
            }
        },
        destroy: function () {
            // disconnect change listeners...
            var i, l = this._connections.length;
            for (i = 0; i < l; i++) {
                dojo.disconnect(this._connections.length);
            }
            this._connections = [];
            //destroy bindings...
            l = this._bindings.length;
            for (i = 0; i < l; i++) {
                var item = this._bindings.pop();
                item.destroy();
            }
            this._bindings = [];
            //this.inherited(arguments);
        },
        onChange: function (entity, propertyName, oldValue, newValue) {
        }
    });

    return bindingManager;
});
},
'Sage/TaskPane/ActivityTaskPaneItem':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/TaskPane/ActivityTaskPaneItem", [
       'dijit/_Widget',
       'dijit/_TemplatedMixin',
       'dojo/_base/declare'
],
 
function(
   _Widget,
   _Templated,
   declare
){
   
var activityTaskPaneItem = declare("Sage.TaskPane.ActivityTaskPaneItem", [_Widget, _Templated], {
        securedAction: '',
        linkText: '',
        action:'',
        postCreate: function () {
            this.checkSecurityAccess();        
        },
        templateString: '<a dojoAttachPoint="linkTextNode" href="#"></a>',
        attributeMap: dojo.delegate(dijit._Widget.prototype.attributeMap, {
            linkText: { node: 'linkTextNode', type: 'innerHTML' }, 
            action: { node: 'linkTextNode', type: 'attribute', attribute: 'href' }                   
        }),
   
       // this section relates to showing the link
        _getCurrentUserId: function () {
            var userid = '';
            var ctxService = Sage.Services.getService('ClientContextService');
            if (ctxService) {
                userid = ctxService.getValue('userID');
            }
            return userid;
        },
        checkSecurityAccess: function () {
            if (this.securedAction.length > 0) {
                var userid = this._getCurrentUserId();
                var targetlinknode = this.linkTextNode;
                var roleSecuritySvc = Sage.Services.getService('RoleSecurityService');
                roleSecuritySvc.hasAccess(this.securedAction, function(callbackResult){
                    var displayMode = "none";
                    if (callbackResult) {
                       displayMode = "inline";
                    }
                    dojo.style(targetlinknode, { "display": displayMode }); 
                
                });
           }
            else {
                dojo.style(this.linkTextNode, { "display": "inline" });
           }

        }
   
    });
    
    return activityTaskPaneItem;  
});
},
'Sage/MainView/ActivityMgr/SnoozeOptions':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/MainView/ActivityMgr/SnoozeOptions", [
        'dijit/_TemplatedMixin',
        'dijit/_WidgetsInTemplateMixin',
        'dijit/_Widget',
        'dijit/Dialog',
        'dijit/form/Button',
        'dijit/form/FilteringSelect',
        'dojo/_base/declare',
        'dojo/i18n!./nls/SnoozeOptions'           
],

function (
   _TemplatedMixin,
   _WidgetsInTemplateMixin,
   _Widget,
   Dialog,
   FormButton,
   FilteringSelect,
   declare,
   nlsStrings

) {
    var SnoozeOptions = declare('Sage.MainView.ActivityMgr.SnoozeOptions', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        fiveMinText: '5 minutes',
        tenMinText: '10 minutes',
        fifteenMinText: '15 minutes',
        thirtyMinText: '30 minutes',
        oneHourText: 'x1 hour',
        twoHourText: '2 hours',
        fourHourText: '4 hours',
        eightHourText: '8 hours',
        oneDayText: '1 day',
        twoDayText: '2 days',
        threeDayText: '3 days',
        oneWeekText: '1 week',
        twoWeekText: '2 weeks',
        snoozeText: 'Snooze',
        snoozeByText: 'Snooze by:',
        snoozeAllText: 'Snooze All',
        snoozeTitle: 'Snooze Alarms',
        widgetsInTemplate: true,
        templateString: ['<div>',
             '<div data-dojo-type="dijit.Dialog" id="_snoozeDialog" title="${snoozeTitle}" dojoAttachPoint="_dialog" dojoAttachEvent="onHide:hide">',
              '<div class="alarm-snoozebar" dojoAttachPoint="_snoozebar">',
                '<table>',
                    '<tr>',
                        '<td class="snoozeText">${snoozeByText}</td>',
                        '<td class="snoozeBy">',
                            '<select name="selectSnoozeBy" dojoAttachPoint="_selSnoozeBy" data-dojo-type="dijit.form.FilteringSelect">',
                                '<option value="5" selected="selected">${fiveMinText}</option>',
                                '<option value="10" >${tenMinText}</option>',
                                '<option value="15" >${fifteenMinText}</option>',
                                '<option value="30" >${thirtyMinText}</option>',
                                '<option value="60" >${oneHourText}</option>',
                                '<option value="120" >${twoHourText}</option>',
                                '<option value="240" >${fourHourText}</option>',
                                '<option value="480" >${eightHourText}</option>',
                                '<option value="1440" >${oneDayText}</option>',
                                '<option value="2880" >${twoDayText}</option>',
                                '<option value="4320" >${threeDayText}</option>',
                                '<option value="10080" >${oneWeekText}</option>',
                                '<option value="20160" >${twoWeekText}</option>',
                            '</select>',
                       '</td>',
                       '<td class="snoozeActions">',
                           '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_snooze">${snoozeText}</button>',
                       '</td>',
                    '</tr>',
                '</table>',
            '</div>', // snoozebar
          '</div>',
        '</div>'].join(''),

        constructor: function () {
            dojo.mixin(this, nlsStrings);
        },

        show: function () {

            //this._dialog.show();
            this._showWithUserOptions();
        },

        _showWithUserOptions: function () {
            var optionsSvc = Sage.Services.getService('UserOptions');
            //console.log(optionsSvc);
            if (optionsSvc) {
                optionsSvc.getByCategory('ActivityAlarm', this._receivedOptions, this);
            }
        },
        _receivedOptions: function (data) {
            var opts = data['$resources'];
            for (var i = 0; i < opts.length; i++) {
                var opt = opts[i];
                //this._options[opt['name']] = opt['value'];
                if (opt['name'].toUpperCase() === 'DEFAULTSNOOZE') {
                    var defaultSnooze = opt['value'];
                    this._selSnoozeBy.setValue(defaultSnooze);
                }
            }
            this._dialog.show();
        },
        hide: function () {

            this.destroy();

        },

        destroy: function () {
            this._dialog.destroyRecursive();

        },

        _snooze: function (value) {

            var activityService = Sage.Services.getService('ActivityService');
            var snoozeOptions = this._getNewAlarmTimeOptions();
            this.hide();
            activityService.snooze(null, snoozeOptions);

        },
        _snoozeAll: function () {

        },
        _getNewAlarmTime: function () {
            var options = this._getNewAlarmTimeOptions();
            var newAlarm = dojo.date.add(new Date(), options.interval, options.duration);
            return Sage.Utility.Convert.toIsoStringFromDate(newAlarm);
        },

        _getNewAlarmTimeOptions: function () {

            var dur = 5, interval = 'minute';
            var selText = this._selSnoozeBy.get('displayedValue');
            var selval = this._selSnoozeBy.get('value');
            switch (selval) {
                //case this.fiveMinText : 
                case this.tenMinText:
                    dur = 10;
                    break;
                case this.fifteenMinText:
                    dur = 15;
                    break;
                case this.thirtyMinText:
                    dur = 30;
                    break;
                case this.oneHourText:
                    dur = 1;
                    interval = 'hour';
                    break;
                case this.twoHourText:
                    dur = 2;
                    interval = 'hour';
                    break;
                case this.fourHourText:
                    dur = 4;
                    interval = 'hour';
                    break;
                case this.eightHourText:
                    dur = 8;
                    interval = 'hour';
                    break;
                case this.oneDayText:
                    dur = 1;
                    interval = 'day';
                    break;
                case this.twoDayText:
                    dur = 2;
                    interval = 'day';
                    break;
                case this.threeDayText:
                    dur = 3;
                    interval = 'day';
                    break;
                case this.oneWeekText:
                    dur = 1;
                    interval = 'week';
                    break;
                case this.twoWeekText:
                    dur = 2;
                    interval = 'week';
                    break;
                default:
                    dur = selval;


            }
            var options = {
                name: selText,
                duration: dur,
                interval: interval

            };
            return options;
        },
        _showSnooze: function () {

        }

    });

    return SnoozeOptions;

});
},
'Sage/UI/Controls/PickListAsText':function(){
require({cache:{
'url:Sage/UI/Controls/templates/PickListAsText.html':"<div>\r\n    <span id=\"${id}-Span\" data-dojo-attach-point=\"textSpan\"></span>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/PickListAsText", [
       'dijit/_Widget',
       'dijit/_Templated',
       'dojo/data/ItemFileReadStore',
       'dojo/data/ObjectStore',
       'dojo/store/Memory',
       'Sage/UI/Controls/PickList',
       'dojo/text!./templates/PickListAsText.html',
       'dojo/_base/declare'
],
function (_Widget, _Templated, itemFileReadStore, objectStore, memory, pickList, template, declare) {
    /**
     * @class Class for single select picklists.
     */
    var widget = declare('Sage.UI.Controls.PickListAsText', [pickList, _Widget, _Templated], {

        /**
         * Takes the following options object: 
         * {
         *  pickListName: 'PickListName', // Required
         *  storeOptions: {}, // Optional
         *  dataStore: {}, // Option
         *  storeMode: 'text', // text, id, code
         *  sort: true,
         *  displayMode: 'AsText',
         *  clientId: 'ASP.NET Control ClientID Here',
         *  required: false
         * }
         *
         * @constructor
         */
        constructor: function(options) {
            if(options.clientId) {
                this.id = options.clientId + '-PickListAsText';
            }

            this.inherited(arguments);
        },
        _loadData: function() {
            var def = new dojo.Deferred();
            this.getPickListData(def);

            def.then(dojo.hitch(this, function(data) {
                if(typeof data === 'string') {
                    this.textSpan.innerHTML = data;
                }

                var items = [];
                for(var i = 0; i < data.items.$resources.length; i++) {
                    var item = data.items.$resources[i];
                    items.push({
                        id: item.$key,
                        code: item.code,
                        number: item.number,
                        text: item.text
                    });
                }

                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };

                var tempStore = new itemFileReadStore({data: this.storeData});
                
                var existingText = dojo.byId(this.textId);
                var existingId = dojo.byId(this.codeId);

                // TODO: Refactor this
                if (existingText && existingText.value) {
                    //this is here when the server control added it to the dom with a value in it
                    this.initialValue = existingText.value;
                    this.textSpan.innerHTML = this.initialValue;
                }

                if (!this.initialCode && existingId && existingId.value) {
                    this.initialCode = existingId.value;
                }

                if (this.initialCode){
                    var storeItem = this.getStoreItemById(this.initialCode);
                    if(storeItem) {
                        this.initialValue = storeItem.text;
                        this.textSpan.innerHTML = this.initialValue;
                    }
                }
            }), function (e) {
                // errback
                console.error(e);
            });
        },
        getStoreItemById: function(id) {
            if(this.storeData) {
                var results = null;
                dojo.forEach(this.storeData.items, function(item, index, array) {
                    //console.log(item.id + ' === ' + id);
                    if(item.id === id) {
                        results = item;
                    }
                } ,this);
            }
            
            return results;
        },
        _setPickListNameAttr: function(value) {
            this.inherited(arguments);
            this._loadData();
        },
        // Display properties
        templateString: template,
        widgetsInTemplate: true,

        /**
         * @property {object} storeData Data fetched from SData stored here.
         */
        storeData: null,

        /**
         * @property {string} initialValue Initial value set to the control, if any.
         */
        initialValue: '',
        initialCode: '',
        textId: '',
        codeId: ''
    });

    return widget;
});


},
'Sage/UI/WidgetEditor':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/WidgetEditor", [
       'dojo/data/ItemFileReadStore',
       'dojox/widget/Portlet',
       'Sage/UI/Controls/_DialogHelpIconMixin',
       'dojo/_base/declare',
       'dojo/i18n!./Dashboard/nls/WidgetDefinition',
       'dojo/dom-style',
       'dojo/on',
       'dojo/_base/lang'
],
function (itemFileReadStore, portlet, _DialogHelpIconMixin, declare, widgetDefinition, domStyle, on, lang) {
    var widget = declare('Sage.UI.WidgetEditor', [dojox.widget.PortletDialogSettings], {
        _grpUrl: new Simplate('slxdata.ashx/slx/crm/-/groups/context/grouplist/{%= $.grp %}'),
        _dimUrl: new Simplate('slxdata.ashx/slx/crm/-/analytics/dimension/{%= $.dim %}'),
        _metUrl: new Simplate('slxdata.ashx/slx/crm/-/analytics/metric/{%= $.met %}'),
        _entityUrl: 'slxdata.ashx/slx/crm/-/groups/context/entityList?filter=analytics',
        _getStore: function (uri) {
            return new itemFileReadStore({
                url: uri
            });
        },
        // bit of a hack, but more efficient than querying the store for it
        _addEnt: function (str) {
            return 'Sage.Entity.Interfaces.I' + str;
        },
        _remEnt: function (str) {
            return str.replace('Sage.Entity.Interfaces.I', '');
        },
        // remove '&' if it is the last character 
        _remAmp: function (str) {
            return str[str.length - 1] === '&' ? str.slice(0, -1) : str;
        },
        _pushEnt: function (val) {
            this._entStr = dojo.string.substitute('entity=${0}&', [val]);
        },
        _pushGrp: function (val) {
            this._grpStr = dojo.string.substitute('groupname=${0}&', [val]);
        },
        _pushDim: function (val) {
            this._dimStr = dojo.string.substitute('dimension=${0}&', [val]);
        },
        _pushMet: function (val) {
            this._metStr = dojo.string.substitute('metric=${0}&', [val]);
        },
        _pushLim: function (val) {
            this._limStr = dojo.string.substitute('limit=${0}&', [val]);
        },
        _pushOth: function (val) {
            this._othStr = dojo.string.substitute('combineother=${0}', [val]);
        },
        _checkHydrate: function () {
            var opts = this.portlet.widgetOptions;
            if (opts.groupname && this._grpField) {
                if(this._originalGroup) {
                    opts.groupname = this._originalGroup;
                }
                var groupField = this._grpField;
                groupField.store.fetch({
                    query: { groupName: opts.groupname },
                    onComplete: function (i, r) {
                        groupField.set('value', groupField.store.getValue(i[0], 'displayName'));
                    },
                    queryOptions: { deep: true }
                });
                this._originalGroup = opts.groupname;
            }
            if (opts.dimension && this._dimField) {
                if(this._originalDimension) {
                    opts.dimension = this._originalDimension;
                }
                var df = this._dimField;
                df.store.fetch({
                    query: { name: opts.dimension },
                    onComplete: function (i, r) {
                        df.set('value', df.store.getValue(i[0], 'displayName'));
                    },
                    queryOptions: { deep: true }
                });
                this._originalDimension = opts.dimension;
            }
            if (opts.metric && this._metField) {
                if(this._originalMetric) {
                    opts.metric = this._originalMetric;
                }
                var mf = this._metField;
                mf.store.fetch({
                    query: { name: opts.metric },
                    onComplete: function (i, r) {
                        mf.set('value', mf.store.getValue(i[0], 'displayName'));
                    },
                    queryOptions: { deep: true }
                });
                this._originalMetric = opts.metric;
            }
            this._hydrateChecked = true;
        },
        // TODO perhaps implement this as a hash. this is not a data intensive 
        // period in the page cycle though, so it may not matter
        _setFields: function (child) {
            switch (child.id) {
                case this.portlet.id + '_ttlField':
                    this._ttlField = child;
                    break;
                case this.portlet.id + '_subField':
                    this._subField = child;
                    break;
                case this.portlet.id + '_entCombo':
                    this._entField = child;
                    on.once(this._entField._buttonNode, 'click', lang.hitch(this, function() {
                        var entityFieldLoading = dojo.byId(this.portlet.id + '_loading');
                        domStyle.set(entityFieldLoading, 'display', 'block');
                        this._entField.set('store', this._getStore(this._entityUrl));
                        this._entField.store.fetch({
                            query: '',
                            onComplete: function() {
                                domStyle.set(entityFieldLoading, 'display', 'none');
                                // Ensure the drop-down opens now
                                // and add focus so clicking away closes it, too
                                entityField.loadAndOpenDropDown();
                                entityField.focus();
                        }});
                    }));
                    break;
                case this.portlet.id + '_grpCombo':
                    this._grpField = child;
                    break;
                case this.portlet.id + '_dimCombo':
                    this._dimField = child;
                    break;
                case this.portlet.id + '_metCombo':
                    this._metField = child;
                    break;
                case this.portlet.id + '_goalField':
                    this._goalField = child;
                    break;
                case this.portlet.id + '_xField':
                    this._xField = child;
                    break;
                case this.portlet.id + '_yField':
                    this._yField = child;
                    break;
                case this.portlet.id + '_numberMaximum':
                    this._numberMaximum = child;
                    this._numberMaximum.constraints.min = 1; // ensure this is positive
                    break;
                case this.portlet.id + '_rdoOthY':
                    this._rdoOthY = child;
                    break;
                case this.portlet.id + '_rdoOthN':
                    this._rdoOthN = child;
                    break;
                case this.portlet.id + '_rdoLegY':
                    this._rdoLegY = child;
                    break;
                case this.portlet.id + '_rdoLegN':
                    this._rdoLegN = child;
                    break;
                case this.portlet.id + '_rdoLabY':
                    this._rdoLabY = child;
                    break;
                case this.portlet.id + '_rdoLabN':
                    this._rdoLabN = child;
                    break;
                case this.portlet.id + '_rdoTruY':
                    this._rdoTruY = child;
                    break;
                case this.portlet.id + '_rdoTruN':
                    this._rdoTruN = child;
                    break;
                case this.portlet.id + '_truncField':
                    this._truncField = child;
                    this._truncField.constraints.min = 1; // ensure this is positive
                    break;
                case this.portlet.id + '_btnOK':
                    this._btnOK = child;
                    break;
                case this.portlet.id + '_btnCancel':
                    this._btnCancel = child;
                    this._btnCancel.set('style', 'margin-left:10px;');
                    break;
                default:
                    //Add custom dijits to the widget editor
                    this[child.id] = child;
                    
                    if(!this.customOptions) {
                        this.customOptions = [];
                    }
                    
                    var splitValue = child.id.split(this.portlet.id);
                    if(splitValue.length == 2) {
                        if(splitValue[1].indexOf('_') == 0) {
                            splitValue[1] = splitValue[1].substring(1);
                        }
                        
                        this.customOptions.push({id: child.id, option: splitValue[1]});
                    }
                    
                    break;
            }
        },
        _validateOOTBRequired: function () {
            // Ent/Grp/Dim/Met require a lookup if change event 
            // not fired
            var retVal = true;
            if (this._entField && !this._entField.isValid()) {
                this._entField.set('state', 'Error');
                retVal = false;
            }
            if (this._grpField && !this._grpField.isValid()) {
                this._grpField.set('state', 'Error');
                retVal = false;
            }
            if (this._dimField && !this._dimField.isValid()) {
                this._dimField.set('state', 'Error');
                retVal = false;
            }
            if (this._metField && !this._metField.isValid()) {
                this._metField.set('state', 'Error');
                retVal = false;
            }
            return retVal;
        },
        toggle: function () {
            var that = this;
            var dashboardPage = dijit.byId(that.portlet._parentId);
            if(dashboardPage.permission) {
                // which fields do I have?
                if (!this._childWidgets) {
                    this._childWidgets = this.getChildren();
                    // cycle through and assign names for manipulation
                    // as we will have a limited number of types predefined
                    for (var i = 0, len = this._childWidgets.length; i < len; i++) {
                        this._setFields(this._childWidgets[i]);
                    }
                }
                // Shows and hides the Dialog box.
                if (!this.dialog) {
                    dojo.require("dijit.Dialog");
                    this.dialog = new dijit.Dialog({ title: this.title });
                    this.dialog.containerNode.style.height = this.dimensions[1] + "px";
                    if(!this.dialog.helpIcon) {
                        dojo.mixin(this.dialog, new _DialogHelpIconMixin());
                        this.dialog.createHelpIconByTopic('Using_Widgets');
                    }
                    
                    dojo.body().appendChild(this.dialog.domNode);
                    // Move this widget inside the dialog
                    this.dialog.containerNode.appendChild(this.domNode);
                    dojo.style(this.dialog.domNode, {
                        "width": this.dimensions[0] + "px",
                        "height": (this.dimensions[1] + 50) + "px"
                    });
                    dojo.style(this.domNode, "display", "");
                }
                // CLOSE the dialog
                if (this.dialog.open) {
                    // reset hydrate_check
                    this._hydrateChecked = false;
                    this.dialog.hide();
                } else {
                    // OPEN the dialog
                    // NOTE parentCell = this.portlet
                    var opts = this.portlet.widgetOptions;
                    this.dialog.show(this.domNode);
                    // hydrate title
                    if (opts.title && this._ttlField) {
                        var resourceTitleString = opts.title.replace(/'/g, '_').replace(/ /g, '_');
                        this._ttlField.set('value', widgetDefinition[resourceTitleString] || opts.title);
                    }
                    // Do I have an entity field?
                    if (this._entField) {
                        // Do not assume all four fields.  But if they are all there,
                        // their events will be chained to one another.
                        // set the change listeners
                        if (this._entField && !this._entChange) {
                            this._entChange = dojo.connect(this._entField,
                                "onChange", this, function (arg) {
                                    var fullEntityName = this._entField.item ? this._entField.item.fullName[0] : this._addEnt(arg),
                                        entityName = this._remEnt(fullEntityName);
                                    this._pushEnt(fullEntityName);
                                    opts.entity = fullEntityName;
                                    opts.resource = entityName;
                                    if (this._grpField) {
                                        this._grpField.set('store', this._getStore(this._grpUrl.apply({ grp: entityName })));
                                        this._grpField.store.urlPreventCache = true;
                                        this._grpField.set('value', '');
                                    }
                                    if (this._dimField) {
                                        this._dimField.set('store', this._getStore(this._dimUrl.apply({ dim: entityName })));
                                        this._dimField.set('value', '');
                                    }
                                    if (this._metField) {
                                        this._metField.set('store', this._getStore(this._metUrl.apply({ met: entityName })));
                                        this._metField.set('value', '');
                                    }
                                    this._checkHydrate();
                                });
                        }
                        if (this._grpField && !this._grpChange) {
                            this._grpChange = dojo.connect(this._grpField,
                                "onChange", this, function (arg) {
                                    if (!this._grpField.isValid()) {
                                        return false;
                                    }
                                    var store = this._grpField.store;
                                    store.fetch({
                                        query: { displayName: arg },
                                        onComplete: function (i, r) {
                                            var gn = store.getValue(
                                                i[0], 'groupName');
                                            that._pushGrp(gn);
                                            opts.groupname = gn;
                                        },
                                        queryOptions: { deep: true }
                                    });
                                });
                        }
                        if (this._dimField && !this._dimChange) {
                            this._dimChange = dojo.connect(this._dimField,
                                "onChange", this, function (arg) {
                                    if (!this._dimField.isValid()) {
                                        return false;
                                    }
                                    var store = this._dimField.store;
                                    store.fetch({
                                        query: { displayName: arg },
                                        onComplete: function (i, r) {
                                            var n = store.getValue(
                                                i[0], 'name');
                                            that._pushDim(n);
                                            opts.dimension = n;
                                        },
                                        queryOptions: { deep: true }
                                    });
                                });
                        }
                        if (this._metField && !this._metChange) {
                            this._metChange = dojo.connect(this._metField,
                                "onChange", this, function (arg) {
                                    if (!this._metField.isValid()) {
                                        return false;
                                    }
                                    var store = this._metField.store;
                                    store.fetch({
                                        query: { displayName: arg },
                                        onComplete: function (i, r) {
                                            var m = store.getValue(
                                                i[0], 'name');
                                            that._pushMet(m);
                                            opts.metric = m;
                                        },
                                        queryOptions: { deep: true }
                                    });
                                });
                        }
                        // hydrate the ent field if defined
                        if (opts.entity) {
                            if(this._originalEntity) {
                                if(this._originalEntity === opts.entity) {
                                    this._checkHydrate();
                                }
                                else {
                                    this._entField.set('value',
                                        this._remEnt(this._originalEntity));
                                }
                            }
                            else {
                                this._entField.set('value',
                                    this._remEnt(opts.entity));
                                this._originalEntity = opts.entity;
                            }                        
                        }
                    } // end ent/grp/dim/met
                    // hydrate subtitle
                    if (this._subField) {
                        if (opts.subtitle) {
                            this._subField.set('value',
                            opts.subtitle);
                        }
                        else {
                            this._subField.set('value', '');
                        }
                    }
                    // hydrate axes
                    if (this._xField) {
                        if (opts.xAxisName) {
                            this._xField.set('value',
                            opts.xAxisName);
                        }
                        else {
                            this._xField.set('value', '');
                        }
                    }
                    if (this._yField) {
                        if (opts.yAxisName) {
                            this._yField.set('value',
                            opts.yAxisName);
                        }
                        else {
                            this._yField.set('value', '');
                        }
                    }
                    if (this._numberMaximum) {
                        if(opts.numberMaximum) {
                            this._numberMaximum.set('value',
                                opts.numberMaximum);
                        }
                        else {
                            this._numberMaximum.set('value', '10');
                        }
                    }
                    // hydrate goal
                    if (this._goalField) {
                        if (opts.goal) {
                            this._goalField.set('value',
                            opts.goal);
                        }
                        else {
                            this._goalField.set('value', '');
                        }
                    }
                    // do I have a radio Other?
                    if (this._rdoOthY) {
                        if (!opts.combineother) {
                            this._rdoOthN.set('checked', true);
                        } else {
                            if (opts.combineother === 'true') {
                                this._rdoOthY.set('checked', true);
                            } else {
                                this._rdoOthN.set('checked', true);
                            }
                        }
                    }
                    // do I have a radio Legend?
                    if (this._rdoLegY) {
                        if (!opts.showLegend) {
                            this._rdoLegN.set('checked', true);
                        } else {
                            if (opts.showLegend === 'true') {
                                this._rdoLegY.set('checked', true);
                            } else {
                                this._rdoLegN.set('checked', true);
                            }
                        }
                    }
                    // do I have a radio Labels?
                    if (this._rdoLabY) {
                        if (!opts.showLabels) {
                            this._rdoLabN.set('checked', true);
                        } else {
                            if (opts.showLabels === 'true') {
                                this._rdoLabY.set('checked', true);
                            } else {
                                this._rdoLabN.set('checked', true);
                            }
                        }
                    }
                    // do I have a radio truncate?
                    if (this._rdoTruY) {
                        if (!opts.truncLabels) {
                            this._rdoTruN.set('checked', true);
                        } else {
                            if (opts.truncLabels === 'true') {
                                this._rdoTruY.set('checked', true);
                            } else {
                                this._rdoTruN.set('checked', true);
                            }
                        }
                    }
                    // hydrate trunc number
                    if (this._truncField) {
                        if (opts.truncNum) {
                            this._truncField.set('value',
                            opts.truncNum);
                        }
                        else {
                            this._truncField.set('value', '');
                        }
                    }
                    // hydrate custom options
                    if(this.customOptions) {
                        for(var i = 0; i < this.customOptions.length; i++) {
                            // TO-DO: check control type, as setting of the Value could be different
                            //        if this isn't a TextBox-style control
                            var optionName = this.customOptions[i].option,
                                optionId = this.customOptions[i].id;
                            if(opts[optionName]) {
                                this[optionId].set('value', opts[optionName]);
                            }
                        }
                    }
                    
                    //Run any 'API' init methods.             
                    for (var i = 0; i < this._childWidgets.length; i++) {
                        if (this._childWidgets[i]._myEditRowInit) {
                            this._childWidgets[i]._myEditRowInit(opts);
                        }
                    }

                    //OK and Cancel buttons
                    if (!this._cancelClick) {
                        this._cancelClick = dojo.connect(this._btnCancel, 'onClick',
                            this, function () {
                                //Run any 'API' cancel methods.             
                                for (var i = 0; i < this._childWidgets.length; i++) {
                                    if (this._childWidgets[i]._myEditRowCancel) {
                                        this._childWidgets[i]._myEditRowCancel(opts);
                                    }
                                }
                                //Close dialog.
                                this.toggle();
                                // If you are cancelling the initial configuration of the widget we are going 
                                // to clean it up for you.  We don't want non-configured widgets hanging around.
                                if (this.portlet.isNew) {
                                    this.portlet.onClose();
                                    this.portlet.destroy();
                                }
                            });
                    }
                    if (!this._okClick) {
                        this._okClick = dojo.connect(this._btnOK, 'onClick',
                            this, function () {
                                var _uri = ['slxdata.ashx/slx/crm/-/analytics?'];
                                // assume a title field
                                if (this._ttlField) {
                                    if(!this._ttlField.isValid()) { return false; }
                                    var nTitle = this._ttlField.get('value');
                                    var resourceTitleString = opts.title.replace(/'/g, '_').replace(/ /g, '_');
                                    
                                    if (nTitle) {
                                        this.portlet.set('title', nTitle);
                                        
                                        if(nTitle != widgetDefinition[resourceTitleString]) {
                                            opts.title = nTitle;
                                        }
                                    }
                                }
                                if (this._subField) {
                                    var sub = this._subField.get('value');
                                    if (sub) {
                                        opts.subtitle = sub;
                                    }
                                    else {
                                        opts.subtitle = '';
                                    }
                                    if (!this._subField.isValid()) { return false; }
                                }
                                if (this._xField) {
                                    var xa = this._xField.get('value');
                                    if (xa) {
                                        opts.xAxisName = xa;
                                    }
                                    else {
                                        opts.xAxisName = '';
                                    }
                                    if (!this._xField.isValid()) { return false; }
                                }
                                if (this._yField) {
                                    var ya = this._yField.get('value');
                                    if (ya) {
                                        opts.yAxisName = ya;
                                    }
                                    else {
                                        opts.yAxisName = '';
                                    }
                                    if (!this._yField.isValid()) { return false; }
                                }
                                if(this._numberMaximum) {
                                    var maximum = this._numberMaximum.get('value');
                                    if(maximum) {
                                        opts.numberMaximum = maximum;
                                    }
                                    else {
                                        opts.numberMaximum = '5';
                                    }
                                    this._pushLim(opts.numberMaximum);
                                    if(!this._numberMaximum.isValid()) { return false; }
                                }
                                if (this._goalField) {
                                    var gl = this._goalField.get('value');
                                    if (gl) {
                                        opts.goal = gl;
                                    }
                                    else {
                                        opts.goal = '';
                                    }
                                    if (!this._goalField.isValid()) { return false; }
                                }
                                if (this._rdoLabY) {
                                    var labChkY = this._rdoLabY.get('value');
                                    if (labChkY) {
                                        opts.showLabels = 'true';
                                    } else {
                                        opts.showLabels = 'false';
                                    }
                                }
                                if (this._rdoTruY) {
                                    var truChkY = this._rdoTruY.get('value');
                                    if (truChkY) {
                                        opts.truncLabels = 'true';
                                    } else {
                                        opts.truncLabels = 'false';
                                    }
                                }
                                if (this._rdoOthY) {
                                    var othChkY = this._rdoOthY.get('value');
                                    if (othChkY) {
                                        opts.combineother = 'true';
                                        this._pushOth('true');
                                    } else {
                                        opts.combineother = 'false';
                                        this._pushOth('false');
                                    }
                                }
                                if (this._rdoLegY) {
                                    var legChkY = this._rdoLegY.get('value');
                                    if (legChkY) {
                                        opts.showLegend = 'true';
                                    } else {
                                        opts.showLegend = 'false';
                                    }
                                }
                                if (this._truncField) {
                                    var num = this._truncField.get('value');
                                    if (num) {
                                        opts.truncNum = num;
                                    }
                                    if (!this._truncField.isValid()) { return false; }
                                }

                                if (!this._validateOOTBRequired()) { return false; }

                                if (this._grpField) {
                                    if (!this._grpStr) {
                                        this._grpField.store.fetch({
                                            query: { displayName: this._grpField.get('value') },
                                            onComplete: function (i, r) {
                                                that._pushGrp(that._grpField.store.getValue(
                                                    i[0], 'groupName'));
                                            },
                                            queryOptions: { deep: true }
                                        });
                                    }
                                }
                                if (this._dimField) {
                                    if (!this._dimStr) {
                                        this._dimField.store.fetch({
                                            query: { displayName: this._dimField.get('value') },
                                            onComplete: function (i, r) {
                                                that._pushDim(that._dimField.store.getValue(
                                                    i[0], 'name'));
                                            },
                                            queryOptions: { deep: true }
                                        });
                                    }
                                }
                                if (this._metField) {
                                    if (!this._metStr) {
                                        this._metField.store.fetch({
                                            query: { displayName: this._metField.get('value') },
                                            onComplete: function (i, r) {
                                                that._pushMet(that._metField.store.getValue(
                                                    i[0], 'name'));
                                            },
                                            queryOptions: { deep: true }
                                        });
                                    }
                                }
                                
                                if(this.customOptions) {
                                    for(var i = 0; i < this.customOptions.length; i++) {
                                        var optionName = this.customOptions[i].option,
                                            optionId = this.customOptions[i].id;
                                        opts[optionName] = this[optionId].value;
                                    }
                                }

                                //Run any 'API' save methods.             
                                for (var i = 0; i < this._childWidgets.length; i++) {
                                    if (this._childWidgets[i]._myEditRowSave) {
                                        this._childWidgets[i]._myEditRowSave(opts);
                                    }
                                }

                                if (this._dimStr) { _uri.push(this._dimStr); } // Dimension 
                                if (this._metStr) { _uri.push(this._metStr); } // Metric
                                if (this._entStr) { _uri.push(this._entStr); } // Entity
                                if (this._grpStr) { _uri.push(this._grpStr); } // Group
                                if (this._limStr) { _uri.push(this._limStr); }
                                if (this._othStr) { _uri.push(this._othStr); }
                                opts.datasource = this._remAmp(_uri.join(''));
                                //console.log(this._remAmp(_uri.join('')));
                                dojo.publish('/ui/dashboard/pageSave', [this.portlet._page]);
                                // Editor values have been posted. 
                                // Now the portlet is no longer new.
                                if (this.portlet.isNew) {
                                    this.portlet.isNew = false;
                                }
                                this.portlet.refresh(true);
                                // close the editor
                                this.toggle();
                            });
                    }
                }
            }
            else {
                dashboardPage._raisePermissionInvalidMessage();
            }
        }
    });

    return widget;
});
},
'Sage/QuickForms/Design/ColumnDesigner':function(){
define("Sage/QuickForms/Design/ColumnDesigner", [
    'dojo/string',
    'dojo/topic',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dijit/_WidgetBase',
    './Editors/ColumnBasicPropertyEditor',
    'dojo/i18n!./nls/ColumnDesigner'
], function(
    string,
    topic,
    declare,
    lang,
    array,
    _WidgetBase,
    ColumnBasicPropertyEditor,
    localization
) {
    /* todo: non visible designers should not need to inherit from _WidgetBase, but require full attribute support, more than Stateful provides */
    return declare('Sage.QuickForms.Design.ColumnDesigner', [_WidgetBase], {
        /**
         * The bound entry (from SData) pertaining to the QuickForm.
         */
        entry: null,
        editors: [
            ColumnBasicPropertyEditor
        ],

        helpTopicName: 'Column_properties',

        displayNameText: 'Column',

        constructor: function() {
            lang.mixin(this, localization);
        },

        set: function(name, value) {
            var result = this.inherited(arguments);

            var names = this._getAttrNames(name),
                setter = this[names.s];

            if (lang.isFunction(setter))
            {
                topic.publish('/quickforms/design/designerModified', this, name, value, result, this);
            }

            return result;
        },
        _getWidthAttr: function() {
            return lang.getObject('Width', false, this.entry);
        },
        _setWidthAttr: function(value) {
            lang.setObject('Width', value, this.entry);
        },
        _getSizeTypeAttr: function() {
            return lang.getObject('SizeType', false, this.entry);
        },
        _setSizeTypeAttr: function(value) {
            lang.setObject('SizeType', value, this.entry);
        }
    });
});
},
'Sage/UI/Controls/DropDownSelectPickList':function(){
require({cache:{
'url:Sage/UI/Controls/templates/DropDownSelectPickList.html':"<div>\r\n    <select id=\"${id}-Select\" data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" dojoAttachPoint=\"comboBox\" value=\"${value}\" dojoAttachEvent=\"onBlur: _onBlur,onChange:_onChange\">\r\n    </select>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/DropDownSelectPickList", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/_Widget',
       'dijit/form/ComboBox',
       'dojo/data/ItemFileReadStore',
       'dojo/data/ObjectStore',
       'dojo/store/Memory',
       'Sage/UI/ComboBox',
       'Sage/UI/Controls/PickList',
       'dojo/_base/array',
       'dojo/text!./templates/DropDownSelectPickList.html',
       'dojo/_base/declare'
],
function (_TemplatedMixin, _WidgetsInTemplateMixin, _Widget, comboBox, itemFileReadStore, objectStore, memory, sageComboBox, pickList, array, template, declare) {
    /**
     * @class Class for dropdown select picklists. Used in search condition widgets.
     */
    var widget = declare('Sage.UI.Controls.DropDownSelectPickList', [pickList, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {

        /**
         * Takes the following options object: 
         * {
         *  pickListName: 'PickListName', // Required
         *  storeOptions: {}, // Optional
         *  dataStore: {}, // Option
         *  canEditText: false,
         *  itemMustExist: true,
         *  maxLength: -1,
         *  storeMode: 'text', // text, id, code
         *  sort: true,
         *  displayMode: 'AsControl',
         *  clientId: 'ASP.NET Control ClientID Here',
         *  required: false
         * }
         *
         * @constructor
         */
        constructor: function(options) {
            if(options.clientId) {
                this.id = options.clientId + '-DropDownSelectPickList';
            }
            
            this.inherited(arguments);
        },
        postCreate: function () {            
            this.inherited(arguments);
        },
        _onChange: function (newVal) {
            this.onChange(newVal);
        },
        _loadData: function() {
            var def = new dojo.Deferred();
            this.getPickListData(def);

            def.then(dojo.hitch(this, function(data) {
                if(typeof data === 'string') {
                    this.comboBox.set('value', data);
                }

                var items = [];
                for(var i = 0; i < data.items.$resources.length; i++) {
                    var item = data.items.$resources[i];
                    items.push({
                        id: item.$key,
                        code: item.code,
                        number: item.number,
                        text: item.text
                    });
                }

                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };

                var tempStore = new itemFileReadStore({data: this.storeData});
                this.comboBox.set('store', tempStore);
                this.comboBox.set('searchAttr', 'text');

            }), function(e) {
                // errback
                console.error(e);
            });
        },
        uninitialize: function() {
            this.inherited(arguments);
        },
        _getValueAttr: function() {
            var results = this.comboBox.get('value');
            
            if (this.storeMode === 'id') {
                array.forEach(this.storeData.items, function (item) {
                    // donotlint
                    if (results == item.text) {
                        results = item.id;
                    }
                }, this);
            }
            return results;
        },
        _setPickListNameAttr: function(value) {
            this.inherited(arguments);
            this._loadData();
        },
        value: '',
        // Display properties
        templateString: template,
        widgetsInTemplate: true,

        /**
         * @property {object} storeData Data fetched from SData stored here.
         */
        storeData: null,

        // TODO: Remove
        /**
         * @property {string} lastValidValue Last valid value entered into the control.
         */
        lastValidValue: '',
        onChange: function (newVal) { }
    });

    return widget;
});


},
'Sage/UI/SLXPreviewGrid':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SLXPreviewGrid", [
        './SLXPreviewGrid/Grid',
        './SLXPreviewGrid/FilterPanel',
        './SLXPreviewGrid/Filter/DateRange',
        './SLXPreviewGrid/Filter/Text'
],
function (Grid, FilterPanel, DateRange, Text) {
    // Dirty hack because SLXPreviewGrid was not done properly.
    return {
        Grid: Grid,
        FilterPanel: FilterPanel,
        Filter: {
            DateRange: DateRange,
            Text: Text
        }
    };
});

},
'Sage/QuickForms/Design/EmailControlDesigner':function(){
define("Sage/QuickForms/Design/EmailControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    './TextBoxControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/TextBoxBasicPropertyEditor',
    './Editors/TextBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/EmailControlDesigner'
], function(
    declare,
    array,
    lang,
    TextBoxControlDesigner,
    LayoutPropertyEditor,
    TextBoxBasicPropertyEditor,
    TextBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.EmailControlDesigner', [TextBoxControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            TextBoxBasicPropertyEditor,
            TextBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %} design-email" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="design-email-icon"></div>',
            '</div>',
            '</div>'
        ]),

        helpTopicName: 'Email_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXEmail, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Email',

        constructor: function() {
            lang.mixin(this, localization);
        }
    });
});
},
'Sage/Utility/PickList':function(){
/*globals Sage, window, define, sessionStorage */
define("Sage/Utility/PickList", [
        'dojo/_base/lang',
        'dojo/_base/declare',
        'Sage/Data/SDataServiceRegistry',
        'dojo/json',
        './_LocalStorageMixin',
        '../Utility'
],
function (lang, declare, SDataServiceRegistry, json, _LocalStorageMixin, util) {
    var PickListUtil = declare('Sage.Utility.PickList', [_LocalStorageMixin], {
        _storageNameSpace: 'PickListData',
        checkStaleCache: function () {
            //console.log('checkStaleCache start');
            var modifiedAt = this.getFromLocalStorage('modified_at', this._storageNameSpace);
            var alreadyChecked = sessionStorage.getItem("PickListChangeStateCheck");
            if (modifiedAt && alreadyChecked === null) {
                //console.log('we have not checked the server yet, checking now..');
                modifiedAt = new Date(Date.parse(modifiedAt));

                var service, request, entry, data;
                data = sessionStorage.getItem('pickListExpireCheck');

                if (data === null) {
                    service = SDataServiceRegistry.getSDataService('system');

                    request = new Sage.SData.Client.SDataServiceOperationRequest(service);
                    request.setOperationName('getPickListsChangeState');

                    request.execute({}, {
                        success: lang.hitch(this, function (data) {
                            if (!data || !data.response || !data.response.lastModifiedDate) {
                                return;
                            }

                            var lastModifiedServer = util.Convert.toDateFromString(data.response.lastModifiedDate);
                            //console.log('Last modified from server: ', lastModifiedServer);
                            if (this._isLocalStorageExpired(modifiedAt, lastModifiedServer)) {
                                //console.log('Last modified on server is newer than local storage, clearing cache.');
                                this.clear(this._storageNameSpace);
                            }
                        })
                    });

                    // Indicate we already ran the check
                    sessionStorage.setItem("PickListChangeStateCheck", "true");
                } 
            }
        },
        _isLocalStorageExpired: function(localStorageDate, serverDate) {
            localStorageDate.setSeconds(0);
            serverDate.setSeconds(0);
            localStorageDate.setMilliseconds(0);
            serverDate.setMilliseconds(0);
            return serverDate.valueOf() >= localStorageDate.valueOf();
        },
    });

    Sage.namespace('Utility.PickList');
    lang.mixin(Sage.Utility.PickList, new PickListUtil());
    return Sage.Utility.PickList;
});

},
'Sage/UI/Dashboard/BaseWidget':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/BaseWidget", [
    'Sage/UI/Dashboard/BaseWidget',
    'Sage/Utility',
    'dojo/i18n',
    'Sage/UI/EditorContainer',
    'dojo/_base/declare',
    'dojo/i18n!./nls/WidgetDefinition'
],
function (baseWidget, util, i18n, editorContainer, declare) {
    //dojo.requireLocalization("Sage.UI.Dashboard", "WidgetDefinition");
    var widget = declare('Sage.UI.Dashboard.BaseWidget', null, {
        constructor: function (def) {
            dojo.safeMixin(this, def);
        },
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "WidgetDefinition"));
            this.inherited(arguments);
        },
        family: 'System',
        prefHeight: 0.33,
        timestamp: true,
        _getEditorString: function (config, _id) {
            var _widgetDefinitionResource = i18n.getLocalization("Sage.UI.Dashboard", "WidgetDefinition");
            var localizedWidgetName = _widgetDefinitionResource[this.name];

            if (localizedWidgetName) {
                localizedWidgetName += ' ' + _widgetDefinitionResource["settingsText"];  // "[Widget Name]" + " Settings"
            }
            else {
                localizedWidgetName = _widgetDefinitionResource["defaultWidgetText"]; // default to "Edit Widget Settings" if resource not found
            }

            // make a new table container with the config
            config._pcid = _id;
            var cont = new editorContainer(config);
            if (!cont) {
                console.warn('hit...');
            }
            if(this._editorTpl) {
                return this._editorTpl.apply({
                    title: localizedWidgetName,
                    id: _id + '_editor',
                    content: cont.doTemplate()
                });
            }
            
            return '';
        }
    });
    
    return widget;
});
},
'Sage/TaskPane/ActivityTaskConfigurationProvider':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/ActivityTaskConfigurationProvider", [
    'Sage/Services/_ServiceMixin',
    'Sage/_ConfigurationProvider',
    'Sage/Services/ActivityService',
    'Sage/TaskPane/ActivityTaskContents',
    'Sage/TaskPane/ActivityTaskPaneItem',
    'dojo/on',
    'dojo/_base/lang',
    'dojo/i18n!./nls/ActivityTaskConfigurationProvider',
    'dojo/_base/declare'
],
    function (
      _ServiceMixin,
       _ConfigurationProvider,
       ActivityService,
       ActivityTaskContents,
       ActivityTaskPaneItem,
       on,
       lang,
       locResources,
       declare
    ) {

        var activityTaskConfigurationProvider = declare('Sage.TaskPane.ActivityTaskConfigurationProvider', [_ConfigurationProvider, _ServiceMixin], {
            serviceMap: {
                'groupContextService': 'ClientGroupContext'
            },
            _roleSecurityService: null,
            _currentUserId: null,
            //Localization 
            scheduleText: 'Schedule',
            eventText: 'Event',
            phoneCallText: 'Phone Call',
            toDoText: 'To-Do',
            meetingText: 'Meeting',
            personalActivityText: 'Personal Activity',
            deleteConfirmationText: 'Delete Confirmation',
            acceptConfirmationText: 'Accept Confirmation',
            declineConfirmationText: 'Decline Confirmation',
            completeActivityText: 'Complete Activity',
            deleteActivityText: 'Delete Activity',
            deleteEventText: 'Delete Event',
            scheduleEventText: 'Schedule Event',
            scheduleRequestText: 'Schedule Request',
            deleteRequestText: 'Delete Request',
            recordsSelectedText: 'record(s) selected',
            clearText: 'Clear',
            //End Localization
            actionNameSpace: 'Sage.TaskPane.ActivityTaskPaneActions',
            _taskConfigs: false,
            constructor: function (options) {

                lang.mixin(this, locResources);
                this.inherited(arguments);
                this._subscribes.push(dojo.subscribe('/group/context/changed', this, this._onGroupContextChanged));

                var clientContextSvc = Sage.Services.getService('ClientContextService');
                if (clientContextSvc) {
                    if (clientContextSvc.containsKey("userID")) {
                        this._currentUserId = clientContextSvc.getValue("userID");
                    }
                }
                this._roleSecurityService = Sage.Services.getService('RoleSecurityService');
            },


            _onGroupContextChanged: function () {
                this.onConfigurationChange();
            },
            onConfigurationChange: function () {
            },
            _createConfiguration: function () {
                var configuration;
                var groupContext = this.groupContextService && this.groupContextService.getContext();
                var groupId = groupContext && groupContext['CurrentGroupID'];
                var taskConfig = this.getTaskConfiguration(groupId);

                var taskPane = new ActivityTaskContents({
                    taskTemplate: taskConfig.configuration.taskTemplate
                });
                taskPane.startup();

                var configuration2 = {
                    tabId: taskConfig.configuration.key,
                    taskPane: taskPane
                };

                return configuration2;
            },
            getTaskConfiguration: function (key) {

                var taskconfigs = this.getTaskConfigurations();
                for (var i = 0; i < taskconfigs.length; i++) {
                    if (taskconfigs[i].key.toUpperCase() === key.toUpperCase()) {
                        return taskconfigs[i];
                    }
                }
                var defaultConfig = {
                    key: 'default',
                    configuration: this._getDefaultConfig()
                };
                return defaultConfig;
            },

            getTaskConfigurations: function () {
                if (this._taskConfigs) {
                    return this._taskConfigs;
                }
                this._taskConfigs = [
                    {
                        key: 'activities',
                        configuration: this._getActivityConfig()
                    }, {
                        key: 'allopen',
                        configuration: this._getActivityConfig()
                    }, {
                        key: 'pastdue',
                        configuration: this._getPastDueConfig()
                    }, {
                        key: 'alarms',
                        configuration: this._getAlarmConfig()
                    }, {
                        key: 'events',
                        configuration: this._getEventConfig()
                    }, {
                        key: 'confirmations',
                        configuration: this._getConfirmConfig()
                    }, {
                        key: 'literature',
                        configuration: this._getLitRequestConfig()
                    }
                ];

                return this._taskConfigs;
            },
            _getTaskTemplateString: function (taskItems, selectionText) {
                var ts = [];
                ts.push('<div class="task-pane-item-common-tasklist">');
                ts.push('<span id="selectionCount" class="task-pane-item-common-selectionText"> 0 </span><span id="selectionText"> ' + this.recordsSelectedText + '</span><br>');
                ts.push('<a id="clearSelection" href="#" class="task-pane-item-common-clearselection" dojoAttachEvent="click:_clearSelection">' + this.clearText + '</a><br>');
                ts.push('<hr>');
                for (var i = 0; i < taskItems.length; i++) {
                    var task = taskItems[i];
                    var actionNameSpace = this.actionNameSpace;
                    if (task.actionNameSpace) {
                        actionNameSpace = task.actionNameSpace;
                    }

                    if (task.template) {
                        ts.push(task.template);
                    } else {
                        ts.push("<li>");
                        var style = "";
                        if (task.style) {
                            style = task.style;
                        }
                        ts.push(dojo.string.substitute('<div dojotype="Sage.TaskPane.ActivityTaskPaneItem" class="task-pane-item-common-tasklist" style="${4}"  linkText="${3}" securedAction="${4}" action="javascript: ${1}.${2}"></div>', [task.taskId, actionNameSpace, task.action, task.displayName, task.securedAction, style]));
                    }

                }
                ts.push('</div>');
                return ts;
            },

            _getCommonTasks: function () {
                var taskItems = [];
                return taskItems;

            },
            _getCommonActivityTasks: function () {
                var taskItems = this._getCommonTasks();
                taskItems.push({ template: "<div class='slxLabel'>" + this.scheduleText + "</div>" });
                taskItems.push({ template: "<div style='padding-left:15px;'>" });
                taskItems.push({ taskId: 'SchedulePhoneCall', type: "Link", displayName: this.phoneCallText, action: 'schedulePhoneCall();', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ taskId: 'ScheduleMeeting', displayName: this.meetingText, action: 'scheduleMeeting()', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ taskId: 'ScheduleToDo', type: "Link", displayName: this.toDoText, action: 'scheduleToDo();', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ taskId: 'SchedulePersonal', type: "Link", displayName: this.personalActivityText, action: 'schedulePerosnalActivity();', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ template: "</div>" });
                taskItems.push({ taskId: 'Complete', type: "Link", displayName: this.completeActivityText, action: 'completeActivity();', securedAction: '' });
                taskItems.push({ taskId: 'Delete', type: "Link", displayName: this.deleteActivityText, action: 'deleteActivity();', securedAction: '' });
                return taskItems;

            },
            _getActivityConfig: function (entry, options) {
                var taskItems = this._getCommonActivityTasks();
                var selectionText = "Activities";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'activities',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },
            _getPastDueConfig: function (entry, options) {
                var taskItems = this._getCommonActivityTasks();
                var selectionText = "Past Due";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'PastDue',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },
            _getAlarmConfig: function (entry, options) {
                var snoozeTemplateString = '<div>Test</div>';
                var taskItems = this._getCommonActivityTasks();
                var selectionText = "Alarms";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'Alarms',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },

            _getLitRequestConfig: function (entry, options) {

                var taskItems = this._getCommonTasks();
                //taskItems.push({template:"<div class='slxLabel'>" + this.scheduleText +"</div>"});
                taskItems.push({ taskId: 'ScheduleLitRequest', displayName: this.scheduleRequestText, action: 'scheduleLitRequest();', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ taskId: 'DeleteRequest', displayName: this.deleteRequestText, action: 'deleteLitRequest();', securedAction: '' });
                var selectionText = "Litature Requests";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'LitRequests',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },
            _getEventConfig: function (entry, options) {

                var taskItems = this._getCommonTasks();
                // taskItems.push({template:"<div class='slxLabel'>" + this.scheduleText +"</div>"});
                taskItems.push({ taskId: 'ScheduleEvent', displayName: this.scheduleEventText, action: 'scheduleEvent();', securedAction: '', style: 'padding-left:15px;' });
                taskItems.push({ taskId: 'DeleteEvent', displayName: this.deleteEventText, action: 'deleteEvent();', securedAction: '' });
                var selectionText = "Events";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'Events',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },
            _getConfirmConfig: function (entry, options) {

                var taskItems = this._getCommonTasks();
                taskItems.push({ taskId: 'AcceptConfirmation', displayName: this.acceptConfirmationText, action: 'acceptConfirmation();', securedAction: '' });
                taskItems.push({ taskId: 'DeclineConfirmation', displayName: this.declineConfirmationText, action: 'declineConfirmation();', securedAction: '' });
                taskItems.push({ taskId: 'DeleteConfirmation', displayName: this.deleteConfirmationText, action: 'deleteConfirmation();', securedAction: '' });
                var selectionText = "Confirmations";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'Confirmations',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },
            _getDefaultConfig: function (entry, options) {
                var taskItems = {};
                var selectionText = "Default";
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: 'Default',
                    taskTemplate: taskTemplate
                };

                return configuration;
            },

            buildTaskConfiguration: function (key, selectionText, taskItems) {
                var templateString = this._getTaskTemplateString(taskItems, selectionText);
                var taskTemplate = new Simplate(templateString);
                var configuration = {
                    key: key,
                    taskTemplate: taskTemplate
                };

                return configuration;

            },
            addTaskConfiguration: function (taskConfiguration) {
                var config = this.getTaskConfiguration(taskConfiguration.key);
                if (config.key === 'default') {
                    var newConfiguration = {
                        key: taskConfiguration.key,
                        configuration: taskConfiguration
                    };
                    var taskConfigs = this.getTaskConfigurations();
                    taskConfigs.push(newConfiguration);
                } else {

                    config.configuration = taskConfiguration;
                }

            },
            requestConfiguration: function (options) {
                this._onRequestConfigurationSuccess(options, null);
            },
            _onRequestConfigurationSuccess: function (options, entry) {
                if (options.success) {
                    options.success.call(options.scope || this, this._createConfiguration(entry, options), options, this);
                }
                this._createConfiguration(entry, options);
            },
            _onRequestConfigurationFailure: function (options, response) {
                if (options.failure) {
                    options.failure.call(options.scope || this, response, options, this);
                }
            },

            _scheduleMeeting: function (event) {

            }


        });

        return activityTaskConfigurationProvider;

    });
},
'Sage/UI/nls/ListPanel':function(){
define("Sage/UI/nls/ListPanel", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            listText: 'List',
            summaryText: 'Summary',
            detailText: 'Detail',
            hideDetailText: 'Hide Detail',
            unsavedDataText: '*unsaved data',
            helpText: 'Help',
            refreshText: 'Refresh',
            displayingText: 'Displaying',
            ofText: 'of'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/ActivityScheduler':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define(
    "Sage/UI/ActivityScheduler", ['dojo/i18n',
        'dojo/date',
        'dijit/Menu',
        'Sage/Data/SingleEntrySDataStore',
        'Sage/Data/SDataServiceRegistry',
        'Sage/Utility/UserOptions',
        'Sage/Utility/Activity',
        'Sage/Utility',
        'Sage/MainView/ActivityMgr/OccurrenceOrSeriesQueryDlg',
        'dojo/i18n!./nls/ActivityScheduler',
        'dojo/_base/declare',
         'dojo/_base/lang',
        'dojo/string'

     ],
    function (i18n, dojoDate, dijitMenu, singleEntrySDataStore, sDataServiceRegistry, userOptionsUtility, activityUtility, utility, occurrenceOrSeriesQueryDlg, nlsResource, declare, dojoLang, dstring) {

        var activityScheduler = declare('Sage.UI.ActivityScheduler', null, {
            _weekStart: null,
            _scheduler: null,
            _schedulerId: 'slxLogixScheduler',
            schedulerContextMenu: null,
            eventConnections: [],
            _menuItems: null,
            _contentWindow: null,
            _iFrameId: null,
            _userOptions: {},
            _schedulerLaunched: false,
            self: this,
            _recurringIcon: '../../images/icons/recurring_14x14.png',
            _attachmentIcon: '../../images/icons/attach_14x14.png',
            _alarmIcon: '../../images/icons/alarm_14x14.png',
            _activityCompleteIcon: '../../images/icons/completed_step_14x14.png',
            _userActivityData: {},
            _currentActivity: {},
            _securityAccessData: [],
            constructor: function (schedulerInstance, schedulerId, contentWindow, iFrameId) {
                dojoLang.mixin(this, nlsResource);
                this._userOptions = {
                    daystarttime: '9',
                    dayendtime: '6',
                    defaultactivity: 'meeting',
                    starttime: '8',
                    endtime: '5',
                    weekstart: '1',
                    numevents: '3',
                    defaultcalendarview: 'month',
                    defaultinterval: 15,
                    displaycontactaccount: '0',
                    rememberusers: true,
                    workweekmon: true,
                    workweektue: true,
                    workweekwed: true,
                    workweekthu: true,
                    workweekfri: true,
                    workweeksat: false,
                    workweeksun: false,
                    workweek: [1, 2, 3, 4, 5],
                    showonopportunities: false,
                    showonregarding: false,
                    showonphonenumber: false,
                    showontime: false
                };

                _scheduler = contentWindow.scheduler; // schedulerInstance;
                _schedulerId = schedulerId;
                this._menuItems = [];
                this._contentWindow = contentWindow;
                this._iFrameId = iFrameId;
                this._preloadCalendarUserOptions();
                var self = this;
                dojo.subscribe("/entity/activity/updateScheduler", function (data) {
                    self._updateSchedulerEvent(data);
                });

                dojo.subscribe("/entity/activity/clearScheduler", function () {
                    self._clearScheduler();
                });

                dojo.subscribe("/entity/activity/addToScheduler", function (data) {
                    self._addSchedulerEvent(data);
                });

                dojo.subscribe("/entity/activity/deleteFromScheduler", function (id) {
                    if (id) {
                        //The activity can be deleted from activity dialog and from context menu on calendar
                        //Delete from activity dialog returns id, delete from activity service doesnt return id
                        if (id.indexOf("result") == -1)
                            self._deleteSchedulerEvent(id);
                    }
                });


            },
            _loadAllEvents: function (data) {
                setTimeout(function () { this._scheduler.parse(data, "json"); }, 100);
            },
            _addSchedulerEvent: function (data) {
                if (data != null) {

                    var dataObj = dojo.clone(data);

                    var jsonObj = [];
                    jsonObj.push(dataObj);
                    self._scheduler.parse(jsonObj, "json");
                }
            },
            _updateSchedulerEvent: function (data) {
                if (data != null) {
                    var dataObj = dojo.clone(data);
                    //Remove the updated activity/event from scheduler and parse the updated object
                    self._scheduler.deleteEvent(dataObj.id);
                    var jsonObj = [];
                    jsonObj.push(dataObj);
                    self._scheduler.parse(jsonObj, "json");
                }
            },
            _deleteSchedulerEvent: function (activityId) {
                _scheduler.deleteEvent(activityId);
            },
            _setCurrentDate: function (date) {
                _scheduler.setCurrentView(date);
            },
            _getSchedulerDate: function () {
                return _scheduler._date;
            },
            _launchScheduler: function () {
                _scheduler.init(_schedulerId, new Date(), this._userOptions['defaultcalendarview']);
                this._schedulerLaunched = true;
                this._userOptions["date"] = _scheduler.date;
                this._userOptions["weekStartDate"] = _scheduler._week_min_date;
                this._userOptions["weekEndDate"] = _scheduler._week_max_date;
                this._userOptions["workWeekStartDate"] = _scheduler._workweek_min_date;
                this._userOptions["workWeekEndDate"] = _scheduler._workweek_max_date;
                dojo.publish('/entity/activity/SchedulerCreated', [this._userOptions, this]);

            },
            _clearScheduler: function () {
                _scheduler.clearAll();
            },
            _clearSchedulerEvents: function (data) {
                if (data) {
                    for (var i = 0; i < data.length; i++) {
                        _scheduler.deleteEvent(data[i]);
                    }
                }

            },
            _loadTimelessActivities: function () {
                var ar = [];
                ar.push(_scheduler._mode);
                ar.push(_scheduler._date);
                ar.push(self._getWeekStart(date));
                dojo.publish('/entity/activity/calendar/schedulerDateChanged', [ar, this]);

            },
            _initScheduler: function () {
                
                _scheduler.config.scroll_hour = this._userOptions['daystarttime'];
                _scheduler.config.workWeek = this._userOptions['workweek'];
                _scheduler.config.workHours = [0, this._userOptions['daystarttime'] * 60, this._userOptions['dayendtime'] * 60, 24 * 60];
                _scheduler.config.eventsMaxCount = this._userOptions["numevents"];
                _scheduler.locale = {
                    date: this.scheduler_dates, // from nls file
                    labels: this.scheduler_labels // from nls file
                };

                /**
                * Function : Custom date format 
                * Views : Day
                */
                _scheduler.templates.day_scale_date = function (d) {
                    var dayFormat = _scheduler.date.date_to_str("%l");
                    return dayFormat(d);
                };

                _scheduler.templates.day_date = function (dt) {
                    return activityUtility.formatLongDate(dt);
                };

                _scheduler.templates.week_date = function (d1, d2) {

                    var formatFullMonthAndDate = _scheduler.date.date_to_str("%F %d");
                    var formatDatePartandFullYear = _scheduler.date.date_to_str("%d, %Y");

                    if (d1.getMonth() != d2.getMonth()) {
                        //example : April 30 - May 06, 2012
                        //return formatFullMonthAndDate(d1) + " &ndash; " + scheduler.templates.day_date(scheduler.date.add(d2, -1, "day"));
                        return activityUtility.formatLongDate(d1) + " &ndash; " + activityUtility.formatLongDate(_scheduler.date.add(d2, -1, "day"));
                    } else {
                        //example : April 16 - 22, 2012
                        var d3 = scheduler.date.add(d2, -1, "day");
                        // return formatFullMonthAndDate(d1) + " &ndash; " + formatDatePartandFullYear(d3);
                        return activityUtility.formatLongDate(d1) + " &ndash; " + activityUtility.formatLongDate(_scheduler.date.add(d2, -1, "day"));
                    }


                };

                var isValidId = function (id) {
                    var valid = false;
                    if (id) {
                        if (id.trim() != '') {
                            valid = true;
                        }
                    }
                    return valid;
                };


                var activityFormat = _scheduler.date.date_to_str("%g:%i %A");
                var eventFormat = _scheduler.date.date_to_str("%m/%d/%Y");
                _scheduler.templates.tooltip_text = function (start, end, event) {
                    var type = event.type;
                    var toolTipText = "";
                    var subType = (event.subType == null) ? "" : event.subType.replace("at", "");
                    if (type == "event") {
                        toolTipText = "<b>" + self.tooltipType + " :</b> Event<br><b>" + self.tooltipDayType + " :</b> " + subType;
                        toolTipText += "<br/><b>" + self.tooltipStartDate + " :</b> " + activityUtility.formatEventDate(start);
                        toolTipText += "<br/><b>" + self.tooltipEndDate + " :</b> " + activityUtility.formatDateAdd(end, "day", -1);
                        if (event.location) toolTipText += "<br/><b>" + self.tooltipLocation + " :</b> " + event.location;
                        if (event.description) toolTipText += "<br/><b>" + self.tooltipDescription + " :</b> " + event.description;
                    } else {
                        toolTipText = "<b>" + self.tooltipTime + " :</b> " + activityFormat(start) + " - " + activityFormat(end);
                        if (isValidId(event.leadId)) {
                            if (event.leadName)
                                toolTipText += "<br/><b>" + self.tooltipLeadName + " :</b> " + event.leadName;
                            if (event.accountName)
                                toolTipText += "<br/><b>" + self.tooltipCompanyName + " :</b> " + event.accountName;
                        } else {
                            if (event.contactName)
                                toolTipText += "<br/><b>" + self.tooltipContactName + " :</b> " + event.contactName;
                            if (event.accountName)
                                toolTipText += "<br/><b>" + self.tooltipAccountName + " :</b> " + event.accountName;
                        }

                        if (event.phoneNumber) toolTipText += "<br/><b>" + self.tooltipPhoneNumber + " :</b> " + event.phoneNumber;
                        if (event.location) toolTipText += "<br/><b>" + self.tooltipLocation + " :</b> " + event.location;
                        if (event.regarding) toolTipText += "<br/><b>" + self.tooltipRegarding + " :</b> " + event.regarding;
                        if (event.priority) toolTipText += "<br/><b>" + self.tooltipPriority + " :</b> " + event.priority;
                        if (event.notes) toolTipText += "<br/><b>" + self.tooltipNotes + " :</b> " + event.notes;

                    }
                    return toolTipText;
                };
                _scheduler.clearAll();
                var self = this;

              

                /**
                * Function : Defining Work week 
                * Views : work week
                */
                _scheduler.attachEvent("onTemplatesReady", function () {
                    //Set work week
                    _scheduler.date.workweek_start = _scheduler.date.WorkWeekStart;
                    _scheduler.templates.workweek_date = _scheduler.templates.week_date;
                    _scheduler.templates.workweek_scale_date = _scheduler.templates.week_scale_date;
                    _scheduler.date.add_workweek = function (date, inc) { return _scheduler.date.add(date, inc * 7, "day"); };
                    _scheduler.date.get_workweek_end = function (date) {
                        var shift = self._userOptions['workweek'][(self._userOptions['workweek'].length) - 1] - self._userOptions['workweek'][0];
                        return _scheduler.date.add(date, shift, "day");
                    };



                });
                _scheduler.date.WorkWeekStart = function (date) {
                    var userWeekStart = self._userOptions["workweek"][0];
                    if (date == null) {
                        date = new Date();
                    }
                    var shift = date.getDay();
                    shift = userWeekStart - shift;
                    var stDate = _scheduler.date.add(date, shift, "day");
                    if (stDate > date) {
                        stDate = _scheduler.date.add(stDate, -7, "day");
                    }
                    return _scheduler.date.date_part(stDate);
                };

                /**
                * Function : Event title bar- Change background image for unconfirmed activities
                * Views : Day and Week
                */
                _scheduler.templates.event_title_class = function (start, end, event) {
                    var mode = _scheduler.getState().mode;
                    if (mode !== "month" && event.type !== "event") {
                        if (!event.confirmed) {
                            return "pending";
                        }
                    }
                    return "";
                };

                _scheduler.date.getDay = function (value) {
                    var retValue = value;
                    if (value.length > 1) {
                        var daysArr = [];
                        daysArr["SUNDAY"] = 0;
                        daysArr["MONDAY"] = 1;
                        daysArr["TUESDAY"] = 2;
                        daysArr["WEDNESDAY"] = 3;
                        daysArr["THURSDAY"] = 4;
                        daysArr["FRIDAY"] = 5;
                        daysArr["SATURDAY"] = 6;
                        retValue = daysArr[value.toUpperCase()];
                    }
                    if (!retValue) retValue = 1;
                    return retValue;

                };


                /**
                * Function : Event header - Adding Icons
                * Views : Day and Week
                */
                _scheduler.templates.event_header = function (start, end, ev) {
                    var html = "";
                    var timeFormatDayView = _scheduler.date.date_to_str("%g:%i %A");
                    var timeFormatWeekView = _scheduler.date.date_to_str("%g:%i");
                    if (ev.iconSrc)
                        html += '<img src="' + ev.iconSrc + '" style="float:left;padding-right:4px;"/>';

                    if (ev["recurring"])
                        html += '  <img src="' + self._recurringIcon + '" style="float:left;padding-right:4px;"/>';


                    //Display attachment and Alarm icons only on day view
                    if (_scheduler._mode === "day") {
                        if (ev["attachment"])
                            html += '  <img src="' + self._attachmentIcon + '" style="float:left;padding-right:4px;"/>';

                        if (ev["alarm"])
                            html += '  <img src="' + self._alarmIcon + '" style="float:left;padding-right:4px;"/>';
                    }

                    if (ev["id"].toString().indexOf("-hist") > 0)
                        html += '  <img src="' + self._activityCompleteIcon + '" style="float:left;padding-right:4px;"/>';

                    if (_scheduler._mode === "day") {
                        html += timeFormatDayView(start) + "-" + timeFormatDayView(end);
                    } else {
                        html += timeFormatWeekView(start) + "-" + timeFormatWeekView(end);
                    }


                    return html;
                },

                /**
                * Function : Event text - display details based on user options
                * Views : Day and Week
                */
                _scheduler.templates.event_text = function (start, end, ev) {
                    var evText = "";
                    var timeFormat = _scheduler.date.date_to_str("%g:%i %A");
                    if (_scheduler._mode !== "month") {

                        var contactId = ev["contactId"];
                        var contactName = ev["contactName"];
                        var leadId = ev["leadId"];
                        var leadName = ev["leadName"];
                        var accountId = ev["accountId"];
                        var accountName = ev["accountName"];
                        var opportunityId = ev["opportunityId"];
                        var opportunityName = ev["opportunity"];
                        var contactText = "";
                        var accountText = "";
                        var iconAdded = false;

                        if (iconAdded) evText += "</br>";

                        if (isValidId(leadId) && accountName) {
                            if (leadName) {

                                contactText = '<a href="javascript:void(window.parent.location =\'../../Lead.aspx?entityid=' + leadId + '\')" >' + leadName + '</a><br>';
                            }
                            accountText = '<a href="javascript:void(window.parent.location =\'../../Lead.aspx?entityid=' + leadId + '\')" >' + accountName + '</a><br>';
                        } else {
                            if (isValidId(accountId) && accountName) {
                                accountText = '<a href="javascript:void(window.parent.location = \'../../Account.aspx?entityid=' + accountId + '\')">' + accountName + '</a><br>';
                            }
                            if (isValidId(contactId)) {
                                contactText = '<a href="javascript:void(window.parent.location =\'../../Contact.aspx?entityid=' + contactId + '\')" >' + contactName + '</a><br>';
                            }
                        }

                        switch (self._userOptions["displaycontactaccount"]) {
                            case "0":
                                evText += contactText;
                                break;
                            case "1":
                                evText += accountText;
                                break;
                            case "2":
                                evText += contactText;
                                evText += accountText;
                                break;
                            case "3":
                                evText += accountText;
                                evText += contactText;
                                break;
                            case "4":
                                evText += "";
                                break;
                        }
                        if (self._userOptions["showonopportunities"] && isValidId(opportunityId)) {
                            evText += '<a href="javascript:void(window.parent.location =\'../../Opportunity.aspx?entityid=' + opportunityId + '&modeid=Detail\')" >' + opportunityName + '</a><br>';
                        }
                        if (self._userOptions["showonphonenumber"] && ev["phoneNumber"]) {
                            evText += ev["phoneNumber"] + "<br/>";
                        }
                        if (self._userOptions["showonregarding"] && ev["regarding"]) {
                            evText += ev["regarding"] + "<br/>";
                        }
                        if (self._userOptions["showontime"]) {
                            evText += timeFormat(start) + "-" + timeFormat(end) + "<br/>";
                        }
                        if (ev["location"]) {
                            evText += ev["location"] + "<br/>";
                        }
                        if (ev["priority"]) {
                            evText += ev["priority"] + "<br/>";
                        }
                        if (ev["notes"]) {
                            evText += ev["notes"];
                        }
                    }
                    else {
                        evText = ev.text;
                    }
                    return evText;
                };

                _scheduler.date.week_start = function (date) {
                    var userWeekStart = self._userOptions["weekstart"];
                    if (date == null) {
                        date = new Date();
                    }
                    var shift = date.getDay();
                    shift = userWeekStart - shift;
                    var stDate = _scheduler.date.add(date, shift, "day");
                    if (stDate > date) {
                        stDate = _scheduler.date.add(stDate, -7, "day");
                    }
                    return _scheduler.date.date_part(stDate);
                };

                _scheduler.date.arraySort = function (a, b) {
                    return a - b;
                };

                _scheduler.addEventNow = function (start, end, type) {
                    var sdate, edate, duration;
                    //On Month view set current time to the date selected
                    if (start == null) {
                        if (_scheduler._mode === 'month') {
                            sdate = activityUtility.roundDateToNextQuarterHour(new Date());
                        } else {
                            sdate = new Date();
                        }
                    } else {
                        var nDate = new Date(start);
                        if (_scheduler._mode === 'month') {
                            nDate.setMinutes(new Date().getMinutes());
                            nDate.setHours(new Date().getHours());
                            sdate = activityUtility.roundDateToNextQuarterHour(nDate);
                        } else {
                            sdate = nDate;
                        }
                    }
                    edate = end == null ? sdate : new Date(end);
                    if (type == null || typeof type == "object") {
                        type = self._userOptions['defaultactivity'];
                    }
                    if (end != null) {
                        duration = dojo.date.difference(sdate, new Date(end), 'minute');
                    } else {
                        duration = '60';
                    }
                    var svc = Sage.Services.getService('ActivityService');
                    if (type == "event") {
                        var args = {
                            StartDate: Sage.Utility.Convert.toIsoStringFromDate(sdate),
                            EndDate: Sage.Utility.Convert.toIsoStringFromDate(edate)
                        };

                        svc.scheduleEvent(args);
                    } else {
                        if (type != null) {
                            if (type.toLowerCase().indexOf("phone") > -1) {
                                type = "PhoneCall";
                            } else if (type.toLowerCase().indexOf("meeting") > -1) {
                                type = "Meeting";
                            } else if (type.toLowerCase().indexOf("to") > -1) {
                                type = "ToDo";
                            } else if (type.toLowerCase().indexOf("personal") > -1) {
                                type = "PersonalActivity";
                            } else {
                                type = "Meeting";
                            }
                        }
                        svc.scheduleActivity({
                            type: type,
                            preConfigured: {
                                StartDate: Sage.Utility.Convert.toIsoStringFromDate(sdate),
                                Duration: duration
                            }
                        });
                    }
                };
                _scheduler.xy.menu_width = 0;
                _scheduler.config.details_on_dblclick = true;
                _scheduler.config.details_on_create = true;
                _scheduler.attachEvent("onClick", function () { return false; });


                //eventId - activity: {activityId}-{userId}-act
                //eventId - history: {activityId}-{userId}-hist
                //eventId - event: {activityId}-{userId}-evt
                _scheduler.showLightbox = function (eventId) {
                    if (eventId != null && eventId != undefined) {
                        if (typeof eventId == "string") {
                            var eId = eventId.replace("0:", "");
                            var eIdArr = eId.split("-");
                            if (eIdArr[2] == "act") {
                                //If unconfirmed Activity open confirmation dialog
                                // if (eventId.indexOf("0:") > -1 && _scheduler._events[eventId] && !_scheduler._events[eventId].confirmed) {
                                if (_scheduler._events[eventId] && !_scheduler._events[eventId].confirmed) {
                                    //Passing activityId and Userid 
                                    Sage.Link.confirmActivityFor(eIdArr[0], eIdArr[1]);
                                } else {
                                    //Sage.Link.editActivity(eIdArr[0]);
                                    Sage.Link.editActivity(eIdArr[0], false, eIdArr[1]);
                                }
                            } else if (eIdArr[1] == "evt" || eIdArr[2] == "evt") {
                                Sage.Link.editEvent(eIdArr[0]);
                            } else if (eIdArr[1] == "hist" || eIdArr[2] == "hist") {
                                Sage.Link.editHistory(eIdArr[0]);
                            }
                        }
                    }
                };
                _scheduler.getCalendarEventID = function (eventId) {
                    var cEventId = eventId;
                    if (eventId != null && eventId != undefined) {
                        if (typeof eventId == "string") {
                            eventId = eventId.replace("0:", "");
                            var eId = eventId.split("-");
                            cEventId = eId[0];
                        }
                    }
                    return cEventId;
                };

                _scheduler.getCalendarEventUserID = function (eventId) {
                    var cEventUserId = eventId;
                    if (eventId != null && eventId != undefined) {
                        if (typeof eventId == "string") {
                            eventId = eventId.replace("0:", "");
                            var eId = eventId.split("-");
                            cEventUserId = eId[1];
                        }
                    }
                    return cEventUserId;
                };

                _scheduler.goToActivityAssociation = function (associationType, eventId) {
                    var associationId = null;
                    if (_scheduler._events && _scheduler._events[eventId]) {
                        switch (associationType) {
                            case "Contact":
                                associationId = _scheduler._events[eventId].contactId;
                                break;
                            case "Account":
                                associationId = _scheduler._events[eventId].accountId;
                                break;
                            case "Lead":
                                associationId = _scheduler._events[eventId].leadId;
                                break;
                            case "Opportunity":
                                associationId = _scheduler._events[eventId].opportunityId;
                                break;
                            case "Ticket":
                                associationId = _scheduler._events[eventId].ticketId;
                                break;
                        }
                    }

                    if (isValidId(associationId)) {
                        Sage.Link.entityDetail(associationType, associationId);
                    }
                };

                _scheduler.openActivity = function (eventId) {
                    _scheduler.showLightbox(eventId);
                };
                _scheduler.completeActivity = function (eventId) {
                    Sage.Link.completeActivity(_scheduler.getCalendarEventID(eventId));
                };

                _scheduler.getMenuActivityAction = function (eventId, actionType) {
                    if (!eventId)
                        return false;
                    var allowAction = false;
                    var eventUserId = _scheduler.getCalendarEventUserID(eventId);
                    var activityLeaderUserId = _scheduler._events[eventId]["leaderUserId"];
                    var currentUserId = utility.getClientContextByKey('userID');
                    var confirmed = _scheduler._events[eventId]["confirmed"] || false;
                    var allowDelete = _scheduler._events[eventId]["allowDelete"];
                    var allowEdit = _scheduler._events[eventId]["allowEdit"];

                    switch (actionType) {
                        case "delete":
                            if (allowDelete) {
                                if (eventUserId === activityLeaderUserId) {
                                    //Delete the activity
                                    allowAction = "delete";
                                } else if (confirmed) {
                                    //Decline activity by sending activityId and memberId to delete Activity service
                                    //Server side will take care of declining if its composite key
                                    allowAction = "declineConfirmed";
                                } else {
                                    //Decline the activity
                                    allowAction = "decline";
                                }
                            } else if (currentUserId === eventUserId) {
                                if (currentUserId === activityLeaderUserId) {
                                    allowAction = "delete";
                                } else if (confirmed) {
                                    allowAction = "declineConfirmed";
                                } else {
                                    allowAction = "decline";
                                }
                            } else {
                                allowAction = false;
                            }
                            break;
                        case "complete":
                            if (confirmed && eventUserId === activityLeaderUserId && allowEdit) {
                                allowAction = true;
                            }
                            break;
                    }
                    return allowAction;
                };

                _scheduler.deleteActivity = function (eventId) {
                    var activityId = _scheduler.getCalendarEventID(eventId);
                    Sage.Link.deleteActivity(activityId);
                };

                _scheduler.declineConfirmedUserActivity = function (eventId) {
                    // If this is a member, then decline the activity - do not delete
                    var activityId = _scheduler.getCalendarEventID(eventId);
                    var userId = _scheduler.getCalendarEventUserID(eventId);
                    var activityLeaderUserId = _scheduler._events[eventId]["leaderUserId"];

                    activityId = activityId.indexOf(';') > 0 ? activityId.substring(0, 12) : activityId;
                    var activityObj = {
                        "$key": activityId,
                        "Leader": { "$key": activityLeaderUserId }
                    };

                    var activityService = Sage.Services.getService('ActivityService');
                    activityService.declineMemberConfirmation(activityObj, userId);
                };

                _scheduler.declineActivity = function (eventId) {
                    var calEventId = _scheduler.getCalendarEventID(eventId);
                    var eventUserId = _scheduler.getCalendarEventUserID(eventId);
                    var activityService = Sage.Services.getService('ActivityService');
                    activityService.confirmActivityFor(calEventId, eventUserId, self._loadNotification, self);
                };

                _scheduler.deleteActivityEvent = function (eventId) {
                    Sage.Link.deleteEvent(_scheduler.getCalendarEventID(eventId));
                };

                _scheduler.attachEvent("onEventAdded", function (eventId, eventObject) {
                    if (typeof eventId != "string") {
                        _scheduler.addEventNow(eventObject.start_date, eventObject.end_date, 'atAppointment');
                        _scheduler.deleteEvent(eventId);
                    }
                });

                _scheduler.attachEvent("onBeforeEventChanged", function (eventObject, nativeEvent, isNew) {
                    if (isNew) {
                        switch (this._mode) {
                            case "day":
                            case "week":
                            case "workweek":
                                _scheduler.addEventNow(eventObject.start_date, eventObject.end_date, self._userOptions['defaultactivity']);
                                _scheduler.deleteEvent(eventObject.id);
                                break;
                            case "month":
                                var endDate = eventObject.end_date;
                                if (dojo.date.compare(eventObject.end_date, eventObject.start_date) > 0) {
                                    endDate = dojo.date.add(eventObject.end_date, "day", -1);
                                }
                                _scheduler.addEventNow(eventObject.start_date, endDate, 'event');
                                _scheduler.deleteEvent(eventObject.id);
                                break;
                        }

                    } else {
                        if (!eventObject.allowEdit) {
                            return false;
                        }
                        var eventObj = {
                            Id: eventObject.id,
                            Text: eventObject.text,
                            StartDate: eventObject.start_date,
                            Alarm: eventObject.alarm,
                            EndDate: Sage.Utility.Convert.toIsoStringFromDate(eventObject.end_date),
                            AlarmMinutesBefore: eventObject.alarmMinutesBefore || -15,
                            Duration: dojo.date.difference(eventObject.start_date, eventObject.end_date, 'minute')
                        };
                        if (typeof eventObject.id == "string") {
                            if (eventObject.id && eventObject.id.indexOf("-act") > 0) {
                                eventObj.Id = _scheduler.getCalendarEventID(eventObject.id);
                                eventObj.UserId = _scheduler.getCalendarEventUserID(eventObject.id);

                                if (eventObj.AlarmMinutesBefore) {
                                    eventObj.AlarmTime = dojo.date.add(eventObj.StartDate, "minute", eventObj.AlarmMinutesBefore);
                                    eventObj.AlarmTime = Sage.Utility.Convert.toIsoStringFromDate(eventObj.AlarmTime);
                                }
                                eventObj.StartDate = Sage.Utility.Convert.toIsoStringFromDate(eventObj.StartDate);
                                self._currentActivity = eventObj;
                                if (eventObject.id.indexOf(";") > 0) {
                                    //Recurrence activity
                                    //Show the edit recurrence dialog 
                                    self.onEditRecurrenceActivity(eventObj.Id);
                                } else {
                                    //Need to update UserActivity record to update the Alarm time
                                    //And then update Activity record for start date and duration
                                    self._updateUserActivity();
                                }
                            } else if (eventObject.id && eventObject.id.indexOf("-evt") > 0) {
                                eventObj.Id = eventObject.id.replace("-evt", "");
                                eventObj.EndDate = dojo.date.add(eventObject.end_date, "day", -1);
                                self._updateEvent(eventObj);
                            }
                        }
                    }
                    return true;
                });
                _scheduler.attachEvent("onViewChange", function (mode, date) {

                    var dataObj = {};
                    dataObj.mode = mode;
                    dataObj.date = date;
                    dataObj.weekStartDate = _scheduler._week_min_date;
                    dataObj.weekEndDate = _scheduler._week_max_date;
                    dataObj.workWeekStartDate = _scheduler._workweek_min_date;
                    dataObj.workWeekEndDate = _scheduler._workweek_max_date;

                    dojo.publish('/entity/activity/calendar/schedulerDateChanged', [dataObj, this]);
                });

                _scheduler.attachEvent("onContextMenu", function (eventId, nativeEventObject) {

                    var pos = _scheduler._mouse_coords(nativeEventObject);
                    var start = _scheduler._min_date.valueOf() + (pos.y * _scheduler.config.time_step + (_scheduler._table_view ? 0 : pos.x) * 24 * 60) * 60000;
                    start = _scheduler._correct_shift(start);

                    self._bindContextMenu(eventId, start);
                });
                var schedulerHourFormat = _scheduler.date.date_to_str("%g %A");
                _scheduler.config.hour_size_px = (60 / this._userOptions['defaultinterval']) * 42;
                // _scheduler.config.hour_size_px = 84;

                _scheduler.templates.hour_scale = function (date) {
                    html = "";
                    for (var i = 0; i < 60 / self._userOptions['defaultinterval']; i++) {

                        if (i === 0) {
                            html += "<div style='height:21px;line-height:21px;border-bottom: 1px solid #DcDcDc;'>" + schedulerHourFormat(date) + "</div>";
                            date = _scheduler.date.add(date, self._userOptions['defaultinterval'], "minute");
                        } else {
                            html += "<div style='height:21px;line-height:21px;'></div>";
                        }
                    }
                    return html;
                };


                _scheduler.render_event_bar = function (ev) {

                    //this._cols will have widths of each visible columns in day, week and workweek views
                    //if the width is 0, that means that column is not visible in calendar(workweek view skipped days), so ignore rendering 
                    if (this._cols[ev._sday] == 0)
                        return;

                    var parent = this._rendered_location;
                    //this_colsS.heights will have stating position y coordinates of each week
                    var x = this._colsS[ev._sday];
                    var x2 = this._colsS[ev._eday];
                    if (x2 == x) x2 = this._colsS[ev._eday + 1];
                    var hb = this.xy.bar_height;

                    var y = this._colsS.heights[ev._sweek] + (this._colsS.height ? (this.xy.month_scale_height + 2) : 2) + (ev._sorder * hb);

                    var d = document.createElement("DIV");
                    var cs = ev._timed ? "dhx_cal_event_clear" : "dhx_cal_event_line";
                    var cse = _scheduler.templates.event_class(ev.start_date, ev.end_date, ev);
                    if (cse) cs = cs + " " + cse;

                    var bg_color = (ev.color ? ("background-color:" + ev.color + ";") : "");
                    var color = (ev.textColor ? ("color:" + ev.textColor + ";") : "");
                    var html = "";

                    var arrowHeight = 10;
                    //min height needed = height of event bar + 2px space + arrow height
                    var minHeightNeeded = (this.xy.month_scale_height + arrowHeight) + 2;
                    //remaining height = next row starting position - current height
                    var remainingHeight = this._colsS.heights[ev._sweek + 1] - y;


                    //On month view, on a single day, if there are more items and and not enough space on that cell
                    //show an down arrow which will take to the day view to show all the events.
                    //Check if we have enough space to render a bar and the arrow
                    //If Yes display the bar
                    if (this._mode !== 'month' || (this._mode === 'month' && (remainingHeight > minHeightNeeded))) {
                        var eventbarWidth = x2 - x - 15;
                        if (ev["id"].toString().indexOf("-evt") === -1) {
                            x += 5;
                            eventbarWidth = x2 - x - 8;
                        }

                        html = '<div event_id="' + ev.id + '" class="' + cs + '" style="position:absolute; top:' + y + 'px; left:' + x + 'px; width:' + eventbarWidth + 'px;' + color + '' + bg_color + '' + (ev._text_style || "") + '" id ="' + _scheduler.uid() + '">';

                        if (ev._timed) {
                            if (ev.iconSrc) {
                                html += '<img src="' + ev.iconSrc + '" style="float:left;padding-right:4px;"/>';
                            }
                            if (ev["id"].toString().indexOf("-hist") > 0)
                                html += '  <img src="' + self._activityCompleteIcon + '" style="float:left;padding-right:4px;"/>';


                            html += _scheduler.templates.event_bar_date(ev.start_date, ev.end_date, ev);
                        }
                        html += _scheduler.templates.event_bar_text(ev.start_date, ev.end_date, ev) + '</div>';
                        html += '</div>';
                    } else if (remainingHeight > (arrowHeight + 2)) {
                        //If remaining height is more than the space needed for arrow, display arrow button
                        var uId = _scheduler.uid();
                        //console.log("inside if-->else-->y:%o,x:%o,x2:%o,uId:%o", y, x, x2, uId);
                        html = '<div style="position:absolute; top:' + y + 'px; left:' + x + 'px;width:' + (x2 - x - 5) + 'px;" id ="' + uId + '">';
                        html += '<a title="' + self.tooltipMoreActivities + '" href ="javascript:window.scheduler.setCurrentView(new Date(\'' + ev.start_date + '\'),\'day\');">';
                        html += '<img src="../../images/CalendarMoreArrow.png" style="float:right" />';
                        html += '</a></div>';

                    } else {
                        //If remaining height is less than the arrow button height, hide the event
                        html = '<div></div>';
                    }
                    d.innerHTML = html;
                    this._rendered.push(d.firstChild);
                    parent.appendChild(d.firstChild);
                };


                this.eventConnections.push(dojo.connect(document.body, 'onclick', this, '_bodyClicked'));
                this.eventConnections.push(dojo.connect(window.parent.document.body, 'onclick', this, '_bodyClicked'));

                this._bindContextMenu(null, new Date());
            
            },

            _loadNotification: function (notificationId) {
                this._notificationData = false;
                if (!this._notificationStore) {
                    this._notificationStore = new singleEntrySDataStore({
                        include: ['Activity', '$descriptors'],
                        resourceKind: 'userNotifications',
                        service: sDataServiceRegistry.getSDataService('system')
                    });
                }
                this._notificationStore.fetch({
                    predicate: "'" + notificationId + "'",
                    onComplete: this._receivedNotification,
                    onError: this._requestFailure,
                    scope: this
                });
            },
            _requestFailure: function () {
                console.warn('error requesting data %o', arguments);
                //sageDialogs.showError(this.failedLoadingDataMsg);
            },
            _receivedNotification: function (notification) {
                this._notificationData = notification;
                var activityService = Sage.Services.getService('ActivityService');
                activityService.declineConfirmation({
                    notification: this._notificationData,
                    success: this._successfulDeclineConfirmation,
                    failure: this._failedAcceptDecline,
                    scope: this
                });
            },
            _successfulDeclineConfirmation: function () {
                dojo.publish('/entity/activity/decline', [this._getActivityDataFromNotificationData(), null]);
                dojo.publish('/entity/userNotification/delete', [this._notificationData['$key'], this]);
            },
            _getActivityDataFromNotificationData: function () {
                var activityId = null;
                var userId = null;
                if (this._notificationData) {
                    if (this._notificationData.Activity) {
                        activityId = this._notificationData.Activity.$key;
                    }
                    if (this._notificationData.ToUser) {
                        userId = this._notificationData.ToUser.$key;
                    }
                }
                var actObj = { 'activityId': activityId, 'userId': userId };
                return actObj;
            },
            onEditRecurrenceActivity: function (actId) {
                //Summary:
                //          Show separate instance of this dialog instead calling link.editActivity, as we don't need 
                //          to show the activity edit dialog and we can just update the time of activity

                if (!this._editOccSeriesDlg) {
                    //Disabling the occurrence series option on the dialog as we allow drag and drop in calendar only for single occurrence 
                    this._editOccSeriesDlg = new occurrenceOrSeriesQueryDlg({ id: 'editOccSeriesQueryCalendar', mode: 'edit', disableSeriesOption: 'disabled' });
                    //dojo.connect(this._editOccSeriesDlg, 'onSelectSeries', this, function (actid) {
                    //    this._currentActivity.Id = actid.substring(0, 12);
                    //    this._updateUserActivity();
                    //});
                    dojo.connect(this._editOccSeriesDlg, 'onSelectOccurrence', this, function (actid, sDate) {
                        this._updateActivity(this._currentActivity);
                    });
                }
                this._editOccSeriesDlg.set('activityId', actId);
                this._editOccSeriesDlg.show();
            },
            _bodyClicked: function () {
                if (this.schedulerContextMenu && this.schedulerContextMenu.isShowingNow) {
                    this.schedulerContextMenu._popupWrapper.style.display = 'none';
                }
            },
            _updateUserActivity: function () {
                var activityObj = this._currentActivity;
                var request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('system'));
                request.setResourceKind('userActivities');
                var key = dojo.string.substitute('"ActivityId=${0};UserId=${1}"', [activityObj.Id, activityObj.UserId]);
                request.setResourceSelector(key);
                this._userActivityData = {
                    $key: key,
                    Id: activityObj.Id,
                    StartDate: activityObj.StartDate,
                    Alarm: activityObj.Alarm,
                    Duration: activityObj.Duration
                };
                if (activityObj.AlarmMinutesBefore) {
                    this._userActivityData.AlarmTime = activityObj.AlarmTime;
                }
                request.update(this._userActivityData, {
                    scope: this,
                    success: function (act) {
                        this._updateActivity();
                    },
                    failure: function (e) {
                        console.log("User activity update failed");
                    }
                });
            },
            _updateActivity: function (activityObj) {

                if (!activityObj)
                    activityObj = this._userActivityData;

                activityObj.$key = activityObj.Id;

                var request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('system'));
                request.setResourceKind('activities');
                request.setResourceSelector(dojo.string.substitute('"${0}"', [activityObj.$key]));
                request.update(activityObj, {
                    success: function (act) {
                        var actIds = [];
                        //console.log("activity updated");
                        var actId = activityObj.$key.substring(0, 12);
                        for (var i in this._scheduler._events) {
                            var evt = this._scheduler._events[i];
                            if (evt.id.indexOf(actId) > -1) {
                                actIds.push(evt.id);
                            }
                        }
                        if (actIds) {
                            //Remove all occurrences of the activity from scheduler
                            for (var i = 0; i < actIds.length; i++) {
                                this._scheduler.deleteEvent(actIds[i]);
                            }
                        }
                        //The activity being dragged/updated
                        dojo.publish("/entity/activity/activityScheduler/reloadActivity", [actId, this]);
                        if (actId !== act.$key) {
                            //Newly created activity when editing single occurrence
                            dojo.publish("/entity/activity/activityScheduler/reloadActivity", [act.$key, this]);
                        }
                    },
                    failure: function () {
                        console.log("activity update failed");
                    },
                    scope: dojo.global
                });
            },
            _getWeekStart: function (date) {
                var userWeekStart = this._userOptions["weekstart"];
                if (date == null) {
                    date = new Date();
                }
                var shift = date.getDay();
                shift = userWeekStart - shift;
                var stDate = _scheduler.date.add(date, shift, "day");
                if (stDate > date) {
                    stDate = _scheduler.date.add(stDate, -7, "day");
                }
                return _scheduler.date.date_part(stDate);
            },
            _getWorkWeekStart: function (date) {

            },
            _getMonthStart: function (date) {
                return date.setDate(1);
            },
            _updateEvent: function (eventObj) {
                var request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
                request.setResourceKind('events');
                request.setResourceSelector(dojo.string.substitute('"${0}"', [eventObj.Id]));
                var event = {
                    $key: eventObj.Id,
                    StartDate: Sage.Utility.Convert.toIsoStringFromDate(eventObj.StartDate),
                    EndDate: Sage.Utility.Convert.toIsoStringFromDate(eventObj.EndDate)
                };
                request.update(event, {
                    success: function (act) {
                        console.log("event updated");
                    },
                    failure: function () {
                        console.log("event update failed");
                    },
                    scope: dojo.global
                });
            },
            _preloadCalendarUserOptions: function () {
                var optionsSvc = Sage.Services.getService('UserOptions');
                if (optionsSvc) {
                    optionsSvc.getByCategory('Calendar', this._receivedCalendarOptions, this, this._failedCalendarOptions);
                }
            },
            _receivedCalendarOptions: function (data) {
                var opts = data['$resources'];
                if (opts.length > 0) {
                    this._userOptions['workweek'] = [];
                }
                for (var i = 0; i < opts.length; i++) {
                    var opt = opts[i];

                    switch (opt['name'].toUpperCase()) {
                        case 'WEEKSTART':
                            this._userOptions['weekstart'] = userOptionsUtility.getDay(opt['value']); // _scheduler.date.getDay(opt['value']);
                            break;
                        default:
                            this._userOptions[opt['name'].toLowerCase()] = userOptionsUtility.getConvertedOptionValue(opt['name'], opt['value']);
                            break;
                    }
                }
                if (this._userOptions['workweeksun']) this._userOptions['workweek'].push(0);
                if (this._userOptions['workweekmon']) this._userOptions['workweek'].push(1);
                if (this._userOptions['workweektue']) this._userOptions['workweek'].push(2);
                if (this._userOptions['workweekwed']) this._userOptions['workweek'].push(3);
                if (this._userOptions['workweekthu']) this._userOptions['workweek'].push(4);
                if (this._userOptions['workweekfri']) this._userOptions['workweek'].push(5);
                if (this._userOptions['workweeksat']) this._userOptions['workweek'].push(6);

                if (this._userOptions['workweek'])
                    this._userOptions['workweek'].sort(userOptionsUtility.arraySort);

                this._initScheduler();
                this._launchScheduler();

            },
            _failedCalendarOptions: function (data) {
                this._initScheduler();
                this._launchScheduler();
            },
            _bindContextMenu: function (eventId, startDate) {

                if (this.schedulerContextMenu) {
                    this.schedulerContextMenu.unBindDomNode(this._iFrameId);
                }
                this.schedulerContextMenu = new dijit.Menu({});
                var menuType = null;
                if (eventId == null) {
                    menuType = "mnuCalendarSchedule";
                } else if (eventId.indexOf("-act") > 0) {
                    menuType = "mnuCalendarActivity";
                } else if (eventId.indexOf("-evt") > 0) {
                    menuType = "mnuCalendarEvent";
                } else if (eventId.indexOf("-hist") > 0) {
                    menuType = "mnuCalendarHistory";
                }
                var menuConfig = Sage.UI.DataStore.ContextMenus.calendar_activityContextMenu.items;
                var len = menuConfig.length;
                for (var i = 0; i < len; i++) {
                    var mDef = menuConfig[i];
                    if (mDef.id === menuType) {
                        this._buildChildMenu(mDef.submenu, null, eventId, startDate);
                        break;
                    }
                }
                this.schedulerContextMenu.bindDomNode(this._iFrameId);
            },
            _buildChildMenu: function (parentMenuDef, parentMenu, eventId, startDate) {

                var len = parentMenuDef.length;
                for (var i = 0; i < len; i++) {
                    var mDef = parentMenuDef[i];
                    if (mDef.submenu.length > 0) {
                        var subMenu = new dijit.Menu();
                        this._buildChildMenu(mDef.submenu, subMenu, eventId, startDate);
                        var popsubMenu = new dijit.PopupMenuItem({
                            label: mDef.text,
                            popup: subMenu
                        });

                        if (parentMenu) {
                            parentMenu.addChild(popsubMenu);
                        }
                        else {
                            this.schedulerContextMenu.addChild(popsubMenu);
                        }
                    }
                    else {

                        var menuItem = null;
                        if ((mDef.text === '-') || (mDef.text === ' ') || (mDef.isspacer)) {
                            menuItem = new dijit.MenuSeparator();
                        } else {
                            var href = mDef.href;
                            href = href.replace('javascript:Sage.Link.', 'javascript:parent.Sage.Link.');

                            var disableMenu = false;
                            var deleteAction = false;
                            if (href.toUpperCase() === "DELETEACTIVITY") {
                                deleteAction = _scheduler.getMenuActivityAction(eventId, "delete");
                                if (!deleteAction) {
                                    disableMenu = true;
                                }

                            } else if (href.toUpperCase() === "COMPLETEACTIVITY") {
                                var completeAction = _scheduler.getMenuActivityAction(eventId, "complete");
                                if (!completeAction) {
                                    disableMenu = true;
                                }
                            }

                            menuItem = new Sage.UI.MenuItem({
                                label: mDef.text || '...',
                                icon: 'Libraries/dojo/dojo/resources/blank.gif',
                                title: mDef.tooltip || '',
                                ref: href,
                                deleteAction: deleteAction,
                                disabled: disableMenu,
                                onClick: function () {
                                    switch (this.ref.toUpperCase()) {
                                        case "SCHEDULEPHONECALL":
                                            _scheduler.addEventNow(startDate, null, 'PhoneCall');
                                            break;
                                        case "SCHEDULEMEETING":
                                            _scheduler.addEventNow(startDate, null, 'Meeting');
                                            break;
                                        case "SCHEDULETODO":
                                            _scheduler.addEventNow(startDate, null, 'ToDo');
                                            break;
                                        case "SCHEDULEPERSONALACTIVITY":
                                            _scheduler.addEventNow(startDate, null, 'PersonalActivity');
                                            break;
                                        case "SCHEDULEEVENT":
                                            _scheduler.addEventNow(startDate, null, 'event');
                                            break;
                                        case "OPENACTIVITY":
                                        case "OPENEVENT":
                                        case "OPENHISTORY":
                                            _scheduler.openActivity(eventId);
                                            break;
                                        case "COMPLETEACTIVITY":
                                            _scheduler.completeActivity(_scheduler.getCalendarEventID(eventId));
                                            break;
                                        case "DELETEACTIVITY":
                                            if (this.deleteAction === "delete") {
                                                _scheduler.deleteActivity(eventId);
                                            } else if (this.deleteAction === "decline") {
                                                _scheduler.declineActivity(eventId);
                                            } else if (this.deleteAction === "declineConfirmed") {
                                                _scheduler.declineConfirmedUserActivity(eventId);
                                            }
                                            break;
                                        case "GOTOACCOUNT":
                                            _scheduler.goToActivityAssociation('Account', eventId);
                                            break;
                                        case "GOTOCONTACT":
                                            _scheduler.goToActivityAssociation('Contact', eventId);
                                            break;
                                        case "GOTOOPPORTUNITY":
                                            _scheduler.goToActivityAssociation('Opportunity', eventId);
                                            break;
                                        case "GOTOTICKET":
                                            _scheduler.goToActivityAssociation('Ticket', eventId);
                                            break;
                                        case "GOTOLEAD":
                                            _scheduler.goToActivityAssociation('Lead', eventId);
                                            break;
                                        case "DELETEEVENT":
                                            _scheduler.deleteActivityEvent(_scheduler.getCalendarEventID(eventId));
                                            break;
                                    }
                                }
                            });
                        }
                        if (parentMenu) {
                            parentMenu.addChild(menuItem);
                        }
                        else {
                            this.schedulerContextMenu.addChild(menuItem);
                        }
                    }
                }
            }
        });
        return activityScheduler;

    });
},
'Sage/UI/Columns/DataType':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/DataType", [
        'dojox/grid/cells/_base',
        'dojo/string',
        'dojo/_base/declare',
        'Sage/Utility/Filters'
],
function (_base, dString, declare, Filters) {
    var widget = declare('Sage.UI.Columns.DataType', _base, {
        constructor: function(){
            this.inherited(arguments);
        },
        formatter: function(val, index) {
            var t = Filters.resolveDataTypeQB(val),
                results = 'string';
            switch (t){
                case 'Integer':
                    results = 'int';
                    break;
                case 'Decimal':
                    results = 'float';
                    break;
                case 'Date/Time':
                    results = 'date';
                    break;
                case 'Memo/Blob':
                    results = 'blob';
                    break;
                case 'String':
                default:
                    results = 'string';
                    break;
                    
            }
            return  dString.substitute('<img src="images/ft_${0}.gif" class="dataTypeColumnDimensions" />', [results]);;
        }
    });

    return widget;
});
},
'Sage/QuickForms/Design/Editors/DateTimePickerAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/DateTimePickerAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/DateTimePickerAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.DateTimePickerAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.buttonToolTipTooltipText %}">',
                        '<label>{%= $.buttonToolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_buttonToolTip" data-dojo-attach-event="onChange:_onButtonToolTipChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.displayModeTooltipText %}">',
                        '<label>{%= $.displayModeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_displayMode" data-dojo-attach-event="onChange:_onDisplayModeChange">',
                            '{% for (var mode in $.displayModeTypeText) { %}',
                                '<span value="{%= mode %}">{%= $.displayModeTypeText[mode] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                            '{% for (var placement in $.labelPlacementText) { %}',
                                '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.timelessTooltipText %}">',
                        '<label>{%= $.timelessText %}</label>',
                        '<div data-dojo-attach-point="_timeless" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onTimelessChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _buttonToolTip: null,
        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _displayMode: null,
        _required: null,
        _timeless: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        buttonToolTipText: 'Button Tooltip:',
        buttonToolTipTooltipText: 'The tooltip  to display when the user\'s mouse hovers over the button part of the control.',
        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        displayModeText: 'Display Mode:',
        displayModeTooltipText: 'Mode of display of control: text box, hyperlink, or plain text.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        timelessText: 'Timeless:',
        timelessTooltipText: 'Use date without time and no DST conversion.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },
        displayModeTypeText: {
            'AsControl': 'As Control',
            'AsText': 'As Text',
            'AsHyperlink': 'As Hyperlink'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._buttonToolTip.set('value', this._designer.get('buttonToolTip'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._displayMode.set('value', this._designer.get('displayMode'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._required.set('value', this._designer.get('required'));
            this._timeless.set('value', this._designer.get('timeless'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onButtonToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('buttonToolTip', value);
        },
        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onDisplayModeChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('displayMode', value);
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('enabled', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('controlLabelPlacement', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onTimelessChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('timeless', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'url:Sage/templates/MenuBarItem.html':"<div class=\"dijitReset dijitInline dijitMenuItem\" data-dojo-attach-point=\"focusNode\" waiRole=\"menuitem\" tabIndex=\"-1\"\r\n    data-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n    <span>\r\n    <img src=\"${_blankGif}\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\r\n    <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\r\n    <span class=\"dijitMenuItemLabel\" data-dojo-attach-point=\"containerNode\"></span>\n    </span>\n</div>\n",
'url:Sage/MainView/Opportunity/templates/OpportunityStatistics.html':"﻿ [\r\n    '<div>',\r\n        '<div data-dojo-type=\"dijit.Dialog\" id=\"{%= $.id%}_dlgOpportunityStatistics\" title=\"{%= $.opportunityStatistics_Caption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onCancel:_close\">',\r\n            '<div dojoAttachPoint=\"loadingContainer\">',\r\n                '<br />',\r\n                '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingMessge %}</label>',\r\n                '<br />',\r\n                '<br />',\r\n            '</div>',\r\n            '<table cellspacing=\"20\" dojoAttachPoint=\"statisticsContentsContainer\" class=\"display-none\">',\r\n                '<tr>',\r\n                    '<td >',\r\n                        '<label>{%= $.opportunityCount %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"opportunityCount\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.salesPotentialTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"salesPotential\" dojoAttachPoint=\"salesPotentialTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"salesPotentialAverage\" dojoAttachPoint=\"salesPotentialAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.weightedPotentialTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"weightedPotential\" dojoAttachPoint=\"weightedPotentialTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"weightedPotentialAverage\" dojoAttachPoint=\"weightedPotentialAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.averageCloseProbability %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div dojoType=\"Sage.UI.Controls.Numeric\" constraints=\"{ places: 2, maxPlaces: 2, type: \\'percent\\' }\" dojoAttachPoint=\"closeProbability_Container\" readonly=\"readonly\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.actualAmountTotal %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"actualAmount\" dojoAttachPoint=\"actualAmountTotal_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"actualAmountAverage\" dojoAttachPoint=\"actualAmountAverage_Container\" disabled=\"disabled\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.averageDaysOpen %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"daysOpen_Container\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.rangeEstClose %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<label dojoAttachPoint=\"rangeEstClose_Container\"></label>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n            '<div class=\"button-bar alignright\">',\r\n                '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_btn_Cancel\" type=\"button\" dojoAttachEvent=\"onClick:_close\">{%= $.btnClose_Caption %}</button>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>'\r\n]",
'Sage/UI/Filters/nls/EditFilters':function(){
define("Sage/UI/Filters/nls/EditFilters", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            selectAllText: 'Select All',
            dialogTitle: 'Edit Filters',
            okText: 'OK',
            cancelText: 'Cancel'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Controls/Numeric':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Numeric", [
       'dojo/_base/html',
       'dijit/_Widget',
       'Sage/_Templated',
       'Sage/UI/NumberTextBox',
       'dojo/currency',
       'dojo/_base/declare'
],
function (html, _Widget, _Templated, NumberTextBox, currency, declare) {
    //TODO: This hook will be depricated once ClientBindingManagerService has been converted with Dojo.
    dojo.mixin(dijit.form.ValidationTextBox.prototype.attributeMap, { slxchangehook: 'focusNode' });

    var widget = declare("Sage.UI.Controls.Numeric", [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        //Reference enum for Display Modes
        displayModes: {
            //Renders the control as hyperlinked text.
            'AsHyperlink': 0,
            //Default rendering of the control.
            'AsControl': 1,
            //Renders the control a text only.        
            'AsText': 2
        },
        //Display Mode template object.
        modeTemplates: {
            // This is for future user, this option is not in AA - Renders the control as hyperlinked text.
            'AsHyperlink': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">ONE</div>'
            ]),
            //Default rendering of the control.
            'AsControl': new Simplate([
                '<input  data-dojo-type="Sage.UI.NumberTextBox" ',
                'dojoAttachEvent="onChange:onChanged" ',
                'constraints="{ {%= $.constraintsToString() %} }" ',
                'formatType="{%= $.formatType %}" ',
                'ignorechange="true" ',
                'required="{%= $.required %}" ',
                'id="{%= $.id %}_NumberTextBox" ',
                'style="width:inherit;" ',
                'textAlign="{%= $.textAlign %}" ',
                'hotKey="{%= $.hotKey %}" ',
                '{% if($.disabled === "disabled") { %} ',
                'disabled="disabled" ',
                '{% } %}',
                '{% if($.readonly === "readonly") { %} ',
                'readonly="readonly" ',
                '{% } %}',
                'name="{%= $.name %}" type="text" ',
                'value="{%= $.value %}" required="{%= $.required %}" dojoAttachPoint="focusNode" ',
                'maxLength="{%= $.maxLength %}">'
            ]),
            // This is for future user, this option is not in AA - Renders the control a text only.
            'AsText': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">{%= $.formattedText() %}</div>'
            ])
        },
        postMixInProperties: function () {
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            // If this is generated by the Numeric server control, the container will be a span
            //  and the tabIndex of that span will need to be reset, otherwise a double-tab will
            //  have to be done to hit the actual Numeric textbox
            if(this.domNode.parentNode && this.domNode.parentNode.tagName == 'SPAN') {
                this.domNode.parentNode.tabIndex = -1;
            }
        },
        constructor: function (options) {
            this.constraints = {};
            this.inherited(arguments);
        },
        widgetTemplate: new Simplate([
            '<div style="width:inherit;" slxcompositecontrol="true" id="{%= $.id %}" >',
            '{%= $.modeTemplates[$.displayMode].apply($) %}',
            '</div>'
        ]),
        value: 0,
        //summary:
        //.Net control behavior
        autoPostBack: false,
        width: 15,
        maxLength: 128,
        style: '',
        //These three props are for non-grid modes.  Add to basic control config but not column config.    
        enabled: true, // For non-grid mode. Redundant from grid.column.editable: true
        visible: true, // For non-grid mode. Redundant from field in grid Select but column not included.
        readonly: '',
        disabled: '',
        hotKey: '',
        tabIndex: 0,
        required: false,
        //Sets the display mode that the control will render in.
        displayMode: 'AsControl',
        // appliedSecurity: '',  Note: Not yet enabled on control.    
        widgetsInTemplate: true,
        styles: 'text-align: right;',
        constraints: null,
        name: '',
        formattedText: function () { return this.value; },
        formatType: '',
        constraintsToString: function () {
            // Stringify the constraints object, wrap string values in single quote
            var tmp = [];
            for (prop in this.constraints) {
                if (this.constraints.hasOwnProperty(prop)) {
                    var value = this.constraints[prop];
                    if (typeof value === 'string') {
                        value = "\'" + value + "\'";
                    }
                    tmp.push(prop + ":" + value);
                }
            }
            var results = tmp.join(",");
            return results;
        },
        onChanged: function (e) {
            if (this.autoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.id, null);
                }
            }
        }
    });

    return widget;
});
},
'Sage/UI/Controls/Address':function(){
require({cache:{
'url:Sage/UI/Controls/templates/Address.html':"<div class=\"address-container\" id=\"{%= $.clientId %}\" >\r\n    <!--\r\n    -- IMPORTANT: Comments in a widget template must be placed inside the root node.\r\n    Simplate template\r\n    https://github.com/mmorton/simplate\r\n    https://github.com/mmorton/simplate/blob/master/demo/index.html\r\n    Basic formatting example: {%= $.id %}\r\n    -->\r\n    <textarea id=\"{%= $.clientId %}_displayText\" class=\"address-textarea\" style=\"height:{%= $.height %};\"\r\n        data-dojo-type=\"Sage.UI.Controls.SimpleTextarea\" readonly=\"readonly\" dragRestriction=\"true\"  tabindex=\"{%= $.tabIndex %}\"\r\n    {% if ($.enabled && !$.readOnly) { %}\r\n        data-dojo-attach-event=\"onDblClick: showDialog, ondijitclick: showDialog\"\r\n    {% } %}\r\n        slxchangehook=\"true\" >{%= $.displayValue %}</textarea>\r\n    {% if ($.enabled && !$.readOnly) { %}\r\n    <img alt=\"{%= $.imageData.imageEditAltText %}\" data-dojo-attach-event=\"ondijitclick: showDialog\" class=\"address-edit-button\"\r\n         src=\"{%= $.imageData.imageEditUrl %}\" title=\"{%= $.imageData.imageEditToolTip %}\" id=\"{%= $.clientId %}-Button\" \r\n          tabindex=\"{%= $.tabIndex %}\" />\r\n    {% } %}\r\n    {% if ($.enabled && $.showButton) { %}\r\n    <img alt=\"{%= $.imageData.imageMapQuestAltText %}\" data-dojo-attach-event=\"ondijitclick: showMap\" class=\"address-map-button\"\r\n         src=\"{%= $.imageData.imageMapQuestUrl %}\" title=\"{%= $.imageData.imageMapQuestToolTip %}\" id=\"{%= $.clientId %}-MapQuest\" \r\n          tabindex=\"{%= $.tabIndex %}\" />\r\n    {% } %}\r\n</div>",
'url:Sage/UI/Controls/templates/AddressEdit.html':"<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n<div>\r\n        <table style=\"width:100%;height:100%;\">\r\n                {% for (var i = 0; i < $.fields.length; i++) { %}\r\n                {% if ($.fields[i].visible) { %}\r\n                    <tr>\r\n                        <td><label>{%= $.fields[i].fieldLabel %}</label></td>\r\n                        <td style=\"width: 150px;\">\r\n                            {% if ($.fields[i].xtype === 'picklistcombo') { %}\r\n                            <select data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\"\r\n                                dojoAttachPoint=\"_valueBox\"\r\n                                pickListName=\"{%= $.fields[i].pickList.pickListName %}\"\r\n                                storeMode=\"text\"\r\n                                style=\"width: 100%;\"\r\n                                value=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                           {% if ($.fields[i].xtype === 'checkbox') { %}\r\n                                <input data-dojo-type=\"Sage.UI.Controls.CheckBox\"\r\n                                checked=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                           {% if ($.fields[i].xtype === 'textfield') { %}\r\n                                <input data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                                style=\"width: 100%;\" type=\"text\"\r\n                                value=\"{%= $.fields[i].value %}\"\r\n                           {% } %}\r\n                                id=\"{%= $.id %}-{%= $.fields[i].name %}\"\r\n                                name=\"{%= $.fields[i].formClientId %}\"\r\n                                shouldPublishMarkDirty=\"false\"\r\n                                onChange=\"dijit.byId('{%= $.id %}').editorChange();\"\r\n                                textAlign=\"{%= $.fields[i].textAlign %}\" data-dojo-attach-point=\"focusNode\"\r\n                                maxLength=\"{%= $.fields[i].maxLength %}\" />\r\n                        </td>\r\n                   </tr>\r\n                {% } %}          \r\n                {% } %}            \r\n        </table>                    \r\n        <div class=\"button-bar alignright\" style=\"clear: both\">\r\n            <button id=\"{%= $.id %}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId('{%= $.id %}')._okClicked();\">\r\n                {%= $.okText %}\r\n            </button>\r\n            <button id=\"{%= $.id %}-CancelButton\" data-dojo-type=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId('{%= $.id %}')._cancelClicked();\">\r\n                {%= $.cancelText %}\r\n            </button>\r\n        </div>\r\n</div>"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
/**
* @class Class for Address control read only texarea with edit dialog.
*/
define("Sage/UI/Controls/Address", [
       'dijit/_Widget',
       'Sage/_Templated',
       'Sage/Utility',
       'Sage/UI/Controls/TextBox',
       'Sage/UI/Controls/PickList',
       'Sage/UI/Controls/DropDownSelectPickList',
       'dijit/Dialog',
       'Sage/UI/Controls/_DialogHelpIconMixin',
       'dojo/i18n!./nls/Address',
       'dojo/text!./templates/Address.html',
       'dojo/text!./templates/AddressEdit.html',
       'dojo/_base/declare',
       'dojo/_base/array'
],
// ReSharper disable InconsistentNaming
function (
    _Widget,
    _sageTemplated,
    utility,
    textBox,
    pickList,
    dropDownSelectedPickList,
    dialog,
    _DialogHelpIconMixin,
    i18nStrings,
    addressTemplate,
    editTemplate,
    declare,
    array
) {
// ReSharper restore InconsistentNaming
    var widget = declare('Sage.UI.Controls.Address', [_Widget, _sageTemplated], {
        //using Simplate to faciliate conditional display
        widgetTemplate: new Simplate(addressTemplate.split('\r')),
        dialogContent: new Simplate(editTemplate.split('\r')),
        // @property {string} Overrides default dialog layout template.
        templateOverridePath: '', //i.e. 'templates/Address-Override.html'
        widgetsInTemplate: true,
        clientId: '',
        tabIndex: 0,
        //.net property
        autoPostBack: false,
        readOnly: false,
        enabled: true,
        showButton: true,
        displayValue: '',
        displayValueClientId: '',
        height: '',
        // @property {object} The Urls and ToolTips of map and edit buttons.
        imageData: {
            imageEditUrl: '',
            // @property {string} The tooltip of the edit image.
            imageEditToolTip: '',
            imageEditAltText: '',
            // @property {string} The url of the map image.
            imageMapQuestUrl: '',
            // @property {string}  The tooltip of the map image.
            imageMapQuestToolTip: '',
            imageMapQuestAltText: ''
        },
        fields: [],
        mapQuestValues: {},
        // @property {function} - Provides change hook for fields in the edit dialog to mark the control as dirty.
        editorChange: function () {
            this.isDirty = true;
        },
        // @property {boolean} - Indicates whether a field has been changed in the edit dialog. default = true
        isDirty: false,
        //.net bound control
        // @property {string} Client Id of the main address control.
        name: '',
        constructor: function (options) {
            dojo.mixin(this, options);
            options.id = options.clientId;
            this.resources = i18nStrings;
            if (options.templateOverridePath && options.templateOverridePath.length > 0) {
                try {
                    this.dialogContent = new Simplate(dojo['cache']('Sage.UI.Controls', options.templateOverridePath).split('\r'));
                }
                catch (e) {
                    // No overriding template exists.
                    console.log('Could not load template:' + e.description);
                }
            }
            this.inherited(arguments);
        },
        setAttribute: function (attr, val) {
            /* Hide deprecated warnings, due to the parser and _WidgetBase assuming focusNode is a dom node and not a widget */
            this.set(attr, val);
        },
        postCreate: function () {
            this.inherited(arguments);
            // the tabindex property is pointing to a div, and it shouldn't be selectable via tabbing
            // (however, tabindex is still necessary on construction to set the index of child controls)
            this.setAttribute('tabindex', '-1');
        },
        showDialog: function () {
            this.editDialog = dijit.byId([this.id, '-Dialog'].join(''));
            if (!this.editDialog) {
                this.editDialog = new dialog({
                    title: this.resources.dialogTitle,
                    id: [this.id, '-Dialog'].join(''),
                    'class': 'address-edit'
                });
                dojo.mixin(this.editDialog, new _DialogHelpIconMixin());
                this.editDialog.createHelpIconByTopic("accountaddresschange");
            }
            this.htmlEncodeForEditDialog();
            this.editDialog.set("content", this.dialogContent.apply({
                id: this.id,
                cancelText: this.resources.cancelText,
                okText: this.resources.okText,
                fields: this.fields
            }));
            this.isDirty = false;
            this.editDialog.show();
            if (this.modality === 'modeless') {
                dojo.destroy([this.id, '-Dialog_underlay'].join(''));
            }
        },
        // encode doube-quotes before sending them to the edit template,
        // otherwise they escape a double quote and the value won't fully appear
        // (trying to encode before this point causes the encoded string to appear
        //  in the textarea control for the address, which is bad)
        htmlEncodeForEditDialog: function() {
            array.forEach(this.fields, function(entry, i) {
                if(entry.xtype === 'textfield'
                    && entry.value.indexOf('"') > -1) {
                    entry.value = utility.htmlEncode(entry.value);
                }
            });
        },
        showMap: function () {
            this.createFormItems();
            var values = this.getAddressValues();
            var map = { 'streetaddress': 'addr1', 'city': 'city', 'state': 'state', 'zip': 'postalcode', 'country': 'country' };
            var parameters = {};

            for (var key in map) {
                if (values[map[key]])
                    parameters[key] = (typeof values[map[key]] === "object") ? values[map[key]].text : values[map[key]];
            }
            parameters.level = 9;
            parameters.iconid = 0;
            parameters.height = 300;
            parameters.width = 500;
            var queryParams = [];
            for (var paramKey in parameters) {
                queryParams.push(paramKey + "=" + encodeURIComponent(parameters[paramKey]));
            }
            var url = "http://www.mapquest.com/cgi-bin/ia_free?" + queryParams.join("&");
            var options = 'directories=no,location=no,menubar=no,pageXOffset=0px,pageYOffset=0px,scrollbars=yes,status=no,titlebar=no,toolbar=yes';
            window.open(url, '', options);
        },
        createFormItems: function () {
            var items = [];
            for (var i = 0; i < this.fields.length; i++) {
                if (this.fields[i].visible === false)
                    continue;
                this.mapQuestValues[this.fields[i].name] = this.fields[i];
                var f = $.extend(this.fields[i], this.fields[i].pickList, {
                    id: this._clientId + "_field_" + this.fields[i].name,
                    stateful: false,
                    anchor: (this.fields[i].xtype != "checkbox") ? "100%" : false
                });
                if (f.maxLength > 0) {
                    f.autoCreate = { tag: 'input', type: 'text', maxlength: this.fields[i].maxLength };
                }
                f.tabIndex = i + 1;
                items.push(f);
            }
            return items;
        },
        getAddressValues: function () {
            var values = {};
            for (var name in this.mapQuestValues) {
                var field = this.mapQuestValues[name];
                if (field) {
                    values[name] = field.value;
                }
            }
            return values;
        },
        getEditFields: function () {
			
            this.setDataFields();
        },
        setDataFields: function () {
            var editField, dataField, xtype;
            for (var i = 0; i < this.fields.length; i++) {
                // Get the edit field from inside the dialog.
                editField = dijit.byId([this.id, '-', this.fields[i].name].join(''));
                // Get the hidden dataField provided by the server control
                dataField = dojo.byId(this.fields[i].formClientId);
                // Get the field type
                xtype = this.fields[i].xtype;

                // Check to see if the field has been added to the form.
                if (editField) {
                    //Set the data fields for PickLists
                    if (xtype === 'picklistcombo') {
                        //Check to see if a hidden field has been added to the configuration. Update it if so.
                        if (dataField) {
                            dataField.value = editField.get('value');
                        }
                        //Always update the field obj.
                        this.fields[i].value = editField.get('value');
                    }

                    //Set the data fields for CheckBox
                    if (xtype === 'checkbox') {
                        //Check to see if a hidden field has been added to the configuration and update it if so.
                        if (dataField) {
                            dataField.checked = editField.get('checked');
                        }
                        //Always update the field obj.  Checkbox as 'value' rather than 'checked' 
                        this.fields[i].value = editField.get('checked');
                    }

                    //Set the data fields for Text fields
                    if (xtype === 'textfield') {
                        //Check to see if a hidden field has been added to the configuration and update it if so.
                        if (dataField) {
                            dataField.value = editField.get('value');
                        }
                        //Always update the field obj.
                        this.fields[i].value = editField.get('value');
                    }
                }
            }
        },
        _okClicked: function () {
			var that = this;
			setTimeout((function (d) {
				return function () {
					that._updateValues();
				};
			})(that), 1);
        },
		_updateValues: function() {
            if (this.isDirty) {
                this.getEditFields();
                var resultNode = dojo.byId(this.resultValueClientId);
                dijit.byId(this.clientId + '_displayText').set('value', Sage.Format.Address.formatAddress(this.fields, true));
                resultNode.value = Sage.Format.Address.formatAddress(this.fields, true);
                dojo.publish("Sage/events/markDirty");
                if (this.autoPostBack) {
                    __doPostBack(resultNode.name, '');
                }
            }
		},
        _cancelClicked: function () {
            this.editDialog.hide();
        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/Editors/nls/FormUsagesPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/FormUsagesPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Usage",
            portalText: "Portal",
            viewText: "View",
            modesText: "Modes",
            descriptionText: "Description"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/nls/DurationSelect':function(){
﻿define("Sage/UI/Controls/nls/DurationSelect", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            minuteText: 'minute',
            minutesText: 'minutes',
            hourText: 'hour',
            hoursText: 'hours',
            dayText: 'day',
            daysText: 'days'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Alarms/nls/AlarmCountDown':function(){
﻿define("Sage/UI/Alarms/nls/AlarmCountDown", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            startsInText: 'Starts in',
            overduebyText: 'Overdue by',
            minuteText: 'minute',
            minutesText: 'minutes',
            hourText: 'hour',
            hoursText: 'hours',
            dayText: 'day',
            daysText: 'days',
            weekText: 'week',
            weeksText: 'weeks',
            monthText: 'month',
            monthsText: 'months',
            yearText: 'year',
            yearsText: 'years',
            startsNowText: 'Starts now'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Dashboard/DashboardTabController':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/DashboardTabController", [
       "dijit/layout/ScrollingTabController",
       "dojo/i18n",
       "dijit/Menu",
       "dijit/MenuItem",
       "dijit/MenuSeparator",
       'dojo/i18n!./nls/DashboardTabController',
       'dojo/i18n!../nls/Boolean',
       'dojo/_base/declare'
],
function (scrollingTabController, i18n, menu, menuItem, MenuSeparator, nlsTabController, nlsBoolean, declare) {
    //dojo.requireLocalization("dijit", "common");
    var _tabButton = declare("dijit.layout._TabButton", dijit.layout._ScrollingTabControllerButton, {
        // summary:
        //		A tab (the thing you click to select a pane).
        // description:
        //		Contains the title of the pane, and optionally a close-button to destroy the pane.
        //		This is an internal widget and should not be instantiated directly.
        // tags:
        //		private
        
        // baseClass: String
        //		The CSS class applied to the domNode.
        baseClass: "dijitTab",
        
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI.Dashboard", "DashboardTabController"));
            dojo.mixin(this, i18n.getLocalization("Sage.UI", "Boolean"));
        },

        postCreate: function () {
            this.inherited(arguments);
            dojo.setSelectable(this.containerNode, false);
        },
        
        _setCloseButtonAttr: function (disp) {            
            var _nlsResources = i18n.getLocalization("dijit", "common");
            if (disp) {
                if (this.closeNode) {
                    dojo.attr(this.closeNode, "title", _nlsResources.itemClose);
                }
                // add context menu onto title button
                this._closeMenu = new menu({
                    id: this.id + "_Menu",
                    dir: this.dir,
                    targetNodeIds: [this.domNode]
                });

                this._closeMenu.addChild(new menuItem({
                    label: this.newTabText,  //'New Tab'
                    dir: this.dir,
                    id: this._closeMenu.id + '_New',
                    onClick: function () {
                        // get the dashboard
                        var db = dijit.byId('Dashboard');
                        db._createPage(true, db.newTabText); //'New Tab'
                    }
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.addContentText, // 'Add Content'
                    dir: this.dir,
                    id: this._closeMenu.id + '_AddContent',
                    onClick: dojo.hitch(this, function () {
                        // get the id of the page for this tab
                        var id = this.id.replace('Dashboard_tablist_', '');
                        var d = dijit.byId(id);
                        // go to the popup
                        d._newWidgetMenu();
                    })
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.editOptionsText,  // 'Edit Options'
                    dir: this.dir,
                    id: this._closeMenu.id + '_Edit',
                    onClick: dojo.hitch(this, function () {
                        // get the id of the page for this tab
                        var id = this.id.replace('Dashboard_tablist_', '');
                        var d = dijit.byId(id);
                        // go to the popup
                        d._editOptionsMenu();
                    })
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.shareTabText, //'Share Tab'
                    dir: this.dir,
                    id: this._closeMenu.id + '_Share',
                    onClick: dojo.hitch(this, function () {
                        // get the id of the page for this tab
                        var id = this.id.replace('Dashboard_tablist_', '');
                        var d = dijit.byId(id);
                        d._releaseManager.page = d;
                        // go to the popup
                        d._releaseManager.share();
                    })
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.hideTabText, //'Hide Tab'
                    dir: this.dir,
                    id: this._closeMenu.id + '_Hide',
                    onClick: dojo.hitch(this, function () {
                        // get the id of the page for this tab
                        var id = this.id.replace('Dashboard_tablist_', '');
                        // the tab
                        var d = dijit.byId(id);
                        // the dashboard
                        var db = dijit.byId('Dashboard');
                        // send the actual dijit instance of the tab to db
                        db._hidePage(d);
                    })
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.copyTabText, // 'Copy Tab'
                    dir: this.dir,
                    id: this._closeMenu.id + '_Copy',
                    onClick: dojo.hitch(this, function () {
                        // get the id of the page for this tab
                        var id = this.id.replace('Dashboard_tablist_', '');
                        // the tab
                        var d = dijit.byId(id);
                        // the dashboard
                        var db = dijit.byId('Dashboard');
                        // send the actual dijit instance of the tab to db
                        db._copyPage(d);
                    })
                }));

                this._closeMenu.addChild(new menuItem({
                    label: this.showTabText, // 'Show Tab'
                    dir: this.dir,
                    id: this._closeMenu.id + '_Show',
                    onClick: dojo.hitch(this, function () {
                        var d = dijit.byId('Dashboard');
                        d._showTabMenu();
                    })
                }));

                var id = this.id.replace('Dashboard_tablist_', '');
                var d = dijit.byId(id);
                if(d.permission) {
                    this._closeMenu.addChild(new menuItem({
                        label: this.deleteTabText, //"Delete Tab"
                        dir: this.dir,
                        id: this._closeMenu.id + '_Delete',
                        onClick: dojo.hitch(this, function () {
                            var id = this.id.replace('Dashboard_tablist_', '');
                            var d = dijit.byId(id);
                            
                            var fn = function (ans) {
                                if (ans) {
                                    if(d.permission) {
                                        dojo.publish(
                                            // send a ref to the actual page dijit
                                            '/ui/dashboard/pageDelete', [d]);
                                    }
                                    else {
                                        var opts = {
                                            title: d.resources.errorText,
                                            query: d.resources.permissionErrorText,
                                            yesText: d.resources.okButton,
                                            style: {width: '350px'},
                                            align: 'right'
                                        }
                                    
                                        Sage.UI.Dialogs.raiseQueryDialogExt(opts);
                                    }
                                }
                            };
                            
                            var opts = {
                                    title: this.deleteTabText,
                                    query: this.deleteTabConfirmText,
                                    callbackFn: fn,
                                    yesText: this.yesText,
                                    noText: this.noText,
                                    style: {width: '350px'},
                                    align: 'right'
                                }
                            // we need a confirm
                            Sage.UI.Dialogs.raiseQueryDialogExt(opts);
                        })
                    }));
                }
                
                this._closeMenu.addChild(new MenuSeparator());
                
                this._closeMenu.addChild(new menuItem({
                    label: this.helpText, // 'Help'
                    dir: this.dir, // ...?
                    id: this._closeMenu.id + '_Help',
                    onClick: dojo.hitch(this, function() {
                        Sage.Utility.openHelp('Working_with_the_Dashboard', 'MCWebHelp');
                    })
                }));

            } else {
                if (this._closeMenu) {
                    this._closeMenu.destroyRecursive();
                    delete this._closeMenu;
                }
            }
        },
        _setLabelAttr: function (/*String*/content) {
            // summary:
            //		Hook for attr('label', ...) to work.
            // description:
            //		takes an HTML string.
            //		Inherited ToggleButton implementation will Set the label (text) of the button; 
            //		Need to set the alt attribute of icon on tab buttons if no label displayed
            this.inherited(arguments);
            if (this.showLabel === false && !this.params.title) {
                this.iconNode.alt = dojo.trim(this.containerNode.innerText || this.containerNode.textContent || '');
            }
        },

        destroy: function () {
            if (this._closeMenu) {
                this._closeMenu.destroyRecursive();
                delete this._closeMenu;
            }
            this.inherited(arguments);
        }
    });

    var widget = declare("Sage.UI.Dashboard.DashboardTabController", scrollingTabController, {
        // summary:
        // 		Set of tabs (the things with titles and a close button, that you click to show a tab panel).
        //		Used internally by `dijit.layout.TabContainer`.
        // description:
        //		Lets the user select the currently shown pane in a TabContainer or StackContainer.
        //		TabController also monitors the TabContainer, and whenever a pane is
        //		added or deleted updates itself accordingly.
        // tags:
        //		private

        // tabPosition: String
        //		Defines where tabs go relative to the content.
        //		"top", "bottom", "left-h", "right-h"
        tabPosition: "top",
        
        // buttonWidget: String
        //		The name of the tab widget to create to correspond to each page
        buttonWidget: "dijit.layout._TabButton",
        
        addChild: function() {
            this.inherited(arguments);
            
            if(!this.perfomedHeightResizing) {
                this.perfomedHeightResizing = true;
                dojo.style(this.containerNode, 'height', '37px');
                dojo.style(this.containerNode, 'top', '4px');
            }
        },

        _rectifyRtlTabList: function () {
            // summary:
            //		For left/right TabContainer when page is RTL mode, rectify the width of all tabs to be equal, otherwise the tab widths are different in IE

            if (0 >= this.tabPosition.indexOf('-h')) { return; }
            if (!this.pane2button) { return; }

            var maxWidth = 0;
            for (var pane in this.pane2button) {
                var ow = this.pane2button[pane].innerDiv.scrollWidth;
                maxWidth = Math.max(maxWidth, ow);
            }
            //unify the length of all the tabs
            for (pane in this.pane2button) {
                this.pane2button[pane].innerDiv.style.width = maxWidth + 'px';
            }
        }
    });

    return widget;
});
},
'Sage/Utility/Validate':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/Validate", [],
    function () {
        //summary: Validate Utility will recursively run the validation method
        //          on all qualifying widgets inside the node provided.
        Sage.namespace('Utility.Validate');
        dojo.mixin(Sage.Utility.Validate, {
            findNestedWidgets: function (initialNode) {
                return dojo.query("[widgetid]", initialNode)
                    .map(dijit.byNode)
                    //Filter out invalid widget ids that yield undefined.
                    .filter(function (wid) { return wid; });  
            },
            shouldSubmit: function () {
                // Called from the onSubmit of the <form>. Checks success of validation performed at Save Click.
                if (!this._isValid) {
                    //Set _isValid to true to prepare for the next validation attempt and to allow for navigation.
                    this._isValid = true;
                    return false;
                }
                return true;
            },
            _isValid: true,
            _getWorkspaceNode: function (workspace) {
                var node;
                switch (workspace) {
                    case 'Sage.Platform.WebPortal.Workspaces.DialogWorkspace':
                        node = 'DialogWorkspace_window';
                    break;
                    default:
                        //Sage.Platform.WebPortal.Workspaces.MainContentWorkspace 
                        //Sage.Platform.WebPortal.Workspaces.TabWorkspaces
                        node = 'mainform';
                }
                return node;
            },
            onWorkSpaceSave: function (workspace) {
                var node = this._getWorkspaceNode(workspace);
                this._isValid = this.runValidation(node);
            },
            runValidation: function (node) {
                //summary: Validates all dojo based controls inside the provided node.
                var widgets = this.findNestedWidgets(dojo.byId(node)),
                stateErrors = false;
                
                dojo.forEach(widgets, function (widget) {
                    if (widget.validate) {
                        // Need to set this so that "required" widgets get their state set.
                        widget._hasBeenBlurred = true;
                        //TODO: How do we handle readOnly fields that get populated by other actions? // widget.readOnly ||
                        var valid = widget.disabled || !widget.validate || widget.validate();
                        if (!valid && !stateErrors) {
                            // Set focus of the first non-valid widget
                            dojo.window.scrollIntoView(widget.containerNode || widget.domNode);
                            widget.focus();
                            stateErrors = true;
                        }
                    }
                }, this);
                if (stateErrors) {
                    return false;
                }
                return true;
            }
        });
    });
},
'Sage/UI/Controls/CurrencyTextBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/CurrencyTextBox", [
       'dijit/form/CurrencyTextBox',
       'dojo/currency',
       'Sage/Utility',
       'dojo/_base/declare',
       'dojo/_base/lang'
],
function (currencyTextBox, currency, Utility, declare, lang) {
    var widget = declare("Sage.UI.Controls.CurrencyTextBox", [currencyTextBox], {
        shouldPublishMarkDirty: true,
        //.Net control behavior
        autoPostBack: false,
        hotKey: '',
        attributeMap: {
            hotKey: { node: 'textbox', type: 'attribute', attribute: 'accessKey' }
        },
        onBlur: function () {
            this.textbox.value = Utility.maximizeDecimalDigit(this.textbox.value, this.constraints.places);
        },
        _sageUICurrencyTextBox_IsValid: function () {
            if (this.constraints.places > -1) {
                var txtVal = Utility.restrictDecimalDigit(this.textbox.value, this.constraints.places);
                this.textbox.value = lang.trim(txtVal.replace(Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol, ""));
            }
            this.inherited(arguments);
        },
        postCreate: function () {
            this.connect(this, 'isValid', this._sageUICurrencyTextBox_IsValid);
            this.connect(this, 'onChange', this.onChanged);
            this.connect(this, 'onBlur', this.onBlur);
            this.inherited(arguments);
        },
        onChanged: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if (this.autoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.id, null);
                }
            }
        },
        setAttribute: function (attr, val) {
            /* Hide deprecated warnings, due to the parser and _WidgetBase assuming focusNode is a dom node and not a widget */
            this.set(attr, val);
        }
    });

    return widget;
});
},
'Sage/QuickForms/Design/Editors/OwnerAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/OwnerAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/OwnerAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.OwnerAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _required: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',

        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._required.set('value', this._designer.get('required'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/Groups/BaseGroupContextService':function(){
﻿/*globals Sage, dojo, window, define */
define("Sage/Groups/BaseGroupContextService", [
        'Sage/Utility',
        'dojo/string',
        'Sage/Data/SDataServiceRegistry',
        'dojo/ready',
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/_base/array'
    ],
function (
        utility,
        dString,
        sDataServiceRegistry,
        ready,
        lang,
        declare,
        array
    ) {
    var baseGroupContextService = declare('Sage.Groups.BaseGroupContextService', null, {
        _adHocGroupList: null,
        _connects: null,
        _subscribes: null,
        _emptyContext: null,
        _currentRequestHandle: null,
        _isAdHocGroupListRetrieved: false,
        constructor: function () {
            this._connects = [];
            this._subscribes = [];
            this._adHocGroupList = [];
            this._emptyContext = {
                DefaultGroupID: null,
                CurrentGroupID: null,
                CurrentTable: null,
                CurrentName: null,
                CurrentEntity: null,
                CurrentFamily: null
            };

            ready(lang.hitch(this, function () {
                if (!this.isContextRequired()) {
                    var context = utility.getValue(window, 'Sage.Groups._groupContext'),
                        container = utility.getValue(window, 'Sage.UI.DataStore.Filters');
                    if (container) {
                        if (context['AppliedFilterInfo']) {
                            container['default'] = this.createFilterExtendedSet(context['AppliedFilterInfo']);
                        }
                    }
                }

                if (this.isContextRequired()) {
                    this.requestContext();
                }
            }));
        },
        createFilterExtendedSet: function (appliedFilterInfo) {
            var sourceDefinitionSet = appliedFilterInfo['definitionSet'] || [],
                sourceApplied = appliedFilterInfo['applied'] || [],
                resultDefinitionSet = {},
                resultApplied = {},
                sourceItem,
                resultItem,
                i,
                j,
                value;

            for (i = 0; i < sourceDefinitionSet.length; i++) {
                sourceItem = sourceDefinitionSet[i];
                resultItem = {
                    '$key': sourceItem['id'],
                    '$partial': true,
                    'filterName': sourceItem['filterName'],
                    'displayName': sourceItem['displayName'],
                    'propertyName': sourceItem['propertyName'],
                    'propertyDataTypeId': sourceItem['propertyDataTypeId'],
                    'details': {}
                };

                if (sourceItem['filterType'] == 'rangeFilter') {
                    resultItem['details']['rangeFilter'] = {
                        'characters': sourceItem['characters']
                    };
                } else {
                    resultItem['details']['distinctFilter'] = {};
                }

                resultDefinitionSet[sourceItem['id']] = resultItem;
            }

            for (i = 0; i < sourceApplied.length; i++) {
                sourceItem = sourceApplied[i];
                resultItem = {};

                for (j = 0; j < sourceItem['rangeValues'].length; j++) {
                    value = sourceItem['rangeValues'][j];
                    resultItem[value['rangeName']] = lang.mixin({}, value);
                }

                for (j = 0; j < sourceItem['distinctValues'].length; j++) {
                    value = sourceItem['distinctValues'][j];
                    if (typeof value === 'string') {
                        resultItem[value] = value;
                    }
                }

                resultApplied[sourceItem['id']] = resultItem;
            }

            return {
                'definitionSet': resultDefinitionSet,
                'applied': resultApplied
            };
        },
        destroy: function () {
            array.forEach(this._connects, function (handle) {
                dojo.disconnect(handle);
            });

            this.unsubscribeConnects();

            this.uninitialize();
        },
        unsubscribeConnects: function () {
            array.forEach(this._subscribes, function (handle) {
                dojo.unsubscribe(handle);
            });
        },
        uninitialize: function () {
        },
        isContextRequired: function () {
            var results = !(Sage && Sage.Groups && Sage.Groups._groupContext);
            return results;
        },
        createCompatibleContext: function (context) {
            if (context['currentGroupId'] == 'LOOKUPRESULTS') {
                context['currentName'] = 'Lookup Results';
            }
            var compatibleContext = {
                'AppliedFilterInfo': context['appliedFilterInfo'],
                'ContainsPositionState': context['containsPositionState'],
                'CurrentDisplayName': context['currentDisplayName'],
                'CurrentEntity': context['currentEntity'],
                'CurrentEntityID': context['currentEntityId'],
                'CurrentEntityPosition': context['currentEntityPosition'],
                'CurrentFamily': context['currentFamily'],
                'CurrentGroupCount': context['currentGroupCount'],
                'CurrentGroupID': context['currentGroupId'],
                'CurrentName': context['currentName'],
                'CurrentTable': context['currentTable'],
                'CurrentTableKeyField': context['currentTableKeyField'],
                'DefaultGroupID': context['defaultGroupId'],
                'FirstEntityID': context['firstEntityId'],
                'LastEntityID': context['lastEntityId'],
                'LookupLayoutGroupName': context['lookupLayoutGroupName'],
                'NextEntityID': context['nextEntityId'],
                'PreviousEntityID': context['previousEntityId'],
                'RetrievedOn': context['retrievedOn'],
                'isAdhoc': context['isAdHoc']
            };

            if (!context['appliedFilterInfo']) {
                delete compatibleContext.AppliedFilterInfo;
            }

            return compatibleContext;
        },
        _onDefaultFilterRefresh: function (applied, definitionSet, filterManager) {

        },
        getContext: function () {

        },
        setContext: function (context) {
            var container = Sage && Sage.Groups;
            if (container && context) {
                lang.mixin(container._groupContext, context);
                this.onContextSet(container._groupContext);
            }
        },
        setCurrentGroup: function (groupId, groupName) {

        },
        _onSetContextRequestSuccess: function (entry) {
            var context = entry && entry['response'],
                compatibleContext = context && this.createCompatibleContext(context);
            if (compatibleContext) this.setContext(compatibleContext);

            this.onCurrentGroupChanged({ current: compatibleContext });
        },
        _onSetContextRequestFailure: function (response, o) {
        },
        onSuccessfulGroupChanged: function (data) {
            var previousContext = this.getContext();
            this.setContext(data);
            this.onCurrentGroupChanged({ current: data, previous: previousContext });
        },
        onCurrentGroupChanged: function (options) {

        },
        publishFiltersApplied: function () {
            // When the dom is ready publish that we have applied filters.
            var context = this.getContext();
            if (context.AppliedFilterInfo) {
                ready(lang.hitch(this, function () {
                    var extendedSet = this.createFilterExtendedSet(context.AppliedFilterInfo),
                        container = utility.getValue(window, 'Sage.UI.DataStore.Filters');
                    container['default'] = extendedSet;
                    dojo.publish('/ui/filters/default/apply', [extendedSet['applied'], extendedSet['definitionSet'], this]);
                }));
            }
        },
        applyFilters: function (filterManager) {
            var context = this.getContext();
            if (context.AppliedFilterInfo) {
                var extendedSet = this.createFilterExtendedSet(context.AppliedFilterInfo),
                        container = utility.getValue(window, 'Sage.UI.DataStore.Filters');
                container['default'] = extendedSet;
                if (filterManager) {
                    filterManager._onApply(extendedSet['applied'], extendedSet['definitionSet'], this);
                }

            }
        },
        onContextSet: function (context) {

        }
    });

    return baseGroupContextService;
});

},
'Sage/UI/PopupMenuBarItem':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/PopupMenuBarItem", [
       'Sage/UI/MenuBarItem',
       'Sage/UI/PopupMenuItem',
       'dojo/_base/declare'
],
function (MenuBarItem, PopupMenuItem, declare) {
    // summary:
    //      Item in a MenuBar like "File" or "Edit", that spawns a submenu when pressed (or hovered)
    return declare("Sage.UI.PopupMenuBarItem", [PopupMenuItem, MenuBarItem], {});
});

},
'Sage/UI/NotesHistoryList':function(){
﻿/*globals Sage, dojo define */
define("Sage/UI/NotesHistoryList", [
        'dijit/_Widget',
        'dijit/_TemplatedMixin',
        'dijit/_WidgetsInTemplateMixin',
        'Sage/Utility/Activity',
        'Sage/Utility/Email',        
        'Sage/Utility',
        'Sage/UI/SLXPreviewGrid',
        'Sage/UI/Columns/DateTime',
        'Sage/UI/Columns/SlxLink',
        'Sage/UI/SLXPreviewGrid/Filter/Text',
        'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin',
        'dojo/data/ItemFileReadStore',
        'dijit/form/FilteringSelect',
        'dijit/form/CheckBox',
        'Sage/UI/Dialogs',
        'dojo/string',
        'dojo/date/locale',
        'dojo/i18n!./nls/NotesHistoryList',
        'dojo/_base/declare'
], function (_Widget,
    _Templated,
    _WidgetsInTemplateMixin,
    activityUtility,
    email,
    utility,
    PreviewGrid,
    DateTimeColumn,
    LinkColumn,
    textFilter,
    filterMixin,
    ItemFileReadStore,
    FilteringSelect,
    CheckBox,
    sageDialogs,
    dojoString,
    dateLocale,
    notesHistoryListStrings,
    declare) {
    var filterTypeWidget = declare('Sage.UI.HistoryTypeFilterWidget', [_Widget, _Templated, _WidgetsInTemplateMixin, filterMixin], {
        // summary:
        //  Filter widget for the history type.   Combination of a dropdown (note the available types are hard-coded)
        //  and a checkbox to enable showing the DB changes
        templateString: ['<div>',
            '<div dojoAttachPoint="selectContainer"></div>',
            '<div class="chkShowDBChanges">',
            '<input id="chkShowDbChanges" type="checkbox" dojoType="dijit.form.CheckBox" dojoAttachPoint="chkShowDbChanges" />',
            '<label for="chkShowDbChanges">',
                notesHistoryListStrings.showDbChangesText,
            '</label>',
            '</div>',
        '</div>'].join(''),

        buildRendering: function () {
            this.inherited(arguments);
            var options = [];
            dojo.forEach(["atAppointment", "atPhoneCall", "atToDo", "atNote", "atPersonal", "atInternal", "atSchedule", "atEMail", "atDoc", "atFax", "atLiterature", "atDatabaseChange"], function (item) {
                options.push({ name: activityUtility.getActivityTypeName(item), id: item });
            });
            var store = new ItemFileReadStore({
                data: {
                    items: options,
                    label: 'name',
                    identifier: 'id'
                }
            });
            this._select = new FilteringSelect({
                store: store,
                required: false
            }, this.selectContainer);
        },
        getQuery: function () {
            var showDb = this.chkShowDbChanges.get('checked');
            var type = this._select.get('value');
            if (type) {
                var c = '(Type eq "' + type + '"';
                if (showDb) {
                    c += ' or Type eq "atDatabaseChange"';
                }
                c += ')';
                return c;
            } else if (!showDb) {
                return 'Type ne "atDatabaseChange"';
            }
            return '';
        },
        reset: function () {
            this._select.set('value', '');
            this.chkShowDbChanges.set('checked', false);
        },
        getState: function () {
            return {
                'value': this._select.get('value'),
                'showDBChanges': this.chkShowDbChanges.get('checked')
            };
        },
        applyState: function (state) {
            if (state) {
                this._select.set('value', state['value'] || '');
                this.chkShowDbChanges.set('checked', state['showDBChanges']);
            }
        }
    });
    var completedDateRangeFilter = declare(Sage.UI.SLXPreviewGrid.Filter.DateRange, {
        //to override getQuery on base DateRange filter...
        getQuery: function () {
            var toIsoStringFromDate = function (value, isUpperBound) {
                // format to ISO
                // if isUpperBound is true it will add 1 day (used for upper bound in date range)
                if (!value)
                    return '';
                if (value.constructor !== Date)
                    value = Date.parse(value);
                if (isUpperBound) {
                    value.setUTCDate(value.getUTCDate() + 1);
                }
                return utility.Convert.toIsoStringFromDate(value);
            };
            var toTimelessIsoString = function (value, isUpperBound) {
                if (!value)
                    return '';
                if (value.constructor !== Date)
                    value = Date.parse(value);
                var pad = function (n) { return n < 10 ? '0' + n : n; };
                return [
                    value.getFullYear(),
                    '-',
                    pad(value.getMonth() + 1),
                    '-',
                    pad(value.getDate()),
                    (isUpperBound) ? 'T23:59:59Z' : 'T00:00:00Z'
                ].join('');
            };

            /*

            Logic for CompletedDate:
            Since the timeless flag only kindof indicates CompletedDate is a timeless value, we have to have additional logic.

            To see if it really is timeless you need:
            Timeless = true and CompletedDate = OriginalDate

            (((Timeless = false) or (Timeless = true and CompletedDate != OriginalDate)) and CompletedDate between <localgmtvalue fromdate> and <localgmtvalue todate>)
            or
            ((Timeless = true and CompletedDate = OriginalDate) and CompletedDate between <from00:00:00Z> and <to23:59:59Z>)

            */

            var dFrom = this.dteFrom.get('value');
            var dTo = this.dteTo.get('value');
            var fmt;
            var qry = '';
            if (!dFrom && !dTo) {
                return '';
            }
            if (dTo && dFrom) {
                fmt = [
                        '((((Timeless eq true and CompletedDate eq OriginalDate) and (CompletedDate ge \'${0}\' and CompletedDate lt \'${1}\'))) or',
                        '(((Timeless eq false) or (Timeless eq true and CompletedDate ne OriginalDate)) and (CompletedDate ge \'${2}\' and CompletedDate lt \'${3}\')))'
                    ].join('');
                qry = dojoString.substitute(fmt, [toTimelessIsoString(dFrom), toTimelessIsoString(dTo, true), toIsoStringFromDate(dFrom), toIsoStringFromDate(dTo, true)]);
            } else if (dFrom && !dTo) {
                fmt = [
                        '((((Timeless eq true and CompletedDate eq OriginalDate) and CompletedDate ge \'${0}\')) or',
                        '(((Timeless eq false) or (Timeless eq true and CompletedDate ne OriginalDate)) and CompletedDate ge \'${1}\'))'
                    ].join('');
                qry = dojoString.substitute(fmt, [toTimelessIsoString(dFrom), toIsoStringFromDate(dFrom)]);
            } else if (dTo && !dFrom) {
                fmt = [
                        '((((Timeless eq true and CompletedDate eq OriginalDate) and CompletedDate lt \'${0}\')) or',
                        '(((Timeless eq false) or (Timeless eq true and CompletedDate ne OriginalDate)) and CompletedDate lt \'${1}\'))'
                    ].join('');
                qry = dojoString.substitute(fmt, [toTimelessIsoString(dTo, true), toIsoStringFromDate(dTo, true)]);
            }
            return qry;
        }
    });
    var notesHistoryList = declare('Sage.UI.NotesHistoryList', [_Widget], {
        placeholder: '',
        parentRelationshipName: '',
        workspace: '',
        tabId: '',
        connections: [],
        constructor: function () {
            this.connections = [];
        },
        startup: function () {
            var columnConfig = [
                {
                    field: '$key',
                    editable: false,
                    hidden: true,
                    id: 'id',
                    formatter: function (value, rowIdx, cel) {
                        var insertId = [cel.grid.id, '-row', rowIdx].join('');
                        var id = (utility.getModeId() === 'insert') ? insertId : value;
                        var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                        return anchor;
                    }
                }, {
                    field: 'Type',
                    name: notesHistoryListStrings.typeText,
                    type: activityUtility.historyTypeCell,
                    width: '90px',
                    filterConfig: { widgetType: filterTypeWidget }
                }, {
                    field: 'CompletedDate',
                    name: notesHistoryListStrings.dateTimeText,
                    type: DateTimeColumn,
                    useFiveSecondRuleToDetermineTimeless: true,
                    width: '100px',
                    filterConfig: {
                        widgetType: completedDateRangeFilter,
                        label: notesHistoryListStrings.dateRangeText
                    }
                }, {
                    field: 'UserName',
                    name: notesHistoryListStrings.userText,
                    width: '90px',
                    filterConfig: { widgetType: textFilter }
                }
            ];

            this._addEntitySpecificColumns(columnConfig);

            columnConfig.push({
                field: 'Description',
                name: notesHistoryListStrings.regardingText,
                width: '200px',
                filterConfig: { widgetType: textFilter }
            });
            columnConfig.push({
                field: 'Result',
                name: notesHistoryListStrings.resultText,
                width: '90px'
            });
            columnConfig.push({
                field: 'Category',
                name: notesHistoryListStrings.categoryText,
                width: '90px'
            });

            var toolConfig = [
                {
                    id: 'SendEmail',
                    imageClass: 'icon_Send_Write_email_16x16',
                    tooltip: notesHistoryListStrings.sendEmailText,
                    handler: this.onSendEmailClick,
                    scope: this
                }, {
                    id: 'SendWord',
                    imageClass: 'icon_Document_Type_16x16',
                    tooltip: notesHistoryListStrings.sendToWordText,
                    handler: this.onSendToWordClick,
                    scope: this
                }, {
                    id: 'NewNote',
                    imageClass: 'icon_New_Note_16x16',
                    tooltip: notesHistoryListStrings.addNoteText,
                    handler: Sage.Link.newNote,
                    scope: Sage.Link
                }, {
                    id: 'CompleteActivity',
                    imageClass: 'icon_complete_activity_16x16',
                    tooltip: notesHistoryListStrings.completeAnActivityText,
                    handler: Sage.Link.scheduleCompleteActivity,
                    scope: Sage.Link
                }, {
                    id: 'Help',
                    imageClass: 'icon_Help_16x16',
                    handler: function () { utility.openHelp('noteshistory'); },
                    tooltip: notesHistoryListStrings.helpText
                }
            ];

            var parentRelationshipName = this.parentRelationshipName;
            var options = {
                tools: toolConfig,
                columns: columnConfig,
                previewField: 'LongNotes',
                storeOptions: {
                    select: ['Type', 'CompletedDate', 'UserName', 'AccountName', 'ContactName', 'ContactId', 'OpportunityName', 'OpportunityId', 'Description', 'LongNotes', 'Timeless', 'Result'],
                    resourceKind: 'history',
                    sort: [{ attribute: 'CompletedDate'}]
                },
                //specifying sort here ^ means that this is always applied.  For example,
                //  when the user sorts by Result, the items are grouped by sorted results, but
                //  they are also sorted by CompletedDate within each Result value.
                slxContext: { workspace: this.workspace, tabId: this.tabId },
                contextualCondition: function () {
                    var fmt = '${0} eq \'${1}\'';
                    return dojoString.substitute(fmt, [parentRelationshipName, utility.getCurrentEntityId()]);
                },
                dblClickAction: Sage.Link.editHistory
            };
            
            //fire this so that customizations can change these options without overriding the whole thing
            this.onBeforeCreateGrid(options);
            var grid = new Sage.UI.SLXPreviewGrid.Grid(options, this.placeHolder);
            grid.startup();
            var localTC = dijit.byId('tabContent');
            localTC.resize();
            localTC.resize();

            this.connections.push(dojo.subscribe('/entity/history/create', this, this.onHistoryChanges));
            this.connections.push(dojo.subscribe('/entity/history/change', this, this.onHistoryChanges));
            this.connections.push(dojo.subscribe('/entity/history/delete', this, this.onHistoryChanges));
            dojo.connect(grid, 'destroy', this, this.destroy);
            this._grid = grid;
        },
        onHistoryChanges: function (history) {
            this._grid.refresh();
        },
        destroy: function () {
            for (var i = 0; i < this.connections.length; i++) {
                dojo.unsubscribe(this.connections.pop());
            }
            this.inherited(arguments);
        },
        _addEntitySpecificColumns: function (list) {
            var entityType = Sage.Services.getService('ClientEntityContext').getContext().EntityType;
            switch (entityType) {
                case "Sage.Entity.Interfaces.IAccount":
                case "Sage.Entity.Interfaces.IOpportunity":
                    list.push({
                        field: 'ContactName',
                        name: notesHistoryListStrings.contactText,
                        width: '100px',
                        type: LinkColumn,
                        idField: 'ContactId',
                        pageName: 'Contact'
                    });
                    break;
                case "Sage.Entity.Interfaces.IContact":
                    list.push({
                        field: 'OpportunityName',
                        name: notesHistoryListStrings.opportunityText,
                        width: '100px',
                        type: LinkColumn,
                        idField: 'OpportunityId',
                        pageName: 'Opportunity'
                    });
                    break;
            }
        },
        onSendEmailClick: function () {
            // handler for send email button
            var notes = this._grid.getSelectedRecords(["Description", "LongNotes", "AccountName", "ContactName", "CompletedDate", "UserName"]);
            if (notes.length == 0) {
                sageDialogs.showWarning(notesHistoryListStrings.pleaseSelectRecordsText);
                return;
            }
            var body = dojo.map(notes, function (n) {
                var txt = notesHistoryListStrings.accountText + ": " + n.AccountName + "\n";
                if (n.ContactName)
                    txt += notesHistoryListStrings.contactText + ": " + n.ContactName + "\n";
                var dateObject = utility.Convert.toDateFromString(n.CompletedDate);
                txt += notesHistoryListStrings.dateText + ": ";
                txt += dateLocale.format(dateObject) + "\n";
                txt += notesHistoryListStrings.userText + ": " + n.UserName + "\n";
                txt += notesHistoryListStrings.regardingText + ": " + n.Description + "\n\n";
                txt += notesHistoryListStrings.notesText + ":\n" + n.LongNotes;
                return txt;
            }).join("\n\n---------------------------------------------\n\n");

            var subject = dojo.map(notes, function (n) { return n.Description; }).join("; ");
            email.writeEmail("", subject, body);
        },
        onSendToWordClick: function () {
            // handler for send to word button
            var getWordApplication = function () {
                if (Sage.gears) {
                    // Sage - this is prefered, if available, because it will bypass the security dialog
                    try {
                        var cf = Sage.gears.factory.create("com.factory");
                        return cf.newActiveXObject("Word.Application");
                    } catch (e) { }
                }
                // IE
                if (typeof ActiveXObject != "undefined") {
                    try {
                        return new ActiveXObject("Word.Application");
                    } catch (e) { }
                }
                return null;
            };

            var notes = this._grid.getSelectedRecords(["Description", "LongNotes", "AccountName", "ContactName", "CompletedDate", "UserName", "Type"]);
            if (notes.length == 0) {
                sageDialogs.showWarning(notesHistoryListStrings.pleaseSelectRecordsText);
                return;
            }

            var wordApp = getWordApplication();
            if (!wordApp) {
                sageDialogs.showWarning(notesHistoryListStrings.UnableToFindWordMsg);
                return;
            }

            // header
            var wdSeekCurrentPageHeader = 9;
            var wdSeekMainDocument = 0;
            var doc = wordApp.Documents.Add();
            wordApp.PrintPreview = true;
            wordApp.Visible = true;
            wordApp.ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader;
            wordApp.Selection.TypeText(notesHistoryListStrings.accountText + ": " + notes[0].AccountName + "            " +
                    notesHistoryListStrings.printedOnText + ": " + dateLocale.format(new Date(), { selector: 'date', fullYear: true }));
            wordApp.ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument;

            dojo.forEach(notes, function (note) {
                wordApp.Selection.TypeText("___________________________________________________________");
                wordApp.Selection.TypeParagraph();
                wordApp.Selection.TypeParagraph();

                if (note.ContactName) {
                    wordApp.Selection.TypeText(notesHistoryListStrings.contactText + ":        ");
                    wordApp.Selection.TypeText(note.ContactName);
                    wordApp.Selection.TypeParagraph();
                }

                if (note.CompletedDate) {
                    var dateObject = utility.Convert.toDateFromString(note.CompletedDate);
                    wordApp.Selection.TypeText(notesHistoryListStrings.dateText + ":        ");
                    wordApp.Selection.TypeText(dateLocale.format(dateObject));
                    wordApp.Selection.TypeParagraph();
                }

                if (note.UserName) {
                    wordApp.Selection.TypeText(notesHistoryListStrings.userText + ":        ");
                    wordApp.Selection.TypeText(note.UserName);
                    wordApp.Selection.TypeParagraph();
                }

                wordApp.Selection.TypeText(notesHistoryListStrings.typeText + ":        ");
                wordApp.Selection.TypeText(activityUtility.getActivityTypeName(note.Type));
                wordApp.Selection.TypeParagraph();

                if (note.Description) {
                    wordApp.Selection.TypeText(notesHistoryListStrings.regardingText + ":        ");
                    wordApp.Selection.TypeText(note.Description);
                    wordApp.Selection.TypeParagraph();
                }

                if (note.LongNotes) {
                    wordApp.Selection.TypeText(notesHistoryListStrings.notesText + ":        ");
                    wordApp.Selection.TypeText(note.LongNotes);
                    wordApp.Selection.TypeParagraph();
                }
            });

            wordApp.Selection.TypeText("___________________________________________________________");
            wordApp.Selection.TypeParagraph();
            wordApp.Visible = true;
        },
        onBeforeCreateGrid: function (options) { }
    });
    return notesHistoryList;
});
},
'Sage/UI/nls/AttachmentList':function(){
﻿define("Sage/UI/nls/AttachmentList", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            attachmentText: 'Attachment',
            userText: 'User',
            modDateText: 'Modify Date/Time',
            dateRangeText: 'Modify Date Range',
            sizeText: 'Size',
            extensionText: 'File Extension',
            addFileText: 'Add File',
            addUrlText: 'Add URL',
            editText: 'Edit',
            helpText: 'Help',
            addGoogleText: 'Add Google Document',
            deleteText: 'Delete',
            request: 'Request File',
            delivered: 'Delivered',
            requested: 'Requested',
            available: 'Available'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/RowBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/RowBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            indexText: "Index:",
            indexTooltipText: "Number of the row or column, beginning with zero."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Store/SData':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
// Taken from argos-sdk (https://github.com/Sage/argos-sdk/blob/topic-tablet-support/src/Store/SData.js)
define('Sage/Store/SData', [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dojo/_base/Deferred',
    'dojo/store/util/QueryResults',
    'dojo/string',
    'dojo/json',
    '../Utility'
], function (
    declare,
    lang,
    array,
    Deferred,
    QueryResults,
    string,
    json,
    utility
) {
    return declare('Sage.Store.SData', null, {
        doDateConversion: false,

        where: null,
        select: null,
        include: null,
        orderBy: null,
        service: null,
        request: null,
        queryName: null,
        entityName: null,
        contractName: null,
        resourceKind: null,
        resourceProperty: null,
        resourcePredicate: null,
        executeQueryAs: null,
        executeGetAs: null,

        itemsProperty: '$resources',
        idProperty: '$key',
        labelProperty: '$descriptor',
        entityProperty: '$name',
        versionProperty: '$etag',

        constructor: function(props) {
            lang.mixin(this, props);
        },
        _createEntryRequest: function(id, getOptions) {
            var request = utility.expand(this, getOptions.request || this.request);
            if (request)
            {
                request = request.clone();
            }
            else
            {
                var contractName = utility.expand(this, getOptions.contractName || this.contractName),
                    resourceKind = utility.expand(this, getOptions.resourceKind || this.resourceKind),
                    resourceProperty = utility.expand(this, getOptions.resourceProperty || this.resourceProperty),
                    resourcePredicate = id
                        ? /(\s+)/.test(id)
                            ? id
                            : string.substitute("'${0}'", [id]) /* string keys are quoted, numeric keys are left alone */
                        : utility.expand(this, getOptions.resourcePredicate || this.resourcePredicate);
                    // resourcePredicate = id
                    //    ? /(\s+)/.test(id) ? id : json.stringify(id) /* string keys are quoted, numeric keys are left alone */
                    //    : utility.expand(this, getOptions.resourcePredicate || this.resourcePredicate);

                if (resourceProperty)
                {
                    request = new Sage.SData.Client.SDataResourcePropertyRequest(this.service)
                        .setResourceProperty(resourceProperty)
                        .setResourceSelector(resourcePredicate);
                }
                else
                {
                    request = new Sage.SData.Client.SDataSingleResourceRequest(this.service)
                        .setResourceSelector(resourcePredicate);
                }

                if (contractName) request.setContractName(contractName);
                if (resourceKind) request.setResourceKind(resourceKind);
            }

            var select = utility.expand(this, getOptions.select || this.select),
                include = utility.expand(this, getOptions.include || this.include);

            if (select && select.length > 0)
                request.setQueryArg('select', select.join(','));

            if (include && include.length > 0)
                request.setQueryArg('include', include.join(','));

            return request;
        },
        _createFeedRequest: function(query, queryOptions) {
            var request = utility.expand(this, queryOptions.request || this.request);
            if (request)
            {
                request = request.clone();
            }
            else
            {
                var queryName = utility.expand(this, queryOptions.queryName || this.queryName),
                    contractName = utility.expand(this, queryOptions.contractName || this.contractName),
                    resourceKind = utility.expand(this, queryOptions.resourceKind || this.resourceKind),
                    resourceProperty = utility.expand(this, queryOptions.resourceProperty || this.resourceProperty),
                    resourcePredicate = utility.expand(this, queryOptions.resourcePredicate || this.resourcePredicate);

                if (queryName)
                {
                    request = new Sage.SData.Client.SDataNamedQueryRequest(this.service)
                        .setQueryName(queryName);

                    if (resourcePredicate) request.getUri().setCollectionPredicate(resourcePredicate);
                }
                else if (resourceProperty)
                {
                    request = new Sage.SData.Client.SDataResourcePropertyRequest(this.service)
                        .setResourceProperty(resourceProperty)
                        .setResourceSelector(resourcePredicate);
                }
                else
                {
                    request = new Sage.SData.Client.SDataResourceCollectionRequest(this.service);
                }

                if (contractName) request.setContractName(contractName);
                if (resourceKind) request.setResourceKind(resourceKind);
            }

            var select = utility.expand(this, queryOptions.select || this.select),
                include = utility.expand(this, queryOptions.include || this.include),
                orderBy = utility.expand(this, queryOptions.sort || this.orderBy);

            if (select && select.length > 0)
                request.setQueryArg('select', select.join(','));

            if (include && include.length > 0)
                request.setQueryArg('include', include.join(','));

            if (orderBy)
            {
                if (typeof orderBy === 'string')
                {
                    request.setQueryArg('orderby', orderBy);
                }
                else if (orderBy.length > 0)
                {
                    var order = [];
                    array.forEach(orderBy, function (v) {
                        if (v.descending)
                            this.push(v.attribute + ' desc');
                        else
                            this.push(v.attribute);
                    }, order);

                    request.setQueryArg('orderby', order.join(','));
                }
            }

            var where = utility.expand(this, this.where),
                query = utility.expand(this, query),
                conditions = [];

            if (where)
                conditions.push(where);

            if (query)
                conditions.push(query);

            if (conditions.length > 0)
                request.setQueryArg('where', '(' + conditions.join(') and (') + ')');

            if (typeof queryOptions.start !== 'undefined')
                request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.StartIndex, queryOptions.start + 1);

            if (typeof queryOptions.count !== 'undefined')
                request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.Count, queryOptions.count);

            return request;
        },
        _onRequestFeedSuccess: function(queryDeferred, feed) {
            if (feed)
            {
                var items = lang.getObject(this.itemsProperty, false, feed),
                    total = typeof feed['$totalResults'] === 'number' ? feed['$totalResults'] : -1;

                queryDeferred.total = total;
                queryDeferred.resolve(items);
            }
            else
            {
                var error = new Error('The feed result is invalid.');

                queryDeferred.reject(error);
            }
        },
        _onRequestEntrySuccess: function(deferred, entry) {
            if (entry)
            {
                deferred.resolve(this.doDateConversion ? this._handleDateConversion(entry) : entry);
            }
            else
            {
                var error = new Error('The entry result is invalid.');

                deferred.reject(error);
            }
        },
        _onRequestFailure: function(deferred, xhr, xhrOptions) {
            var error = new Error('An error occurred requesting: ' + xhrOptions.url);

            error.xhr = xhr;
            error.status = xhr.status;
            error.responseText = xhr.responseText;
            error.aborted = false;

            deferred.reject(error);
        },
        _onRequestAbort: function(deferred, xhr, xhrOptions) {
            var error = new Error('An error occurred requesting: ' + xhrOptions.url);

            error.xhr = xhr;
            error.status = 0;
            error.responseText = null;
            error.aborted = true;

            deferred.reject(error);
        },
        _onCancel: function(handle) {
            this.store.abort(handle.value);
        },
        _handleDateConversion: function(entry) {
            for (var prop in entry)
            {
                if (utility.Convert.isDateString(entry[prop]))
                {
                    entry[prop] = utility.Convert.toDateFromString(entry[prop]);
                }
            }

            return entry;
        },
        get: function(id, /* sdata only */ getOptions) {
            // summary:
            //		Retrieves an object by its identity
            // id: Number
            //		The identity to use to lookup the object
            // returns: Object
            //		The object in the store that matches the given id.

            var handle = {},
                deferred = new Deferred(lang.hitch(this, this._onCancel, handle)),
                request = this._createEntryRequest(id, getOptions || {});

            var method = this.executeGetAs
                ? request[this.executeGetAs]
                : request.read;

            handle.value = method.call(request, {
                success: lang.hitch(this, this._onRequestEntrySuccess, deferred),
                failure: lang.hitch(this, this._onRequestFailure, deferred),
                abort: lang.hitch(this, this._onRequestAbort, deferred)
            });

            return deferred;
        },
        getIdentity: function(object) {
            // summary:
            //		Returns an object's identity
            // object: Object
            //		The object to get the identity from
            // returns: String|Number

            return lang.getObject(this.idProperty, false, object);
        },
        getLabel: function(object) {
            return lang.getObject(this.labelProperty, false, object);
        },
        getEntity: function(object) {
            return lang.getObject(this.entityProperty, false, object);
        },
        getVersion: function(object) {
            return lang.getObject(this.versionProperty, false, object);
        },
        put: function(object, putOptions) {
            // summary:
            //		Stores an object
            // object: Object
            //		The object to store.
            // directives: dojo.store.api.Store.PutDirectives?
            //		Additional directives for storing objects.
            // returns: Number|String

            putOptions = putOptions || {};

            var id = putOptions.id || this.getIdentity(object),
                entity = putOptions.entity || this.entityName,
                version = putOptions.version || this.getVersion(object),
                atom = !this.service.isJsonEnabled();

            if (id) object['$key'] = id;
            if (entity && atom) object['$name'] = entity;
            if (version) object['$etag'] = version;

            var handle = {},
                deferred = new Deferred(lang.hitch(this, this._onCancel, handle)),
                request = this._createEntryRequest(id, putOptions);

            var method = putOptions.overwrite
                ? request.update
                : request.create;

            handle.value = method.call(request, object, {
                success: lang.hitch(this, this._onTransmitEntrySuccess, deferred),
                failure: lang.hitch(this, this._onRequestFailure, deferred),
                abort: lang.hitch(this, this._onRequestAbort, deferred)
            });

            return deferred;
        },
        _onTransmitEntrySuccess: function(deferred, entry) {
            deferred.resolve(this.doDateConversion ? this._handleDateConversion(entry) : entry);
        },
        add: function(object, addOptions) {
            // summary:
            //		Creates an object, throws an error if the object already exists
            // object: Object
            //		The object to store.
            // directives: dojo.store.api.Store.PutDirectives?
            //		Additional directives for creating objects.
            // returns: Number|String
            addOptions = addOptions || {};
            addOptions.overwrite = false;

            return this.put(object, addOptions);
        },
        remove: function(id) {
            // summary:
            //		Deletes an object by its identity
            // id: Number
            //		The identity to use to delete the object

        },
        query: function(query, queryOptions) {
            // summary:
            //		Queries the store for objects. This does not alter the store, but returns a
            //		set of data from the store.
            // query: String|Object|Function
            //		The query to use for retrieving objects from the store.
            // options: dojo.store.api.Store.QueryOptions
            //		The optional arguments to apply to the resultset.
            // returns: dojo.store.api.Store.QueryResults
            //		The results of the query, extended with iterative methods.
            //
            // example:
            //		Given the following store:
            //
            //	...find all items where "prime" is true:
            //
            //	|	store.query({ prime: true }).forEach(function(object){
            //	|		// handle each object
            //	|	});

            var handle = {},
                queryDeferred = new Deferred(lang.hitch(this, this._onCancel, handle)),
                request = this._createFeedRequest(query, queryOptions || {});

            queryDeferred.total = -1;

            var method = this.executeQueryAs
                ? request[this.executeQueryAs]
                : request instanceof Sage.SData.Client.SDataResourcePropertyRequest
                    ? request.readFeed
                    : request.read;

            handle.value = method.call(request, {
                success: lang.hitch(this, this._onRequestFeedSuccess, queryDeferred),
                failure: lang.hitch(this, this._onRequestFailure, queryDeferred),
                abort: lang.hitch(this, this._onRequestAbort, queryDeferred),
                httpMethodOverride: queryOptions && queryOptions['httpMethodOverride']
            });

            return QueryResults(queryDeferred);
        },
        transaction: function() {
            // summary:
            //		Starts a new transaction.
            //		Note that a store user might not call transaction() prior to using put,
            //		delete, etc. in which case these operations effectively could be thought of
            //		as "auto-commit" style actions.
            // returns: dojo.store.api.Store.Transaction
            //		This represents the new current transaction.
        },
        getChildren: function(parent, options){
            // summary:
            //		Retrieves the children of an object.
            // parent: Object
            //		The object to find the children of.
            // options: dojo.store.api.Store.QueryOptions?
            //		Additional options to apply to the retrieval of the children.
            // returns: dojo.store.api.Store.QueryResults
            //		A result set of the children of the parent object.
        },
        getMetadata: function(object) {
            if (object)
            {
                return {
                    id: this.getIdentity(object),
                    label: this.getLabel(object),
                    entity: this.getEntity(object),
                    version: this.getVersion(object)
                };
            }

            return null;

            // summary:
            //		Returns any metadata about the object. This may include attribution,
            //		cache directives, history, or version information.
            // object: Object
            //		The object to return metadata for.
            // returns: Object
            //		An object containing metadata.
        }
    });
});
},
'Sage/UI/Filters/EditFilters':function(){
require({cache:{
'url:Sage/UI/Filters/templates/EditFilters.html':"<div>\r\n    <div class=\"filter-dialog\" data-dojo-type=\"dijit.Dialog\" data-dojo-props=\"title:'${dialogTitle}'\" data-dojo-attach-point=\"dialogNode\">\r\n        <div class=\"filter-clear-all\">\r\n            <input data-dojo-attach-point=\"checkAll\" data-dojo-type=\"dijit.form.CheckBox\" />\r\n            <label>${selectAllText}</label>\r\n        </div>\r\n        <div class=\"filter-dialog-content\" data-dojo-attach-point=\"contentNode\">\r\n            \r\n        </div>\r\n        \r\n        <div class=\"button-bar alignright\">\r\n            <button data-dojo-attach-point=\"buttonOK\" data-dojo-attach-event=\"onClick:_onOKClick\" data-dojo-type=\"dijit.form.Button\">${okText}</button>\r\n            <button data-dojo-attach-point=\"buttonCancel\" data-dojo-attach-event=\"onClick:_onCancelClick\" data-dojo-type=\"dijit.form.Button\">${cancelText}</button>\r\n        </div>\r\n    </div>\r\n</div>"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/EditFilters", [
        'dijit/_Widget',
        'dijit/_TemplatedMixin',
        'dijit/_WidgetsInTemplateMixin',
        'dijit/Dialog',
        'dijit/form/Button',
        'dijit/form/CheckBox',
        'dojo/_base/declare',
        'dojo/i18n',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dojo/dom-construct',
        'dijit/registry',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'Sage/Utility/Filters',
        'dojo/json',
        'dojo/text!./templates/EditFilters.html',
        'dojo/i18n!./nls/EditFilters'
], function (
        _Widget,
        _TemplatedMixin,
        _WidgetsInTemplateMixin,
        Dialog,
        Button,
        CheckBox,
        declare,
        i18n,
        array,
        lang,
        domConstruct,
        registry,
        DialogHelpIconMixin,
        FiltersUtility,
        json,
        template) {
    return declare('Sage.UI.Filters.EditFilters', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        templateString: template,
        widgetsInTemplate: true,
        
        id: 'editFilters',
        store: null,
        filterPanel: null,
        checkBoxes: null,
        
        // i18n
        selectAllText: 'Select All',
        dialogTitle: 'Edit Filters',
        okText: 'OK',
        cancelText: 'Cancel',
        
        constructor: function () {
            var resource = i18n.getLocalization('Sage.UI.Filters', 'EditFilters');
            this.inherited(arguments);
            this.checkBoxes = [];
            
            if (resource) {
                this.selectAllText = resource.selectAllText;
                this.okText = resource.okText;
                this.cancelText = resource.cancelText;
                this.dialogTitle = resource.dialogTitle;
            }
        },
        postCreate: function () {
            this.inherited(arguments);
            this.checkAll.on('click', lang.hitch(this, this._onCheckAllClick));
        },
        _onCheckAllClick: function () {
            if (this.checkAll.checked) {
                this._onSelectAllClick();
            } else {
                this._onClearAllClick();
            }
        },
        showDialog: function () {
            this.requestData();
            lang.mixin(this.dialogNode, new DialogHelpIconMixin());
            this.dialogNode.createHelpIconByTopic('editFilters');
            this.dialogNode.show();
        },
        hideDialog: function () {
            this.dialogNode.hide();
        },
        uninitialize: function () {
            this._destroyContent();
            this.checkAll.destroy(false);
            this.buttonCancel.destroy(false);
            this.buttonOK.destroy(false);
            this.dialogNode.destroy(false);
            this.checkBoxes = null;
            
            this.inherited(arguments);
        },
        requestData: function() {
            this._destroyContent();
            
            if (this.store) {
                this.store.fetch({
                    onItem: lang.hitch(this, this._onFetchItem),
                    onError: lang.hitch(this, this._onFetchError),
                    onComplete: lang.hitch(this, this._onFetchComplete)
                });
            }
        },
        _onClearAllClick: function () {
            array.forEach(this.checkBoxes, function (checkBox) {
                checkBox.set('checked', false);
            });
        },
        _onSelectAllClick: function () {
            array.forEach(this.checkBoxes, function (checkBox) {
                checkBox.set('checked', true);
            });
        },
        _onCancelClick: function () {
            this.dialogNode.hide();
        },
        _onOKClick: function () {
            this.dialogNode.hide();
            
            var data = this.filterPanel._configuration._hiddenFilters,
                key = this.filterPanel._configuration._hiddenFiltersKey,
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext();
            
            array.forEach(this.checkBoxes, function (checkBox) {
                var prop;
                
                prop = context.CurrentEntity + '_' + checkBox.get('label');
                if (data[prop]) {
                    // Update existing
                    data[prop].hidden = !checkBox.get('checked');
                } else {
                    // Create new
                    data[prop] = {
                        expanded: false,
                        hidden: !checkBox.get('checked'),
                        items: []
                    };
                }
            });

            FiltersUtility.setHiddenFilters(key, json.stringify(data));
            this.filterPanel.refreshFilters(false);
        },
        _destroyContent: function () {
            array.forEach(registry.findWidgets(this.contentNode), function (widget) {
                widget.destroy(false);
            });
            
            this.checkBoxes = [];
            this.contentNode.innerHTML = '';
        },
        _onFetchError: function() {
        },
        _onFetchItem: function(entry) {
            var type = entry.filterType,
                filterName = entry.filterName,
                displayName = entry.displayName || entry.filterName,
                id = filterName + '_check',
                checkBox = new CheckBox({ 'id': id, 'label': filterName });// CheckBox label appears to be broken..
            
            domConstruct.place(checkBox.domNode, this.contentNode, 'last');
            domConstruct.create('br', {}, checkBox.domNode, 'after');
            domConstruct.create('label', { 'for': id, innerHTML: displayName }, checkBox.domNode, 'after');
            checkBox.on('click', lang.hitch(this, this._onCheckClick));
            this.checkBoxes.push(checkBox);
        },
        _onCheckClick: function (e) {
            if (e.target && e.target.checked === false) {
                this.checkAll.set('checked', false);
            }
        },
        _onFetchComplete: function () {
            this.startup();
            this.setupCheckState();
        },
        setupCheckState: function () {
            var data = this.filterPanel._configuration._hiddenFilters || {},
                key = FiltersUtility.getHiddenFiltersKey(),
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                hasHiddenItems = false;
            
            this.checkAll.set('checked', true);
            this._onSelectAllClick();
            
            array.forEach(this.checkBoxes, function (checkBox) {
                var prop;
                
                prop = context.CurrentEntity + '_' + checkBox.get('label');
                if (data[prop]) {
                    if (data[prop].hidden) {
                        checkBox.set('checked', false);
                        hasHiddenItems = true;
                    } else {
                        checkBox.set('checked', true);
                    }
                }
            });
            
            this.checkAll.set('checked', !hasHiddenItems);
        }
    });
});
},
'Sage/UI/Controls/DependControl':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/DependControl", [
    'dojo/_base/declare'
],
function (declare) {
    var widget = declare('Sage.UI.Controls.DependControl', null, {
        BaseId: '',
        ListId: '',
        TextId: '',
        Type: '',
        DisplayProperty: '',
        SeedProperty: '',
        CurrentValue: '',

        constructor: function(baseId, listId, textId, type, displayProperty, seedProperty){
            this.BaseId = baseId;
            this.ListId = listId;
            this.TextId = textId;
            this.Type = type;
            this.DisplayProperty = displayProperty;
            this.SeedProperty = seedProperty;
            this.CurrentValue = '';
        },
        LoadList: function (seedValue) {
            var requestUrl = 'SLXDependencyHandler.aspx';
            dojo.xhrGet({
                url: requestUrl,
                handleAs: 'text',
                preventCache: true,
                sync: true,
                content: {
                    cacheid: this.BaseId,
                    type: this.Type,
                    displayprop: this.DisplayProperty,
                    seeds: seedValue,
                    currentval: this.CurrentValue
                },
                load: dojo.hitch(this, function(data) {
                    var list = dojo.byId(this.ListId);
                    list.innerHTML = '';

                    var items = data.split('|');
                    for (var i = 0; i < items.length; i++) {
                        if (items[i] === '') {
                            continue;
                        }

                        var parts = items[i].split(',');
                        var oOption = document.createElement('OPTION');
                        list.options.add(oOption);

                        if (parts[0].charAt(0) == '@') {
                            parts[0] = parts[0].substr(1);
                            oOption.selected = true;
                        }

                        oOption.innerHTML = parts[1];
                        oOption.value = parts[0];
                    }
                }),
                error: function(error) { console.error(error); }
            });
        },
        ClearList: function () {
            var list = dojo.byId(this.ListId);
            list.innerHTML = '';
        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/nls/CheckBoxControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/CheckBoxControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "CheckBox"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/OwnerBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/OwnerBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/OwnerBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.OwnerBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/UserBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/UserBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/UserBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.UserBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',

        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/UI/Columns/SlxLink':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/SlxLink", [
    'Sage/Format',
    'Sage/Utility',
    'dojo/_base/declare',
    'dojox/grid/cells/_base'
],
function (Format, Utility, declare, cellsBase) {
    Sage.Region = {
        decimalSeparator: '.',
        numberGroupSeparator: ',',
        numberGroupDigits: 3,
        decimalDigits: 2,
        currencySymbol: '$',
        positiveCurrencyPattern: 0,
        negativeCurrencyPattern: 0,
        numberNegativeSign: '-'
    };
    var widget = declare("Sage.UI.Columns.SlxLink", dojox.grid.cells.Cell, {
        _dataTypeChecked: null,
        _layout: null,
        _getDisplayValue: function (inRowIndex, inItem, value) {
            var sValue = value || "";
            if (this._layout == null) {
                if (Utility.getModeId() == "list") {
                    var oList = dijit.byId("list");
                    if (oList && Utility.isDefined(oList) && Utility.isDefined(oList._configuration))
                        this._layout = oList._configuration.list.layout[this.layoutIndex];
                    else
                        return sValue;
                } else {
                    var sTemp = this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);
                    if (this._dataTypeChecked == null && Utility.isStringWithLength(sTemp)) {
                        this._dataTypeChecked = true;
                        if (convert.isDateString(sTemp)) {
                            this._layout = {
                                "fieldType": "DateTime",
                                "format": "DateTime",
                                "formatString": this.displayFormatString || ""
                            };
                        } else
                            return sValue;
                    }
                    else
                        return sValue;
                }
            }
            // Is this a DateTime column that is linked?
            if (this._layout.fieldType === "DateTime" && this._layout.format === "DateTime") {
                var sDate = this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);
                if (dojo.isString(sDate) && convert.isDateString(sDate)) {
                    var oDate = convert.toDateFromString(sDate);
                    // Assumes UTC (i.e. SecTableDefs.DateTimeType == NULL or U).
                    // TODO: Get and cache the SecTableDefs.DateTimeType value.
                    oDate = new Date(oDate.getUTCFullYear(), oDate.getUTCMonth(), oDate.getUTCDate());
                    if (Utility.isStringWithLength(this._layout.formatString)) {
                        try {
                            return dojo.date.locale.format(oDate, { selector: "date", datePattern: this._layout.formatString });
                        } catch (e) {
                            if (typeof console !== "undefined")
                                console.warn("Error calling dojo.date.locale.format with a datePattern of %o. %o", this._layout.formatString, e);
                            return dojo.date.locale.format(oDate, { selector: "date", fullYear: true });
                        }
                    } else
                        return dojo.date.locale.format(oDate, { selector: "date", fullYear: true });
                }
            }
            return sValue;
        },
        // summary:
        // grid cell that provides a link to an entity page

        // displayFields: Array
        //		Array of field names to use with string formatter for building up a display value with more than one property.
        //		If this array does not contain any items, the defined field will be used without formatting.
        displayFields: [],
        // displayFormatString: string,
        //		The formatstring to use in formatting the values from the displayFields
        displayFormatString: '',
        // idField: string
        //		The name of the field to be used as the entityid in the querystring
        idField: '',
        // pageName: string
        //		The name of the entity page to generate the link to
        pageName: '',
        // appliedSecurity: string
        //		The 'key' of the secured action the user must have in order to follow the link.
        //		If the user does not have access to the action specified, this field will contain only text.
        appliedSecurity: '',
        // urlFields: Array
        //		Array of field names to use with string formatter for building up the URL.
        urlFields: [],
        // urlFormatString: string
        //		The format string to use with urlFields for building up the url.
        urlFormatString: '',
        // target: string
        //		the 'target' for the link.	If something is specified, a target attribute will be applied to the link.	
        //		Thus enabling the link to open a new tab/window.
        target: '',
        // image: string
        //      an optional image url to use as the display portion of the link.
        image: '',
        // queryParams: string || object
        //      additional query parameters to add to the link.  This can be a string that is in proper url format
        //      or it can be an object that will be serialized as name-value parameters to the querystring.
        queryParams: null,
        getPageName: function () {
            if (this.pageName === '') {
                //use the current page if none is specified...
                var url = document.location.href;
                if (url.indexOf('?') > -1) {
                    url = url.substring(0, url.indexOf('?'));
                }
                url = url.substring(url.lastIndexOf('/') + 1);
                this.pageName = url.replace('.aspx', '');
            }
            return this.pageName;
        },
        formatEditing: function (inDatum, inRowIndex) {
            //			this.needFormatNode(inDatum, inRowIndex);
            //			var h = [ '<select class="dojoxGridSelect">' ];
            //			for (var i=0, o, v; ((o=this.options[i]) !== undefined)&&((v=this.values[i]) !== undefined); i++){
            //				h.push("<option", (inDatum==v ? ' selected' : ''), ' value="' + v + '"', ">", o, "</option>");
            //			}
            //			h.push('</select>');
            //			return h.join('');
            //debugger;
        },
        format: function (inRowIndex, inItem) {
            // summary:
            //	provides the html for a given grid cell.
            // inRowIndex: int
            // grid row index
            // returns: html for a given grid cell
            if (inItem === null) { return this.defaultValue; }
            var entName,
			    entKey,
			    dispVal,
			    vals = [],
			    target = '',
                queryParams = '',
                moreQuerystring = '',
			    i = this.grid.edit.info,
			    idx = 0,
			    d = this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);
            
            //build up display string if formatstring was specified...
            if ((this.displayFormatString) && (this.displayFormatString !== '')) {
                if (this.displayFields.length < 1) {
                    vals.push(d);
                }
                for (idx; idx < this.displayFields.length; idx++) {
                    vals.push(Utility.getValue(inItem, this.displayFields[idx].trim()));
                }
                d = dojo.string.substitute(this.displayFormatString, vals);
            }
            //handle target...
            if (this.target !== '') {
                //target = String.format(' target="{0}" ', this.target);
                target = dojo.string.substitute(' target="${0}" ', [this.target]);
            }
            //handle additional querystring parameters
            if (this.queryParams) {
                if (typeof this.queryParams === 'object') {
                    moreQuerystring = "&" + dojo.objectToQuery(this.queryParams);
                } else if (typeof this.queryParams === 'string') {
                    moreQuerystring = "&" + this.queryParams;
                }
            }
            d = (d && d.replace && this.grid.escapeHTMLInData) ? d.replace(/&/g, '&amp;').replace(/</g, '&lt;') : d;
            if (this.editable && (this.alwaysEditing || (i.rowIndex == inRowIndex && i.cell == this))) {
                return this.formatEditing(d, inRowIndex);
            } else {
                dispVal = this._defaultFormat(d, [d, inRowIndex, this]);
                if (this.image !== '') {
                    dispVal = dojo.string.substitute('<img src="${0}" alt="${1}" />', [this.image.replace(/^~\//, ''), dispVal]);
                }
                //check security access...
                if (this.appliedSecurity !== '') {
                    var svc = Sage.Services.getService("RoleSecurityService");
                    if (svc) {
                        if (!svc.hasAccess(this.appliedSecurity)) {
                            dispVal = this._getDisplayValue(inRowIndex, inItem, dispVal);
                            return dispVal;
                        }
                    }
                }
                if (this.idField !== '') {
                    //entity page linking...
                    var pagename = this.getPageName();
                    entKey = Utility.getValue(inItem, this.idField);
                    if (!entKey) {
                        var keyname = (this.idField === 'id') ? '$key' : this.idField.replace(/\.[iI]d/g, '.$key');
                        entKey = Utility.getValue(inItem, keyname);
                    }
                    if (entKey) {
                        dispVal = this._getDisplayValue(inRowIndex, inItem, dispVal);

                        if (pagename.toUpperCase() === 'HISTORY') {
                            return dojo.string.substitute('<a href="javascript:Sage.Link.editHistory(\'${0}\')" id="${0}" title="${1}">${1}</a>', [entKey, dispVal]);
                        }
                        else {
                            return dojo.string.substitute('<a href="${0}.aspx?entityid=${1}&modeid=Detail${2}"${3} id="${1}" title="${4}">${4}</a>', [pagename, entKey, moreQuerystring, target, dispVal]);
                        }
                    }
                } else {
                    //binding to url field(s) for linking...
                    var urlFmt = (this.urlFormatString !== '') ? this.urlFormatString : '${0}';
                    vals = [];
                    if (this.urlFields.length < 1) {
                        vals.push(d);
                    }
                    for (idx = 0; idx < this.urlFields.length; idx++) {
                        vals.push(Utility.getValue(inItem, dojo.trim(this.urlFields[idx])));
                    }
                    dispVal = this._getDisplayValue(inRowIndex, inItem, dispVal);
                    return dojo.string.substitute('<a href="http://${0}${1}"${2}>${3}</a>', [dojo.string.substitute(this.urlFormatString, vals), moreQuerystring, target, dispVal]);
                }
                return dispVal;
            }
        },
        markupFactory: function (node, cell) {
            dojox.grid.cells.Cell.markupFactory(node, cell);
            var d = dojo;
            var displayFields = d.trim(d.attr(node, 'displayFields') || '');
            if (displayFields) {
                var f = displayFields.split(',');
                //if (f[0] != displayFields) {
                cell.displayFields = f;
                //}
            }
            cell.displayFormatString = d.trim(d.attr(node, 'displayFormatString') || "");
            cell.idField = d.trim(d.attr(node, 'idField') || '');
            cell.pageName = d.trim(d.attr(node, 'pageName') || '');
            cell.appliedSecurity = d.trim(d.attr(node, 'appliedSecurity') || '');
            cell.image = d.trim(d.attr(node, 'image') || '');
            var urlFields = d.trim(d.attr(node, 'urlFields') || '');
            if (urlFields) {
                var u = urlFields.split(',');
                //if (u[0] !== urlFields) {
                cell.urlFields = u;
                //}
            }
            cell.urlFormatString = d.trim(d.attr(node, 'urlFormatString') || '');
            cell.target = d.trim(d.attr(node, 'target') || '');
            if (d.hasAttr(node, 'queryParams')) {
                cell['queryParams'] = d.trim(d.attr(node, 'queryParams') || '');
            }
        }
    });

    var convert = Utility.Convert;

    return widget;
});

},
'Sage/QuickForms/Design/nls/EditableGridControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/EditableGridControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Editable Grid"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/nls/HiddenControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/HiddenControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Hidden Text"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Dashboard/nls/DashboardWidgetCell':function(){
define("Sage/UI/Dashboard/nls/DashboardWidgetCell", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            closeTooltipText: 'Close',
            minimizeTooltipText: 'Minimize',
            settingsTooltipText: 'Settings'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Layout/_SplitterEnhancedMixin':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Layout/_SplitterEnhancedMixin", [
        'dojo/_base/declare',
        'dojo/_base/connect',
        'dojox/storage/LocalStorageProvider',
        'dojo/dom-style',
        'dojo/_base/sniff'
],
function (declare, connect, LocalStorageProvider, domStyle, has) {
    // Uncomment to clear for testing.
    //    var localStore = new LocalStorageProvider();
    //    localStore.initialize();
    //    localStore.clear();
    return declare('Sage.Layout._SplitterEnhancedMixin', null, {
        postCreate: function () {
            this.inherited(arguments);
            this.storageId = this.id;
        },
        startup: function () {
            this.inherited(arguments);
            if (has("ie")) {
                this._widthPadding = 19;
            }

            if (this.splitter === true) {
                this._addEventHandlers();
                this._addEventSubscribers();
                //Check for saved dimensions of the BorderContainer and apply them if available.
                var dim = this._getFromLocalStorage(this.storageId);
                if (dim === null) {
                    dim = { h: this.domNode.scrollHeight + 5, w: this.domNode.scrollWidth };
                }

                this._setupStyle(dim);
                this.resize(dim);
                this._setDefaults(dim);
            }
        },
        splitterDblClick: null,
        splitterStopDrag: null,
        storageId: null,
        // Default Height is reset when user adjusts splitter.  Value applied to position when workspace is toggled.
        _defaultHeight: 310,
        _defaultWidth: 180,
        _widthPadding: 2,
        _setDefaults: function (dim) {
            // summary: Save the drag point as default value for toggle events. 
            // Important!: The first click of the splitter DblClick event raises as a StopDrag event. Check that the default sizes
            // do not get set to the minSizes.
            if ((this.region === 'top' || this.region === 'bottom') && dim.h !== this.minSize) {
                this._defaultHeight = dim.h;
            }
            if ((this.region === 'right' || this.region === 'left') && dim.w > this.minSize + this._widthPadding) {
                this._defaultWidth = dim.w;
            }
        },
        // Default Width is reset when user adjusts splitter.  Value applied to position when workspace is toggled.
        _addEventHandlers: function () {
            var splitter = dijit.byId([this.id, '_splitter'].join(''));
            if (typeof splitter !== 'undefined') {
                //Splitter drag stop event.
                if (this.splitterStopDrag === null) {
                    this.splitterStopDrag = this.connect(splitter, '_stopDrag', function () {
                        if(this.region === 'top') {
                            if(this.h === this.minSize) {
                                connect.publish(['Sage/events/', this.id, '/splitterMinSize'].join(''), this);
                            }
                            else {
                                connect.publish(['Sage/events/', this.id, '/splitterMovedNotMin'].join(''), this);
                            }
                        }
                        this._setDefaults({ h: this.h, w: this.w });
                        this._saveToLocalStorage(this.storageId, { h: this.h, w: this.w });
                    });
                }
                //Splitter double click event.
                if (this.splitterDblClick === null) {
                    this.splitterDblClick = this.connect(splitter, 'onDblClick', function () {
                        this.toggleSplitter();
                        connect.publish(['Sage/events/', this.id, '/splitterToggled'].join(''), this);
                    });
                }
            }
        },
        _addEventSubscribers: function () {
            //Subscribe to an event that matches the id.  This way buttons can determine which splitter to interact with.
            connect.subscribe(['Sage/events/', this.id, '/toggleSplitter'].join(''), this, "toggleSplitter");
        },
        toggleSplitter: function () {
            var dim = {},
                splitter = dijit.byId([this.id, '_splitter'].join('')),
                viewport = dijit.byId("Viewport");
                
            if (typeof splitter !== 'undefined' && splitter !== null) {
                // If this is a top or bottom region, set the height.
                if (this.region === 'top' || this.region === 'bottom') {
                    dim = (this.h === this.minSize) ? { h: this._defaultHeight, w: this.w} : { h: this.minSize, w: this.w };
                }
                // If this is a right or left region, set the width.
                if (this.region === 'right' || this.region === 'left') {
                    dim = (this.w < this.minSize + this._widthPadding) ? { h: this.h, w: this._defaultWidth} : { h: this.h, w: this.minSize };
                }

                if (dim.w === 19) {
                    dim.w = this._defaultWidth;
                }
                
                this._setupStyle(dim);
                this.resize(dim);
                viewport.resize();
                //Save dimensions by key = mainview id.
                this._saveToLocalStorage(this.storageId, dim);
            }
        },
        _setupStyle: function (dim) {
            if (!this.domNode) {
                return;
            }
            
            var hidden = false;
            
            if (this.region === 'top' || this.region === 'bottom') {
                hidden = (dim.h === this.minSize);
            }
            
            if (this.region === 'right' || this.region === 'left') {
                hidden = (dim.w < this.minSize + this._widthPadding);
            }

            if (hidden) {
                domStyle.set(this.domNode, 'overflow', 'hidden');
            } else {
                domStyle.set(this.domNode, 'overflow', 'auto');
            }
        },
        _saveToLocalStorage: function (key, value) {
            var localStore = new LocalStorageProvider();
            localStore.initialize();
            localStore.put(key, value, function (status, key, message) {
                if (status === localStore.FAILED) {
                    console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
                }
            });  //Add Name space param.
        },
        _getFromLocalStorage: function (key, value) {
            var localStore = new LocalStorageProvider();
            localStore.initialize();
            return localStore.get(key, value); // returns null if key does not exist. 
        }
    });

});
},
'Sage/MainView/IntegrationContract/AdvancedSearchOptions':function(){
require({cache:{
'url:Sage/MainView/IntegrationContract/templates/AdvancedSearchOptions.html':"﻿[\r\n'<div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\">{%= $.searchOptionsHeader %}',\r\n            '<span class=\"boldtext\">{%= $.configOptions.targetAccount %}</span>',\r\n        '</label>',\r\n        '<br /><br />',\r\n    '</div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontext padBottom\" style=\"padding-left:20px\">{%= $.searchOptionsText %}</label>',\r\n    '</div>',\r\n    '<div>',\r\n        '<br />',\r\n        '<label class=\"slxlabel\" style=\"padding-left:20px\">{%= $.propertyText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:136px\">{%= $.operatorText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:118px\">{%= $.searchText %}</label>',\r\n    '</div>',\r\n    '<div dojoAttachPoint=\"conditionContainer\" style=\"padding:10px;\" id=\"{%= $.id %}-Condition-container\"></div>',\r\n    '<div class=\"button-bar alignright\">',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').refineSearchObject.getSelections();\">',\r\n            '{%= $.okText %}',\r\n        '</button>',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').hide();\">',\r\n            '{%= $.cancelText %}',\r\n        '</button>',\r\n    '</div>',\r\n'</div>'\r\n]\r\n"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/IntegrationContract/AdvancedSearchOptions", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/AdvancedSearchOptions',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/UI/Dialogs',
    'dojo/text!./templates/AdvancedSearchOptions.html',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'dijit/Dialog',
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog'
],
function (declare, i18nStrings, _Widget, _Templated, Dialogs, templateString) {
    var advancedSearchOptions = declare('Sage.MainView.IntegrationContract.AdvancedSearchOptions', [_Widget, _Templated], {
        configOptions: [],
        id: '',
        refineSearchId: '',
        index: 0,
        selectedFieldIndex: 0,
        fields: [{ FieldName: '', DisplayName: ''}],
        operators: [],
        selectedFilters: [],
        hideimgurl: 'images/icons/Find_Remove_16x16.gif',
        addimgurl: 'images/icons/Find_Add_16x16.gif',
        widgetsInTemplate: true,
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        init: function (workSpace) {
            this.id = workSpace.Id; ;
            this.configOptions = workSpace;
        },
        conditionTemplate: new Simplate(['<div >',
            '<div id="filterCondition_{%= $.index %}" class="lookup-condition-row" style="padding-left:10px">',
                '<select id="fieldnames_{%= $.index %}" class="lookup-fieldnames-list" style="width:160px" onchange="dijit.byId(\'{%= $.refineSearchId %}\').refineSearchObject.onPropertyChange({%= $.index %});" >',
                    '{% for (var i=0;i<$.fields.length;i++) { %}',
                        '<option value="{%= $.fields[i].FieldName %}" {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $.fields[i].DisplayName %}</option>',
                    '{% } %}',
                '</select>',
                '<select id="operators_{%= $.index %}" class="lookup-operators-list" style="width:160px; margin-left:20px">',
                    '{% for (var i=0;i<$.operators.length;i++) { %}',
                        '<option value="{%= $.operators[i].symbol %}"  {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $.operators[i].display %}</option>',
                    '{% } %}',
                '</select>',
                '<input type="text" id="searchValue_{%= $.index %}" class="search-value-list" style="width:160px;margin-left:5px" />',
                '{% if ($.index == 1 ) { %}',
                    '<img id="addCondition_{%= $.index %}" src="{%= $.addimgurl %}" alt="{%= $.addImgAltText %}" style="cursor:pointer;padding:0px 5px;" onclick="dijit.byId(\'{%= $.id %}-Dialog\').refineSearchObject.addLookupCondition();" />',
                '{% } %}',
                '{% if ($.index > 1 ) { %}',
                    '<img src="{%= $.hideimgurl %}" alt="{%= $.hideImgAltText %}" style="cursor:pointer;padding:0px 5px;" onclick="dijit.byId(\'{%= $.id %}-Dialog\').refineSearchObject.removeLookupCondition({%= $.index %});" />',
                '{% } %}',
            '</div>',
        '</div>']),
        onRefineSearch: function () {
            var refineSearchOptId = dojo.byId(this.configOptions.optionRefineSearchId);
            if (refineSearchOptId != null && refineSearchOptId.checked) {
                this.getDefaultMatchProperties();
                return true;
            }
            return false;
        },
        getDefaultMatchProperties: function () {
            var self = this;
            var refineSearchDialog = dijit.byId([this.id, '-Dialog'].join(''));
            if (!refineSearchDialog) {
                dojo.xhrGet({
                    url: dojo.string.substitute("slxdata.ashx/slx/crm/-/resources/getmatchproperties?resourceKind=${0}&targetMapping=${1}",
                            [this.configOptions.resourceKind, true]),
                    cache: false,
                    preventCache: true,
                    handleAs: 'json',
                    load: function (data) {
                        self.fields = data.fields;
                        self.operators = data.operators;
                        self.selectedFilters = data.filters;
                        self.showDialog();
                    },
                    error: function (request, status, error) {
                        Dialogs.ShowError("request: " + request + " \nstatus: " + status + " \nerror: " + error);
                    }
                });
            }
            else {
                self.showDialog();
            }
        },
        showDialog: function () {
            this.index = 0;
            var refineSearchDialog = dijit.byId([this.id, '-Dialog'].join(''));
            if (!refineSearchDialog) {
                refineSearchDialog = new dijit.Dialog({
                    title: this.dialogCaption,
                    id: [this.id, '-Dialog'].join(''),
                    style: ['height:', 300, 'px;width:', 600, 'px;'].join(''),
                    closable: true,
                    loadingMessage: this.loadingText,
                    refineSearchObject: this
                });
                var template = new Simplate(eval(templateString));
                refineSearchDialog.attr("content", template.apply(this));
            }
            this.refineSearchId = refineSearchDialog.id;
            refineSearchDialog.show();
            this.loadMatchingFilters();
            dojo.style(refineSearchDialog.domNode, 'zIndex', 9050);
        },
        loadMatchingFilters: function () {
            for (var i = 0; i < this.selectedFilters.length; i++) {
                this.addLookupCondition();
                var field = dojo.byId(['fieldnames_', this.index].join(''));
                if (field != null) {
                    field.value = this.selectedFilters[i].Property;
                }
                var operator = dojo.byId(['operators_', this.index].join(''));
                if (operator != null) {
                    operator.value = this.selectedFilters[i].Operator;
                    operator.symbol = this.selectedFilters[i].Operator;
                }
                var searchValue = dojo.byId(['searchValue_', this.index].join(''));
                if (searchValue != null) {
                    searchValue.value = this.selectedFilters[i].SearchValue;
                }
            }
        },
        getSelections: function () {
            var conditions = [];
            this.updateDisplay();
            var filterRows = dojo.query('.lookup-condition-row');
            for (var i = 0; i < filterRows.length; i++) {
                var fieldName = dojo.query('.lookup-fieldnames-list', filterRows[i]);
                var operator = dojo.query('.lookup-operators-list', filterRows[i]);
                var searchValue = dojo.query('.search-value-list', filterRows[i]);
                var condition = {
                    fieldName: fieldName[0].value,
                    operator: operator[0].value,
                    searchValue: searchValue[0].value
                };
                conditions.push(condition);
            }
            var filterCriteria = dojo.byId(this.configOptions.filtersId);
            if (filterCriteria != null) {
                filterCriteria.value = Sys.Serialization.JavaScriptSerializer.serialize(conditions);
            }
            this.invokeClickEvent(dojo.byId(this.configOptions.refreshGridId));
        },
        updateDisplay: function () {
            var control = dojo.byId(this.configOptions.resultsMsgId);
            if (control != null) {
                control.innerHTML = this.loadingDisplay;
            }
            control = dojo.byId(this.configOptions.rowSearchResultsId);
            if (control != null) {
                control.style.display = "none";
            }
            control = dojo.byId(this.configOptions.rowLinkToId);
            if (control != null) {
                control.style.display = "none";
            }
        },
        invokeClickEvent: function (control) {
            if (document.createEvent) {
                // FireFox
                var e = document.createEvent("MouseEvents");
                e.initEvent("click", true, true);
                control.dispatchEvent(e);
            }
            else {
                // IE
                control.click();
            }
        },
        onPropertyChange: function (index) {
            var searchValue = dojo.byId(['searchValue_', index].join(''));
            if (searchValue != null) {
                searchValue.value = "";
            }
        },
        addLookupCondition: function () {
            this.index++;
            var divContainer = dojo.byId([this.id, '-Condition-container'].join(''));
            var newRow = this.conditionTemplate.apply(this);
            dojo.place(newRow, divContainer);
            this.dialogResize();
        },
        dialogResize: function () {
            dojo.style([this.id, '-Dialog'].join(''), 'height', 'auto');
        },
        removeLookupCondition: function (idx) {
            dojo.query(dojo.byId(["filterCondition_", idx].join(''))).orphan();
        },
        reloadOperators: function (selectedFieldIndex, rowIndex) {
            this.selectedFieldIndex = selectedFieldIndex;
            this.index = rowIndex;
            var newRow = this.conditionTemplate.apply(this);
            //Replace old operators with new ones at the same index point.
            dojo.place(newRow, ['filterCondition_', rowIndex].join(''), 'replace');
        },
        clearTargetSelection: function () {
            var targetsGroup = document.getElementsByName('TargetsGroup');
            if (targetsGroup != null) {
                for (var i = 0; i < targetsGroup.length; i++) {
                    targetsGroup[i].checked = false;
                }
            }
        },
        onMatchSelection: function (linkToId) {
            var linkToControl = document.getElementById(linkToId);
            if (linkToControl != null) {
                linkToControl.checked = true;
            }
        },
        closeDetailsDialog: function () {
            //remove all existing conditions
            //            var rows = dojo.query('.lookup-condition-row');
            //            if (rows != null) {
            //                dojo.forEach(rows, "dojo.query(item).orphan();");
            //            }
        }
    });
    return advancedSearchOptions;
});
},
'Sage/QuickForms/Design/Editors/GenericBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/GenericBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/GenericBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.GenericBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,

        //Localization
        titleText: 'Basic',

        appearanceText: 'Appearance',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',

        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/nls/UserBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/UserBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Controls/templates/DropDownSelectUser.html':"<div>\r\n    <select data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" dojoAttachPoint=\"comboBox\" dojoAttachEvent=\"onBlur: _onBlur\">\r\n    </select>\r\n</div>\r\n",
'Sage/UI/nls/Dialogs':function(){
define("Sage/UI/nls/Dialogs", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            yesText: 'Yes',
            noText: 'No',
            okText: 'OK',
            cancelText: 'Cancel'            
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/DashboardGroupListConfigurationProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/DashboardGroupListConfigurationProvider", [
    'Sage/UI/GroupListConfigurationProvider',
    'dojo/string',
    'dojo/_base/declare'
],
function (
    GroupListConfigurationProvider,
    string,
    declare
) {
    var dashboardGroupListConfigurationProvider = declare('Sage.UI.DashboardGroupListConfigurationProvider', [GroupListConfigurationProvider], {
        
        formatPredicate: function (group) {
            group.family = group.family && group.family.toUpperCase();
            return string.substitute("name eq '${name}' and upper(family) eq '${family}'", group);
        },
        _createConfigurationForList: function (entry) {
            var groupContextService = Sage.Services.getService("ClientGroupContext"),
                context;
            if (groupContextService) {
                context = groupContextService.getContext();
            }
            context.CurrentTable = '';
            return this.inherited(arguments);
        },
        _getListContextMenuItems: function() {
            return [];
        },
        _onListContext: function (e) {
            return;
        }
    });
    return dashboardGroupListConfigurationProvider;
});
},
'Sage/TaskPane/nls/SecuredActionTasklet':function(){
﻿define("Sage/TaskPane/nls/SecuredActionTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        addToRoleTitle: 'Add to Role'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Layout/main':function(){
define("Sage/Layout/main", [
    //"Sage/Layout/Wizard",
    "Sage/Layout/ContentPane",
    "Sage/Layout/TabContainer",
    "Sage/Layout/MainContentDetailsPane",
    "Sage/Layout/_SplitterEnhancedMixin"
    ], function() {
	// module:
	    // Sage/Layout/main
	// summary:
        // The Sage/Layout/main module provides loading of all Sage/Layout modules.
});
},
'Sage/UI/Dashboard/nls/DashboardTabController':function(){
define("Sage/UI/Dashboard/nls/DashboardTabController", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            newTabText: 'New Tab',
            addContentText: 'Add Content',
            editOptionsText: 'Edit Options',
            hideTabText: 'Hide Tab',
            closeText: 'Close',
            copyTabText: 'Copy Tab',
            showTabText: 'Show Tab',
            shareTabText: 'Share Tab',
            deleteTabText: 'Delete Tab',
            deleteTabConfirmText: 'Are you sure you want to delete this tab?',
            descriptionText: 'Description',
            everyoneText: 'Everyone',
            saveTabText: 'Save Tab',
            helpText: 'Help',
            addText: 'Add',
            invalidMessage: 'Invalid Character',
            invalidDuplicateMessage: 'Title must be unique.',
            deleteText: 'Delete',
            titleText: 'Title:',
            chooseTemplateText: 'Choose the template you want to use:',
            oneColumnText: 'One column',
            twoColumnText: 'Two columns split',
            fatLeftText: 'Two column larger left',
            fatRightText: 'Two column larger right',
            makeDefaultText: 'Make default',
            releaseFetchErrorText: 'Error fetching release list.',
            releaseDeleteNoneSelected: 'No items selected.',
            releasedToText: 'Released To:',
            typeText: 'Type',
            addLookup: 'Add',
            okButton: 'OK',
            errorText: 'Error',
            warningText: 'Warning',
            permissionErrorText: 'Error: User does not have the right to perform this action.',
            permissionErrorPerformCopyText: 'Would you like to create a personal copy of the page?',
            yesText: 'Yes',
            noText: 'No'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/PopupMenuItem':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/PopupMenuItem", [
    'Sage/UI/MenuItem',
    'dojo/_base/declare'
],
function (MenuItem, declare) {
    // we want to be able to provide the icon at runtime
    // so mixing in the Sage Menuitem is necessary
    var widget = declare("Sage.UI.PopupMenuItem",
        MenuItem, {
            _fillContent: function(){
                // summary:
                //		When Menu is declared in markup, this code gets the menu label and
                //		the popup widget from the srcNodeRef.
                // description:
                //		srcNodeRefinnerHTML contains both the menu item text and a popup widget
                //		The first part holds the menu item text and the second part is the popup
                // example:
                // |	<div data-dojo-type="dijit.PopupMenuItem">
                // |		<span>pick me</span>
                // |		<popup> ... </popup>
                // |	</div>
                // tags:
                //		protected

                if(this.srcNodeRef){
                    var nodes = dojo.query("*", this.srcNodeRef);
                    Sage.UI.PopupMenuItem.superclass._fillContent.call(this, nodes[0]);

                    // save pointer to srcNode so we can grab the drop down widget after it's instantiated
                    this.dropDownContainer = this.srcNodeRef;
                }
            },

            startup: function(){
                if(this._started){ return; }
                this.inherited(arguments);

                // we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's
                // land now.  move it to dojo.doc.body.
                if(!this.popup){
                    var node = dojo.query("[widgetId]", this.dropDownContainer)[0];
                    this.popup = dijit.byNode(node);
                }
                dojo.body().appendChild(this.popup.domNode);
                this.popup.startup();

                this.popup.domNode.style.display="none";
                if(this.arrowWrapper){
                    dojo.style(this.arrowWrapper, "visibility", "");
                }
                dijit.setWaiState(this.focusNode, "haspopup", "true");
            },

            destroyDescendants: function(){
                if(this.popup){
                    // Destroy the popup, unless it's already been destroyed.  This can happen because
                    // the popup is a direct child of <body> even though it's logically my child.
                    if(!this.popup._destroyed){
                        this.popup.destroyRecursive();
                    }
                    delete this.popup;
                }
                this.inherited(arguments);
            }
    });

    return widget;
});

},
'url:Sage/Utility/File/templates/FallbackFilePicker_Attachment.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"uploadFileDialog\" title=\"{%= $.attachFileText %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onHide\">',\r\n        '<iframe src=\"about:blank\" style=\"width:0px;height:0px;border-width:0px;\" name=\"{%= $._iframeId %}\" id=\"{%= $._iframeId %}\" dojoAttachPoint=\"_iframe\" dojoAttachEvent=\"onload:_iframeLoad\"></iframe>',\r\n        '<form method=\"post\" enctype=\"multipart/form-data\" action=\"{%= $._buildPostUrl() %}\" target=\"{%= $._iframeId %}\" dojoAttachPoint=\"_postForm\" class=\"attachment-properties-form\">',\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"160\">',\r\n                '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.uploadFileText %}\" >',\r\n                    '<input name=\"file\" multiple=\"false\" type=\"file\" dojoAttachEvent=\"onchange:_onNewFile\" dojoAttachPoint=\"btn_FileSelect\" class=\"uploadButton\" />',\r\n                '</div>',\r\n                 '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.descriptionText %}\" name=\"description\" id=\"{%= $.id %}_tb_Description\" dojoAttachPoint=\"tb_Description\" maxlength=\"128\" ></div>',\r\n                 '<input type=\"hidden\" dojoType=\"dijit.form.TextBox\" name=\"fileName\" id=\"{%= $.id %}_tb_realFileName\" dojoAttachPoint=\"tb_realFileName\" maxlength=\"255\" />',\r\n            '</div>',\r\n            '<div class=\"general-dialog-actions\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                '<span>&nbsp;&nbsp</span>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n            '</div>',\r\n            '<input type=\"hidden\" name=\"dataType\" value=\"R\" />',\r\n            '<input type=\"hidden\" name=\"attachDate\" dojoAttachPoint=\"_attachDate\"/>',\r\n            '<input type=\"hidden\" name=\"accountId\" dojoAttachPoint=\"_accountId\"/>',\r\n            '<input type=\"hidden\" name=\"activityId\" dojoAttachPoint=\"_activityId\" />',\r\n            '<input type=\"hidden\" name=\"contactId\" dojoAttachPoint=\"_contactId\" />',\r\n            '<input type=\"hidden\" name=\"contractId\" dojoAttachPoint=\"_contractId\" />',\r\n            '<input type=\"hidden\" name=\"defectId\" dojoAttachPoint=\"_defectId\" />',\r\n            '<input type=\"hidden\" name=\"historyId\" dojoAttachPoint=\"_historyId\" />',\r\n            '<input type=\"hidden\" name=\"leadId\" dojoAttachPoint=\"_leadId\" />',\r\n            '<input type=\"hidden\" name=\"opportunityId\" dojoAttachPoint=\"_opportunityId\" />',\r\n            '<input type=\"hidden\" name=\"productId\" dojoAttachPoint=\"_productId\" />',\r\n            '<input type=\"hidden\" name=\"returnId\" dojoAttachPoint=\"_returnId\" />',\r\n            '<input type=\"hidden\" name=\"salesOrderId\" dojoAttachPoint=\"_salesOrderId\" />',\r\n            '<input type=\"hidden\" name=\"ticketId\" dojoAttachPoint=\"_ticketId\" />',\r\n            '<input type=\"hidden\" name=\"userId\" dojoAttachPoint=\"_userId\" />',\r\n        '</form>',\r\n    '</div>',\r\n'</div>'\r\n]",
'Sage/UI/Controls/HelpMenu':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/HelpMenu", [
       "dijit/MenuBar",
       "Sage/UI/MenuItem",
       "Sage/UI/PopupMenuBarItem",
       "Sage/UI/OrientableMenuBar",
       'dojo/i18n!./nls/HelpMenu',
       'dojo/_base/declare',
       'dojo/dom-class'
],
function (menuBar, menuItem, popupMenuBarItem, orientableMenuBar, i18nStrings, declare, domClass) {
    var widget = declare('Sage.UI.Controls.HelpMenu', orientableMenuBar, {    
        orientation: { 'BR' : 'TR', 'BL' : 'TL' },
        postMixInProperties: function() {
            this.inherited(arguments);
        },
        postCreate: function() {
            this.inherited(arguments);

            var menu = new dijit.Menu();
            menu.addChild(new menuItem({
                label: i18nStrings.webClientHelpText,
                imageClass: 'icon_Help_16x16',
                title: i18nStrings.webClientHelpText,
                id: 'helpRoot',
                onClick: function () { Sage.Utility.openHelp('slxoverview'); }
            }));
            menu.addChild(new menuItem({
                label: i18nStrings.gettingStartedText,
                imageClass: 'icon_pdf_16x16',
                title: i18nStrings.gettingStartedText,
                id: 'helpGettingStarted',
                onClick: function() { window.open('help/Getting Started with Sage SalesLogix Web Client.pdf', 'MCWebHelp'); }
            }));
            menu.addChild(new menuItem({
                label: i18nStrings.quickReferenceText,
                imageClass: 'icon_pdf_16x16',
                title: i18nStrings.quickReferenceText,
                id: 'helpQuickReference',
                onClick: function() { window.open('help/Sage SalesLogix Quick Reference for the Web User.pdf', 'MCWebHelp'); }
            }));
            menu.addChild(new menuItem({
                label: i18nStrings.aboutText,
                imageClass: 'icon_Help_16x16',
                title: i18nStrings.aboutText,
                id: 'helpAbout',
                onClick: function () { Sage.Utility.openHelp('slxthirdparty'); }
            }));
            var menuChildren = menu.getChildren();
            domClass.add(menuChildren[1].domNode, 'hiddenHelpButton'); // Hidden for Customer Portal - "Getting Started"
            domClass.add(menuChildren[2].domNode, 'hiddenHelpButton'); // Hidden for Customer Portal - "Quick Reference"

            this.addChild(new popupMenuBarItem({
                label: '',
                iconStyle: 'width: 16px',
                imageClass: 'icon_Help_16x16',
                title: i18nStrings.helpText,
                id: 'btnHelpMenu',
                popup: menu
            }));
        }
    });

    return widget;
});

},
'Sage/Services/SystemOptions':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/SystemOptions", [
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/declare'
],
function (sDataServiceRegistry, declare) {
    var svc = declare('Sage.Services.SystemOptions', null, {
        _systemOptions: false,
        _systemOptionsByName: false,
        notFoundrrorMsg: 'A system option was requested that cannot be found.',
        requestFailedErrorMsg: 'A request for system options has failed to return results.',
        get: function (optionName, callback, onError, scope) {
            if (!this._systemOptions) {
                var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('system', false, true, true));
                req.setResourceKind('systemoptions');
                req.read({
                    success: function (result) {
                        this._buildHash(result);
                        this._returnOption(optionName, callback, onError, scope);
                    },
                    failure: function (response) {
                        onError.call(scope || this, this.requestFailedErrorMsg);
                    },
                    scope: this
                });
            } else {
                this._returnOption(optionName, callback, onError, scope);
            }
        },
        _buildHash: function (results) {
            var items = results.$resources;
            this._systemOptionsByName = { };
            dojo.forEach(items, function (item) {
                this._systemOptionsByName[item.name] = item;
            }, this);
            this._systemOptions = results.$resources;
        },
        _returnOption: function (optionName, callback, onError, scope) {
            if (this._systemOptionsByName[optionName]) {
                callback.call(scope || this, this._systemOptionsByName[optionName].value);
            } else {
                onError.call(scope || this, this.notFoundrrorMsg);
            }
        }
    });
    /**
    * Add an instance of this service to the Sage.Services service collection.
    */
    Sage.Services.addService('SystemOptions', new Sage.Services.SystemOptions());
    return svc;
});
},
'Sage/MainView/IntegrationContract/nls/SalesOrderRTDV':function(){
﻿define("Sage/MainView/IntegrationContract/nls/SalesOrderRTDV", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dialogCaption: "Sales Order Details",
            loadingText: "loading...",
            lblSalesOrderCaption: "Sales Order:",
            lblStatusCaption: "Status:",
            lblGrossTotalCaption: "Order Amount:",
            lblOrderDateCaption: "Order Date:",
            lblTaxTotalCaption: "Tax Total:",
            lblHoldStatusCaption: "Hold Status:",
            lblCurrencyCaption: "Currency:",
            lblTypeCaption: "Type:",
            lblCostTotalCaption: "Total Cost:",
            lblPONumberCaption: "PO Number:",
            lblProfitTotalCaption: "Total Profit:",
            lblQuotationCaption: "Quotation:",
            lblInvoiceStatusCaption: "Invoice Status:",
            lblContactCaption: "Contact:",
            lblDeliveryDateCaption: "Delivery Date:",
            lblDueDateCaption: "Due Date:",
            lblPriceListCaption: "Price List:",
            lblCarrierCaption: "Carrier:",
            lblNetTotalCaption: "Net Total:",
            lblAllocationStatusCaption: "Allocation Status:",
            lblDiscountTotalCaption: "Discount Total:",
            lblDeliveryStatusCaption: "Delivery Status:",
            lblChargesTotalCaption: "Charges Total:",
            detailsTabTitle: "Details",
            salesPersonsTabTitle: "Sales Persons",
            addressTabTitle: "Addresses",
            salesOrderLinesTabTitle: "Sales Order Lines",
            paymentsTabTitle: "Payments",
            deliveriesTabTitle: "Deliveries",
            grdSalesOrder_Edit: "Edit",
            grdSalesOrder_OrderNumber: "Order Number",
            grdSalesOrder_OrderDate: "Order Date",
            grdSalesOrder_Status: "Status",
            grdSalesOrder_HoldStatus: "Hold Status",
            grdSalesOrder_Type: "Type",
            grdSalesOrder_PO: "PO Number",
            grdSalesOrder_NetTotal: "Net Total",
            grdSalesOrder_DiscountTotal: "Discount Total",
            grdSalesOrder_ChargesTotal: "Charges Total",
            grdSalesOrder_TaxTotal: "Tax Total",
            grdSalesOrder_GrossTotal: "Gross Total",
            grdSalesOrder_Currency: "Currency",
            grdSalesPersons_Name: "Name",
            grdSalesPersons_Type: "Type",
            grdSalesPersons_Extension: "Extension",
            grdSalesPersons_Relationship: "Relationship",
            grdAddress_Name: "Name",
            grdAddress_Address1: "Address 1",
            grdAddress_Address2: "Address 2",
            grdAddress_City: "City",
            grdAddress_State: "State",
            grdAddress_Zip: "Zip",
            grdItems_Line: "Line Number",
            grdItems_Type: "Type",
            grdItems_Commodity: "Commodity",
            grdItems_CommodityVariant: "Variant",
            grdItems_CommodityDimension: "Dimension",
            grdItems_UnitOfMeasure: "Unit",
            grdItems_Location: "Location",
            grdItems_PriceList: "Price List",
            grdItems_Quantity: "Quantity",
            grdItems_InitialPrice: "Initial Price",
            grdItems_ActualPrice: "Actual Price",
            grdItems_NetTotal: "Net Total",
            grdItems_ChargesTotal: "Charges Total",
            grdItems_DiscountTotal: "Discount Total",
            grdItems_TaxTotal: "Tax Total",
            grdItems_GrossTotal: "Gross Total",
            grdPayments_Date: "Payment Date",
            grdPayments_Name: "Name",
            grdPayments_Type: "Type",
            grdPayments_Status: "Status",
            grdPayments_NetTotal: "Net Total",
            grdPayments_Discounts: "Discounts",
            grdPayments_Charges: "Charges",
            grdPayments_Tax: "Tax",
            grdPayments_GrossTotal: "Gross Total",
            grdPayments_Currency: "Currency",
            grdPayments_TenderType: "Tender Type",
            grdPayments_TenderReference: "Tender Reference",
            grdPayments_ProcessDate: "Process Date",
            grdDeliveries_Number: "Number",
            grdDeliveries_Type: "Type",
            grdDeliveries_Status: "Status",
            grdDeliveries_RequestedDate: "Requested Date",
            grdDeliveries_ActualDate: "Actual Date",
            grdDeliveries_ActualTime: "Actual Time",
            grdDeliveries_RequestedQuantity: "Requested Quantity",
            grdDeliveries_DeliveredQuantity: "Delivered Quantity",
            grdDeliveries_Method: "Method",
            grdDeliveries_Carrier: "Carrier",
            grdDeliveries_CarrierReference: "Carrier Reference",
            grdDeliveries_ExceptionReason: "Exception Reason",
            errorERPRequest: "An occured occured opening accounting systems sales order detail view. ",
            errorERPRequestDetails: "${0}, ${1} Request: ${2}",
            btnCloseCaption: "Close"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/main':function(){
define("Sage/UI/Controls/main", [
    "Sage/UI/Controls/_customSelectMixin",
    "Sage/UI/Controls/_DialogHelpIconMixin",
    "Sage/UI/Controls/Address",
    "Sage/UI/Controls/CheckBox",
    "Sage/UI/Controls/CopyToClipboard",
    "Sage/UI/Controls/Currency",
    "Sage/UI/Controls/CurrencyTextBox",
    "Sage/UI/Controls/DateTimePicker",
    "Sage/UI/Controls/DependControl",
    "Sage/UI/Controls/DependencyLookup",
    "Sage/UI/Controls/DropDownSelectPickList",
    "Sage/UI/Controls/DropDownSelectUser",
    "Sage/UI/Controls/DurationSelect",
    "Sage/UI/Controls/Email",
    "Sage/UI/Controls/HelpMenu",
    "Sage/UI/Controls/LogOffButton",
    "Sage/UI/Controls/Lookup",
    "Sage/UI/Controls/EntityInfoToolTip",
    "Sage/UI/Controls/MultiSelectPickList",
    "Sage/UI/Controls/Name",
    "Sage/UI/Controls/Numeric",
    "Sage/UI/Controls/Phone",
    "Sage/UI/Controls/PickList",
    "Sage/UI/Controls/PickListAsText",
    "Sage/UI/Controls/Select",        
    "Sage/UI/Controls/SimpleTextarea",
    "Sage/UI/Controls/SingleSelectPickList",
    "Sage/UI/Controls/SummaryAggregate",
    "Sage/UI/Controls/TextBox"
    ], function() {
	// module:
        // Sage/UI/Controls
	// summary:
        // The Sage/UI/Controls module; Sage/UI/Controls provides loading of all Controls modules.
});
},
'Sage/QuickForms/Design/RowDesigner':function(){
define("Sage/QuickForms/Design/RowDesigner", [
    'dojo/string',
    'dojo/topic',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dijit/_WidgetBase',
    './Editors/RowBasicPropertyEditor',
    'dojo/i18n!./nls/RowDesigner'
], function(
    string,
    topic,
    declare,
    lang,
    array,
    _WidgetBase,
    RowBasicPropertyEditor,
    localization
) {
    /* todo: non visible designers should not need to inherit from _WidgetBase, but require full attribute support, more than Stateful provides */
    return declare('Sage.QuickForms.Design.RowDesigner', [_WidgetBase], {
        /**
         * The bound entry (from SData) pertaining to the QuickForm.
         */
        entry: null,
        editors: [
            RowBasicPropertyEditor
        ],

        helpTopicName: 'Row_properties',

        displayNameText: 'Row',

        constructor: function() {
            lang.mixin(this, localization);
        },

        set: function(name, value) {
            var result = this.inherited(arguments);

            var names = this._getAttrNames(name),
                setter = this[names.s];

            if (lang.isFunction(setter))
            {
                topic.publish('/quickforms/design/designerModified', this, name, value, result, this);
            }

            return result;
        }
    });
});
},
'Sage/MailMerge/MenuHelper':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MailMerge/MenuHelper", [
        "Sage/MailMerge/Helper",
        "dojo/_base/declare"
    ],
// ReSharper disable InconsistentNaming
    function (Helper, declare) {
        // ReSharper restore InconsistentNaming
        var oMenuHelper = declare("Sage.MailMerge.MenuHelper", null, {
            _populateWriteMenu: function () {
                require(['Sage/MailMerge/Service'], function () {
                    var oService = Helper.GetMailMergeService();
                    if (oService) {
                        if (!oService.MenuPopulated) {
                            oService.PopulateWriteMenu();
                        }
                    }
                });
            },
            _getMenuInfo: function () {
                var info = { toolbar: null, menu: null };
                var oToolbar = dojo.byId("ToolBar");
                if (typeof oToolbar !== "undefined" && oToolbar !== null) {
                    info.toolbar = oToolbar;
                    for (var i = 0; i < oToolbar.children.length; i++) {
                        var oItem = oToolbar.children[i];
                        if (oItem.id == "mnuMailMerge") {
                            info.menu = oItem;
                            return info;
                        }
                    }
                }
                return info;
            },
            attachWriteMenuPopulator: function () {
                var info = this._getMenuInfo();
                if (info.menu !== null) {
                    /* This will cause the jscript/Sage/MailMerge/Service.js to load (if it hasn't been already) 
                    * and to generate the sub-menu items when the Write button is clicked. 
                    * The mail merge API must become fully available [before] the menu is renderd, 
                    * since part of its rendering takes place in the mail merge API (sub-menu items). */
                    dojo.connect(info.menu, "onclick", this._populateWriteMenu);
                }
            },
            removeWriteMenu: function () {
                var info = this._getMenuInfo();
                if (info.toolbar !== null && info.menu !== null) {
                    info.toolbar.removeChild(info.menu);
                }
            }
        });

        return oMenuHelper;
    }
);
},
'Sage/Workspaces/Dialog':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Workspaces/Dialog", [
       'dojo/dom',
       'dojo/dom-style',
       'dojo/dom-construct',
       'dijit/Dialog',
       'dojo/NodeList-manipulate',
       'dojo/_base/declare',
       'Sage/UI/Controls/_DialogHelpIconMixin',
       'dojo/query'
],
function (dom, domStyle, construct, Dialog, manipulate, declare, _DialogHelpIconMixin, query) {
    return declare('Sage.Workspaces.Dialog', [Dialog, _DialogHelpIconMixin], {
        constructor: function (options, srcNodeRef) {
            this._initialized = false;
            this._clientId = options.clientId;
            this._stateClientId = options.stateClientId;
            this._panelClientId = options.panelClientId;
            this._contentClientId = options.contentClientId;
            this._context = null;
            this._dialog = null;
            this._dialogPanel = null;
            this._closedOnServerSide = false;
            this._dialogInfo = {};
            this.closable = true;
            this._width = 200;
            this._height = 500;
            this._toolbarId = this._clientId + '_' + this._clientId + '_toolbar';

            if (this._clientId) {
                this.statics.__instances[this._clientId] = this;
                this.statics.__initRequestManagerEvents();
            }

            this.inherited(arguments);
        },
        init: function () {
            this._context = dom.byId(this._clientId);
            dom.byId(this._contentClientId).style.display = "";
            this.handleEvents();
        },
        clearState: function () {
            var stateNode = dom.byId(this._stateClientId);
            stateNode.value = '';
        },
        disable: function () {
            if (!this.open) {
                return;
            }
            this.hide();
        },
        enable: function () {
            if (this.open) {
                return;
            }
            this.show();
        },
        show_: function (evt) {
            var title, width, height;
            if (typeof evt === 'string') {
                evt = { id: evt };
            }
            evt.event = 'open';
            evt.from = evt.from || 'client';
            title = evt.title || '';
            this.set('title', title);
            var help = evt.help;
            if (help) {
                this.createHelpIcon(help.url, help.target);
            }

            width = evt.width || 500;
            domStyle.set(this.domNode, 'width', width + 'px');

            height = evt.height || 200;
            //set the height position on the content pane and not the dijitDialog so that scroll bars when applicable do not scroll the title pane as well
            query('.dijitDialogPaneContent').style({
                'height': height + 'px',
                'overflow': 'auto'
            });
            
            var value = Sys.Serialization.JavaScriptSerializer.serialize(evt);
            var stateNode = dom.byId(this._stateClientId);
            stateNode.value = value;

            var toolbar = dojo.byId(this._toolbarId);
            if (toolbar) {
                if (this.helpIcon) {
                    dojo.place(toolbar, this.helpIcon, 'before');
                }
            }
        },
        setSize: function (width, height) {
            this._width = width || this._width || 500;
            domStyle.set(this.domNode, 'width', this._width + 'px');

            this._height = height || this._height || 200;
            domStyle.set(this.domNode, 'height', this._height + 'px');
        },
        fitToViewport: function () {
        },
        handleEvents: function () {
            var stateNode = dom.byId(this._stateClientId);
            var value = stateNode.value;
            var evt = {};
            if (value) {
                evt = eval('(' + value + ')');
            }

            //clear event
            stateNode.value = '';
            switch (evt.event) {
                case "open":
                    this._dialogInfo = evt;
                    this.title = this._dialogInfo.title;
                    this.show_(evt);
                    this.enable();
                    break;
                case "close":
                    if (this.open) {
                        this._closedOnServerSide = false;
                        this.hide_();
                        this.disable();
                        this._dialogInfo = {};
                        this._closedOnServerSide = true;
                    }
                    break;
            }
        },
        hide: function (evt) {
            // Destroy the dom for the toolbar, otherwise the old
            // toolbar will continue to appear when reopened
            if (this._toolbarId) {
                construct.destroy(this._toolbarId);
            }

            // srcElement check is for Chrome, as originalTarget doesn't exist
            if (evt && ((evt.originalTarget && evt.originalTarget.className.indexOf('dijitDialogCloseIcon') > -1)
                || (evt.srcElement && evt.srcElement.className.indexOf('dijitDialogCloseIcon') > -1))) {
                var bindingManager = Sage.Services.getService('ClientBindingManagerService');
                if (bindingManager) {
                    bindingManager.rollbackCurrentTransaction();
                }
                dom.byId(this._stateClientId).value = "{\"event\":\"close\",\"id\":\"" + this._dialogInfo.id + "\"}";
                __doPostBack(this._stateClientId, '');
            }
            this.inherited(arguments);
        },
        hide_: function (evt) {
            if (this._closedOnServerSide) {
                return;
            }

            var evt = {
                event: "close",
                id: this._dialogInfo.id
            };

            var bindingManager = Sage.Services.getService('ClientBindingManagerService');
            if (bindingManager) {
                bindingManager.rollbackCurrentTransaction();
            }

            var value = Sys.Serialization.JavaScriptSerializer.serialize(evt);
            dom.byId(this._stateClientId).value = value;
            __doPostBack(this._stateClientId, '');
        },
        // Legacy static methods
        statics: {
            __instances: {},
            __requestManagerEventsInitialized: false,
            __initRequestManagerEvents: function () {
                // this is the 'statics' object
                var self = this; // preserve our context for the PageRequestManager calls

                if (self.__requestManagerEventsInitialized) {
                    return;
                }

                var contains = function (a, b) {
                    if (!a || !b) {
                        return false;
                    } else {
                        return a.contains ? (a != b && a.contains(b)) : (!!(a.compareDocumentPosition(b) & 16));
                    }
                };

                var prm = Sys.WebForms.PageRequestManager.getInstance();

                prm.add_pageLoaded(function (sender, args) {
                    var panels = args.get_panelsUpdated();
                    if (panels) {
                        for (var id in self.__instances) {
                            for (var i = 0; i < panels.length; i++) {
                                var instance = self.__instances[id];
                                if (contains(panels[i], document.getElementById(instance._stateClientId))) {
                                    instance.handleEvents();
                                    break;
                                }
                            }
                        }
                    }
                });

                prm.add_endRequest(function (sender, args) {
                    for (var id in self.__instances) {
                        var instance = self.__instances[id];
                        instance.clearState();
                    }
                });

                self.__requestManagerEventsInitialized = true;
            }
        }
    });
});


},
'Sage/QuickForms/Design/nls/UserControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/UserControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "User"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/EventListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/EventListPanelConfig", [
    'Sage/MainView/ActivityMgr/BaseListPanelConfig',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/SummaryFormatterScope',
    'Sage/Data/BaseSDataStore',
    'Sage/UI/Columns/DateTime',
    'dojo/_base/declare',
    'dojo/i18n!./nls/EventListPanelConfig'
],

function (
    BaseListPanelConfig,
    SageUtility,
    UtilityActivity,
    SummaryFormatterScope,
    BaseSDataStore,
    ColumnsDateTime,
    declare,
    nlsResources
) {

    //dojo.requireLocalization("Sage.MainView.ActivityMgr", "EventListPanelConfig");
    var eventListPanelConfig = declare('Sage.MainView.ActivityMgr.EventListPanelConfig', [BaseListPanelConfig], {

        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'events';
            this._resourceKind = 'events';
            this.entityName = 'Event';
            this._contextMenu = 'EventListContextMenu';
            this._securedAction = 'Activities\View\Events';
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.toolBar = this._getToolBars();
            dojo.subscribe('/entity/event/create', this._onListRefresh);
            dojo.subscribe('/entity/event/change', this._onListRefresh);
            dojo.subscribe('/entity/event/delete', this._onListRefresh);
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('events');
        },

        _getSelect: function () {
            var select = [
                      '$key',
                      'Type',
                      'StartDate',
                      'EndDate',
                      'Location',
                      'Description',
                      'User/UserInfo/UserName',
                      'User/UserAccessToOtherCal/OthersAccessToUserCal/Id'
                      ];
            return select;
        },
        _getSort: function () {
            var sort = [
              { attribute: 'StartDate', descending: true }
            ];
            return sort;
        },
        _getWhere: function () {

            var where = (this._currentUserId) ? dojo.string.substitute('(User.UserAccessToOtherCal.OthersAccessToUserCal.Id eq "${0}")', [this._currentUserId]) : '';
            return where;
        },
        _getStructure: function () {

            var colNameType = this._nlsResources.colNameType || 'Type';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            var colNameEndDate = this._nlsResources.colNameEndDate || 'End Date';
            var colNameDescription = this._nlsResources.colNameDescription || 'Description';
            var colNameUser = this._nlsResources.colNameUser || 'User';
            var colNameLocation = this._nlsResources.colNameLocation || 'Location';

            declare("Sage.MainView.ActivityMgr.EventListPanelConfig.EditEventCell", dojox.grid.cells.Cell, {
                format: function (inRowIndex, inItem) {
                    var type = this.get(inRowIndex, inItem);
                    var key = Sage.Utility.getValue(inItem, "$key");
                    var html = "<a href='javascript:Sage.Link.editEvent(\"" + key + "\")' >" + "Edit" + "</a>";
                    return html;
                }
            });

            declare("Sage.MainView.ActivityMgr.EventListPanelConfig.EventTypeCell", dojox.grid.cells.Cell, {
                format: function (inRowIndex, inItem) {
                    var key = Sage.Utility.getValue(inItem, "$key");
                    var type = Sage.Utility.getValue(inItem, "Type");
                    var html = "<a href='javascript:Sage.Link.editEvent(\"" + key + "\")' >" + type + "</a>";
                    return html;
                }
            });

            var structure = [
               { field: 'Type', name: colNameType, type: Sage.MainView.ActivityMgr.EventListPanelConfig.EventTypeCell, width: '100px' },
               { field: 'StartDate', name: colNameStartDate, type: ColumnsDateTime, dateOnly: true, width: '100px' },
               { field: 'EndDate', name: colNameEndDate, type: ColumnsDateTime, dateOnly: true, width: '100px' },
               { field: 'User.UserInfo.UserName', name: colNameUser, width: '120px' },
               { field: 'Location', name: colNameLocation, width: '200px' },
               { field: 'Description', name: colNameDescription, width: '300px' }
            ];

            return structure;
        },
        _getDetailConfig: function () {
            var formatScope = this._getFormatterScope();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'EventSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/EventSummary.html',
                postProcessCallBack: false
            };
            return detailConfig;

        },
        _getFormatterScope: function () {
            var formatScope = new SummaryFormatterScope({
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'EventSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/EventSummary.html'
            });
            return formatScope;
        },
        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        }

    });
    return eventListPanelConfig;

});
},
'url:Sage/UI/Controls/templates/Address.html':"<div class=\"address-container\" id=\"{%= $.clientId %}\" >\r\n    <!--\r\n    -- IMPORTANT: Comments in a widget template must be placed inside the root node.\r\n    Simplate template\r\n    https://github.com/mmorton/simplate\r\n    https://github.com/mmorton/simplate/blob/master/demo/index.html\r\n    Basic formatting example: {%= $.id %}\r\n    -->\r\n    <textarea id=\"{%= $.clientId %}_displayText\" class=\"address-textarea\" style=\"height:{%= $.height %};\"\r\n        data-dojo-type=\"Sage.UI.Controls.SimpleTextarea\" readonly=\"readonly\" dragRestriction=\"true\"  tabindex=\"{%= $.tabIndex %}\"\r\n    {% if ($.enabled && !$.readOnly) { %}\r\n        data-dojo-attach-event=\"onDblClick: showDialog, ondijitclick: showDialog\"\r\n    {% } %}\r\n        slxchangehook=\"true\" >{%= $.displayValue %}</textarea>\r\n    {% if ($.enabled && !$.readOnly) { %}\r\n    <img alt=\"{%= $.imageData.imageEditAltText %}\" data-dojo-attach-event=\"ondijitclick: showDialog\" class=\"address-edit-button\"\r\n         src=\"{%= $.imageData.imageEditUrl %}\" title=\"{%= $.imageData.imageEditToolTip %}\" id=\"{%= $.clientId %}-Button\" \r\n          tabindex=\"{%= $.tabIndex %}\" />\r\n    {% } %}\r\n    {% if ($.enabled && $.showButton) { %}\r\n    <img alt=\"{%= $.imageData.imageMapQuestAltText %}\" data-dojo-attach-event=\"ondijitclick: showMap\" class=\"address-map-button\"\r\n         src=\"{%= $.imageData.imageMapQuestUrl %}\" title=\"{%= $.imageData.imageMapQuestToolTip %}\" id=\"{%= $.clientId %}-MapQuest\" \r\n          tabindex=\"{%= $.tabIndex %}\" />\r\n    {% } %}\r\n</div>",
'Sage/Groups/nls/GroupNavigator':function(){
define("Sage/Groups/nls/GroupNavigator", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            firstText: "Move First",
            previousText: "Move Previous",
            nextText: "Move Next",
            lastText: "Move Last",
            listText: "List View",
            noRecordsText: "No Records",
            labelFmtText: "${0} of ${1}"
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Utility/File/nls/AddURLAttachment':function(){
﻿define("Sage/Utility/File/nls/AddURLAttachment", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            descriptionText: 'Description',
            urlText: 'URL',
            titleText: 'Add URL Attachment',
            okText: 'OK',
            cancelText: 'Cancel',
            requestFailedMsg: 'The requested operation could not be completed, please try again later.',
            urlBlankMsg: 'The URL or description property cannot be blank.'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Filters/nls/EditFilterItems':function(){
define("Sage/UI/Filters/nls/EditFilterItems", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            selectAllText: 'Select All',
            findItemText: 'Find Item:',
            findText: 'Find',
            clearText: 'Clear',
            dialogTitle: 'Edit Filter Items',
            okText: 'OK',
            cancelText: 'Cancel'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/nls/DesignSurface':function(){
﻿define("Sage/QuickForms/Design/nls/DesignSurface", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            bisectionErrorText: "The placement will cause another control to be bisected.",
            rowBoundsErrorText: "The chosen row is out of bounds.",
            columnBoundsErrorText: "The chosen column is out of bounds.",
            rowSpanBoundsErrorText: "The chosen row span is out of bounds.",
            columnSpanBoundsErrorText: "The chosen column span is out of bounds.",
            occupiedErrorText: "There is not enough empty space for the chosen size."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/File/nls/DragDropWatcher':function(){
﻿define("Sage/Utility/File/nls/DragDropWatcher", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
         query0:'The feature you are requesting requires the Sage SalesLogix Desktop <br> Integration Module.',
         query1: 'Find out more...',
         query2: 'Would you like to install this feature now?',
         query3: 'Note: This module can be installed at any time from the logon or options pages.'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'url:Sage/MainView/Opportunity/templates/UpdateOpportunities.html':"﻿[\r\n'<div>',\r\n    '<div data-dojo-type=\"dijit.Dialog\" title=\"{%= $.updateMultipleOpps_Caption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onCancel:_close\">',\r\n        '<div data-dojo-type=\"dijit.form.Form\" id=\"{%= $.id %}_frmUpdateMultipleOpps\">',\r\n            '<table cellspacing=\"20\">',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.update_Property_Caption %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<select title=\"{%= $.update_Property_Caption %}\" labelWidth=\"20\" name=\"{%= $.id %}_PropertyName\" dojoAttachPoint=\"propertyNameSelect\" dojoAttachEvent=\"onChange:_propertyChanged\" data-dojo-type=\"dijit.form.Select\" style=\"width:150px\">',\r\n                            '{% for (var i=0; i < $._updateableProperties.length;i++) { %}',\r\n                                '<option value=\"{%= $._updateableProperties[i].propertyName %}\" {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $._updateableProperties[i].propertyDisplayName %}</option>',\r\n                            '{% } %}',\r\n                        '</select>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"divUpdateOppsTolbl\" dojoAttachPoint=\"divUpdateOppsTolbl\" class=\"display-none\">',\r\n                            '<label>{%= $.update_To_Caption %}</label>',\r\n                        '</div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div dojoAttachPoint=\"divAcctMgrContainer\">',\r\n                            '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.update_To_Caption %}\" id=\"{%= $.id %}_luAccountMgr\" dojoAttachPoint=\"accountMgr_Container\" allowClearingResult=\"false\" class=\"removePadding\"></div>',\r\n                        '</div>',\r\n                        '<div dojoAttachPoint=\"divCloseProbContainer\" class=\"display-none\">',\r\n                            '<select id=\"{%= $.id %}_pkl_CloseProbability\" PickListName=\"Opportunity Probability\" label=\"{%= $.update_To_Caption %}\" id=\"{%= $.id %}_pkl_CloseProbability\" data-dojo-type=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pkl_CloseProbability\" canEditText=\"false\" itemMustExist=\"true\"></select>',\r\n                        '</div>',\r\n                        '<div data-dojo-type=\"dojox.layout.TableContainer\" dojoAttachPoint=\"divForecastContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"2\" baseClass=\"display-none\">',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"addToForecast\" label=\"{%= $.addToForecast_Yes %}\" value=\"yesForecast\" id=\"{%= $.id %}_rdgYesForecast\" dojoAttachPoint=\"rdoYesForecast\" checked=\"true\" />',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"addToForecast\" label=\"{%= $.addToForecast_No %}\" value=\"noForecast\" id=\"{%= $.id %}_rdgNoForecast\" />',\r\n                        '</div>',\r\n                        '<div data-dojo-type=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"2\" dojoAttachPoint=\"divEstCloseContainer\" baseClass=\"display-none\">',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"estimatedClose\" id=\"{%= $.id %}_rdgEstClose\" checked=\"true\" label=\"{%= $.estimatedClose_To %}\" value=\"estimatedClose\" dojoAttachPoint=\"rdoEstClose\" dojoAttachEvent=\"onChange:estimatedCloseDateChange\" />',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"estimatedClose\" value=\"move\" id=\"{%= $.id %}_rdgEstMove\" label=\"{%= $.estimatedClose_MoveOut %}\" />',\r\n                        '</div>',\r\n                        '<div dojoAttachPoint=\"divCommentsContainer\" class=\"display-none\">',\r\n                            '<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_txtComments\" dojoAttachPoint=\"txtComments\" style=\"font-size: 85%\"></textarea>',\r\n                        '</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td></td>',\r\n                    '<td></td>',\r\n                    '<td></td>',\r\n                    '<td>',\r\n                        '<div id=\"divEstCloseDateContainer\" class=\"display-none\" dojoAttachPoint=\"divEstCloseDateContainer\">',\r\n                            '<div data-dojo-type=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtpEstCloseDate\" displayDate=\"true\" displayTime=\"false\" dojoAttachPoint=\"dtpEstCloseDate\"></div>',\r\n                        '</div>',\r\n                        '<div id=\"divMoveEstimatedCloseContainer\" class=\"display-none\" dojoAttachPoint=\"divMoveEstimatedCloseContainer\">',\r\n                            '<select data-dojo-type=\"dijit.form.Select\" name=\"moveEstCloseDate\" id=\"{%= $.id %}_moveEstCloseDateList\" dojoAttachPoint=\"moveEstCloseDateList\">',\r\n                                '<option value=\"Forward\">{%= $.moveEstCloseDate_Forward %}</option>',\r\n                                '<option value=\"Backward\">{%= $.moveEstCloseDate_Backward %}</option>',\r\n                            '</select>',\r\n                            '<div data-dojo-type=\"dijit.form.TextBox\" labelWidth=\"20\" dojoAttachPoint=\"daysToMove\"></div>&nbsp',\r\n                            '<label>{%= $.estimatedClose_Days %}</label>',\r\n                        '</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n            '<div class=\"button-bar\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id%}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.btnOK_Caption %}</div>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id%}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_close\">{%= $.btnCancel_Caption %}</div>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]\r\n",
'Sage/MainView/ActivityMgr/nls/ConfirmListPanelConfig':function(){
﻿define("Sage/MainView/ActivityMgr/nls/ConfirmListPanelConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            colNameType:'Activity Type',
            colNameNotification:'Notification',
            colNameStartDate:'Start Date',
            colNameDuration:'Duration',
            colNameRegarding:'Regarding',
            colNameFromUser:'From',
            colNameToUser:'To User'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/TaskPane/TaskPaneItem':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/TaskPaneItem", [
       'dijit/_Widget',
       'dijit/_TemplatedMixin',
       'dojo/_base/declare'
],
function (_Widget, _TemplatedMixin, declare) {
    var taskPaneItem = declare("Sage.TaskPane.TaskPaneItem", [_Widget, _TemplatedMixin], {
        securedAction: '',
        linkText: '',
        confirmMsg: '',
        clientAction: '',
        serverAction: '',
        currentActionIndex: -1,
        actions: [],
        selectedItemList: {},
        action: '',
        type: '',
        postCreate: function (options) {
            this.checkSecurityAccess();
        },
        templateString: '<a dojoAttachPoint="linkTextNode" href="#"></a>',
        attributeMap: dojo.delegate(_Widget.prototype.attributeMap, {
            linkText: { node: 'linkTextNode', type: 'innerHTML' },
            action: { node: 'linkTextNode', type: 'attribute', attribute: 'href' }
        }),
        // this section relates to processing the link
        setActionList: function () {
            this.actions.push(this.startConfirm);
            this.actions.push(this.startGetSelectedItems);
            this.actions.push(this.startClientAction);
            this.actions.push(this.startServerAction);
        },
        doNextAction: function () {
            this.currentActionIndex++;
            this.actions[this.currentActionIndex].call();
        },
        startConfirm: function () {
            var confirmResp = true;
            if (this.confirmMsg) {
                confirmResp = confirm(this.confirmMsg); // returns bool
            }
            this.processConfirmResult(confirmResp);
        },
        processConfirmResult: function (result) {
            if (result === true) {
                this.doNextAction();
            }
        },
        startClientAction: function () {
            var result = true;
            if (this.clientAction) {
                if (typeof (this.clientAction) === "function") {
                    result = this.clientAction.call();
                }
            }
            this.processClientActionResult(result);
        },
        processClientActionResult: function (result) {
            this.doNextAction();
        },
        startServerAction: function () {
            if (this.serverAction) {
                if (this.selectedItemList.length > 0) {
                    __doPostBack(this.serverAction, this.selectedItemList);
                }
            }
        },
        startGetSelectedItems: function () {
            var options = { key: 'selectAll' };
            var selectionService = Sage.Services.getService('SelectionContextService');
            if (selectionService) {
                selectionService.getSelectedIds(options, this.processGetSelectedItemsResult);
            }
        },
        processGetSelectedItemsResult: function (result) {
            this.selectedItemList = result;
            this.doNextAction();
        },
        // this section relates to showing the link
        getCurrentUserId: function () {
            var userid = '';
            var clientContextSvc = Sage.Services.getService('ClientContextService');
            if (clientContextSvc) {
                userid = clientContextSvc.getValue('userID');
            }
            return userid;
        },
        checkSecurityAccess: function () {
            var displayMode = "none";
            if (this.securedAction.length > 0) {
                var roleSecuritySvc = Sage.Services.getService('RoleSecurityService');
                roleSecuritySvc.hasAccess(this.securedAction, function (callbackResult) {
                    if (callbackResult) {
                        displayMode = "inline";
                    }
                });
            }
            dojo.style(this.domNode, { "display": displayMode });
        }
    });
    return taskPaneItem;
});
},
'Sage/QuickForms/Design/Editors/nls/FormAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/FormAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            generalText: "General",
            useEntityNameAsTitleText: "Use Entity Name As Title:",
            useEntityNameAsTitleTooltipText: "Use name of current entity in form title."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/nls/EventListPanelConfig':function(){
﻿define("Sage/MainView/ActivityMgr/nls/EventListPanelConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
           colNameType:'Type',
           colNameStartDate:'Start Date',
           colNameEndDate:'End Date',
           colNameDescription:'Description',
           colNameUser:'User',
           colNameLocation: 'Location'    
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'url:Sage/MainView/IntegrationContract/templates/AdvancedSearchOptions.html':"﻿[\r\n'<div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\">{%= $.searchOptionsHeader %}',\r\n            '<span class=\"boldtext\">{%= $.configOptions.targetAccount %}</span>',\r\n        '</label>',\r\n        '<br /><br />',\r\n    '</div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontext padBottom\" style=\"padding-left:20px\">{%= $.searchOptionsText %}</label>',\r\n    '</div>',\r\n    '<div>',\r\n        '<br />',\r\n        '<label class=\"slxlabel\" style=\"padding-left:20px\">{%= $.propertyText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:136px\">{%= $.operatorText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:118px\">{%= $.searchText %}</label>',\r\n    '</div>',\r\n    '<div dojoAttachPoint=\"conditionContainer\" style=\"padding:10px;\" id=\"{%= $.id %}-Condition-container\"></div>',\r\n    '<div class=\"button-bar alignright\">',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').refineSearchObject.getSelections();\">',\r\n            '{%= $.okText %}',\r\n        '</button>',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').hide();\">',\r\n            '{%= $.cancelText %}',\r\n        '</button>',\r\n    '</div>',\r\n'</div>'\r\n]\r\n",
'Sage/QuickForms/Design/GenericControlDesigner':function(){
define("Sage/QuickForms/Design/GenericControlDesigner", [
    'dojo/string',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/GenericBasicPropertyEditor',
    './Editors/GenericAdvancedPropertyEditor',
    'dojo/i18n!./nls/GenericControlDesigner'
], function(
    string,
    declare,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    GenericBasicPropertyEditor,
    GenericAdvancedPropertyEditor,
    localization)
{
    return declare('Sage.QuickForms.Design.GenericControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            GenericBasicPropertyEditor,
            GenericAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div data-dojo-attach-point="containerNode">',
            '<span data-dojo-attach-point="designCaptionNode"></span>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },

        helpTopicName: 'visual_control',
        displayNameText: 'Unknown',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setControlIdAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },

        getFormattedType: function(){
            var type = lang.getObject('$type', false, this.entry) || this.displayNameText,
                name = (type.indexOf(', ') !== -1) ? type.split(', ')[0] : type,
                parts = (type.indexOf('.') !== -1) ? name.split('.') : [name];
            return parts[parts.length-1];
        },

        startup: function() {
            this.inherited(arguments);

            this.displayNameText = this.getFormattedType();
            this.set('designCaption', this.get('controlId'));
            this.applyVisibility();
        }
    });
});
},
'Sage/MainView/ActivityMgr/BaseListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/BaseListPanelConfig", [
        'Sage/_ConfigurationProvider',
        'Sage/Data/SDataStore',
        'dijit/Menu',
        'dijit/PopupMenuItem',
        'dijit/MenuSeparator',
        'Sage/UI/MenuItem',
        'dojo/i18n!./nls/BaseListPanelConfig',
        'dijit/registry',
        'dojo/_base/declare'
],
function (
   _ConfigurationProvider,
   SDataStore,
   Menu,
   PopupMenuItem,
   MenuSeparator,
   MenuItem,
   nlsResources,
   registry,
   declare
   ) {
    var baseListPanelConfig = declare('Sage.MainView.ActivityMgr.BaseListPanelConfig', [_ConfigurationProvider], {
        list: false,
        detail: false,
        summary: false,
        toolBar: false,
        _listId: false,
        _store: false,
        _service: false,
        _where: false,
        _sort: false,
        _select: false,
        _include: false,
        _structure: false,
        _currentUserId: false,
        _resourceKind: false,
        _nlsResources: false,
        _securedAction: '',
        keyField: "$key",
        hasCompositeKey: false,
        _menuItems: null,
        _contextMenu: false,
        _schedeContextMenu: false,
        _activityService: false,
        _summaryformaterScope: false,
        entityName: false,
        rebuildMenus: true,
        rebuildOnRefresh: false,
        constructor: function () {
            this._nlsResources = nlsResources;
            this._service = Sage.Data.SDataServiceRegistry.getSDataService('dynamic');
            this._activityService = Sage.Services.getService('ActivityService');
            var clientContextSvc = Sage.Services.getService('ClientContextService');
            if (clientContextSvc) {
                if (clientContextSvc.containsKey("userID")) {
                    this._currentUserId = clientContextSvc.getValue("userID");
                }
            }
            this._include = this._getInclude();
            this._menuItems = [];
        },
        rebuild: function () {
            this._where = this._getWhere();
            this._structure = this._getStructure();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.detail = this._getDetailConfig();
            this.toolBar = this._getToolBars();
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList();
        },
        _getListConfig: function () {
            if (!this._store) {
                this._store = this._getStore();
            } else {
                this._store.where = this._where;
            }

            var listConfig = {
                id: this._listId,
                structure: this._structure,
                store: this._store,
                selectedRegionContextMenuItems: this._getListContextMenuItems(),
                onSelectedRegionContextMenu: this._onListContext
            };
            return listConfig;
        },
        _getStore: function () {
            var store = new SDataStore({
                id: this._listId,
                service: this._service,
                resourceKind: this._resourceKind,
                include: this._include,
                select: this._select,
                sort: this._sort,
                where: this._where
            });
            return store;
        },
        _getSelect: function () {
            var select = [];
            return select;
        },
        _getInclude: function () {
            var includes = [];
            return includes;
        },
        _getSort: function () {
            var sort = [];
            return sort;
        },
        _getWhere: function () {
            var where = '';
            return where;
        },
        _getStructure: function () {
            var structure = [];
            return structure;
        },
        _getSummaryConfig: function () {
            var store = new SDataStore({
                id: this._listId,
                service: this._service,
                resourceKind: this._resourceKind,
                include: [],
                select: ['$key'],
                where: this._where
            });

            var structure = [
                {
                    field: '$key',
                    formatter: 'formatSummary',
                    width: '100%',
                    name: 'Summary View'
                }
            ];
            var formatScope = this._getFormatterScope();
            var summaryConfig = {
                structure: structure,
                layout: 'layout',
                store: store,
                rowHeight: 170,
                rowsPerPage: 10,
                formatterScope: formatScope
            };
            return summaryConfig;
        },
        _getFormatterScope: function () {
            return false;
        },
        _getDetailConfig: function () {
            return false;
        },
        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        },
        _getListContextMenuItems: function () {
            if (!this._contextMenu) {
                return;
            }
            if (this._menuItems.length > 0) {
                return this._menuItems;
            }

            if (!Sage.UI.DataStore.ContextMenus) {
                return [];
            }

            if (!Sage.UI.DataStore.ContextMenus.listContextMenu) {
                return [];
            }

            if (this._menuItems.length > 0) {
                this._menuItems[0].destroyDescendants();
            }

            this._menuItems = [];
            var menuConfig = Sage.UI.DataStore.ContextMenus.listContextMenu.items;
            var len = menuConfig.length;
            for (var i = 0; i < len; i++) {
                var mDef = menuConfig[i];
                if (mDef.id === this._contextMenu) {
                    this._buildChildMenu(mDef.submenu, null);
                } else {
                    if (mDef.id === this._scheduleContextMenu) {
                        var sepMenuItem = new MenuSeparator();
                        this._menuItems.push(sepMenuItem);
                        var submMenu = new Menu();
                        var popsubMenu = new PopupMenuItem({
                            label: mDef.text,
                            popup: submMenu
                        });
                        this._buildChildMenu(mDef.submenu, submMenu);
                        this._menuItems.push(popsubMenu);
                    }
                }
            }
            return this._menuItems;
        },
        _getGridMenu: function () {
            var container = dijit.byId('_listContextmenu');
            return container;
        },
        _buildChildMenu: function (parentMenuDef, parentMenu) {
            var len = parentMenuDef.length;
            for (var i = 0; i < len; i++) {
                var mDef = parentMenuDef[i];
                if (mDef.submenu.length > 0) {
                    var subMenu = new Menu();
                    this._buildChildMenu(mDef.submenu, subMenu);
                    var popsubMenu = new PopupMenuItem({
                        label: mDef.text,
                        popup: subMenu
                    });

                    if (parentMenu) {
                        parentMenu.addChild(popsubMenu);
                    }
                    else {
                        this._menuItems.push(popsubMenu);
                    }
                }
                else {
                    var menuItem = null;
                    if ((mDef.text === '-') || (mDef.text === ' ') || (mDef.isspacer)) {
                        menuItem = new MenuSeparator();
                    } else {
                        var href = mDef.href;
                        if (href.indexOf('javascript:') < 0) {
                            href = dojo.string.substitute("javascript:${0}()", [href]);
                        }
                        menuItem = new MenuItem({
                            label: mDef.text || '...',
                            icon: mDef.img,
                            title: mDef.tooltip || '',
                            ref: href,
                            onClick: function () {
                                if (this.ref !== '') {
                                    try {
                                        window.location.href = this.ref;
                                    } catch (e) { }
                                }
                            }
                        });
                    }
                    if (parentMenu) {
                        parentMenu.addChild(menuItem);
                    }
                    else {
                        this._menuItems.push(menuItem);
                    }
                }
            }
        },
        _onListContext: function () {
        },
        getFilterConfig: function (metaDataService, entry, options) {
            var systemService = this._service;
            var metaService = metaDataService;
            var entityName = this.entityName;
            var resourceKind = this._resourceKind;
            var where = this._where;
            var configuration = {};
            configuration['groupId'] = this._listId;
            configuration['store'] = new SDataStore({
                executeReadWith: 'readFeed',
                request: new Sage.SData.Client.SDataResourcePropertyRequest(metaService)
                    .setResourceKind('entities')
                    .setResourceSelector('"' + entityName + '"')
                    .setResourceProperty('filters')
                   .setQueryArg('where', 'filterType ne "analyticsMetric"')
                   .setQueryArg('count', 20)
            });
            configuration['createStoreForFilter'] = function (filter) {
                return filter && filter['filterName']
                    ? new SDataStore({
                        executeReadWith: 'readFeed',
                        request: new Sage.SData.Client.SDataResourcePropertyRequest(systemService)
                            .setResourceKind(resourceKind)
                            .setResourceProperty('$queries/executeMetric')
                            .setQueryArg('_filterName', filter['filterName'])
                            .setQueryArg('orderby', 'displayName')
                            .setQueryArg('_activeFilter', where)
                    })
                    : null;
            };

            configuration['getFilterManager'] = function () {
                var listPanel = registry.byId('list');
                return listPanel && listPanel.get('filterManager');
            };

            return configuration;
        },
        getTimelessProperty: function (propertyName) {
            return false;
        }
    });
    return baseListPanelConfig;
});
},
'Sage/UI/Columns/CheckBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/CheckBox", [
    'dojo/_base/declare'
],
function (declare) {
    var widget = declare("Sage.UI.Columns.CheckBox", dojox.grid.cells.Bool, {
        //Formatter used for the editiable = false state.
        formatter: function (value, rowIdx, cel) {
            var checkbox = (value === true || value === 1) ? '<input type="checkbox" checked="checked" disabled="disabled" />'
			    : '<input type="checkbox" disabled="disabled" />';
		    return checkbox;
        }
    });

    return widget;
});
},
'Sage/UI/TitleContentPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/TitleContentPane", [
        'dijit/MenuSeparator',
        'dijit/Menu',
        'dijit/layout/ContentPane',
        'dijit/MenuItem',
        'dijit/PopupMenuItem',
        'dijit/MenuBar',
        'dijit/MenuBarItem',
        'Sage/UI/PopupMenuBarItem',
        'dojox/grid/DataGrid',
        'Sage/UI/OrientableMenuBar',
        'Sage/UI/GridMenuItem',
        'Sage/UI/ImageButton',
        'Sage/Utility',
        'Sage/Groups/GroupContextService',
        'Sage/Data/BaseSDataStore',
        'Sage/UI/GroupsTitlePaneConfigProvider',
        'dojo/dom-style',
        'dojo/_base/array',
        'dojo/dom-class',
        'dojo/_base/declare',
        'dojo/_base/lang'
    ],
function (
        MenuSeparator,
        Menu,
        ContentPane,
        MenuItem,
        PopupMenuItem,
        MenuBar,
        MenuBarItem,
        PopupMenuBarItem,
        DataGrid,
        OrientableMenuBar,
        GridMenuItem,
        ImageButton,
        Utility,
        GroupContextService,
        BaseSDataStore,
        GroupsTitlePaneConfigProvider,
        domStyle,
        array,
        domClass,
        declare,
        lang
    ) {
    var TitleContentPane = declare('Sage.UI.TitleContentPane', ContentPane, {
        // summary:
        //      This class is responsible for the Title pane area in the standard SalesLogix layout.
        //      This includes the title - usually the name of the entity or page, the 'group' tabs and menu.
        started: false,
        // _configurationProvider: object
        //      The object that will provide configuration details for the parts of this pane - title, tabs and menu.
        _configurationProvider: null,
        _configuration: {},
        _titleFmtString: '${0}',
        _groupMenuBar: false,
        _groupMenu: false,

        // title: string
        //      The string used in the title format string (as provided by the configuration provider).
        title: false,
        tabConnects: null,

        startup: function () {
            this.inherited(arguments);
            var handle,
                mode = Utility.getModeId();

            if (typeof mode === 'string' && mode.toLowerCase() === 'list') {
                handle = dojo.subscribe('/listView/applyConfiguration', lang.hitch(this, function () {
                    dojo.disconnect(handle);
                    this._doStartup();
                }));
            } else {
                this._doStartup();
            }
        },
        _doStartup: function () {
            if (this.started) {
                return;
            }

            this.tabConnects = [];
            
            if (this._configurationProvider === null) {
                var eCtx = Sage.Services.getService('ClientEntityContext');
                if (eCtx) {
                    var c = eCtx.getContext();
                    if (c['IsGroupsBasedEntity']) {
                        this._configurationProvider = new GroupsTitlePaneConfigProvider();
                    }
                }
            }

            if (this._configurationProvider !== null) {
                var gmenuDom = dojo.create('div', { 'id': 'GroupMenuSpace', 'class': 'GroupButton' });
                dojo.place(gmenuDom, this.domNode);
                dojo.connect(this._configurationProvider, "onTitlePaneConfigurationChange", this, "resetConfiguration");

                this._configurationProvider.requestTitlePaneConfiguration({
                    scope: this,
                    success: function (config) {
                        this._setConfiguration(config);
                        this.started = true;
                    }
                });
            } else {
               this._hideEmptyTabBar();
            }
        },
        _resize: function () {
            var tabs = dijit.byId("GroupTabs");
            tabs.resize();
        },
        _setConfiguration: function (config) {
            this._configuration = config;
            if (this._configuration) {
                if (this._configuration.menu) {
                    this._addMenu(this._configuration.menu);
                }
                if (this._configuration.tabs) {
                    this._showTabBar();
                    this._addTabs(this._configuration.tabs);
                } else {
                    this._hideEmptyTabBar();
                }
                if (this._configuration.titleFmtString) {
                    this._titleFmtString = this._configuration.titleFmtString;
                }
            }
        },
        resetConfiguration: function () {
            // summary:
            //      Callback method for events that indicate that the title pane contents are out of date
            //      and need to be refreshed.
            var tabs = dijit.byId('GroupTabs');

            if (tabs) {
                array.forEach(this.tabConnects, function (handle) {
                    dojo.disconnect(handle);
                });

                this.tabConnects = [];

                try {
                    tabs.removeChildren();
                } catch (err) {
                    console.error(err);
                }
            }

            this.started = false;
            this._doStartup();
        },
        _setTitleAttr: function (title) {
            dojo.html.set(dojo.byId('PageTitleText'), dojo.string.substitute(this._titleFmtString, [title]));
        },
        _setConfigurationProviderAttr: function (configurationProvider) {
            //ToDo:  implement functionality to start this up again if the provider changes...  <---<<<   <---<<<
            this._configurationProvider = configurationProvider;
            this._doStartup();
            this._resize();
        },
        _addMenu: function (menuConfig) {
            if (menuConfig) {
                //add groups Menu...
                if (this._groupMenu) {
                    return;
                }

                this._groupMenuBar = new OrientableMenuBar({
                    id: 'groupMenuBar',
                    title: menuConfig.tooltip,
                    orientation: { 'BR': 'TR', 'BL': 'TL' },
                    baseClass: 'group-menu-bar'
                });

                domClass.remove(this._groupMenuBar.containerNode, 'dijitMenuBar');

                this._groupMenu = new Menu({
                    id: 'groupMenu',
                    style: { width: menuConfig.width || '350px' }
                });

                this._addItemsToMenu(this._groupMenu, menuConfig.items);

                this._groupMenuBar.addChild(new PopupMenuBarItem({
                    label: menuConfig.text || '...',
                    icon: menuConfig.img || this._blankGif,
                    imageClass: menuConfig.imageClass || '',
                    baseClass: 'group-menu-button',
                    id: menuConfig.id || Sage.guid('groupMenuItem'),
                    popup: this._groupMenu,
                    style: 'width:80px'
                }));

                this._groupMenuBar.placeAt("GroupsWrapper", "before");
                this._groupMenuBar.startup();

                var addGroupButton = new ImageButton({
                    id: 'addGroupButton',
                    imageClass: 'icon_plus_16x16',
                    title: menuConfig.addGroupTooltip,
                    onClick: function () {
                        Sage.Groups.GroupManager.CreateGroup();
                    }
                });

                addGroupButton.placeAt("GroupsWrapper", "before");
                addGroupButton.startup();
            }
        },
        _addItemsToMenu: function (menu, items) {
            var len = items.length, itm;
            for (var i = 0; i < len; i++) {
                itm = items[i];
                if (itm.fn) {
                    menu.addChild(itm.fn.call(itm.scope || this));
                } else if (itm.items && itm.items.length > 0) {
                    var submenu = new Menu({ parentMenu: menu, id: itm.id + '_submenu' });
                    this._addItemsToMenu(submenu, itm.items);
                    menu.addChild(new MenuItem({
                        label: itm.text || '...',
                        icon: itm.img || this._blankGif,
                        title: itm.tooltip || '',
                        popup: submenu,
                        //iconClass: 'dijitEditorIcon dijitEditorIconSpace',
                        id: itm.id
                    }));
                } else {
                    if (itm.isSeparator || itm.text === '-') {
                        menu.addChild(new MenuSeparator());
                    } else {
                        menu.addChild(new MenuItem({
                            label: itm.text || '...',
                            //iconClass: 'dijitEditorIcon dijitEditorIconSpace',
                            icon: itm.img || this._blankGif,
                            title: itm.tooltip || '',
                            id: itm.id,
                            onClick: itm.onClick || function () {
                                document.location = itm.href;
                            }
                        }));
                    }
                }
            }
        },
        _addTabs: function (tabConfig) {
            try {
                var tConfig = {
                    selectedTabId: '',
                    tabKeyProperty: '$key',
                    tabNameProperty: '$descriptor', // group display name
                    tabGroupNameProperty: 'name', // group name
                    tabFamilyProperty: 'family',
                    tabHiddenProperty: false
                };

                dojo.mixin(tConfig, tabConfig);

                if (tConfig) {
                    var tabs = dijit.byId("GroupTabs");
                    tabs.startup();
                    var blank = this._blankGif;
                    var closable = typeof tConfig.onTabClose === 'function';
                    var lookupTabItems;
                    if (tConfig.staticTabs) {
                        var len = tConfig.staticTabs.length;
                        for (var i = 0; i < len; i++) {
                            var t = tConfig.staticTabs[i];
                            var tabId = t[tConfig.tabKeyProperty];
                            var sTab = dijit.byId(tabId) || new ContentPane({
                                id: tabId,
                                title: t[tConfig.tabNameProperty],
                                closable: true,
                                dataItem: t,
                                onClose: function () { return false; }
                            });
                            var child = tabs.addChild(sTab);

                            if (tConfig.selectedTabId === tabId) {
                                tabs.selectChild(sTab);
                            }

                            // Build the static tab context menu (which is the lookup results tab).
                            // The tab menus hitch on to the "close" tab menu. The tabs must be set as closable,
                            // or the menu will not show up.
                            var staticMenu = dijit.byId(dojo.string.substitute("GroupTabs_tablist_${0}_Menu", [t[tConfig.tabKeyProperty]]));
                            staticMenu.destroyDescendants(); // Remove the close option

                            if (staticMenu && tConfig.showTabContextMenus && t["contextMenuItems"]) {
                                lookupTabItems = t["contextMenuItems"]; // Sage.UI.DataStore.ContextMenus.GroupLookupTabContextMenu.items;
                                for (var x = 0; x < lookupTabItems.length; x++) {
                                    var mItem = lookupTabItems[x];
                                    if (mItem.isspacer || mItem.text === '') {
                                        staticMenu.addChild(new MenuSeparator());
                                    } else {
                                        var href = mItem.href;
                                        if (href.indexOf('javascript:') < 0) {
                                            href = dojo.string.substitute("javascript:${0}('${1}','${2}','${3}');", [href, t[tConfig.tabKeyProperty], t[tConfig.tabNameProperty], t[tConfig.tabFamilyProperty]]);
                                        } else {
                                            var substituteObj = {
                                                'groupId': t[tConfig.tabKeyProperty],
                                                'groupName': t[tConfig.tabNameProperty],
                                                'family': t[tConfig.tabFamilyProperty]
                                            };
                                            href = dojo.string.substitute(href, substituteObj);
                                        }
                                        var itemId = t[tConfig.tabFamilyProperty] + '_LOOKUP_' + x;
                                        var menuItem = new MenuItem({
                                            id: itemId,
                                            label: mItem.text || '...',
                                            icon: mItem.img || blank,
                                            title: mItem.tooltip || '',
                                            ref: href,
                                            onClick: function () {
                                                if (this.ref !== '') {
                                                    try {
                                                        window.location.href = this.ref;
                                                    } catch (e) { }
                                                }
                                            }
                                        });

                                        staticMenu.addChild(menuItem);
                                    }
                                }
                            }
                        }
                    }

                    if (tConfig.lookupButton) {
                        tConfig.lookupButton.startup();
                        dojo.place(tConfig.lookupButton.domNode, tabs.domNode, 'before');
                    }

                    var userId = Utility.getClientContextByKey('userID');
                    var fParams = {
                        onComplete: function (data) {
                            var dataItem,
                                i,
                                tabList = [],
                                selectedTab,
                                menuFuncs = [],
                                tabId;

                            for (i = 0; i < data.length; i++) {
                                dataItem = data[i];
                                if (tConfig.tabHiddenProperty && dataItem[tConfig.tabHiddenProperty] === true) {
                                    continue;
                                }

                                tabId = dataItem[tConfig.tabKeyProperty];

                                var aTab = dijit.byId(tabId) || new ContentPane({
                                    id: tabId,
                                    title: dataItem[tConfig.tabNameProperty],
                                    closable: closable,
                                    dataItem: dataItem
                                });

                                tabList.push(aTab);

                                if (tConfig.selectedTabId === dataItem[tConfig.tabKeyProperty]) {
                                    selectedTab = aTab;
                                }

                                // create a clojure array and execute them after the tabs
                                // have been added, otherwise the menu (GroupTabs_tablist_${0}_Menu) won't exist
                                menuFuncs.push((function menuFunction(dataItem, userId) {
                                    var tabId = dataItem[tConfig.tabKeyProperty];
                                    return function () {
                                        //build the tab context menu
                                        var tabmenu = dijit.byId(dojo.string.substitute("GroupTabs_tablist_${0}_Menu", [dataItem[tConfig.tabKeyProperty]])),
                                            disabled = false,
                                            isShared = false,
                                            isAdmin = userId.trim() === 'ADMIN';

                                        if (dataItem.userId !== userId) {
                                            isShared = true;
                                        } else {
                                            isShared = false;
                                        }

                                        if (!tabmenu) {
                                            return;
                                        }

                                        tabmenu.destroyDescendants(); // Destroy close button
                                        if (Sage.UI.DataStore.ContextMenus && Sage.UI.DataStore.ContextMenus.groupTabContextMenu) {
                                            var menuConfig = Sage.UI.DataStore.ContextMenus.groupTabContextMenu.items;

                                            for (var mi = 0; mi < menuConfig.length; mi++) {
                                                var mItem = menuConfig[mi];

                                                // Disable delete and share
                                                // if group was shared to you
                                                if ((mItem.id === 'gtcDelete' && isShared && !isAdmin) ||
                                                    (mItem.id === 'gtcShare' && isShared)) {
                                                    disabled = true;
                                                } else {
                                                    disabled = false;
                                                }

                                                if (mItem.isspacer || mItem.text === '') {
                                                    tabmenu.addChild(new MenuSeparator());
                                                } else {
                                                    var href = mItem.href;
                                                    if (href.indexOf('javascript:') < 0) {
                                                        href = dojo.string.substitute("javascript:${0}('${1}','${2}','${3}');", [href, dataItem[tConfig.tabKeyProperty], (dataItem[tConfig.tabGroupNameProperty] || dataItem[tConfig.tabNameProperty]), dataItem[tConfig.tabFamilyProperty]]);
                                                    } else {
                                                        var substituteObj = {
                                                            'groupId': dataItem[tConfig.tabKeyProperty],
                                                            'groupName': dataItem[tConfig.tabNameProperty] || dataItem[tConfig.tabGroupNameProperty],
                                                            'family': dataItem[tConfig.tabFamilyProperty]
                                                        };
                                                        href = dojo.string.substitute(href, substituteObj);
                                                    }

                                                    tabmenu.addChild(new MenuItem({
                                                        id: tabId + '_tab_' + mi,
                                                        label: mItem.text || '...',
                                                        icon: mItem.img || blank,
                                                        title: mItem.tooltip || '',
                                                        ref: href,
                                                        disabled: disabled,
                                                        onClick: function () {
                                                            if (this.ref !== '') {
                                                                try {
                                                                    window.location.href = this.ref;
                                                                } catch (e) { }
                                                            }
                                                        }
                                                    }));
                                                }
                                            }
                                        }
                                    };
                                })(dataItem, userId));
                            }

                            dojo.connect(tabs, 'onAddChildrenComplete', this, function () {
                                dojo.forEach(menuFuncs, function (func) {
                                    func.call();
                                });

                                menuFuncs = null;

                                if (selectedTab) {
                                    tabs.selectChild(selectedTab);
                                }
                            });

                            tabs.addChildren(tabList);
                        }
                    };
                    dojo.mixin(fParams, tConfig.fetchParams);
                    if (tConfig.store) {
                        tConfig.store.fetch(fParams);
                    }

                    if (tConfig.onTabClick) {
                        this.tabConnects.push(dojo.connect(tabs, 'onClick', tConfig, 'onTabClick', true));
                    }

                    if (tConfig.onTabSelect) {
                        this.tabConnects.push(dojo.connect(tabs, 'selectChild', tConfig, 'onTabSelect'));
                    }

                    if (closable) {
                        this.tabConnects.push(dojo.connect(tabs, 'closeChild', tConfig, 'onTabClose'));
                    }

                } else {
                    this._hideEmptyTabBar();
                }
            } catch (err) {
                console.error(err);
            }
        },
        _hideEmptyTabBar: function () {
            var tabs = dijit.byId('GroupTabs');
            if (tabs) {
                if (dojo.byId('localTitle').style.display != "none") {
                    domStyle.set(this.domNode, 'height', '37px');
                } else {
                    domStyle.set(this.domNode, 'display', 'none');
                }

                this.getParent().layout();
                tabs.set('style', 'display:none');
            }
        },
        _showTabBar: function () {
            var tabs = dijit.byId('GroupTabs');
            if (tabs) {
                if (dojo.byId('localTitle').style.display != "none") {
                    domStyle.set(this.domNode, 'height', '67px');
                } else {
                    domStyle.set(this.domNode, 'display', 'none');
                }
                tabs.domNode.style.display = 'block';
                this.getParent().layout();
            };
        }
    });

    return TitleContentPane;
});

},
'Sage/UI/nls/ActivityScheduler':function(){
﻿define("Sage/UI/nls/ActivityScheduler", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            tooltipTime: 'Time',
            tooltipContactName: 'Contact',
            tooltipAccountName: 'Account',
            tooltipCompanyName: 'Company',
            tooltipLeadName: 'Lead',
            tooltipPhoneNumber: 'Phone',
            tooltipRegarding: 'Regarding',
            tooltipPriority: 'Priority',
            tooltipNotes: 'Notes',
            tooltipType: 'Type',
            tooltipDayType: 'Day Type',
            tooltipStartDate: 'Start Date',
            tooltipEndDate: 'End Date',
            tooltipLocation: 'Location',
            tooltipDescription: 'Description',
            completedText: '(Completed)',
            tooltipMoreActivities: 'Click for more activities',
            scheduler_dates:{
		        month_full:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
		        month_short:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
		        day_full:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    	        day_short:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
            },
            scheduler_labels: {
                dhx_cal_today_button: "Today",
                day_tab: "Day",
                week_tab: "Week",
                workweek_tab : "Work week",
                month_tab: "Month",
                new_event: "New event",
                icon_save: "Save",
                icon_cancel: "Cancel",
                icon_details: "Details",
                icon_edit: "Edit",
                icon_delete: "Delete",
                confirm_closing: "", //Your changes will be lost, are your sure ?
                confirm_deleting: "Event will be deleted permanently, are you sure?",
                section_description: "Description",
                section_time: "Time period",
                full_day: "Full day",

                /*recurring events*/
                confirm_recurring: "Do you want to edit the whole set of repeated events?",
                section_recurring: "Repeat event",
                button_recurring: "Disabled",
                button_recurring_open: "Enabled",

                /*agenda view extension*/
                agenda_tab: "Agenda",
                date: "Date",
                description: "Description",

                /*year view extension*/
                year_tab: "Year",

                /* week agenda extension */
                week_agenda_tab: "Agenda"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/nls/SecurityManager':function(){
define("Sage/MainView/nls/SecurityManager", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            accessText: 'Access',
            columnText: 'Column',
            entityText: 'Entity',
            noAccessText: 'No Access',
            profilesText: 'Profiles',
            propertyText: 'Property',
            securityManagerText: 'Security Manager',
            readOnlyText: 'Read Only',
            readWriteText: 'Read Write',
            resetText: 'Reset',
            saveText: 'Save',
            tableText: 'Table'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/templates/GridMenuItem.html':"<tr class=\"dijitGridMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"4\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\" style=\"display:none\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"display:none\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n    <td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\" style=\"display:none\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n</tr>\n",
'Sage/TaskPane/nls/ActivityTaskConfigurationProvider':function(){
﻿define("Sage/TaskPane/nls/ActivityTaskConfigurationProvider", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            scheduleText: 'Schedule',
            eventText: 'Event',
            phoneCallText: 'Phone Call',
            toDoText: 'To-Do',
            meetingText: 'Meeting',
            personalActivityText: 'Personal Activity',
            deleteConfirmationText: 'Delete Confirmation',
            acceptConfirmationText: 'Accept Confirmation',
            declineConfirmationText: 'Decline Confirmation',
            completeActivityText: 'Complete Activity',
            deleteActivityText: 'Delete Activity',
            deleteEventText: 'Delete Event',
            scheduleEventText: 'Schedule Event',
            scheduleRequestText: 'Schedule Request',
            deleteRequestText: 'Delete Request',
            recordsSelectedText: 'record(s) selected',
            clearText: 'Clear'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Data/WritableStore':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/WritableStore", [
        'Sage/Data/BaseSDataStore',
        'Sage/Utility',
        'dojo/_base/declare',
        'dojo/_base/lang'
],
function (BaseSDataStore, Utility, declare, lang) {
    var writableStore = declare('Sage.Data.WritableStore', BaseSDataStore, {
        //  summary:
        //      A data store implementation that allows the EditableGrid to have its data participate in .net postback and binding
        //      Configuration information is recieved from EditableGrid.
        //  description:
        //      dojo.data.api.Identity Implemented on BaseSDataStore...
        //      dojo.data.api.Read Implemented on BaseSDataStore...        
        isInsertMode: false,
        constructor: function (o) {
            lang.mixin(this, o);
            this.features['dojo.data.api.Write'] = true;
            this.features['dojo.data.api.Notification'] = true;
            this.identityAttributes = ['$cacheID'];
            this.dirtyDataCache = { isDirty: false };
            this.singleResourceRequest = null;
            if (!o.hasOwnProperty('isInsertMode')) {
                this.isInsertMode = Utility.getModeId() === 'insert';
            }
        },
        entry: '',
        fetch: function (context) {
            //summary:
            //  Retrieve data from dataCarrier, dataCache and/or feed, and provide it to the grid.
            var items = {};
            items.$resources = [];

            //Read from DataCarrier/TextBox only onLoad.
            if (context.isRender && this.dataCarrierId) {
                var carrier = dojo.query(['.', this.dataCarrierId].join(''));
                if (carrier[0].value.length > 0) {
                    var carrierItems = dojo.fromJson(carrier[0].value);
                    this.addItemsToCache(context, carrierItems.$resources);
                }
            }

            // Restructure the dataCache into an array to supply to the grid.
            for (var item in this.dataCache) {
                if (this.dataCache.hasOwnProperty(item) && item !== 'query') {
                    items.$resources.push(this.dataCache[item]);
                }
            }

            this.setContext(context);
            this.verifyService();

            //Check to see if anything has been added to cache.  Either from a lookup or a .net DataCarrier.
            //if (items.$resources && items.$resources.length > 0) {
            if (this.isInsertMode) {
                var self = this;
                window.setTimeout(function () { self.onSuccess(context, items); }, 5);
                return;
            }

            var request = new Sage.SData.Client.SDataResourceCollectionRequest(this.service)
                .setResourceKind(this.resourceKind)
                .setStartIndex(context.start + 1)
                .setCount(context.count);

            // TODO: How much of this query work is needed for Insert mode??
            var qry = '';
            // Check to see if a query has been added directly to the store, for binding with native dojo components, ie. ComboBox
            // TODO: Determine patterns for mixin, replacement, seed value, etc. of query, 
            if (this.query) {
                if (!context.query) {
                    context.query = {};
                }
                lang.mixin(context.query, this.query);
            }
            if (context.query) {
                if (typeof context.query === 'function') {
                    qry = context.query();
                } else if (typeof context.query === 'string') {
                    qry = context.query;
                } else if (typeof context.query === 'object') {
                    if (context.query.hasOwnProperty('fn')) {
                        qry = context.query.fn.call(context.query.scope || this);
                    }
                    if (context.query.hasOwnProperty('conditions')) {
                        if (typeof context.query.conditions === 'string') {
                            qry += (qry.length > 0) ? ' and ' + context.query.conditions : context.query.conditions;
                        }
                    }
                }
            }

            context.evaluatedQuery = qry || '';
            if (qry && qry !== '') {
                request.setQueryArg('where', qry);
            }
            if (this.select && this.select.length > 0)
                request.setQueryArg('select', this.select.join(','));
            if (this.include && this.include.length > 0)
                request.setQueryArg('include', this.include.join(','));

            // Make the request to get the sdata schema information for the entity.  
            // In Insert mode, the entityId will be 'Insert' and no results will be returned.
            var key = request.read({
                success: lang.hitch(this, this.onSuccess, context),
                failure: lang.hitch(this, this.onFailure, context)
            });

            return {
                abort: lang.hitch(this, this.abortRequest, key)
            };
        },
        onSuccess: function (context, feed) {
            //summary:
            //  Provides the items to the grid for rendering.
            //description:       
            //  Checks if the data carrier has received the feed header.  If not, add it.            
            if (this.entry === '') {
                this.entry = feed;
            }
            if (context.onBegin) {
                context.onBegin.call(context.scope || this, feed.$resources.length, context);
            };
            if (context.onComplete) {
                context.onComplete.call(context.scope || this, feed.$resources, context);
            };
        },
        addToCache: function (context, item, count) {
            var key;
            count = (typeof count === 'undefined') ? (Math.random() * 11) : count;
            if (this.isInsertMode) {
                //console.log(new Date().getTime());
                item.$cacheID = new Date().getTime() + count;
            }
            key = this.getIdentity(item);
            this.dataCache[key] = item;
        },
        addItemsToCache: function (context, items) {
            for (var i = 0; i < items.length; i++) {
                this.addToCache(context, items[i], i);
            }
        },
        clearCache: function () {
            //  summary:
            //      Inherits from BaseSDataStore.clearCache which clears data cache.  Calls clearDirtyDataCache as well for edit mode data.
            this.inherited(arguments);
            this.clearDirtyDataCache();
        },
        clearDirtyDataCache: function () {
            //  summary:
            //    Clears dirty data cache created from edit mode changes.  Sets isDirty flag to 'false'
            for (var key in this.dirtyDataCache) {
                if (key !== 'isDirty') {
                    delete this.dirtyDataCache[key];
                }
            }
            this.dirtyDataCache.isDirty = false;
            //this.dirtyDataCache = { isDirty: false };
        },
        isItem: function (something) {
            //  summary:
            //      Performs hasOwnProperty check on dataCache to verify if the provided item already exists.
            //  returns:
            //      'true' if dataCache has property, else 'false'
            var id = this.getIdentity(/* anything */something);
            if (id && id !== '') {
                return this.dataCache.hasOwnProperty(id);
            }
            return false;
        },
        isItemLoaded: function (/* anything */something) {
            //  summary:
            //      Performs isItem check on 'this' to verify if the provided item already exists.
            //  returns:
            //      'true' if Item exists, else 'false'
            return this.isItem(something); //boolean
        },
        loadItem: function (/* object */keywordArgs) {
            //  summary:
            //      REDUNDANT??
            if (!this.isItem(keywordArgs.item)) throw new Error('Unable to load ' + keywordArgs.item);
        },
        getValues: function (item, attributename) {
            if (this.isItem(item) && (typeof attributename === "string")) {
                return (item[attributename] || []).slice(0);
            }
            return [];
        },
        hasAttribute: function (item, attributename) {
            if (this.isItem(item) && (typeof attributename === "string")) {
                return attributename in item;
            }
            return false;
        },
        close: function () {
            this.clearCache();
        },
        //dojo.data.api.Write implementations...
        deleteItem: function (item, scope) {
            //summary:
            //  Find the item in the cache and remove it.  Grid is responsible for refreshing itself.
            var id = this.getIdentity(item);
            if (id && id !== '') {
                delete this.dataCache[id];
            }
            var options = {};
            options.scope = scope || this;
            var fnSuccess = function () {
                if (typeof this.onResponse === 'function') {
                    this.onResponse.call(this);
                }
            };
            options.success = fnSuccess;
            options.success.call(options.scope);
        },
        isDirty: function (item) {
            //item could be null - if so, it means is any item dirty...
            if (item) {
                var id = this.getIdentity(item);
                if (id && id !== '') {
                    return this.dirtyDataCache.hasOwnPropery(id);
                }
            }
            return this.dirtyDataCache.isDirty;
        },
        newItem: function (args /*, parentInfo */) {
            var request = this.createTemplateRequest();
            if (request) {
                request.read({
                    success: function (entry) {
                        if ((args) && (args.onComplete) && (typeof args.onComplete === 'function')) {
                            args.onComplete.call(args.scope || this, entry);
                        }
                    },
                    failure: this.requestTemplateFailure,
                    scope: this
                });
            }
        },
        createTemplateRequest: function () {
            //The entity to create the relationship/New record for, from the selection.        
            var request = new Sage.SData.Client.SDataTemplateResourceRequest(this.service);
            if ((this.resourceKind) && (this.resourceKind !== '')) {
                request.setResourceKind(this.resourceKind);
            }
            return request;
        },
        requestTemplateFailure: function () {
        },
        saveNewEntity: function (entity, success, failure, scope) {
            //summary:
            //  Create a new entity and add it to the dataCache.
            this.addToCache(scope, entity);
            success();
        },
        createItem: function (item, scope) {
            var options = {};
            options.scope = scope || this;
            options.scope.store = this;
            var fnSuccess = function (created) {
                if (typeof this.onResponse === 'function') {
                    this.onResponse.call(this, created);
                }
            };
            options.success = fnSuccess;
            this.addToCache(scope, item);
            options.success.call(options.scope, item);
        },
        revert: function () {
            //  summary:
            //      Clear the dirty data cache and call the onDataReset function.  
            //      The grid calls fetch again and gets the data.
            this.clearDirtyDataCache();
            this.onDataReset();
        },
        setValue: function (item, attribute, value) {
            //if (typeof console !== 'undefined') { console.log('setValue - %o %o %o', item, attribute, value) };
            var oldValue = this.getValue(item, attribute, '');
            Utility.setValue(item, attribute, value);
            this.onSet(item, attribute, oldValue, value);
            return true;
        },
        setValues: function (item, attribute, values) {
            alert('not implemented - setValues');
            //use where values is an array
        },
        unsetAttribute: function (item, attribute) {
            alert('not implemented - unsetAttribute');
            //delete all values of an attribute on the item...
        },
        dataCacheToArray: function () {
            var resources = [];
            for (var item in this.dataCache) {
                if (this.dataCache.hasOwnProperty(item) && item !== 'query') {
                    resources.push(this.dataCache[item]);
                }
            }
            return resources;
        },
        onDataChange: function () {
            //There is no dirtyDataCache tracking for Insert views.  Clear dirty data here, just in case.
            this.clearDirtyDataCache();
            var carrier = dojo.query(['.', this.dataCarrierId].join(''));
            if (carrier[0]) {
                this.entry.$resources = this.dataCacheToArray();
                carrier[0].value = JSON.stringify(this.entry);
            }
        },
        //dojo.data.api.Notification
        onSet: function (/* item */item,
        /*attribute-name-string*/attribute,
        /*object | array*/oldValue,
        /*object | array*/newValue) {
            // summary: 
            // See dojo.data.api.Notification.onSet()
            // No need to do anything. This method is here just so that the
            // client code can connect observers to it.
        },
        onNew: function (newItem, parentInfo) {
            //nothing to do here - client code connects observers to this
        },
        onDelete: function (deletedItem) {
            //nothing to do here - client code connects observers to this
        },
        onDataReset: function () {
        },
        onDataSaved: function () {
        },
        onItemSaved: function (savedItem, parentInfo) {
        },
        onItemNotSaved: function (notSavedItem, error) {
        }
    });
    return writableStore;
});
},
'Sage/QuickForms/Design/Editors/CurrencyAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/CurrencyAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/CurrencyAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.CurrencyAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.displayModeTooltipText %}">',
                    '<label>{%= $.displayModeText %}</label>',
                    '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_displayMode" data-dojo-attach-event="onChange:_onDisplayModeChange">',
                    '{% for (var type in $.displayTypeText) { %}',
                        '<span value="{%= type %}">{%= $.displayTypeText[type] %}</span>',
                    '{% } %}',
                    '</div>',
                '</div>',
                '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                    '<label>{%= $.visibleText %}</label>',
                    '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                '</div>',
            '</div>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                    '<label>{%= $.controlLabelPlacementText %}</label>',
                    '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                    '{% for (var placement in $.labelPlacementText) { %}',
                        '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                    '{% } %}',
                    '</div>',
                '</div>',
            '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.decimalDigitsTooltipText %}">',
                    '<label>{%= $.decimalDigitsText %}</label>',
                    '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_decimalDigits" data-dojo-props="constraints:{min:-1,max:100,places:0}" data-dojo-attach-event="onChange:_onDecimalDigitsChange"></div>',
                '</div>',
                '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                    '<label>{%= $.enabledText %}</label>',
                    '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                '</div>',
            '</div>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.maxLengthTooltipText %}">',
                    '<label>{%= $.maxLengthText %}</label>',
                    '<div data-dojo-attach-point="_maxLength" data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-event="onChange:_onMaxLengthChange" data-dojo-props="constraints:{min:-1,places:0}"></div>',
                '</div>',
                '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                    '<label>{%= $.requiredText %}</label>',
                    '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                '</div>',
            '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                    '<label>{%= $.defaultDataBindingText %}</label>',
                    '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                '</div>',
            '</div>',
            '<div class="editor-content-half">',
                '<div class="editor-field" title="{%= $.exchangeRateTypeTooltipText %}">',
                    '<label>{%= $.exchangeRateTypeText %}</label>',
                    '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_exchangeRateType" data-dojo-attach-event="onChange:_onExchangeRateTypeChange">',
                    '{% for (var rate in $.exchangeTypeText) { %}',
                        '<span value="{%= rate %}">{%= $.exchangeTypeText[rate] %}</span>',
                    '{% } %}',
                    '</div>',
                '</div>',
            '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlId: null,
        _controlLabelPlacement: null,
        _controlType: null,
        _decimalDigits: null,
        _defaultDataBinding: null,
        _displayCurrencyCode: null,
        _displayMode: null,
        _enabled: null,
        _exchangeRateType: null,
        _maxLength: null,
        _required: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        decimalDigitsText: 'Decimal Digits:',
        decimalDigitsTooltipText: 'The number of digits after the decimal to display and allow for data entry.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        displayModeText: 'Display Mode:',
        displayModeTooltipText: 'Mode of display of control: text box, hyperlink, or plain text.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        exchangeRateTypeText: 'Exchange Rate Type:',
        exchangeRateTypeTooltipText: 'Type of exchange rate to show in currency fields.',
        maxLengthText: 'Max Length:',
        maxLengthTooltipText: 'Maximum number of characters user can enter.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        displayTypeText: {
            'AsHyperlink': 'As Hyperlink',
            'AsControl': 'As Control',
            'AsText': 'As Text'
        },
        exchangeTypeText: {
            'BaseRate': 'Base Rate',
            'OpportunityRate': 'Opportunity Rate (Deprecated)',
            'MyRate': 'My Rate',
            'SalesOrderRate': 'Sales Order Rate (Deprecated)',
            'EntityRate': 'Entity Rate'
        },
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._controlId.set('value', this._designer.get('controlId'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._decimalDigits.set('value', this._designer.get('decimalDigits'));
            this._displayMode.set('value', this._designer.get('displayMode'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._exchangeRateType.set('value', this._designer.get('exchangeRateType'));
            this._maxLength.set('value', this._designer.get('maxLength'));
            this._required.set('value', this._designer.get('required'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onControlIdChange: function(value){
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('controlLabelPlacement', value);
        },
        _onControlTypeChange: function(value){
        },
        _onDecimalDigitsChange: function(value){
            if (this.isSuspended() || !this._decimalDigits.isValid()) {
                return;
            }
            this._designer.set('decimalDigits', value);
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onDisplayModeChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('displayMode', value);
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onExchangeRateTypeChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('exchangeRateType', value);
        },
        _onMaxLengthChange: function(value){
            if (this.isSuspended() || !this._maxLength.isValid()) return;
            this._designer.set('maxLength', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/QuickForms/Design/PhoneControlDesigner':function(){
define("Sage/QuickForms/Design/PhoneControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    './TextBoxControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/TextBoxBasicPropertyEditor',
    './Editors/TextBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/PhoneControlDesigner'
], function(
    declare,
    array,
    lang,
    TextBoxControlDesigner,
    LayoutPropertyEditor,
    TextBoxBasicPropertyEditor,
    TextBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.PhoneControlDesigner', [TextBoxControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            TextBoxBasicPropertyEditor,
            TextBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %} design-phone" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="design-phone-icon"></div>',
            '</div>',
            '</div>'
        ]),

        helpTopicName: 'Phone_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXPhone, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Phone',

        constructor: function() {
            lang.mixin(this, localization);
        }
    });
});
},
'Sage/UI/Controls/nls/EntityInfoToolTip':function(){
﻿define("Sage/UI/Controls/nls/EntityInfoToolTip", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            errorText: 'Information not found.',
            loadingText: 'Loading...',
            noInfoText: 'No information to show.',
            mainText: 'Main:',
            faxText: 'Fax:',
            tollFreeText: 'Toll Free:',
            urlText: 'Web URL:',
            workText: 'Work:',
            mobileText: 'Mobile:',
            emailText: 'Email:',
            contactNameText: 'Name:',
            phoneText: 'Phone:',
            accountText: 'Account:'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/ActivityEditor':function(){
require({cache:{
'url:Sage/MainView/ActivityMgr/templates/ActivityEditor.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"activityDialog\" title=\"\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onDlgHide\">',\r\n        '<div class=\"activity-dialog\">',  //body\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"regardingContainer\">',\r\n                '<select id=\"pk_Regarding\" label=\"{%= $.regardingText %}\" id=\"{%= $.id %}_pk_Regarding\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Regarding\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\" ></select>',\r\n                '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.locationText %}\" id=\"{%= $.id %}_tb_Location\" dojoAttachPoint=\"tb_Location\" maxLength=\"255\" ></div>',\r\n            '</div>', //first tablecontainer 1 col\r\n        //Dates section for add/edit mode..................\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"dateSection_AddEdit\">',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_startDate\" dojoAttachPoint=\"dtp_startDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.startTimeText %}\"></div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_Duration\" dojoAttachPoint=\"sel_Duration\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_Timeless\" dojoAttachPoint=\"cb_Timeless\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_Timeless\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                '<div dojoType=\"dojox.layout.TableContainer\" label=\"{%= $.alarmText %}\" cols=\"2\" showLabels=\"false\" class=\"removeExtraSpace\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" id=\"{%= $.id %}_cb_Alarm\" dojoAttachPoint=\"cb_Alarm\" ></div>',\r\n                    '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" id=\"{%= $.id %}_sel_AlarmDur\" dojoAttachPoint=\"sel_AlarmDur\" valuesAreAfterStart=\"false\" ></div>',\r\n                '</div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_cb_AutoRollover\" dojoAttachPoint=\"cb_AutoRollover\"></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_AutoRollover\">{%= $.rolloverText %}</label>',\r\n                '</div>',\r\n            '</div>',\r\n        //Dates section for complete mode...................\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"dateSection_Complete\">',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_completedDate\" dojoAttachPoint=\"dtp_completedDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.completedText %}\"></div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_scheduledDate\" dojoAttachPoint=\"dtp_scheduledDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.scheduledText %}\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_TimelessComplete\" dojoAttachPoint=\"cb_TimelessComplete\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_TimelessComplete\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_DurationComplete\" dojoAttachPoint=\"sel_DurationComplete\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n            '</div>',\r\n\r\n            '<div dojoType=\"dijit.layout.TabContainer\" id=\"{%= $.id %}_tc_EditActivity\"  dojoAttachPoint=\"tc_EditActivity\" class=\"tab-container\">',\r\n/*  General Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_General\" title=\"{%= $.tabNameGeneralText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_General\">',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"resultContainer\" class=\"bottom-border-section\">', \r\n                        '<select shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" label=\"{%= $.resultText %}\" id=\"{%= $.id %}_pl_Result\"  name=\"pl_Result\" dojoAttachPoint=\"pl_Result\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"4\" labelWidth=\"4\" baseClass=\"contact-lead-radios\" >',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.contactText %}\" value=\"contact\" id=\"{%= $.id %}_rdo_Contact\" dojoAttachPoint=\"rdo_Contact\" dojoAttachEvent=\"onChange:_setContactLeadVisibility\" checked=\"true\" />',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.leadText %}\" value=\"lead\" id=\"{%= $.id %}_rdo_Lead\" dojoAttachPoint=\"rdo_Lead\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"contactContainer\" baseClass=\"bottom-border-section\">',\r\n\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_ContactLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.opportunityText %}\" dojoAttachPoint=\"container_OppLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.accountText %}\" dojoAttachPoint=\"container_AccountLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.ticketText %}\" dojoAttachPoint=\"container_TicketLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"leadContainer\"  baseClass=\"bottom-border-section\" class=\"display-none\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_LeadLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<input dojoType=\"dijit.form.TextBox\" id=\"{%= $.id %}_tb_LeadCompanyName\" label=\"{%= $.companyText %}\" dojoAttachPoint=\"tb_LeadCompanyName\" readonly=\"true\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" class=\"bottom-border-section\" >',\r\n                        '<select label=\"{%= $.priorityText %}\" id=\"{%= $.id %}_pk_Priority\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Priority\" canEditText=\"true\" itemMustExist=\"false\" pickListName=\"Priorities\" sort=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.leaderText %}\" dojoAttachPoint=\"container_LeaderLup\" class=\"remove-padding lookup-container\" style=\"width: {%= 472 - $.labelWidth %}px;\"></div>',\r\n                        '<select label=\"{%= $.categoryText %}\" id=\"{%= $.id %}_pk_Category\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Category\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"&nbsp;\" class=\"dijitTextBox\" style=\"border-width:0px\">&nbsp;</div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" class=\"valigntop\" dojoAttachPoint=\"notesContainer\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_Notes\" label=\"{%= $.notesText %}\" dojoAttachPoint=\"ta_Notes\" class=\"notes-text\"></textarea>',\r\n                    '</div>',\r\n                '</div>',  // end general tab\r\n/* Availability Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Availability\" title=\"{%= $.tabNameAvailabilityText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_Availability\" dojoAttachEvent=\"onShow:_onShowAvailabilityTab\">',\r\n                    '<div dojoType=\"dijit.Toolbar\" region=\"top\" splitter=\"false\" class=\"right-tools\" >',  // list-panel-tbar                                  \r\n                        '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"container_ResourcesLup\" class=\"remove-padding\"></div>',\r\n                    '</div>',\r\n/* Scheduler ........... */\r\n                    '<div id=\"scheduler_here\" class=\"dhx_cal_container\" style=\"width:100%;height:230px;\">',\r\n                        '<div class=\"dhx_cal_navline\">',\r\n                            '<div class=\"dhx_cal_prev_timeline_button\" style=\"right:50px;\">&nbsp;</div>',\r\n\t\t\t                '<div class=\"dhx_cal_next_timeline_button\" style=\"right:19px;\">&nbsp;</div>',\r\n//'<div class=\"dhx_cal_today_button\"></div>',\r\n\t\t\t                '<div class=\"dhx_cal_date\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"day_tab\" style=\"right:204px;\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"week_tab\" style=\"right:140px;\"></div>',\r\n                            '<div class=\"dhx_cal_tab\" name=\"timeline_tab\" style=\"right:280px;\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"month_tab\" style=\"right:76px;\"></div>',\r\n\t\t                '</div>',\r\n\t\t                '<div class=\"dhx_cal_header\"></div>',\r\n\t\t                '<div class=\"dhx_cal_data\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n/* Recurring Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Recurring\" title=\"{%= $.recurringText %}\" class=\"tabContent\" dojoAttachPoint=\"cp_Recurring\" dojoAttachEvent=\"onShow:_showRecurringTab\">',\r\n                    '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.MainView.ActivityMgr.RecurringEditor\" id=\"{%= $.id %}_recEd\" labelWidth=\"{%= $.labelWidth - 20 %}\" dojoAttachPoint=\"_recurringEditor\"></div>',\r\n                '</div>',\r\n/* Attachments Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Attachments\" title=\"{%= $.tabNameAttachmentsText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_Attachments\" dojoAttachEvent=\"onShow:_showAttachmentsTab\">',\r\n                    '<div id=\"{%= $.id %}_attachmentsGridPlaceholder\" dojoAttachPoint=\"_attachmentGridPlaceholder\" style=\"width:100%;height:100%\"></div>',\r\n                '</div>',\r\n            '</div>',  //tab container\r\n/* Buttons       */\r\n        // Add/edit activity buttons\r\n            '<table class=\"button-bar\" id=\"add_edit_buttons\" dojoAttachPoint=\"add_edit_buttons\">',\r\n                '<tr>',\r\n                    '<td class=\"alignleft\">',\r\n                        '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledBy\"></div>',\r\n                    '</td><td class=\"alignright\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Complete\" name=\"btn_Complete\" dojoAttachPoint=\"btn_Complete\" dojoAttachEvent=\"onClick:_completeClick\">{%= $.completeBtnText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Delete\" name=\"btn_Delete\" dojoAttachPoint=\"btn_Delete\" dojoAttachEvent=\"onClick:_deleteClick\">{%= $.deleteText %}</div>',\r\n                        '<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n\r\n\r\n        //complete activity buttons\r\n            '<table class=\"button-bar display-none\" id=\"complete_buttons\" dojoAttachPoint=\"complete_buttons\">',\r\n                '<tr>',\r\n                    '<col width=\"50%\" /><col width=\"50%\" />',\r\n                    '<td class=\"alignleft\">',\r\n                        '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" >',\r\n                            '<select label=\"{%= $.followupText %}\" id=\"sel_Followup\" dojoType=\"dijit.form.ComboBox\" dojoAttachPoint=\"sel_Followup\">',\r\n                                '<option value=\"none\" selected=\"selected\">{%= $.noneText %}</option>',\r\n                                '<option value=\"phone\">{%= Sage.Utility.Activity.getActivityTypeName(\"atPhoneCall\") %}</option>',\r\n                                '<option value=\"meeting\">{%= Sage.Utility.Activity.getActivityTypeName(\"atAppointment\") %}</option>',\r\n                                '<option value=\"todo\">{%= Sage.Utility.Activity.getActivityTypeName(\"atToDo\") %}</option>',\r\n                            '</select>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"ck_coAttachments\" dojoAttachPoint=\"ck_coAttachments\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coAttachments\">{%= $.carryOverAttachmentsText %}</label>',\r\n                            '</div>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"ck_coNotes\" dojoAttachPoint=\"ck_coNotes\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coNotes\">{%= $.carryOverNotesText %}</label>',\r\n                            '</div>',\r\n                        '</div>',\r\n                    '</td><td class=\"alignright valignbottom\" rowspan=\"2\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_asScheduled\" name=\"btn_asScheduled\" dojoAttachPoint=\"btn_asScheduled\" dojoAttachEvent=\"onClick:_asScheduledClick\">{%= $.asScheduledText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Now\" name=\"btn_Now\" dojoAttachPoint=\"btn_Now\" dojoAttachEvent=\"onClick:_nowClick\">{%= $.nowText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_CancelComplete\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_CancelComplete\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr><tr>',\r\n                    '<td class=\"alignleft\" >',\r\n                        '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledByComp\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n\r\n\r\n\r\n        //Confirmations button bar...\r\n            '<table class=\"button-bar display-none\" id=\"confirmation_edit_buttons\" dojoAttachPoint=\"confirmation_edit_buttons\">',\r\n                '<tr>',\r\n                    '<td class=\"alignleft\" style=\"width:{%= $.labelWidth %}px;\">',\r\n                        '<label for=\"{%= $.id %}_ta_confirmationResponse\" id=\"responseLabel\" dojoAttachPoint=\"responseLabel\">{%= $.responseText %}</label>',\r\n                    '</td>',\r\n                    '<td class=\"alignleft\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_confirmationResponse\" dojoAttachPoint=\"ta_confirmationResponse\" class=\"notes-text dijitTextBox\" maxLength=\"128\" ></textarea>',\r\n                    '</td><td class=\"alignright valignbottom\">',\r\n                        '<span id=\"newConfButtons\" dojoAttachPoint=\"newConfButtons\">',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_accept\" name=\"btn_accept\" dojoAttachPoint=\"btn_accept\" dojoAttachEvent=\"onClick:_acceptConfClick\">{%= $.acceptText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_decline\" name=\"btn_decline\" dojoAttachPoint=\"btn_decline\" dojoAttachEvent=\"onClick:_declineClick\">{%= $.declineText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_cancelConf\" name=\"btn_cancelConf\" dojoAttachPoint=\"btn_cancelConf\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                        '</span>',\r\n                        '<span id=\"otherConfButtons\" dojoAttachPoint=\"otherConfButtons\" class=\"display-none\">',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_deleteConf\" name=\"btn_deleteConf\" dojoAttachPoint=\"btn_deleteConf\" dojoAttachEvent=\"onClick:_deleteConfClick\">{%= $.deleteConfText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_closeConf\" name=\"btn_closeConf\" dojoAttachPoint=\"btn_closeConf\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.closeText %}</div>',\r\n                        '</span>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n        '</div>', //body\r\n    '</div>',  //dialog\r\n'</div>' //root node\r\n]\r\n"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/ActivityEditor", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/_base/declare',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/MainView/BindingsManager',
    'Sage/Utility',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'Sage/UI/_DialogLoadingMixin',
    'Sage/Utility/Activity',
    'dojo/date',
    'dojo/date/locale',
    'dojo/string',
    'Sage/UI/Dialogs',
    'dijit/Tooltip',
    'Sage/UI/AttachmentList',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility/File',
    'Sage/Utility/File/Attachment',
    'Sage/UI/Controls/Lookup',
    'dojo/i18n!./nls/ActivityEditor',
    'dojo/text!./templates/ActivityEditor.html',
    'dojo/dom-class',
    'Sage/Utility/UserOptions',
    "dijit/focus",
    'dojo/_base/lang',

    'dijit/Toolbar',
    'dijit/layout/TabContainer',
    'dijit/layout/ContentPane',
    'dijit/form/Textarea',
    'dojox/layout/TableContainer',
    'dijit/layout/BorderContainer',
    'dijit/form/ComboBox',
    'Sage/Services/UserOptions',
    'Sage/UI/Controls/SingleSelectPickList',
    'Sage/UI/Controls/DateTimePicker',
    'Sage/UI/Controls/Lookup',
    'Sage/MainView/ActivityMgr/RecurringEditor',
    'dijit/Dialog',
    'Sage/UI/Controls/DurationSelect',
    'Sage/Services/CalendarSecurityService'
],
function (_Widget, _Templated, declare, SingleEntrySDataStore, BindingsManager, utility, _DialogHelpIconMixin,
    dojoLang, _DialogLoadingMixin, activityUtility, dojoDate, locale, dString, sageDialogs, tooltip, AttachmentList,
    sDataServiceRegistry, fileUtility, attachmentUtility, Lookup, activityEditorStrings, template, domClass, userOptionsUtility, focusUtil, lang) {
    var activityEditor = declare('Sage.MainView.ActivityMgr.ActivityEditor', [_Widget, _Templated], {
        activityId: '',
        activityMemberId: '',
        _memberSecurityData: [],
        mode: '',
        userNotificationId: '',
        id: '',
        activityType: '',
        _options: {},
        _dialog: false,
        _currentUserId: null,
        _originalLeaderId: false,
        _activityService: false,
        _activityData: false,
        _activityStore: false,
        _currentUserActivityData: false,
        _tempUAData: false,
        _currentUserActivityStore: false,
        _notificationData: false,
        _notificationStore: false,
        _notificationBindingMgr: false,
        _historyStore: false,
        _deleteAttendeeConnects: [],
        _attendeesData: [],
        _newAttendeesData: [],
        _attendeesForRemoval: [],
        _userActivitiesRequestCount: 0,
        _resourceRequestCount: 0,
        _resourceDeleteRequestCount: 0,
        _availabilityShowing: false,
        _bindingMgr: false,
        _uaBindingMgr: false,
        _activityChangeConnection: false,
        lup_Account: false,
        lup_Contact: false,
        lup_Opportunity: false,
        lup_Ticket: false,
        lup_Lead: false,
        lup_Leader: false,
        accountLookupConfig: {},
        contactLookupConfig: {},
        opportunityLookupConfig: {},
        ticketLookupConfig: {},
        leadLookupConfig: {},
        resourcesLookupConfig: {},
        _isBinding: false,
        _activitySaved: false,
        _userActivitiesSaved: false,
        _currentUserActivitySaved: false,
        _resourcesSaved: false,
        _resourcesRemoved: false,
        _attachmentsSaved: false,
        _completeAfterSaving: false,
        _attachmentList: false,
        _tempIdForAttachments: false,
        confirmationDisableList: ['pk_Regarding', 'tb_Location', 'dtp_startDate', 'sel_Duration', 'cb_Timeless', 'cb_Alarm', 'sel_AlarmDur', 'cb_AutoRollover', 'rdo_Contact', 'rdo_Lead', 'lup_Account', 'lup_Contact', 'lup_Opportunity', 'lup_Ticket', 'lup_Lead', 'ta_Notes', 'pk_Priority', 'lup_Leader', 'pk_Category'],
        noEditDisableList: ['pk_Regarding', 'tb_Location', 'dtp_startDate', 'sel_Duration', 'cb_Timeless', 'cb_AutoRollover', 'rdo_Contact', 'rdo_Lead', 'lup_Account', 'lup_Contact', 'lup_Opportunity', 'lup_Ticket', 'lup_Lead', 'ta_Notes', 'pk_Priority', 'lup_Leader', 'pk_Category'], // 'cb_Alarm', 'btn_OK', 'sel_AlarmDur',
        _readOnlyMode: false,
        _isProcessing: false,
        eventConnections: [],
        activityDefaultValues: {},
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojoLang.mixin(this, activityEditorStrings);
            this._preloadActivityOptions();
            this._activityService = sDataServiceRegistry.getSDataService('system');
            this._setupStore();
            this._currentUserId = utility.getClientContextByKey('userID') || '';
            this._currentUserId = this._currentUserId.trim();
            dojo.subscribe('/entity/attachment/create', this, this._updateActivityETag);
            dojo.subscribe('/entity/attachment/update', this, this._updateActivityETag);
            dojo.subscribe('/entity/attachment/delete', this, this._updateActivityETag);
        },
        destroy: function () {
            if (this._activityChangeConnection) {
                dojo.disconnect(this._activityChangeConnection);
                this._activityChangeConnection = false;
            }
            if (this._bindingMgr) {
                this._bindingMgr.destroy();
            }
            if (this._uaBindingMgr) {
                this._uaBindingMgr.destroy();
            }
            for (var i = 0; i < this.eventConnections.length; i++) {
                dojo.disconnect(this.eventConnections[i]);
            }
            this.lup_Account.destroy();
            this.lup_Contact.destroy();
            this.lup_Opportunity.destroy();
            this.lup_Ticket.destroy();
            this.lup_Lead.destroy();
            this.lup_Leader.destroy();
            this.eventConnections = [];
            this.inherited(arguments);
        },
        postCreate: function () {
            //set up tooltips for "complete" buttons.  Include change event handlers
            // to keep the tooltip showing the date/time that the completed date will be.
            this._asScheduledTooltip = new tooltip({
                connectId: [this.btn_asScheduled.id],
                label: ' ',
                position: ['below']
            });
            dojo.connect(this.dtp_scheduledDate, 'onChange', this, function () {
                this._asScheduledTooltip.set('label', locale.format(this.dtp_scheduledDate.get('value'), { selector: 'datetime', fullYear: true }));
            });

            this._nowTooltip = new tooltip({
                connectId: [this.btn_Now.id],
                label: ' ',
                position: ['below']
            });
            dojo.connect(this.dtp_completedDate, 'onChange', this, function () {
                this._nowTooltip.set('label', locale.format(this.dtp_completedDate.get('value'), { selector: 'datetime', fullYear: true }));
            });
        },
        isFirstOpen: true,
        show: function (mixinProperties) {
            this._isProcessing = false;
            this._dialog.set('refocus', false);
            this._dialog.show();
            if (this.isFirstOpen) {
                // create lookup controls...
                this.isFirstOpen = false;
                this._ensureLookupsCreated();
                this.connect(this._recurringEditor, 'onStartDateChanged', this._recurringStartDateChanged);
                this.connect(this._recurringEditor, 'onRecurPeriodChanged', this._recurringPeriodChanged);

                this.connect(this._dialog, 'onHide', this._cleanOnClose);
                //ToDo: This makes it so you cannot type in the followup control, but it also
                // causes you to not be able to tab to it...
                //this.sel_Followup.textbox.disabled = true;
            }
            //Reset the duration selector.
            this.sel_AlarmDur.resetItems();
            this.activityDefaultValues = {};
            if (this.mode === 'New') {
                this.activityDefaultValues = mixinProperties || {};
                this._loadData();
            }
            if (this.mode === 'CompleteUnscheduled' && !this.historyId) {
                this.activityDefaultValues = mixinProperties || {};
                this._loadHistory();
            }
            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
                if (!this._activityData && !this._notificationData) {
                    this._dialog.showLoading();
                }
            }

            // Create help icon
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic(this._getHelpTopicByMode());
            }
            this._availabilityShowing = false;
            this.tc_EditActivity.selectChild(this.cp_General);
            this._dialog.resize();
        },
        hide: function () {
            this._dialog.hide();
        },
        _onDlgHide: function () {
            this.onHide();
        },
        onHide: function () { },
        _cleanOnClose: function () {
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            this.set('activityId', '');
            this.set('activityMemberId', '');
            if (this._activityStore) {
                this._activityStore.clearCache();
            }
            if (this._historyStore) {
                this._historyStore.clearCache();
            }

            //Making sure the tooltips are hidden when closing the dialog
            this._hideLookupTooltip(this.lup_Account);
            this._hideLookupTooltip(this.lup_Contact);
            this._hideLookupTooltip(this.lup_Opportunity);
            this._hideLookupTooltip(this.lup_Ticket);
            this._hideLookupTooltip(this.lup_Lead);
            this._hideLookupTooltip(this.lup_Leader);

        },
        _hideLookupTooltip: function (control) {
            if(control) {
                control.hideTooltip();
            }
        },
        _controllOnMouseEnter: function () {
        },
        // ... region - Activity data methods   .....................
        _updateActivityETag: function (attachment) {
            //listener for attachment record changes.  
            if (attachment) {
                this._activityData.AttachmentCount++;
            } else {
                this._activityData.AttachmentCount--;
            }
            if (this._dialog.open && this.activityId) {
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                req.setResourceKind('activities');
                req.setResourceSelector('"' + this.activityId + '"');
                req.setQueryArg('precedence', '0');
                req.read({
                    success: function (activity) {
                        this._activityData['$etag'] = activity['$etag'];
                    },
                    scope: this
                });
            }
        },
        _getHelpTopicByMode: function () {
            switch (this.mode) {
                case 'Confirm':
                    return 'confirmnotifications';
                case 'Complete':
                case 'CompleteUnscheduled':
                    return 'completeactivity';
            }
            return 'activitydetailview';
        },
        _showCorrectButtonBar: function (mode) {
            if (mode === 'Confirm') {
                domClass.add(this.add_edit_buttons, 'display-none');
                domClass.add(this.complete_buttons, 'display-none');
                domClass.remove(this.confirmation_edit_buttons, 'display-none');
            } else if (mode === 'Complete' || mode === 'CompleteUnscheduled') {
                domClass.add(this.add_edit_buttons, 'display-none');
                domClass.add(this.confirmation_edit_buttons, 'display-none');
                domClass.remove(this.complete_buttons, 'display-none');
            } else {
                domClass.add(this.confirmation_edit_buttons, 'display-none');
                domClass.add(this.complete_buttons, 'display-none');
                domClass.remove(this.add_edit_buttons, 'display-none');
            }
        },
        _setModeAttr: function (mode) {
            //console.log('setModeAttr: ' + mode);
            this.mode = mode;
            //set correct button bar...
            this._showCorrectButtonBar(mode);

            if (mode === 'Confirm') {
                //disable activity controls...
                this._ensureLookupsCreated(); //sometimes this happens before they get created.
                this._bulkSetProperty(this, this.confirmationDisableList, 'disabled', true);
            } else {
                //re-enable activity controls...
                this._bulkSetProperty(this, this.confirmationDisableList, 'disabled', false);
            }
            if (mode.indexOf('New') === 0) {
                this.mode = 'New';
                var typename = mode.replace('New ', '').toLowerCase();
                switch (typename) {
                    case 'phonecall':
                    case 'atphonecall':
                        this.activityType = 'atPhoneCall';
                        break;
                    case 'meeting':
                    case 'atappointment':
                        this.activityType = 'atAppointment';
                        break;
                    case 'todo':
                    case 'attodo':
                        this.activityType = 'atToDo';
                        break;
                    case 'personalactivity':
                    case 'atpersonal':
                    case 'personal':
                        this.activityType = 'atPersonal';
                        break;
                    case 'letter':
                    case 'atletter':
                    case 'doc':
                    case 'atdoc':
                        this.activityType = 'atDoc';
                        break;
                    case 'fax':
                    case 'atfax':
                        this.activityType = 'atFax';
                        break;
                    default:
                        this.activityType = 'atAppointment';
                        break;
                }
                this._activityData = false;
                domClass.add(this.btn_Delete.domNode, 'display-none');
                domClass.add(this.btn_Complete.domNode, 'display-none');
            } else {
                domClass.remove(this.btn_Delete.domNode, 'display-none');
                domClass.remove(this.btn_Complete.domNode, 'display-none');
            }
            if (mode === 'Complete' || mode === 'CompleteUnscheduled') {  // show appropriate info for completing activities
                //date section
                domClass.add(this.dateSection_AddEdit.domNode, 'display-none');
                domClass.remove(this.dateSection_Complete.domNode, 'display-none');
                //result picklist
                domClass.remove(this.resultContainer.domNode, 'display-none');
                //Recurring tab
                var idx = this.tc_EditActivity.getIndexOfChild(this.cp_Recurring);
                if (idx > 0) {
                    this.tc_EditActivity.removeChild(this.cp_Recurring);
                    var self = this;
                    window.setTimeout(function () { self._dialog.resize(); }, 10);
                }
                if (this._dialog.open) {
                    // if the dialog is open, we already have the activity record and 
                    // the form is bound to it.  We won't be requesting the activity again 
                    // so just run the initialization stuff...
                    this._setUI();
                    this._completeModeManualBind();  //sets default values on non-bound controls.
                }
                //set default follow-up activity values...
                var fupType = this._options.followUp.defaultFollowUpType;
                var setVal = (fupType === 'None') ? this.noneText : activityUtility.getActivityTypeName(fupType);
                this.sel_Followup.set('value', setVal);
                this.ck_coAttachments.set('checked', this._options.followUp.carryOverAttachments);
                this.ck_coNotes.set('checked', this._options.followUp.carryOverNotes);
            } else {  // show appropriate information for adding, editing activities as well as displaying info for confirmations
                //date section
                domClass.add(this.dateSection_Complete.domNode, 'display-none');
                domClass.remove(this.dateSection_AddEdit.domNode, 'display-none');
                //result picklist
                domClass.add(this.resultContainer.domNode, 'display-none');
                //Recurring tab
                var idx = this.tc_EditActivity.getIndexOfChild(this.cp_Recurring);
                if (idx < 0) {
                    var insIdx = this.tc_EditActivity.getIndexOfChild(this.cp_Attachments);
                    this.tc_EditActivity.addChild(this.cp_Recurring, insIdx);
                    var self = this;
                    window.setTimeout(function () { self._dialog.resize(); }, 10);
                }
            }
            if (this._dialog.helpIcon) {
                this._dialog.set('helpTopic', this._getHelpTopicByMode());
            }
        },
        _setActivityIdAttr: function (activityId) {
            activityId = activityId || '';
            this.activityId = activityId;
            this._activityData = false;
            if (activityId !== '') {
                this.historyId = '';
                this._loadData();
            }
        },
        _getActivityIdAttr: function () {
            return this.activityId;
        },
        _setActivityMemberIdAttr: function (memberId) {
            memberId = memberId || '';
            this.activityMemberId = memberId;
        },
        _getActivityMemberIdAttr: function () {
            return this.activityMemberId;
        },
        _setUserNotificationIdAttr: function (userNotificationId) {
            userNotificationId = userNotificationId || '';
            if (userNotificationId !== this.userNotificationId) {
                this.userNotificationId = userNotificationId;
                this.set('activityId', '');
                this._notificationData = false;
                this._loadNotification();
            }
        },
        _getUserNotificationId: function () {
            return this.userNotificationId;
        },
        _setHistoryIdAttr: function (historyId) {
            historyId = historyId || '';
            if (this.historyId !== historyId) {
                this.historyId = historyId;
                this._activityData = false;
                if (historyId !== '') {
                    this.activityId = '';
                    this._loadHistory();
                }
            }
        },
        _getHistoryIdAttr: function () {
            return this.historyId;
        },
        _preloadActivityOptions: function () {
            this._options = {
                atAppointment: {
                    alarmLead: '15',
                    duration: '60',
                    autoRollover: false,
                    timeless: false
                },
                atPhoneCall: {
                    alarmLead: '15',
                    duration: '15',
                    autoRollover: false,
                    timeless: false
                },
                atToDo: {
                    alarmLead: 'none',
                    duration: '15',
                    autoRollover: false,
                    timeless: false
                },
                atPersonal: {
                    alarmLead: 'none',
                    duration: '5',
                    autoRollover: false,
                    timeless: false
                },
                followUp: {
                    defaultFollowUpType: 'None',
                    carryOverNotes: false,
                    carryOverAttachments: false
                },
                calendar: {
                    dayStartTime: '9',
                    dayEndTime: '6'
                }
            };
            var optionsSvc = Sage.Services.getService('UserOptions');
            if (optionsSvc) {
                optionsSvc.getByCategories(['ActivityMeetingOptions', 'ActivityPhoneOptions', 'ActivityToDoOptions', 'ActivityPersonalOptions', 'Calendar'], this._receivedOptions, this);
            }
        },
        _receivedOptions: function (data) {
            //set these up as easily accessible values...
            var followUpMap = {
                '0': 'None',
                '1': 'atPhoneCall',
                '2': 'atAppointment',
                '3': 'atToDo'
            };
            var opts = data['$resources'];
            for (var i = 0; i < opts.length; i++) {
                var opt = opts[i];
                var appliesTo = (opt.category === 'ActivityMeetingOptions') ? 'atAppointment' :
                                (opt.category === 'ActivityPhoneOptions') ? 'atPhoneCall' :
                                (opt.category === 'ActivityToDoOptions') ? 'atToDo' :
                                (opt.category === 'ActivityPersonalOptions') ? 'atPersonal' : false;
                if (appliesTo && this._options[appliesTo] && opt.value) {
                    switch (opt.name) {
                        case 'AlarmLead':
                            this._options[appliesTo].alarmLead = (parseInt(opt.value, 10) > 0) ? opt.value : 'none';
                            break;
                        case 'Duration':
                            this._options[appliesTo].duration = opt.value;
                            break;
                        case 'Timeless':
                            var tval = opt.value.substring(0, 1).toUpperCase();
                            this._options[appliesTo].timeless = tval === 'T';
                            break;
                        case 'AutoRollover':
                            var arval = opt.value.substring(0, 1).toUpperCase();
                            this._options[appliesTo].autoRollover = arval === 'T';
                            break;
                    }
                } else if (opt.category === 'Calendar') {
                    switch (opt.name) {
                        case 'DayStartTime':
                            this._options.calendar.dayStartTime = userOptionsUtility.getConvertedOptionValue(opt['name'], opt['value']);
                            break;
                        case 'DayEndTime':
                            this._options.calendar.dayEndTime = userOptionsUtility.getConvertedOptionValue(opt['name'], opt['value']);
                            break;
                        case 'DefaultFollowUpType':
                            this._options.followUp.defaultFollowUpType = followUpMap[opt.value] || 'None';
                            break;
                        case 'CarryOverNotes':
                            var nval = opt.value.substring(0, 1).toUpperCase();
                            this._options.followUp.carryOverNotes = nval === 'T';
                            break;
                        case 'CarryOverAttachments':
                            var aval = opt.value.substring(0, 1).toUpperCase();
                            this._options.followUp.carryOverAttachments = aval === 'T';
                    }
                }
            }
        },
        _setupStore: function () {
            if (!this._activityStore) {
                this._activityStore = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'activities',
                    service: this._activityService
                });
            }
            if (!this._currentUserActivityStore) {
                this._currentUserActivityStore = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    select: ['Alarm', 'AlarmTime', 'Activity/StartDate'],
                    resourceKind: 'userActivities',
                    service: this._activityService
                });
            }
            if (!this._historyStore) {
                //used when completing unscheduled activities
                // and new history items created by mail merge or other processes
                this._historyStore = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'history',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
            }
        },
        _resetDataProps: function () {
            this._activityData = false;
            this._currentUserActivityData = false;
            this._tempUAData = false;
            this._notificationData = false;
            this._attendeesData = [];
            this._attendeesForRemoval = [];
            this._newAttendeesData = [];
            this._userActivitiesRequestCount = 0;
            this._resourceRequestCount = 0;
            this._resourceDeleteRequestCount = 0;
            this._activitySaved = false;
            this._userActivitiesSaved = false;
            this._currentUserActivitySaved = false;
            this._resourcesSaved = false;
            this._resourcesRemoved = false;
            this._attachmentsSaved = false;
            this._originalLeaderId = false;
            if (this._attachmentList) {
                this._attachmentList.clearNewAttachments();
            }
            this._availabilityDataDateRange = {
                fromDate: false,
                toDate: false,
                users: []
            };
        },
        _loadData: function () {
            //console.log('_loadData');
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            this._resetDataProps();
            if (this._activityStore) {
                //this._resetAttendeesList();
                if (this.mode === 'New') {
                    this._activityStore.newItem({
                        onComplete: function (act) {
                            Sage.Utility.setValue(act, 'Type', this.activityType);
                            this._receivedActivity(act);
                        },
                        onError: this._requestFailure,
                        scope: this
                    });
                } else {
                    this._activityStore.fetch({
                        predicate: '"' + this.activityId + '"',
                        onComplete: this._receivedActivity,
                        onError: this._requestFailure,
                        scope: this
                    });
                }
            }
        },
        _receivedActivity: function (activity) {
            this._activityData = activity;
            if ((this._currentUserActivityStore) && (this.mode !== 'New') && (this.mode != 'CompleteUnscheduled')) {
                //if it is a single occurence of a recurring activity, the id will have a date code appended with semicolon.
                var id = this.activityId || activity.$key;
                id = (id.indexOf(';') > 0) ? id.substring(0, 12) : id;
                var membId = this.activityMemberId || this._currentUserId;
                this._currentUserActivityStore.fetch({
                    predicate: dString.substitute("'ActivityId=${0};UserId=${1}'", [id, membId]),
                    onComplete: this._receivedUserActivity,
                    onError: this._noUserActivity,
                    scope: this
                });
            }

            if (activity.AttachmentCount > 0) {
                this._activityData.Attachment = true;
            }
            this._tempIdForAttachments = false;
            var contextSvc = Sage.Services.getService('ClientEntityContext');
            var context = (this.historyId) ? {
                "EntityId": this.historyId,
                "EntityType": "Sage.Entity.Interfaces.IHistory",
                "Description": this._activityData.$descriptor,
                "EntityTableName": "HISTORY"
            } : {
                "EntityId": this.activityId,
                "EntityType": "Sage.Entity.Interfaces.IActivity",
                "Description": this._activityData.$descriptor,
                "EntityTableName": "ACTIVITY"
            };
            contextSvc.setTemporaryContext(context);

            if (this.mode !== 'New' && this.mode != 'CompleteUnscheduled') {
                this.activityType = activity.Type;
            } else {
                this._applyUserOptionsForNewActivity();
            }

            if (this.activityMemberId && this.activityMemberId !== this._currentUserId && !this._memberSecurityData[this.activityMemberId]) {
                this._checkSecurityAccess(this._currentUserId, this.activityMemberId, function (accessData) {
                    if (accessData) {
                        this._memberSecurityData[this.activityMemberId] = [];
                        this._memberSecurityData[this.activityMemberId].AllowAdd = accessData.AllowAdd;
                        this._memberSecurityData[this.activityMemberId].AllowEdit = accessData.AllowEdit;
                        this._memberSecurityData[this.activityMemberId].AllowDelete = accessData.AllowDelete;
                    }
                    this._setUIForActivityType(activity.Type);
                    this._bind();
                }, this);
            } else {
                this._setUIForActivityType(activity.Type);
                this._bind();
            }

            //save the original leader's id for later...
            if (this._activityData['Leader']) {
                this._originalLeaderId = this._activityData.Leader['$key'];
            } else {
                this._originalLeaderId = this._activityData['UserId'] || this._currentUserId;
            }
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
        },
        _receivedUserActivity: function (userActivity) {
            //console.log('user activity: %o', userActivity);
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this._currentUserActivityData = userActivity;

            // if the activity is created in the LAN client, the ALARM and ALARMTIME values are null
            // apparantly the lan client handles this, so we have to too.
            if (userActivity.Alarm === null) {
                userActivity.Alarm = this._activityData.Alarm;
            }
            if (userActivity.AlarmTime === null) {
                userActivity.AlarmTime = this._activityData.AlarmTime;
            }
            this._tempUAData = {
                Alarm: userActivity.Alarm,
                AlarmTime: utility.Convert.toDateFromString(userActivity.AlarmTime)
            };

            this._bindUserActivity();
        },
        _loadNotification: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            this._resetDataProps();
            if (!this._notificationStore) {
                this._notificationStore = new SingleEntrySDataStore({
                    include: ['Activity', '$descriptors'],
                    resourceKind: 'userNotifications',
                    service: sDataServiceRegistry.getSDataService('system')
                });
            }
            this._notificationStore.fetch({
                predicate: "'" + this.userNotificationId + "'",
                onComplete: this._receivedNotification,
                onError: this._requestFailure,
                scope: this
            });
        },
        _loadHistory: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            if (this._historyStore) {
                if (!this.historyId) {
                    this._historyStore.newItem({
                        onComplete: function (hist) {
                            this._receivedActivity(dojoLang.mixin(hist, this.activityDefaultValues));
                            this._formatHeader();
                        },
                        scope: this
                    });
                } else {
                    this._historyStore.fetch({
                        predicate: this.historyId,
                        onComplete: function (hist) {
                            this._receivedActivity(hist);
                            this._formatHeader();
                        },
                        onError: this._requestFailure,
                        scope: this
                    });
                }
            }
        },
        _receivedNotification: function (notification) {
            this._receivedActivity(notification.Activity || this._emptyActivity);
            this._notificationData = notification;
            this._formatHeader();
            this._bindUserNotification();
            if (notification.Type === 'New') {
                this._setUIAsUnConfirmed();
            } else {
                domClass.remove(this.otherConfButtons, 'display-none');
                domClass.add(this.newConfButtons, 'display-none');
                if (notification.Type === 'Confirm' || notification.Type === 'Decline') {
                    this.ta_confirmationResponse.set('disabled', true);
                    domClass.remove(this.responseLabel, 'display-none');
                    domClass.remove(this.ta_confirmationResponse.domNode, 'display-none');
                } else {
                    domClass.add(this.responseLabel, 'display-none');
                    domClass.add(this.ta_confirmationResponse.domNode, 'display-none');
                }
                if (notification.Type === 'Change') {
                    this._checkUserConfirmationStatus();
                }
            }
        },
        _checkUserConfirmationStatus: function () {
            var req = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('system'))
                .setResourceKind('userActivities')
                .setResourceSelector('"' + this._notificationData.Activity['$key'] + ';' + this._notificationData.ToUser['$key'] + '"');
            req.read({
                success: function (ua) {
                    if (ua.Status === 'asUnconfirmed') {
                        this._setUIAsUnConfirmed();
                    }
                },
                failure: function () { },
                scope: this
            });
        },
        _setUIAsUnConfirmed: function () {
            domClass.add(this.otherConfButtons, 'display-none');
            domClass.remove(this.newConfButtons, 'display-none');
            this.ta_confirmationResponse.set('disabled', false);
            domClass.remove(this.responseLabel, 'display-none');
            domClass.remove(this.ta_confirmationResponse.domNode, 'display-none');
        },
        _applyUserOptionsForNewActivity: function () {
            //set start and alarm time to user options.
            var newDate = activityUtility.roundDateToNextQuarterHour(new Date());
            //utility.setValue(this._activityData, 'StartDate', utility.Convert.toIsoStringFromDate(newDate));
            //set default values based on user options...
            var alarmdur = '15';
            if (this._options[this.activityType]) {
                var optset = this._options[this.activityType];
                utility.setValue(this._activityData, 'Duration', optset['duration'] || '60');
                alarmdur = optset['alarmLead'];
                utility.setValue(this._activityData, 'Rollover', optset['autoRollover']);
                utility.setValue(this._activityData, 'Timeless', optset['timeless']);

                if (this._activityData.Timeless) {
                    //Create Timeless Date.
                    newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), 0, 0, 0);
                }
            }
            utility.setValue(this._activityData, 'StartDate', utility.Convert.toIsoStringFromDate(newDate));

            //override with preConfigured properties (from calendar, sales process, etc.)
            this._activityData = dojoLang.mixin(this._activityData, this.activityDefaultValues);

            //calculate alarm time based on current startdate
            if (alarmdur.toLowerCase() === 'none') {
                utility.setValue(this._activityData, 'Alarm', false);
                alarmdur = 15;
            } else {
                Sage.Utility.setValue(this._activityData, 'Alarm', true);
                alarmdur = parseInt(alarmdur, 10);
            }

            //get the date from the activity again, since it might have been overriden by default values...
            var d = utility.Convert.toDateFromString(utility.getValue(this._activityData, 'StartDate'));
            var alarmTime = this._getAlarmTime(d, alarmdur, this._activityData.Timeless);
            utility.setValue(this._activityData, 'AlarmTime', utility.Convert.toIsoStringFromDate(alarmTime));
            this.sel_AlarmDur.set('startTime', d);
            this.sel_AlarmDur.set('timeValue', alarmTime);
            var ldr = {
                '$key': this._currentUserId,
                '$descriptor': utility.getClientContextByKey('userPrettyName')
            };
            utility.setValue(this._activityData, 'Leader', ldr);

            if (this.activityDefaultValues.hasOwnProperty('carryOverAttachmentsFrom')) {
                var self = this, histId = this.activityDefaultValues['carryOverAttachmentsFrom']
                window.setTimeout(function () {
                    self.doCarryOverAttachments(histId);
                }, 1000);
            }
        },
        _noUserActivity: function () {
            this._bindUserActivity();
        },
        _requestFailure: function (request) {
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            console.warn('error requesting data %o', arguments);
            sageDialogs.showError(this.failedLoadingDataMsg);
            this.hide();
        },
        _createBindings: function () {
            if (this._bindingMgr) {
                this._bindingMgr.destroy();
                this._bindingMgr = false;
            }
            this._bindingMgr = new BindingsManager({
                defaultBinding: { boundEntity: this._activityData },
                items: [
                {
                    boundWidget: this.tb_Location,
                    entityProperty: 'Location'
                }, {
                    boundWidget: this.pk_Regarding,
                    entityProperty: 'Description',
                    onChange: dojo.hitch(this, '_descriptionChanged')
                }, {
                    boundWidget: this.pk_Category,
                    entityProperty: 'Category'
                }, {
                    boundWidget: this.pk_Priority,
                    entityProperty: 'Priority'
                }, {
                    boundWidget: this.ta_Notes,
                    entityProperty: 'LongNotes',
                    onChange: dojo.hitch(this, '_notesChanged')
                }, {
                    boundWidget: this.dtp_startDate,
                    dataType: 'date',
                    entityProperty: 'StartDate',
                    onChange: dojo.hitch(this, '_startDateChanged')
                }, {
                    boundWidget: this.sel_Duration,
                    entityProperty: 'Duration'
                }, {
                    boundWidget: this.sel_Duration,
                    entityProperty: 'StartDate',
                    widgetProperty: 'startTime',
                    dataType: 'date',
                    twoWay: false
                }, {
                    boundWidget: this.sel_AlarmDur,
                    entityProperty: 'StartDate',
                    widgetProperty: 'startTime',
                    dataType: 'date',
                    twoWay: false
                }, {
                    boundWidget: this.cb_Timeless,
                    entityProperty: 'Timeless',
                    widgetProperty: 'checked',
                    onChange: dojo.hitch(this, '_timelessChange')
                }, {
                    boundWidget: this.cb_AutoRollover,
                    entityProperty: 'Rollover',
                    widgetProperty: 'checked'
                }, {
                    boundWidget: this.dtp_scheduledDate,
                    dataType: 'date',
                    entityProperty: 'StartDate'
                }, {
                    boundWidget: this.sel_DurationComplete,
                    entityProperty: 'Duration'
                }, {
                    boundWidget: this.sel_DurationComplete,
                    entityProperty: 'StartDate',
                    widgetProperty: 'startTime',
                    dataType: 'date',
                    twoWay: false
                }, {
                    boundWidget: this.cb_TimelessComplete,
                    entityProperty: 'Timeless',
                    widgetProperty: 'checked',
                    onChange: dojo.hitch(this, '_timelessChange')
                }
            ]
            });
        },

        _createUABindings: function () {
            //if it is new or the current user is not a member, bind the alarm and alarm duration fields to the activity record - otherwise, bind them
            // to the user-activity...            
            this._uaBindingMgr = new BindingsManager({
                items: [{
                    boundWidget: this.cb_Alarm,
                    entityProperty: 'Alarm',
                    widgetProperty: 'checked',
                    onChange: dojo.hitch(this, '_alarmCheckChanged')
                }]
            });
        },
        _createNotificationBindings: function () {
            this._notificationBindingMgr = new BindingsManager({
                items: [{
                    boundWidget: this.ta_confirmationResponse,
                    entityProperty: 'Notes',
                    boundEntity: this._notificationData
                }]
            });
        },
        _bind: function () {
            if (this._activityData) {
                if (!this._bindingMgr) {
                    this._createBindings();
                } else {
                    if (!this._bindingMgr.boundEntity || (this._activityData['$key'] !== this._bindingMgr.boundEntity['$key'])) {
                        this._bindingMgr.setBoundEntity(this._activityData);
                    } else {
                        this._bindingMgr.bind();
                    }
                }
                if (this.mode === 'New' || this.mode === 'CompleteUnscheduled') {
                    this._noUserActivity();
                }
                this._manualBind();
                this._setUI();
            }
        },
        _bindUserNotification: function () {
            if (!this._notificationBindingMgr) {
                this._createNotificationBindings();
            } else {
                this._notificationBindingMgr.setBoundEntity(this._notificationData);
            }
        },
        _isNullOrWhitespace: function (str) {
            return (!str || str.trim() === '');
        },
        _manualBind: function () {
            //because there are not relationships to several related entities, we have to manually bind to keep the denormalized data in sync...
            //console.log('_manualBind');
            if (this._activityData) {
                this._isBinding = true;  //this prevents the change event handlers from overwriting values that we are going to set here...
                //for example, the account change handler removes the contact, opp, and ticket values.
                // account...
                var act = this._activityData;
                var mockAcctObj = this._isNullOrWhitespace(act.AccountId) ? null : {
                    '$key': act.AccountId,
                    '$descriptor': act.AccountName
                };
                this.lup_Account.set('selectedObject', mockAcctObj);
                // contact...
                var mockContact = this._isNullOrWhitespace(act.ContactId) ? null : {
                    '$key': act.ContactId,
                    '$descriptor': act.ContactName
                };
                this.lup_Contact.set('selectedObject', mockContact);

                // opportunity...
                var mockOpp = this._isNullOrWhitespace(act.OpportunityId) ? null : {
                    '$key': act.OpportutunityId,
                    '$descriptor': act.OpportunityName
                };
                this.lup_Opportunity.set('selectedObject', mockOpp);

                // ticket...
                var mockTick = this._isNullOrWhitespace(act.TicketId) ? null : {
                    '$key': act.TicketId,
                    '$descriptor': act.TicketNumber
                };
                this.lup_Ticket.set('selectedObject', mockTick);

                // lead...
                var mockLead = this._isNullOrWhitespace(act.LeadId) ? null : {
                    '$key': act.LeadId,
                    '$descriptor': act.LeadName
                };

                this.lup_Lead.set('selectedObject', mockLead);
                this.tb_LeadCompanyName.set('value', this._isNullOrWhitespace(act.LeadId) ? '' : act.AccountName);

                this._updateLookupSeedValues(act.AccountId);

                // Leader...
                this.lup_Leader.set('selectedObject', act.Leader);

                //recurring tab...
                if (this.mode !== 'Complete') { //Recurring editor can cause reoccunce to change even though editoer is hidden.
                    this._recurringEditor.set('activity', act);
                }
                var alarmTime = Sage.Utility.Convert.toDateFromString(this._activityData.AlarmTime);
                this.sel_AlarmDur.set('timeValue', alarmTime);


                this._completeModeManualBind();

                this._isBinding = false;
            }
        },
        _completeModeManualBind: function () {
            if (this.mode === 'Complete' || this.mode === 'CompleteUnscheduled') {

                this.dtp_completedDate.set('value', new Date());

                this.pl_Result.set('value', this.completeText);
                if (this.mode === 'Complete') {
                    this.pl_Result.focus();
                }
            }
        },
        _bindUserActivity: function () {
            if (!this._uaBindingMgr) {
                this._createUABindings();
            }
            //before we bind, just make sure the start date is correct because it re-calculates the duration again only
            // when setting the time value...  Depending on how fast things load, sometimes the start date isn't right yet.
            //var disabled = this.sel_AlarmDur.get('disabled');
            this.sel_AlarmDur.set('disabled', false);
            var instanceStartDate = this._getActivityStartDate();
            this.sel_AlarmDur.set('startTime', instanceStartDate);

            var ent = (this._currentUserActivityData) ? this._currentUserActivityData : this._activityData;
            var alarmTime = utility.Convert.toDateFromString(ent.AlarmTime);
            if (this._currentUserActivityData && utility.getValue(this._activityData, 'RecurrenceState') === 'rstOccurrence') {
                //adjust the useractivity alarm time to match this occurrence...
                var baseStartDate = utility.Convert.toDateFromString(this._currentUserActivityData.Activity.StartDate);
                var baseAlarmDate = utility.Convert.toDateFromString(this._currentUserActivityData.AlarmTime);
                var dur = dojoDate.difference(baseStartDate, baseAlarmDate, 'minute');
                alarmTime = dojoDate.add(instanceStartDate, 'minute', dur);
            }
            this._uaBindingMgr.setBoundEntity(ent);

            this.sel_AlarmDur.set('timeValue', alarmTime);
            this.sel_AlarmDur.set('disabled', !ent.Alarm || this.mode === 'Confirm');
        },
        _getActivityStartDate: function () {
            if (this._activityData) {
                var sDate = Sage.Utility.Convert.toDateFromString(this._activityData.StartDate);
                if ((this._activityData.Timeless) && (activityUtility.isDateFiveSecondRuleTimeless(sDate))) {
                    return new Date(sDate.getUTCFullYear(), sDate.getUTCMonth(), sDate.getUTCDate(), 0, 0, 5);
                }
                return sDate;
            }
            return new Date();
        },
        _onShowAvailabilityTab: function () {
            if (!this._availabilityShowing) {
                this._resetAttendeesList();
                this._loadAttendeesData();
            } else {
                scheduler.setCurrentView(this._getActivityStartDate(), 'timeline');
            }
        },
        _accountChanged: function (newAcct) {

            if (this._isBinding) { return; }

            var newId = (newAcct) ? newAcct['$key'] : '';
            var newActName = (newAcct) ? newAcct['$descriptor'] : '';

            var act = this._activityData;
            var mustSetContact = this._isNullOrWhitespace(act.ContactId);

            act.AccountId = newId;
            act.AccountName = newActName;
            act.ContactId = null;
            act.ContactName = '';
            act.PhoneNumber = '';
            act.OpportunityId = null;
            act.OpportunityName = '';
            act.TicketId = null;
            act.TicketNumber = '';
            act.LeadId = null;
            act.LeadName = '';

            this._isBinding = true;
            this.lup_Contact.set('selectedObject', null);
            this.lup_Opportunity.set('selectedObject', null);
            this.lup_Ticket.set('selectedObject', null);
            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            this._updateLookupSeedValues(newId);

            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            if (mustSetContact) {
                this._setContactToCurrentAccountPrimary();
            }
            this._isBinding = false;
        },
        _contactChanged: function (newContact) {
            if (this._isBinding) { return; }
            var act = this._activityData;
            if (!newContact) {
                act.ContactId = null;
                act.ContactName = '';
                act.PhoneNumber = '';
                return;
            }
            act.ContactId = newContact['$key'];
            act.ContactName = newContact['$descriptor'];
            act.PhoneNumber = Sage.Utility.getValue(newContact, 'WorkPhone');

            //remove lead
            act.LeadId = null;
            act.LeadName = '';

            //set associated account
            act.AccountId = newContact.Account['$key'];
            act.AccountName = newContact.Account.AccountName;
            //account changed, so update seed values...
            this._updateLookupSeedValues(newContact.Account['$key']);

            this._isBinding = true;
            this.lup_Account.set('selectedObject', { '$key': newContact.Account['$key'], '$descriptor': newContact.Account.AccountName });
            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            this._isBinding = false;

        },
        _opportunityChanged: function (newOpp) {
            if (this._isBinding) { return; }
            /*
            The logic for when the opportunity changes is like this...
            - If there is already a contact and account selected, and the opportunity is associated to the same account - do nothing
            - If there is no contact or account selected for the activity - or the account is different do the following:
            - Set the account to the associated account and:
            - If ONE associated contact is marked IsPrimary = true set the contact to it.
            - if more than one associated contact is marked primary, or none are marked primary, 
            -if one of these is primary for the account and use it
            -if not, just grab the first one.
            -if there are no contacts associate with the opportunity, use the account's primary contact.
            */

            var act = this._activityData;
            if (!newOpp) {
                act.OpportunityId = null;
                act.OpportunityName = '';
                return;
            }
            act.OpportunityId = newOpp['$key'];
            act.OpportunityName = newOpp['$descriptor'];

            if (this._isNullOrWhitespace(act.AccountId) || act.AccountId !== newOpp.Account['$key']) {

                //set the associated account...
                act.AccountId = newOpp.Account['$key'];
                act.AccountName = newOpp.Account.AccountName;
                act.LeadId = null;
                act.LeadName = '';

                this._updateLookupSeedValues(newOpp.Account['$key']);

                this._isBinding = true;
                this.lup_Account.set('selectedObject', { '$key': newOpp.Account['$key'], '$descriptor': newOpp.Account.AccountName });
                //remove contact for now, then when we find the primary, we'll set it again.
                this.lup_Contact.set('selectedObject', null);
                this.lup_Lead.set('selectedObject', null);
                this.tb_LeadCompanyName.set('value', '');
                this._isBinding = false;

                this._setContactBasedOnOpportunity();
            }
        },
        _ticketChanged: function (newTick) {
            if (this._isBinding) { return; }
            var act = this._activityData;
            if (!newTick) {
                act.TicketId = null;
                act.TicketNumber = '';
                return;
            }

            act.TicketId = newTick['$key'];
            act.TicketNumber = newTick['$descriptor'];
            //update account and contact, if there isn't an account - or if the account is different from the ticket's account
            if (this._isNullOrWhitespace(act.AccountId) || act.AccountId !== newTick.Account['$key']) {
                act.AccountId = newTick.Account['$key'];
                act.AccountName = newTick.Account['AccountName'];
                act.LeadId = null;
                act.LeadName = '';
                this._updateLookupSeedValues();

                //Do we set it to the contact associated with the ticket - or the primary?
                // I'm going with the one on the ticket, but previous versions used the primary...
                act.ContactId = Sage.Utility.getValue(newTick, 'Contact.$key');
                act.ContactName = Sage.Utility.getValue(newTick, 'Contact.NameLF');
                act.PhoneNumber = Sage.Utility.getValue(newTick, 'Contact.WorkPhone');

                this._isBinding = true;
                this.lup_Account.set('selectedObject', { '$key': newTick.Account['$key'], '$descriptor': newTick.Account['AccountName'] });
                this.lup_Contact.set('selectedObject', { '$key': newTick.Contact['$key'], '$descriptor': newTick.Contact['NameLF'] });
                this.lup_Lead.set('selectedObject', null);
                this.tb_LeadCompanyName.set('value', '');
                this._isBinding = false;
                // In case I have to change it back to the account's primary...
                //this._setContactToCurrentAccountPrimary();
            }
        },
        _leadChanged: function (newLead) {
            if (this._isBinding) { return; }
            var act = this._activityData;
            if (!newLead) {
                act.LeadId = null;
                act.LeadName = '';
                act.PhoneNumber = '';
                this.tb_LeadCompanyName.set('value', '');
                return;
            }
            //clear out the TACO and make way for Lead.
            act.ContactId = null;
            act.ContactName = '';
            act.AccountId = null;
            act.TicketId = null;
            act.TicketNumber = '';
            act.OpportunityId = null;
            act.OpportunityName = '';
            this._updateLookupSeedValues();
            this._isBinding = true;
            this.lup_Contact.set('selectedObject', null);
            this.lup_Account.set('selectedObject', null);
            this.lup_Opportunity.set('selectedObject', null);
            this.lup_Ticket.set('selectedObject', null);
            this._isBinding = false;
            // now set the lead info...
            act.LeadId = newLead['$key'];
            act.LeadName = newLead['LeadFullName'];
            act.AccountName = newLead['Company'];
            act.PhoneNumber = newLead['WorkPhone'];
            this.tb_LeadCompanyName.set('value', newLead['Company']);
        },
        _leaderChanged: function (newLeader) {
            if (this._isBinding) { return; }
            var oldLeaderId = this._activityData.Leader['$key'] || this._activityData['UserId'];
            if (newLeader) {
                var key = newLeader['$key'].substr(0, 12);
                this._activityData.Leader = {
                    '$key': key,
                    '$descriptor': newLeader['$descriptor'] || newLeader['Name']
                };
                this._activityData.LeaderChanged = true;
            }
            this._updateUsersListWithNewLeader(oldLeaderId, this._activityData.Leader);
        },
        _setContactBasedOnOpportunity: function () {
            if (this._isNullOrWhitespace(this._activityData.OpportunityId)) {
                this._rebindToCurrentContact();
                return;
            }
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('opportunities');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + this._activityData.OpportunityId + '"';
            req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'IsPrimary,Contact/NameLF,Contact/IsPrimary,Contact/WorkPhone');
            req.setQueryArg('orderby', 'IsPrimary desc');
            req.read({
                success: function (data) {
                    var oppCons = data['$resources'];
                    if (oppCons.length < 1) {
                        this._setContactToCurrentAccountPrimary();
                        return;
                    }
                    var oppPri = false, accPri = false, firstCon = oppCons[0], newActCon;
                    for (var i = 0; i < oppCons.length; i++) {
                        if (!_isNullOrWhitespace(oppCons[i])) {
                            if (oppCons.IsPrimary) {
                                if (!oppPri || oppCons[i].Contact.IsPrimary) {
                                    oppPri = oppCons[i];
                                }
                            }
                            if (!accPri && oppCons[i].Contact.IsPrimary) {
                                accPri = oppCons[i];
                            }
                        }
                    }
                    newActCon = oppPri || accPri || firstCon;
                    if (newActCon) {
                        this._activityData.ContactId = Sage.Utility.getValue(newActCon, 'Contact.$key');
                        this._activityData.ContactName = Sage.Utility.getValue(newActCon, 'Contact.NameLF');
                        this._activityData.PhoneNumber = Sage.Utility.getValue(newActCon, 'Contact.WorkPhone');
                        this._rebindToCurrentContact();
                    }
                },
                failure: function () {
                    this._rebindToCurrentContact();
                },
                scope: this
            });
        },
        _setContactToCurrentAccountPrimary: function () {
            if (this._isNullOrWhitespace(this._activityData.AccountId)) {
                this._rebindToCurrentContact();
                return;
            }
            //look up the primary contact...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('accounts');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + this._activityData.AccountId + '"';
            req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'NameLF,IsPrimary,WorkPhone');
            req.setQueryArg('orderby', 'IsPrimary desc');  //rather than selecting "where IsPrimary", do it this way so we at least get something - if there is one that is primary, it will come back, otherwise, we'll just get one.
            req.setQueryArg('count', '1');  //only need one...
            req.read({
                success: function (data) {
                    var contacts = data['$resources'];
                    if (contacts.length < 1) {
                        //fall back to the one that was there...
                        this._rebindToCurrentContact();
                        return;
                    }
                    var primaryContact = contacts[0];
                    this._activityData.ContactId = Sage.Utility.getValue(primaryContact, '$key');
                    this._activityData.ContactName = Sage.Utility.getValue(primaryContact, 'NameLF');
                    this._activityData.PhoneNumber = Sage.Utility.getValue(primaryContact, 'WorkPhone');
                    this._isBinding = true;
                    this.lup_Contact.set('selectedObject', primaryContact);
                    this._isBinding = false;
                },
                failure: function () {
                    this._rebindToCurrentContact();
                },
                scope: this
            });
        },
        _rebindToCurrentContact: function () {
            this._isBinding = true;
            this.lup_Contact.set('selectedObject', { '$key': this._activityData.ContactId, '$descriptor': this._activityData.ContactName });
            this._isBinding = false;
        },
        _updateLookupSeedValues: function (newSeed) {
            var accId = newSeed || this._activityData.AccountId;
            this.contactLookupConfig.seedValue = accId;
            this.opportunityLookupConfig.seedValue = accId;
            this.ticketLookupConfig.seedValue = accId;
        },
        // ... endregion - data methods

        // ... region UI interactions   ...
        _setUI: function () {
            this._formatHeader();
            this._setDisabledByTimlessValue();
            this._setHasAlarmUI();
            if (this._isNullOrWhitespace(this._activityData.LeadId)) {
                this.rdo_Contact.set('checked', true);
            } else {
                this.rdo_Lead.set('checked', true);
            }
            this._setContactLeadVisibility();
            this._setScheduledByLabel();
        },

        _checkSecurityAccess: function (accessFor, accessTo, callback, scope) {
            this.accessData = false;
            if (!this._accessStore) {
                this._accessStore = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'activityresourceviews',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
            }
            this._accessStore.fetch({
                predicate: "'" + accessTo + "-" + accessFor + "'",
                onComplete: function (accessData) {
                    callback.call(scope, accessData);
                },
                onError: function () {
                    callback.call(scope, null);
                },
                scope: this
            });
        },

        _setUIForActivityType: function (actType) {
            this.pk_Regarding.set('pickListName', activityUtility.getActivityPicklistName('Regarding', actType));
            this.pk_Category.set('pickListName', activityUtility.getActivityPicklistName('Category', actType));
            this.pl_Result.set('pickListName', activityUtility.getActivityPicklistName('Result', actType));

            //Applying AllowComplete Option.
            this.btn_Complete.set('disabled', !this._activityData.AllowComplete);

            //If the user doesn't have access to edit the Leader's calendar, we need to disable a bunch of stuff...
            //this.btn_OK.set('disabled', false);  //enable it in case it was disabled the last time around...
            if (this.mode !== 'Confirm') {
                var editAllowed = this._activityData.AllowEdit;
                var deleteAllowed = this._activityData.AllowDelete;
                
                //Users can edit only alarm time if its not the leader's instance
                if (this.activityMemberId && this.activityMemberId !== this._activityData.Leader.$key) {
                    editAllowed = false;
                    deleteAllowed = false;
                }
                this._bulkSetProperty(this, this.noEditDisableList, 'disabled', (!editAllowed));

                //To allow members to update their alarmtime even if they don't have edit access to leader's calendar
                if ((this.activityMemberId && this._memberSecurityData[this.activityMemberId] && this._memberSecurityData[this.activityMemberId].AllowEdit) || this.activityMemberId === this._currentUserId || this._activityData['UserId'] === this._currentUserId) {
                    this.btn_OK.set('disabled', false);
                } else {
                    this.btn_OK.set('disabled', !this._activityData.AllowEdit);
                }
                this.btn_Delete.set('disabled', !deleteAllowed);
            }

            if (this.mode === 'Complete') {
                this.btn_asScheduled.set('disabled', !this._activityData.AllowComplete);
                this.btn_Now.set('disabled', !this._activityData.AllowComplete);
            }

            // disable the category picklist for personal activities...
            this.pk_Category.set('disabled', (actType === 'atPersonal') || (this.mode === 'Confirm') || this.pk_Category.get('disabled'));
            // hide the add (lookup) resources/users button for to-do and personal activities
            if ((!this._canEdit()) || (actType === 'atPersonal' || actType === 'atToDo')) {
                domClass.add(this.lup_Resources.domNode, 'display-none');
            } else {
                domClass.remove(this.lup_Resources.domNode, 'display-none');
            }
        },
        _setDisabledByTimlessValue: function () {
            if (!this._activityData) {
                return;
            }
            var tless = this._activityData['Timeless'];
            //this.cb_AutoRollover.set('disabled', !tless);
            this._handleAutoRolloverState();
            this.dtp_startDate.set('displayTime', !tless);
            var editAllowed = this._activityData.AllowEdit;
            if (this.activityMemberId && this.activityMemberId !== this._activityData.Leader.$key) {
                editAllowed = false;
            }
            this.sel_Duration.set('disabled', tless || (this.mode === 'Confirm') || !editAllowed);
            this.sel_DurationComplete.set('disabled', tless);
            this.dtp_scheduledDate.set('displayTime', !tless);
        },
        _handleAutoRolloverState: function () {
            var enabled = (this._activityData['Timeless'] && !this._activityData['Recurring']);
            if (enabled) {
                this.cb_AutoRollover.set('disabled', false);
            } else {
                this.cb_AutoRollover.set('disabled', true);
                this.cb_AutoRollover.set('checked', false);
            }
        },
        _bulkSetProperty: function (ui, propsList, prop, val) {
            for (var i = 0; i < propsList.length; i++) {
                var ctrl = ui[propsList[i]];
                if (ctrl) {
                    ctrl.set(prop, val);
                }
            }
        },
        _timelessChange: function () {
            this._setDisabledByTimlessValue();
            if (this.mode === 'Complete' || this.mode === 'CompleteUnscheduled') {
                if (this.cb_TimelessComplete.get('checked')) {
                    var schedDate = this.dtp_scheduledDate.get('value');
                    schedDate.setHours(0);
                    schedDate.setMinutes(0);
                    schedDate.setSeconds(5);
                    this.dtp_scheduledDate.set('value', schedDate);
                   
                }
            } else {
                if (this.cb_Timeless.get('checked')) {
                    var d = this.dtp_startDate.get('value');
                    d.setHours(0);
                    d.setMinutes(0);
                    d.setSeconds(5);
                    this.dtp_startDate.set('value', d);
                    var leadTime = this._getAlarmLeadTime();
                    var alarmTime = this._getAlarmTime(d, leadTime, true);
                    this.sel_AlarmDur.set('startTime', d);
                    this.sel_AlarmDur.set('timeValue', alarmTime);
                    //utility.setValue(this._activityData, 'AlarmTime', utility.Convert.toIsoStringFromDate(alarmTime));
                }
                else {
                    var d = this.dtp_startDate.get('value');
                    var nowDate = activityUtility.roundDateToNextQuarterHour(new Date());
                    var min = nowDate.getMinutes();
                    var hour = nowDate.getHours();
                    var newDate = new Date(d.getFullYear(), d.getMonth(), d.getDate(), hour, min);
                    this.dtp_startDate.set('value', newDate);
                    var leadTime = this._getAlarmLeadTime();
                    var alarmTime = this._getAlarmTime(newDate, leadTime, false);
                    this.sel_AlarmDur.set('startTime', newDate);
                    this.sel_AlarmDur.set('timeValue', alarmTime);
                }
            }
        },
        _alarmCheckChanged: function (entity, property, oldValue, newValue) {
            this._setHasAlarmUI(newValue);
        },
        _descriptionChanged: function () {
            this._formatHeader();
        },
        _notesChanged: function (entity, property, oldNotes, newNotes) {
            utility.setValue(this._activityData, 'Notes', (newNotes) ? newNotes.substr(0, 255) : newNotes);
        },
        _startDateChanged: function () {
            var newStartDate = this.dtp_startDate.get('value');
            this.sel_Duration.set('startTime', newStartDate);
            this.sel_AlarmDur.set('startTime', newStartDate);

            //Account for Timeless start Time
            var leadTime = this._getAlarmLeadTime();
            var alarmTime = this._getAlarmTime(newStartDate, leadTime, this.cb_Timeless.get('checked'));
            this.sel_AlarmDur.set('timeValue', alarmTime);
            
            //let the duration picker calculate the new alarm time, then set it back to the activity or user activity...
            var act = (this._currentUserActivityData) ? this._currentUserActivityData : this._activityData;
            Sage.Utility.setValue(act, 'AlarmTime', Sage.Utility.Convert.toIsoStringFromDate(this.sel_AlarmDur.get('timeValue')));

            if (this._availabilityShowing) {
                scheduler.setCurrentView(newStartDate, 'timeline');
                //make sure we have the availability data...
                this._requestAvailability();
            }

            //tell the recurring editor...
            this._recurringEditor.set('startDate', newStartDate);
        },
        _getAlarmTime: function (startDate, leadTime, timeless) {
            var alarmTime = dojoDate.add(startDate, 'minute', leadTime * -1);
            if (timeless === true) {
                alarmTime = new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate());
                alarmTime = dojoDate.add(alarmTime, 'minute', leadTime * -1);               
            }
            return alarmTime;

        },
        _getAlarmLeadTime: function () {
            var leadTime = '15';
            if (this._options[this.activityType]) {
                var optset = this._options[this.activityType];
                leadTime = optset['alarmLead'];
            }
            if (leadTime.toLowerCase() === 'none') {
                leadTime = 15;
            } else {
                leadTime = parseInt(leadTime, 10);
            }
            return leadTime;
        },

        _setHasAlarmUI: function (newValue) {
               
            if (typeof newValue === 'undefined') {
                newValue = Sage.Utility.getValue(this._currentUserActivityData || this._activityData, 'Alarm');
            }
            this.sel_AlarmDur.set('disabled', !newValue || this.mode === 'Confirm');
        },
        _setContactLeadVisibility: function () {
            var cVisible = this.rdo_Contact.get('checked');

            domClass.remove((cVisible) ? this.contactContainer.domNode : this.leadContainer.domNode, 'display-none');
            domClass.add((cVisible) ? this.leadContainer.domNode : this.contactContainer.domNode, 'display-none');
        },
        _formatHeader: function () {
            //'${actionText} ${activityType} - ${description}',
            var action = '';
            var activityType = activityUtility.getActivityTypeName(this._activityData['Type'] || 'atAppointment');
            switch (this.mode) {
                case 'New':
                    action = this.scheduleText;
                    break;
                case 'Complete':
                case 'CompleteUnscheduled':
                    action = this.completeText;
                    break;
            }
            if (this.mode === 'Confirm') {
                if (!this._notificationData) {
                    return;
                }
                this._getUserInfoFor(this._notificationData.FromUser['$key'], function (user) {
                    if (this._notificationData) {
                        var confType = this._notificationData.Type;
                        switch (confType) {
                            case 'Change':
                                action = this.updatedText;
                                break;
                            case 'Confirm':
                                action = this.acceptedText;
                                break;
                            case 'Deleted':
                                action = this.deletedText;
                                break;
                            case 'Leader':
                                action = this.scheduledText;
                                break;
                            case 'Decline':
                                action = this.declinedText;
                                break;
                        }
                        var fmttext = (confType === 'New') ? this.newConfirmationHeaderFormatText : this.otherConfimationHeaderFormatText;
                        this._setHeader(dString.substitute(fmttext, {
                            activityType: activityType,
                            actionText: action,
                            user: user['UserName'] || user['$descriptor']
                        }));
                    }
                });
            } else {
                this._setHeader(dString.substitute(this.dialogHeaderFormatText, {
                    actionText: action,
                    activityType: activityType,
                    description: this._activityData['Description'] || ''
                }));
            }

        },
        _setHeader: function (headerText) {
            var html = dString.substitute('<div class="Global_Images icon16x16 ${0}" > </div>&nbsp;<span class="activity-dialog-title">${1}</span>', [activityUtility.getActivityImageClass(this._activityData['Type'] || 'atAppointment', 'small'), headerText]);
            this._dialog.titleNode.innerHTML = html;
        },
        _setScheduledByLabel: function () {
            // adds the note:  Scheduled by <user> on <scheduled Date>
            var createDate = utility.Convert.toDateFromString(utility.getValue(this._activityData, 'CreateDate'));
            if (!createDate || createDate.getFullYear() < 1000) {
                createDate = new Date();
            }
            var startDate = this._getActivityStartDate();
            var createUser = utility.getValue(this._activityData, 'CreateUser').trim();
            var fmtStr = (this.mode === 'Complete' || this.mode === 'CompleteUnscheduled') ? this.completeScheduledByFormatText : this.scheduledByFormatText;
            var lbl;
            if (!createUser || this._currentUserId === createUser) {
                createUser = utility.getClientContextByKey('userPrettyName');
            } else if (createUser === 'PROCESS' || createUser === 'ADMIN') {
                createUser = 'Administrator';
            } else {
                this._getUserInfoFor(createUser, function (user) {
                    lbl = dString.substitute(fmtStr, {
                        user: user['$descriptor'],
                        date: locale.format(createDate, { selector: 'date', fullYear: true }),
                        startDate: locale.format(startDate, { selector: 'date', fullYear: true })
                    });
                    dojo.html.set(this.lbl_ScheduledBy, lbl);
                    dojo.html.set(this.lbl_ScheduledByComp, lbl);
                });
                return;
            }

            lbl = dString.substitute(fmtStr, {
                user: createUser,
                date: locale.format(createDate, { selector: 'date', fullYear: true }),
                startDate: locale.format(startDate, { selector: 'date', fullYear: true })
            });
            dojo.html.set(this.lbl_ScheduledBy, lbl);
            dojo.html.set(this.lbl_ScheduledByComp, lbl);
        },
        _getUserInfoFor: function (userId, callback) {
            if (userId) {
                var request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic', false, true, true)); //go ahead and cache this...
                request.setResourceKind('userInfo');
                request.setResourceSelector("'" + userId + "'");
                //using precedence of 0 we only get $descriptor which is <lastname, firstname>, 
                //...but do we want the UserName property which is <firstname lastname>???
                request.setQueryArg('precedence', '0');
                request.read({
                    success: callback,
                    scope: this,
                    failure: function () { }
                });
            }
        },
        _showRecurringTab: function () {
            this._recurringEditor.onTabShow();
            this._recurringEditor._setReadOnly(!this._canEdit());
        },
        _showAttachmentsTab: function () {
            var self = this;
            window.setTimeout(function () {
                self._ensureAttachmentList();
            }, 100);
        },
        _ensureAttachmentList: function () {
            if (!this._attachmentList) {
                this._attachmentList = new AttachmentList({
                    workspace: '',
                    tabId: '',
                    placeHolder: this.id + '_attachmentsGridPlaceholder',
                    parentRelationshipName: 'activityId'
                });
                var self = this;
                this._attachmentList.startup(function () {
                    if (self.cp_Attachments) {
                        self.cp_Attachments.resize();
                    }
                    if (self._canEdit()) {
                        self._attachmentList.setToReadOnly(false);
                    }
                    else {
                        self._attachmentList.setToReadOnly(true);
                    }

                });
            } else {

                if (this._canEdit()) {
                    this._attachmentList.setToReadOnly(false);
                }
                else {
                    this._attachmentList.setToReadOnly(true);
                }
                this._attachmentList.resetEntityContext();
            }

        },

        // ... endregion UI interactions

        // ... region click/action handlers
        _completeClick: function () {
            this._completeAfterSaving = true;
            this._saveAndClose();
        },
        _deleteClick: function () {
            if (this._activityData && this._activityStore) {
                sageDialogs.raiseQueryDialogExt({
                    title: '',
                    query: this.areYouSureText,
                    callbackFn: function (result) {
                        if (result) {
                            this._activityStore.deleteEntity(this._activityData, this._successfulActivityDelete, this._failedActivityDelete, this);
                        }
                    },
                    yesText: this.okText,
                    noText: this.cancelText,
                    icon: 'questionIcon',
                    scope: this
                });
            }
        },
        _asScheduledClick: function () {
            this._completeActivity(this.dtp_scheduledDate.get('value'));
        },
        _nowClick: function () {
            this._completeActivity(this.dtp_completedDate.get('value'));
        },
        _completeActivity: function (completedDate) {
            if (this._isProcessing) {
                return;
            }
            this._isProcessing = true;
            /*
            to get the template:
            http://localhost:17966/SlxClient/slxdata.ashx/slx/system/-/activities/$service/complete/$template?format=json
            */
            if (this.mode === 'Complete') {
                var payload = {
                    "$name": "Complete",
                    "request": {
                        "entity": this._activityData,
                        "userId": this._currentUserId,
                        "result": this.pl_Result.get('value'),
                        "resultCode": '',
                        "completeDate": utility.Convert.toIsoStringFromDate(completedDate)
                    }
                };

                var request = new Sage.SData.Client.SDataServiceOperationRequest(sDataServiceRegistry.getSDataService('system'))
	                .setResourceKind('activities')
	                .setOperationName('Complete');
                request.execute(payload, {
                    success: this._successfulComplete,
                    failure: this._failedComplete,
                    scope: this
                });
            } else if (this.mode === 'CompleteUnscheduled') {
                var histStore = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'history',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
                utility.setValue(this._activityData, 'CompletedDate', utility.Convert.toIsoStringFromDate(completedDate));
                utility.setValue(this._activityData, 'Result', this.pl_Result.get('value'));
                histStore.saveNewEntity(this._activityData, this._successfulComplete, this._failedComplete, this);
            }
        },
        _okClick: function () {
            var activeElement = focusUtil.curNode;
            if(activeElement){
                activeElement.blur();
            }
            // IE8 has an issue where the value is saved before the blur realizes the value has changed
            //  and setting a timeout of 1 is enough for the change to be seen after the blur
            setTimeout(lang.hitch(this, function() {
            this._saveAndClose();
            }), 1);
        },
        _saveAndClose: function () {
            var alarmTime = this.sel_AlarmDur.get('timeValue');
            //Alarm Time should never have a timeless date so fix it duration picker adds it.
            if (alarmTime.getSeconds() === 5) {
                alarmTime = new Date(alarmTime.getFullYear(), alarmTime.getMonth(), alarmTime.getDate(), alarmTime.getHours(), alarmTime.getMinutes(), 0);
            }
            if (this.mode === 'New') {
                if (this._attachmentList) {
                    var attachments = this._attachmentList.getNewAttachments();
                    if (attachments.length > 0) {
                        this._activityData.Attachment = true;
                    }
                }
                this._currentUserActivitySaved = true;
                utility.setValue(this._activityData, 'Alarm', this.cb_Alarm.get('checked'));
                utility.setValue(this._activityData, 'AlarmTime', utility.Convert.toIsoStringFromDate(alarmTime));
                this._activityStore.saveNewEntity(this._activityData, this._successfulActivitySave, this._failedActivitySave, this);
            } else {
                this._activityData.Attachment = this._activityData.AttachmentCount > 0 ? true : false;
                if (this._currentUserActivityData) {
                    //if it hasn't changed, don't bother posting...
                    if (utility.getValue(this._activityData, 'RecurrenceState') === 'rstOccurrence') {
                        //Set the current alarm and alarmtime values onto the activity 
                        // and don't save the user activity since we are creating an exception...
                        utility.setValue(this._activityData, 'Alarm', this.cb_Alarm.get('checked'));
                        utility.setValue(this._activityData, 'AlarmTime', utility.Convert.toIsoStringFromDate(alarmTime));
                        this._currentUserActivitySaved = true;
                    } else if ((this._tempUAData) && (this._tempUAData.Alarm === this._currentUserActivityData.Alarm
                            && this._tempUAData.AlarmTime.getTime() === alarmTime.getTime())) {
                        this._currentUserActivitySaved = true;
                    } else {
                        delete (this._currentUserActivityData.Activity);
                        this._currentUserActivityData.AlarmTime = utility.Convert.toIsoStringFromDate(alarmTime);
                        this._currentUserActivityStore.save({
                            scope: this,
                            success: this._successfulCurrentUserActivitySave,
                            failure: this._failedUserActivitySave
                        });
                    }
                } else {
                    utility.setValue(this._activityData, 'AlarmTime', utility.Convert.toIsoStringFromDate(alarmTime));
                    this._currentUserActivitySaved = true;
                }
                if (this._activityData.AllowEdit) {
                    this._activityStore.save({
                        scope: this,
                        success: this._successfulActivitySave,
                        failure: this._failedActivitySave
                    });
                } else {
                    this._activitySaved = true;
                    this._userActivitiesSaved = true;
                    this._resourcesSaved = true;
                    this._resourcesRemoved = true;
                    this._attachmentsSaved = true;
                    this._hideIfComplete();
                }
            }
        },
        _successfulActivitySave: function (activity) {
            //create user_activity and resourceschedule items...
            if (this._activityData.LeaderChanged) {
                activity.LeaderChanged = true;
            }
            this._activityData = activity;
            var isNew = false;
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            if (this.activityId === '') {
                dojo.publish('/entity/activity/create', [this._activityData, this]);
                isNew = true;
            }
            this.activityId = activity['$key'];  //Set this so that new UserActivities and ResourceSchedules can reference the parent...
            var hasMembers = false, hasResources = false;
            var ldr = activity.Leader['$key'];
            for (var i = 0; i < this._newAttendeesData.length; i++) {
                hasMembers = (hasMembers || (this._newAttendeesData[i]['Type'] === 'User' && this._newAttendeesData[i]['$key'] !== ldr));
                hasResources = (hasResources || this._newAttendeesData[i]['Type'] === 'Resource');
            }
            if (hasMembers) {
                var uareq = new Sage.SData.Client.SDataTemplateResourceRequest(sDataServiceRegistry.getSDataService('system'));
                uareq.setResourceKind('userActivities');
                uareq.read({
                    success: this._onGetUserActivityTemplate,
                    failure: this._failedUserActivitySave,
                    scope: this
                });
            } else {
                this._userActivitiesSaved = true;
            }
            if (hasResources) {
                var resreq = new Sage.SData.Client.SDataTemplateResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
                resreq.setResourceKind('resourceSchedules');
                resreq.read({
                    success: this._onGetResourceScheduleTemplate,
                    failure: this._failedUserActivitySave,
                    scope: this
                });
            } else {
                this._resourcesSaved = true;
            }
            this._attachmentsSaved = true;
            if (this._attachmentList) {
                var attachments = this._attachmentList.getNewAttachments();
                if (attachments.length > 0 && this.mode === 'New') {
                    this._saveAttachments(attachments);
                    this._attachmentsSaved = false;
                }
            }
            if (this._attendeesForRemoval.length > 0) {
                this._removeResources();
            } else {
                this._resourcesRemoved = true;
            }
            if (!this._completeAfterSaving && !isNew) {
                //we're just switching to complete mode, no need for other things to update UI yet...
                //console.log('finished saving;... mode: ' + this.mode);
                dojo.publish('/entity/activity/change', [activity, this]);
            }
            this._activitySaved = true;
            this._hideIfComplete();
        },
        _saveAttachments: function (attachments) {
            this._attachmentRequests = attachments.length;
            for (var i = 0; i < attachments.length; i++) {
                var att = attachments[i];
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                req.setResourceKind('attachments');
                req.setResourceSelector('\'' + att.$key + '\'');
                att.activityId = this.activityId;
                for (var p in this._activityData) {
                    if (p.substring(p.length - 2) === 'Id' && p !== 'UserId') {
                        var attProp = p.substring(0, 1).toLowerCase() + p.substring(1);
                        att[attProp] = this._activityData[p];
                    }
                }
                req.update(att, {
                    ignoreETag: true,
                    success: this._successfulAttachmentSave,
                    failure: this._failedAttachmentSave,
                    scope: this
                });

            }
        },
        _removeAttachments: function () {
            if (!this._attachmentList) {
                return;
            }
            var attachments = this._attachmentList.getNewAttachments();
            for (var i = 0; i < attachments.length; i++) {
                var att = attachments[i];
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                req.setResourceKind('attachments');
                req.setResourceSelector('\'' + att.$key + '\'');
                req['delete'](att, {
                    success: function () { },
                    failure: function () { },
                    scope: this
                });
            }
        },
        getRelationshipsForAttachments: function () {
            var obj = {};
            for (var p in this._activityData) {
                if (p.substring(p.length - 2) === 'Id' && p !== 'UserId') {
                    var attProp = p.substring(0, 1).toLowerCase() + p.substring(1);
                    obj[attProp] = this._activityData[p];
                }
            }
            if (this.mode === 'New' && !fileUtility.supportsHTML5File && !Sage.gears) {
                this._tempIdForAttachments = this._makeTempID();
                obj['activityId'] = this._tempIdForAttachments;
            }
            return obj;
        },
        doCarryOverAttachments: function (histId) {
            this._ensureAttachmentList();
            attachmentUtility.getAttachmentTemplate(function (template) {
                this._getHistoryAttachments(histId, template);
            }, this);
        },
        _getHistoryAttachments: function (histId, template) {
            var histReq = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('system'));
            histReq.setResourceKind('attachments');
            histReq.setQueryArg('where', 'historyId eq \'' + histId + '\'');
            histReq.read({
                success: function (data) {
                    var items = data['$resources'];
                    var mixin = {
                        activityId: this._makeTempID(),
                        historyId: null
                    };
                    var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                    req.setResourceKind('attachments');
                    if (items && items.length) {
                        var l = items.length;
                        for (var i = 0; i < l; i++) {
                            var oldAttach = dojoLang.mixin(items[i], mixin);
                            var newAttach = dojoLang.mixin(template, oldAttach);
                            delete newAttach.createDate;
                            delete newAttach.modifyDate;
                            delete newAttach.createUser;
                            delete newAttach.modifyUser;
                            delete newAttach.$key;
                            delete newAttach.$etag;
                            //set the fileName property to the physicalFileName value so that it
                            // doesn't add this new record's ID to the beginning of the physicalFileName.
                            // It can't find it when that happens.
                            newAttach.fileName = newAttach.physicalFileName;
                            newAttach.attachDate = utility.Convert.toIsoStringFromDate(new Date());

                            req.create(newAttach, {
                                success: function (savedAttachment) {
                                    dojo.publish('/entity/attachment/create', [savedAttachment]);
                                },
                                failure: function () {
                                    console.log('failed to carry over attachment');
                                },
                                scope: this
                            });
                        }
                    }
                },
                failure: function () { },
                scope: this
            });
        },
        _makeTempID: function () {
            if (!this._tempIdForAttachments) {
                var uid = this._currentUserId;
                var dstr = utility.Convert.toIsoStringFromDate(this.dtp_startDate.get('value'));
                dstr = dstr.replace(/[T:-]/g, '').substr(6, 6);
                this._tempIdForAttachments = 'NE' + uid.substr(uid.length - 4, 4) + dstr;
            }
            return this._tempIdForAttachments;
        },
        _attachmentRequests: 0,
        _successfulAttachmentSave: function (attachment) {
            this._attachmentRequests--;
            if (this._attachmentRequests < 1) {
                this._attachmentsSaved = true;
                this._hideIfComplete();
            }
        },
        _failedAttachmentSave: function () {
            this._attachmentRequests--;
            if (this._attachmentRequests < 1) {
                this._attachmentsSaved = true;
                this._hideIfComplete();
            }
        },
        _successfulCurrentUserActivitySave: function (userActivity) {
            this._currentUserActivitySaved = true;
            dojo.publish('/entity/userActivity/change', [userActivity, this]);
            this._hideIfComplete();
        },
        _successfulActivityDelete: function () {
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            dojo.publish('/entity/activity/delete', [this._activityData['$key'], this]);
            if (this._activityData['Timeless']) {
                dojo.publish('/entity/activity/timeless/delete', [this._activityData['$key'], this]);
            }
            this.hide();
        },
        _successfulComplete: function (request) {
            this._isProcessing = false;
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            var hist = request;
            if (this.mode === 'Complete') {
                if (request.Response) {
                    hist = request.Response;
                }
                dojo.publish('/entity/activity/delete', [this._activityData['$key'], this]);
                if (this._activityData['Timeless']) {
                    dojo.publish('/entity/activity/timeless/delete', [this._activityData['$key'], this]);
                }
            }
            dojo.publish('/entity/history/create', [hist, this]);
            var followUp = this.sel_Followup.get('value');
            switch (followUp) {
                case this.noneText:
                    this.hide();
                    return;
                case activityUtility.getActivityTypeName('atPhoneCall'):
                    //doing the circles because of localization...
                    followUp = 'atPhoneCall';
                    break;
                case activityUtility.getActivityTypeName('atAppointment'):
                    followUp = 'atAppointment';
                    break;
                case activityUtility.getActivityTypeName('atToDo'):
                    followUp = 'atToDo';
                    break;
            }
            var histId = null;
            if (this.mode === 'Complete') {
                if (request.Response) {
                    histId = request.Response.HistoryId;
                }
            }
            else {
                histId = hist.$key;
            }
            if (typeof histId === 'undefined' || histId === null) {
                this.hide();
                sageDialogs.showError(this.scheduleFollowUpErrorText);
                return;
            }
            var actMixin = this._getFollowUpActivityData(histId);
            this.hide();
            window.setTimeout(function () {
                var actsvc = Sage.Services.getService('ActivityService');
                if (actsvc) {
                    actsvc.scheduleActivity({ 'type': followUp, 'preConfigured': actMixin });
                }
            }, 250);
        },
        _getFollowUpActivityData: function (historyId) {
            var a = this._activityData;
            var ret = {
                AccountId: a.AccountId,
                AccountName: a.AccountName,
                ContactId: a.ContactId,
                ContactName: a.ContactName,
                Description: a.Description,
                LeadId: a.LeadId,
                LeadName: a.LeadName,
                OpportunityId: a.OpportunityId,
                OpportunityName: a.OpportunityName,
                TicketId: a.TicketId,
                TicketNumber: a.TicketNumber

            };
            if (this.ck_coNotes.get('checked')) {
                ret['LongNotes'] = a.LongNotes;
                ret['Notes'] = a.Notes;
            }
            if (this.ck_coAttachments.get('checked')) {
                ret['carryOverAttachmentsFrom'] = historyId;
            }
            return ret;
        },
        _failedActivitySave: function (request) {
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotSaveErrorText);

            console.log('an error occured saving activity %o', request);
            sageDialogs.showError(msg);
            this._completeAfterSaving = false;
        },
        _failedActivityDelete: function (request) {
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotDeleteErrorText);

            console.log('an error occured deleting %o', request);
            sageDialogs.showError(msg);
            this._completeAfterSaving = false;
        },
        _failedUserActivitySave: function (request) {
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotSaveErrorText);
            console.log('an error occured saving user activity %o', request);
            sageDialogs.showError(msg);
        },
        _failedResourceSave: function (request) {
            console.warn('an error occured saving resources %o', request);
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotSaveErrorText);
            sageDialogs.showError(msg);
        },
        _failedComplete: function (request) {
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotCompleteErrorText);
            console.log('an error occured completing activity %o', request);
            sageDialogs.showError(msg);
            this._isProcessing = false;
        },
        _onGetUserActivityTemplate: function (userActivity) {
            this._userActivitiesRequestCount = 0;
            var ldr = this.lup_Leader.get('selectedObject');
            ldr = ldr['$key'].substr(0, 12);
            var act = this._activityData;
            var alarmtime = utility.Convert.toDateFromString(act.AlarmTime);
            for (var i = 0; i < this._newAttendeesData.length; i++) {
                var nat = this._newAttendeesData[i];
                //don't post a useractivity for the leader...
                if (nat['Type'] === 'User' && nat['$key'] !== ldr) {
                    var newua = dojo.mixin({}, userActivity);
                    var setVals = {
                        User: { '$key': nat['$key'] },
                        ActivityId: this.activityId,
                        Activity: { '$key': this.activityId },
                        Alarm: act.Alarm,
                        AlarmTime: utility.Convert.toIsoStringFromDate(alarmtime),
                        Status: 'asUnconfirmed'
                    };
                    newua = dojoLang.mixin(newua, setVals);
                    var req = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('system'));
                    req.setResourceKind('userActivities');
                    this._userActivitiesRequestCount++;
                    req.create(newua, {
                        success: function (savedUserActivity) {
                            this._userActivitiesRequestCount--;
                            dojo.publish('/entity/userActivity/create', [savedUserActivity, this]);
                            if (this._userActivitiesRequestCount < 1) {
                                this._userActivitiesSaved = true;
                                this._hideIfComplete();
                            }
                        },
                        failure: this._failedUserActivitySave,
                        scope: this
                    });
                }
            }
            if (this._userActivitiesRequestCount < 1) {
                this._userActivitiesSaved = true;
                if (act.Timeless) {
                    dojo.publish('/entity/userActivities/timeless/saved', [act, this]);
                }
                this._hideIfComplete();
            }
        },
        _onGetResourceScheduleTemplate: function (resourceSched) {
            this._resourceRequestCount = 0;
            for (var i = 0; i < this._newAttendeesData.length; i++) {
                var nat = this._newAttendeesData[i];
                if (nat['Type'] === 'Resource') {
                    var newRe = dojoLang.mixin({}, resourceSched);
                    var act = this._activityData;
                    var sd = Sage.Utility.Convert.toDateFromString(act['StartDate']);
                    var ed = dojoDate.add(sd, 'minute', act['Duration']);
                    var setVals = {
                        ResourceId: nat['$key'],
                        ActivityId: this.activityId,
                        Description: nat['Name'],
                        StartDate: act['StartDate'],
                        EndDate: Sage.Utility.Convert.toIsoStringFromDate(ed),
                        UserId: act.Leader['$key']
                    };
                    newRe = dojoLang.mixin(newRe, setVals);
                    var req = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
                    req.setResourceKind('resourceSchedules');
                    this._resourceRequestCount++;
                    req.create(newRe, {
                        success: function (resourceSchedule) {
                            this._resourceRequestCount--;
                            if (this._resourceRequestCount < 1) {
                                this._resourcesSaved = true;
                                this._hideIfComplete();
                            }
                        },
                        failure: this._failedResourceSave,
                        scope: this
                    });
                }
            }
        },
        _removeResources: function () {
            this._resourceDeleteRequestCount = 0;
            for (var i = 0; i < this._attendeesForRemoval.length; i++) {
                var rem = this._attendeesForRemoval[i];
                var request;
                var predicate;
                var publishEvt;
                if (rem['type'] === 'user') {
                    request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('system'));
                    request.setResourceKind('userActivities');
                    predicate = dString.substitute("'ActivityId=${0};UserId=${1}'", [this.activityId, rem['id']]);
                    publishEvt = '/entity/userActivity/delete';
                } else {
                    request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
                    request.setResourceKind('resourceSchedules');
                    predicate = '\'' + rem['rsid'] + '\'';
                    publishEvt = '/entity/resourceSchedule/delete';
                }
                request.setResourceSelector(predicate);
                this._resourceDeleteRequestCount++;
                // create this scope object to maintain the correct event and ID to publish
                var scopeObj = {
                    notify: function () {
                        dojo.publish(this.evt, [this.predicate]);
                        this.editor._resourceDeleteRequestCount--;
                        if (this.editor._resourceDeleteRequestCount < 1) {
                            this.editor._resourcesRemoved = true;
                            this.editor._hideIfComplete();
                        }
                    },
                    evt: publishEvt,
                    predicate: predicate,
                    editor: this
                };

                var options = {
                    success: scopeObj.notify,
                    aborted: function () { },
                    failure: this._failedResourceSave,
                    scope: scopeObj
                };
                request['delete']({ '$key': predicate }, options);
            }
        },
        _cancelClick: function () {
            if (this.mode === 'New') {
                this._removeAttachments();
            }
            this.hide();
        },
        _hideIfComplete: function () {
            if (this._activitySaved && this._userActivitiesSaved && this._currentUserActivitySaved
                    && this._resourcesSaved && this._resourcesRemoved && this._attachmentsSaved) {
                var actId = this.activityId;
                if (this._completeAfterSaving) {
                    this._completeAfterSaving = false;
                    var svc = Sage.Services.getService('ActivityService');
                    if (svc) {
                        svc.completeActivity(actId);
                    }
                } else {
                    this.hide();
                }
            }
        },
        _acceptConfClick: function () {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.acceptConfirmation({
                notification: this._notificationData,
                success: this._successfulAcceptConfirmation,
                failure: this._failedAcceptDecline,
                scope: this
            });

        },
        _declineClick: function () {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.declineConfirmation({
                notification: this._notificationData,
                success: this._successfulDeclineConfirmation,
                failure: this._failedAcceptDecline,
                scope: this
            });
        },
        _deleteConfClick: function () {
            if (this._notificationData && this._notificationStore) {
                this._notificationStore.deleteEntity(this._notificationData, this._successfulNotificationDelete, this._failedActivityDelete, this);
            }
        },
        _getActivityDataFromNotificationData: function () {
            var activityId = null;
            var userId = null;
            if (this._notificationData) {
                if (this._notificationData.Activity) {
                    activityId = this._notificationData.Activity.$key;
                }
                if (this._notificationData.ToUser) {
                    userId = this._notificationData.ToUser.$key;
                }
            }
            var actObj = { 'activityId': activityId, 'userId': userId };
            return actObj;
        },
        _successfulAcceptConfirmation: function () {
            dojo.publish('/entity/activity/confirm', [this._getActivityDataFromNotificationData(), null]);
            this._successfulNotificationDelete();
        },
        _successfulDeclineConfirmation: function () {
            dojo.publish('/entity/activity/decline', [this._getActivityDataFromNotificationData(), null]);
            this._successfulNotificationDelete();
        },
        _successfulNotificationDelete: function () {
            dojo.publish('/entity/userNotification/delete', [this._notificationData['$key'], this]);
            this.hide();
        },

        // ... endregion

        //region lookup configs
        _ensureLookupsCreated: function () {
            if (!this.lup_Account) {
                this.createAccountLookup();
                this.createContactLookup();
                this.createOpportunityLookup();
                this.createTicketLookup();
                this.createLeadLookup();
                this.createLeaderlookup();
                this.createResourcesLookup();
            }
        },
        createAccountLookup: function () {
            this.accountLookupConfig = {
                id: '_activityAcc',
                structure: [
                    {
                        "cells": [
                            {
                                "name": this.accountText,
                                "field": "AccountName"
                            },
                            {
                                "name": this.cityText,
                                "field": "Address.City"
                            },
                            {
                                "name": this.stateText,
                                "field": "Address.State"
                            },
                            {
                                "name": this.mainPhoneText,
                                "field": "MainPhone"
                            },
                            {
                                "name": this.typeText,
                                "field": "Type"
                            },
                            {
                                "name": this.subTypeText,
                                "field": "SubType"
                            },
                            {
                                "name": this.statusText,
                                "field": "Status"
                            },
                            {
                                "name": this.acctMgrText,
                                "field": "AccountManager.UserInfo.UserName"
                            },
                            {
                                "name": this.ownerText,
                                "field": "Owner.OwnerDescription"
                            }
                        ],
                        "defaultCell": {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        }
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'accounts',
                    sort: [{ attribute: 'AccountName'}]
                },
                isModal: true,
                seedProperty: '',
                seedValue: '',
                overrideSeedValueOnSearch: false,
                initializeLookup: false,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupActText,
                dialogButtonText: this.okText
            },
            this.lup_Account = new Lookup({
                id: 'lu_account',
                allowClearingResult: true,
                showEntityInfoToolTip: true,
                readonly: true,
                config: this.accountLookupConfig
            });
            this.eventConnections.push(dojo.connect(this.lup_Account, 'onChange', this, '_accountChanged'));
            dojo.place(this.lup_Account.domNode, this.container_AccountLup.domNode, 'only');
        },
        createContactLookup: function () {
            this.contactLookupConfig = {
                id: '_activityContact',
                structure: [
                    { defaultCell: {
                        "sortable": true,
                        "width": "150px",
                        "editable": false,
                        "propertyType": "System.String",
                        "excludeFromFilters": false,
                        "useAsResult": false,
                        "pickListName": null,
                        "defaultValue": ""
                    },
                        cells: [
                        {
                            name: this.nameText,
                            field: 'NameLF'
                        }, {
                            name: this.accountText,
                            field: 'Account.AccountName'
                        }, {
                            name: this.cityText,
                            field: 'Address.City'
                        }, {
                            name: this.stateText,
                            field: 'Address.State'
                        }, {
                            name: this.workphoneText,
                            field: 'WorkPhone'
                        }, {
                            name: this.emailText,
                            field: 'Email'
                        }
                    ]
                    }],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'contacts',
                    sort: [{ attribute: 'NameLF'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupContactText,
                dialogButtonText: this.okText
            };
            this.lup_Contact = new Lookup({
                id: 'lu_contact',
                allowClearingResult: true,
                config: this.contactLookupConfig,
                readonly: true,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Contact, 'onChange', this, '_contactChanged'));
            dojo.place(this.lup_Contact.domNode, this.container_ContactLup.domNode, 'only');
        },
        createOpportunityLookup: function () {
            this.opportunityLookupConfig = {
                id: '_activityOpp',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.descriptionText,
                                field: 'Description'
                            }, {
                                name: this.acctMgrText,
                                field: 'AccountManager.UserInfo.UserName'
                            }, {
                                name: this.accountText,
                                field: 'Account.AccountName'
                            }, {
                                name: this.stageText,
                                field: 'Stage'
                            }, {
                                name: this.statusText,
                                field: 'Status'
                            }, {
                                name: this.ownerText,
                                field: 'Owner.OwnerDescription'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'opportunities',
                    sort: [{ attribute: 'Description'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupOpportunityText,
                dialogButtonText: this.okText
            };
            this.lup_Opportunity = new Lookup({
                id: 'lu_opportunity',
                allowClearingResult: true,
                config: this.opportunityLookupConfig,
                readonly: true,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Opportunity, 'onChange', this, '_opportunityChanged'));
            dojo.place(this.lup_Opportunity.domNode, this.container_OppLup.domNode, 'only');
        },
        createTicketLookup: function () {
            this.ticketLookupConfig = {
                id: '_activityTicket',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.ticketNumberText,
                                field: 'TicketNumber'
                            }, {
                                name: this.accountText,
                                field: 'Account.AccountName'
                            }, {
                                name: this.nameText,
                                field: 'Contact.NameLF'
                            }, {
                                name: this.phoneText,
                                field: 'Contact.WorkPhone'//,
                                //'styles': 'text-align: right;'
                            }, {
                                name: this.statusText,
                                field: 'StatusCode',
                                pickListName: 'Ticket Status',
                                propertyType: 'SalesLogix.PickList',
                                type: Sage.UI.Columns.PickList
                            }, {
                                name: this.urgencyText,
                                field: 'Urgency.Description'
                            }, {
                                name: this.areaText,
                                field: 'Area'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'tickets',
                    sort: [{ attribute: 'TicketNumber'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupTicketText,
                dialogButtonText: this.okText
            };
            this.lup_Ticket = new Lookup({
                id: 'lu_ticket',
                allowClearingResult: true,
                config: this.ticketLookupConfig,
                readonly: true,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Ticket, 'onChange', this, '_ticketChanged'));
            dojo.place(this.lup_Ticket.domNode, this.container_TicketLup.domNode, 'only');
        },
        createLeadLookup: function () {
            this.leadLookupConfig = {
                id: '_activityLead',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.leadFullNameText,
                                field: 'LeadFullName'
                            }, {
                                name: this.companyText,
                                field: 'Company'
                            }, {
                                name: this.cityText,
                                field: 'Address.City'
                            }, {
                                name: this.stateText,
                                field: 'Address.State'
                            }, {
                                name: this.postalText,
                                field: 'Address.PostalCode'
                            }, {
                                name: this.statusText,
                                field: 'Status'
                            }, {
                                name: this.workphoneText,
                                field: 'WorkPhone'//,
                                //'styles': 'text-align: right;'
                            }, {
                                name: this.ownerText,
                                field: 'Owner.OwnerDescription'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'leads',
                    sort: [{ attribute: 'LeadFullName'}]
                },
                isModal: true,
                initialLookup: false,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupLeadText,
                dialogButtonText: this.okText
            };
            this.lup_Lead = new Lookup({
                id: 'lu_lead',
                allowClearingResult: true,
                config: this.leadLookupConfig,
                readonly: true,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Lead, 'onChange', this, '_leadChanged'));
            dojo.place(this.lup_Lead.domNode, this.container_LeadLup.domNode, 'only');
        },
        createLeaderlookup: function () {
            var leaderLookupConfig = {
                id: '_activityLeader',
                structure: [
                    {
                        cells:
                            [
                                {
                                    name: this.nameText,
                                    field: 'Name',
                                    sortable: true,
                                    width: "400px",
                                    editable: false,
                                    propertyType: "System.String",
                                    excludeFromFilters: false,
                                    defaultValue: ""
                                }
                            ]
                    }
                ],
                gridOptions: {
                    contextualCondition: function () {
                        return 'AllowAdd AND (AccessId eq \'' + utility.getClientContextByKey('userID') + '\' OR AccessId eq \'EVERYONE\') AND Type eq \'User\'';
                    },
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'activityresourceviews',
                    sort: [{ attribute: 'Name'}]
                },
                isModal: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupLeaderText,
                dialogButtonText: this.okText
            };
            this.lup_Leader = new Lookup({
                id: 'lu_leader',
                readonly: true,
                config: leaderLookupConfig
            });
            this.eventConnections.push(dojo.connect(this.lup_Leader, 'onChange', this, '_leaderChanged'));
            dojo.place(this.lup_Leader.domNode, this.container_LeaderLup.domNode, 'only');
        },
        createResourcesLookup: function () {
            this.resourcesLookupConfig = {
                id: '_activityResources',
                btnToolTip: this.lookupResourcesText,
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells:
                        [
                            {
                                name: this.nameText,
                                field: 'Name'
                            }, {
                                name: this.typeText,
                                field: 'Type',
                                width: '100px'
                            }, {
                                name: this.locationText,
                                field: 'IsLocation',
                                propertyType: 'System.Boolean',
                                format: function (inRowIndex, inItem) {
                                    //console.log('a: ' + a + 'b: ' + b + 'c: ' + c);
                                    var type = utility.getValue(inItem, 'Type');
                                    if (!type) {
                                        return this.defaultValue;
                                    }
                                    if (type === 'User') {
                                        return '';
                                    }
                                    return (inItem['IsLocation'] === null || inItem['IsLocation'] === 'false') ? this.noText : this.yesText;
                                }
                            }, {
                                name: this.descriptionText,
                                field: 'Subtype',
                                width: '200px'
                            }
                        ]
                    }
                ],
                gridOptions: {
                },
                displayMode: 5,
                storeOptions: {
                    resourceKind: 'activityresourceviews',
                    select: ['AccessId', 'ResourceId', 'AllowAdd', 'AllowEdit', 'AllowDelete'],
                    sort: [{ attribute: 'Type' }, { attribute: 'Name'}]
                },
                isModal: true,
                initialLookup: false,
                preFilters: [],
                query: {
                    conditions: 'AllowAdd AND (AccessId eq \'' + this._currentUserId + '\' OR AccessId eq \'EVERYONE\')'
                },
                dialogTitle: this.lookupResourcesText,
                dialogButtonText: this.addResourceText,
                doSelected: function (items) {
                    var actEditor = dijit.byId('activityEditor');
                    if (actEditor) {
                        actEditor.addMembers(items);
                    }
                    this.lookupDialog.hide();
                }
            };
            this.lup_Resources = new Sage.UI.SDataLookup(this.resourcesLookupConfig);
            dojo.place(this.lup_Resources.domNode, this.container_ResourcesLup.domNode, 'only');
        },

        //end region lookup configs

        //Availability Tab functionality...
        _schedulerInitialized: false,
        _resetAttendeesList: function () {

            if (!this._schedulerInitialized) {
                // to override scheduler's create activity functionality:
                scheduler.showLightbox = function () { return false; };

                //for re-rendering the timeline when the left or right arrow clicked
                scheduler.config.timelineStep = 30; // get it from user option??
                scheduler.config.timelineStart = (this._options.calendar.dayStartTime * 2);
                scheduler.config.timelineSize = ((this._options.calendar.dayEndTime - this._options.calendar.dayStartTime) * 2);

                scheduler.createTimelineView({
                    name: "timeline",
                    x_unit: "minute",
                    x_date: "%g:%i",
                    x_step: scheduler.config.timelineStep,
                    x_start: scheduler.config.timelineStart,
                    x_size: scheduler.config.timelineSize,
                    //x_length:  96,  //show the whole day
                    y_unit: [],
                    y_property: "section_id",
                    render: "bar",
                    section_autoheight: false,
                    dy: 30  //min-height
                });
                scheduler.init('scheduler_here', new Date(), 'timeline');
                //don't allow dragging of activities...
                scheduler.attachEvent('onBeforeDrag', function () { return false; });
                //don't allow double clicking to create activity
                scheduler.config.dblclick_create = false;

                /*Added to highlight the current event timeline columns
                var act = this._activityData;
                var sd = Sage.Utility.Convert.toDateFromString(act['StartDate']);
                var ed = dojoDate.add(sd, 'minute', act['Duration']);

                //Used in dhtmlxscheduler_timeline.js to highlight the current events timeline columns
                scheduler.config.currentEventStartTime = sd;
                scheduler.config.currentEventEndTime = ed;*/

                var self = this;

                //To support rerender timeline view with different times on click of buttons
                dojo.query(".dhx_cal_prev_timeline_button").connect("onclick", function () {
                    if (!scheduler.config.timelineStart == 0) {
                        self.reRenderTimeline('left');
                    }
                });
                dojo.query(".dhx_cal_next_timeline_button").connect("onclick", function () {
                    if (scheduler.config.timelineStart + scheduler.config.timelineSize < 48) {
                        self.reRenderTimeline('right');
                    }
                });
                this._schedulerInitialized = true;
            }
            scheduler.clearAll();
        },

        _loadAttendeesData: function () {
            this._availabilityShowing = true;
            if (this.mode === 'New') {
                //create a mock attendee for the leader so it can be loaded into the list...
                var ldr = this.lup_Leader.get('selectedObject');
                var leaderName = ldr['$descriptor'],
                    leaderId = ldr['$key'].substr(0, 12);
                this.addMembers([{
                    $descriptor: leaderName,
                    $key: leaderId,
                    IsLocation: false,
                    Name: leaderName,
                    Subtype: '',
                    Type: 'User'
                }]);
                return;
            }
            var actid = this.activityId;
            if (!actid && this._activityData) {
                actid = this._activityData.$key;
            }
            if (!actid) {
                console.warn('could not find activityid for query to get attendee data');
                return;
            }
            realActivityId = actid.substr(0, 12);

            var req = new Sage.SData.Client.SDataNamedQueryRequest(Sage.Data.SDataServiceRegistry.getSDataService('mashups'))
                .setApplicationName('$app')
                .setResourceKind('mashups')
                .setQueryName('execute')
                .setQueryArg('_resultName', 'GetMembers')
                .setQueryArg('_activityId', realActivityId);
            req.uri.setCollectionPredicate("'ActivityFreeBusy'");
            req.read({
                success: dojo.hitch(this, this._onReceiveAttendees),
                failure: dojo.hitch(this, this._availabilityFailed)
            });
        },
        _attendeesTemplate: new Simplate([
            '<table class="attendee-item">',
                '<tr>',
                    '<td class="attendee-name">{%= $.name %}</td>',
                    '{% if (($.isNotLeader) && ($.allowDelete)) { %}',
                        '<td class="remove-attendee" id="{%= $.id %}"><img src="images/icons/Delete_16x16.png" alt="{%= $.removeText %}" title="{%= $.removeText %}" onclick="{%= $.deleteCode %}" /></td>',
                    '{% } %}',
                    '<td class="attendee-status"><img src="{%= $.img %}" alt="{%= $.imgToolTipText %}" title="{%= $.imgToolTipText %}"/></td>',
                '</tr>',
            '</table>'
        ]),
        _onReceiveAttendees: function (data) {
            this._attendeesData = data['$resources'];
            //if the leader has changed since the dialog opened, the old leader will need to be removed from this list...
            if (this._originalLeaderId && this._originalLeaderId !== this._activityData.Leader['$key']) {
                var len = this._attendeesData.length;
                for (var i = 0; i < len; i++) {
                    if (this._attendeesData[i]['id'] === this._originalLeaderId) {
                        this._attendeesData.splice(i, 1);
                        break;
                    }
                }
            }
            this._rebuildTimeLine();
            this._requestAvailability();
        },
        _rebuildTimeLine: function (scrollDirection) {
            var i;
            for (i = 0; i < this._deleteAttendeeConnects.length; i++) {
                dojo.disconnect(this._deleteAttendeeConnects[i]);
            }
            this._deleteAttendeeConnects = [];
            var y_units = [];
            var leaderYUnit = {};
            var memberUnits = [];
            var resourceUnits = [];
            var leaderId = this._activityData.Leader['$key'].trim();
            var deleteCode = "Sage.Utility.Activity.removeMember('${0}','${1}');";
            for (i = 0; i < this._attendeesData.length; i++) {
                var img = this._blankGif;
                var imgToolTipText = "";
                var status = this._attendeesData[i]['status'] || 0;
                if (status === 1 || status === 'asAccepted') {
                    img = 'images/icons/Accept.png';
                    imgToolTipText = this.acceptedText;
                } else if (status === 2 || status === 'asDeclned') {
                    img = 'images/icons/Decline.png';
                    imgToolTipText = this.declinedText;
                }
                var yUnit = {
                    key: this._attendeesData[i]['id'],
                    label: this._attendeesTemplate.apply({
                        name: this._attendeesData[i]['name'],
                        img: img,
                        imgToolTipText: imgToolTipText,
                        id: this._attendeesData[i]['id'],
                        isNotLeader: this._attendeesData[i]['id'].trim() !== leaderId,
                        allowDelete: this._canEdit(),
                        removeText: this.removeText,
                        deleteCode: dojo.string.substitute(deleteCode, [this.id, this._attendeesData[i]['id']])
                    })
                };
                if (this._attendeesData[i]['id'].trim() === leaderId) {
                    leaderYUnit = yUnit;
                } else if (this._attendeesData[i]['type'] === 'user') {
                    memberUnits.push(yUnit);
                } else {
                    resourceUnits.push(yUnit);
                }
            }
            y_units = (leaderYUnit.key) ? [leaderYUnit].concat(memberUnits.concat(resourceUnits)) : memberUnits.concat(resourceUnits);
            for (i = 0; i < this._newAttendeesData.length; i++) {

                y_units.push({
                    key: this._newAttendeesData[i]['$key'],
                    label: this._attendeesTemplate.apply({
                        name: this._newAttendeesData[i]['Name'],
                        img: this._blankGif,
                        id: this._newAttendeesData[i]['$key'],
                        isNotLeader: this._newAttendeesData[i]['$key'].trim() !== leaderId,
                        allowDelete: this._canEdit(),
                        removeText: this.removeText,
                        deleteCode: dojo.string.substitute(deleteCode, [this.id, this._newAttendeesData[i]['$key']])
                    })
                });
            }

            if (scrollDirection == "left") {
                if ((scheduler.config.timelineStart - scheduler.config.timelineSize) > 0) {
                    scheduler.config.timelineStart = scheduler.config.timelineStart - scheduler.config.timelineSize;
                } else {
                    scheduler.config.timelineStart = 0;
                }
            } else if (scrollDirection == "right") {
                var st = (scheduler.config.timelineSize + scheduler.config.timelineStart);
                if (st > (48 - scheduler.config.timelineSize)) {
                    scheduler.config.timelineStart = 48 - scheduler.config.timelineSize;
                } else {
                    scheduler.config.timelineStart = st;
                }
            }
            var self = this;
            scheduler.createTimelineView({
                name: "timeline",
                x_unit: "minute",
                x_date: "%g:%i",
                x_step: scheduler.config.timelineStep,
                x_start: scheduler.config.timelineStart,
                x_size: scheduler.config.timelineSize,
                //x_length:  96,  //show the whole day
                y_unit: y_units,
                y_property: "section_id",
                render: "bar",
                section_autoheight: false,
                dy: 30  //min-height
            });

            scheduler.setCurrentView(this._getActivityStartDate(), 'timeline');

        },
        _updateLocation: function (newLocation, isAdd) {
            var location = this._activityData.Location;
            if (!location || location === '') {
                if (isAdd) {
                    location = newLocation;
                }
            } else {
                var parts = location.split('; ');
                var newParts = [];
                var exists = false;
                for (var i = 0; i < parts.length; i++) {
                    if (parts[i] === newLocation) {
                        if (isAdd) {
                            exists = true;
                        } else {
                            continue;
                        }
                    }
                    newParts.push(parts[i]);
                }
                if (!exists && isAdd) {
                    newParts.push(newLocation);
                }
                location = newParts.join('; ');
            }
            Sage.Utility.setValue(this._activityData, 'Location', location);
            this.tb_Location.set('value', location);
        },
        _removeMember: function (args) {
            var i
            var id = args.memberId;
            var lst = [];
            for (i = 0; i < this._attendeesData.length; i++) {
                if (this._attendeesData[i]['id'] === id) {
                    if (this._attendeesData[i]['type'] === 'resource' && this._attendeesData[i]['IsLocation']) {
                        this._updateLocation(this._attendeesData[i]['name'], false); //sending false removes it from the location...
                    }
                    this._attendeesForRemoval.push(this._attendeesData[i]);
                } else {
                    lst.push(this._attendeesData[i]);
                }
            }
            this._attendeesData = lst;
            lst = [];
            for (i = 0; i < this._newAttendeesData.length; i++) {
                if (this._newAttendeesData[i]['$key'] === id) {
                    if (this._newAttendeesData[i]['Type'] === 'Resource' && this._newAttendeesData[i]['IsLocation'] === true) {
                        this._updateLocation(this._newAttendeesData[i]['Name'], false); //sending false removes it from the location...
                    }
                } else {
                    lst.push(this._newAttendeesData[i]);
                }
            }
            this._newAttendeesData = lst;
            this._rebuildTimeLine();
        },
        addMembers: function (items) {
            //this._requestAvailability();
            /* sample return obj...
            [{
            $descriptor: 'Lois Tomlin',  //and other sdata fields...
            $key: 'UDEMO...',
            IsLocation: false,
            Name: 'Lois Tomlin',
            Subtype: '....',
            Type: 'User'
            },{
            $descriptor: 'Room 10',
            $key: 'RDEMO...',
            IsLocation: true,
            Name: 'Room 10',
            Subtype: '....',
            Type: 'Resource'
            }]
            */
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (item['$key'].length > 12) {
                    item['$key'] = item['$key'].substr(0, 12);
                }
                if (this._isMember(item)) {
                    continue;
                }
                if (item['ResourceId']) {
                    item['$key'] = item['ResourceId'];
                }
                if (item['Type'] === 'Resource' && item['IsLocation'] === true) {
                    this._updateLocation(item['Name'], true);
                }
                this._newAttendeesData.push(item);
            }
            if (this._availabilityShowing) {
                this._rebuildTimeLine();
                this._requestAvailability();
            }
        },
        _isMember: function (newMember) {
            var i, len = this._attendeesData.length;
            for (i = 0; i < len; i++) {
                if (this._attendeesData[i]['id'] === newMember['$key']) {
                    return true;
                }
            }
            len = this._newAttendeesData.length;
            for (i = 0; i < len; i++) {
                if (this._newAttendeesData[i]['$key'] === newMember['$key']) {
                    return true;
                }
            }
            return false;
        },
        _updateUsersListWithNewLeader: function (oldLeaderId, newLeader) {
            //remove the old one...
            var i, len = this._attendeesData.length;
            for (i = 0; i < len; i++) {
                if (this._attendeesData[i]['id'] === oldLeaderId) {
                    this._attendeesData.splice(i, 1);
                    break;
                }
            }
            len = this._newAttendeesData.length;
            for (i = 0; i < len; i++) {
                if (this._newAttendeesData[i]['$key'] === oldLeaderId) {
                    this._newAttendeesData.splice(i, 1);
                    break;
                }
            }
            //add the new one...
            this.addMembers([{
                $descriptor: newLeader['$descriptor'],
                $key: newLeader['$key'],
                IsLocation: false,
                Name: newLeader['$descriptor'],
                Subtype: '',
                Type: 'User'
            }]);
        },
        _requestAvailability: function () {
            if (this._attendeesData.length < 1 && this._newAttendeesData.length < 1) {
                return;
            }
            var quotedIds = [];
            for (var i = 0; i < this._attendeesData.length; i++) {
                quotedIds.push('\'' + this._attendeesData[i]['id'] + '\'');
            }
            for (i = 0; i < this._newAttendeesData.length; i++) {
                quotedIds.push('\'' + this._newAttendeesData[i]['$key'] + '\'');
            }
            if (this._availabilityDataDateRange.fromDate) {
                //do we already have the data for these users for this date range?
                var startDate = Sage.Utility.Convert.toDateFromString(this._activityData['StartDate']);
                if ((startDate > this._availabilityDataDateRange.fromDate)
                    && (startDate < this._availabilityDataDateRange.toDate)
                    && (quotedIds.join('') === this._availabilityDataDateRange.users.join(''))) {
                    return;
                }
            }
            this._requestAvailabilityFor(quotedIds);
        },
        _availabilityDataDateRange: {
            fromDate: false,
            toDate: false,
            users: []
        },
        _requestAvailabilityFor: function (quotedIds) {
            var startDate = Sage.Utility.Convert.toDateFromString(this._activityData['StartDate']);
            var fromDate = dojoDate.add(startDate, 'day', -7);
            var toDate = dojoDate.add(startDate, 'day', 7);

            this._availabilityDataDateRange.fromDate = fromDate;
            this._availabilityDataDateRange.toDate = toDate;
            this._availabilityDataDateRange.users = quotedIds;

            var actsvc = Sage.Services.getService('ActivityService');
            if (actsvc) {
                var options = {
                    quotedIds: quotedIds,
                    startDate: fromDate,
                    endDate: toDate,
                    expandRecurrences: true,
                    includeTimless: false,
                    timelessOnly: false
                };
                actsvc.getActivityFreeBusyFor(this, options, this._onReceiveAvailability, this._availabilityFailed);
            }

        },
        _onReceiveAvailability: function (data) {
            this._availabilityData = data['$resources'];
            this._applyAvailability();
        },
        _applyAvailability: function () {
            scheduler.clearAll();
            for (var i = 0; i < this._availabilityData.length; i++) {
                var item = this._availabilityData[i];
                if (item.type === 262162 && item.itemId !== this._currentUserId) {
                    item['description'] = activityUtility.getActivityTypeName('atPersonal');
                }
                var isCurrentEvent = (item["activityId"] == this.activityId) ? true : false;
                var stDate = Sage.Utility.Convert.toDateFromString(item['startDate']);
                var eDate = dojoDate.add(stDate, 'minute', item['duration']);
                scheduler.addEvent(stDate, eDate, item['description'], null, { section_id: item['itemId'], activity_Id: item['activityId'], current_event: isCurrentEvent });
            }
        },
        reRenderTimeline: function (direction) {
            this._rebuildTimeLine(direction);
            this._applyAvailability();
        },

        _availabilityFailed: function (req, msg) {
            console.warn('Availability request failed.');
        },

        //end Availability tab...

        //Recurring tab functionality...

        _recurringStartDateChanged: function (newStart) {
            var stDate = this.dtp_startDate.get('value');
            if (newStart.getMonth() === stDate.getMonth() &&
                newStart.getDate() === stDate.getDate() &&
                    newStart.getFullYear() === stDate.getFullYear()) {
                return;
            }
            if (this._activityData.StartDate) {
                var currentStartDateHrs = Sage.Utility.Convert.toDateFromString(this._activityData.StartDate).getHours();
                var currentStartDateMins = Sage.Utility.Convert.toDateFromString(this._activityData.StartDate).getMinutes();
                newStart.setHours(currentStartDateHrs);
                newStart.setMinutes(currentStartDateMins);
            }
            this._activityData.StartDate = (newStart.getFullYear) ? utility.Convert.toIsoStringFromDate(newStart) : newStart;
            this.dtp_startDate.set('value', newStart);
            this._startDateChanged();
        },
        _recurringPeriodChanged: function (newPeriod) {
            this._handleAutoRolloverState();
        },
        _isOccurence: function () {
            if (this.activityId.length > 12) {
                return true;
            }
            return false;
        },
        _canEdit: function () {
            if ((this.mode === 'Confirm') || (!this._activityData.AllowEdit) || this._isOccurence()) {
                return false;
            }
            return true;
        },
        _emptyActivity: {
            "$key": "",
            "AccountId": null,
            "AccountName": "",
            "ActivityBasedOn": null,
            //"ActivityId": "",
            "Alarm": false,
            "AlarmTime": utility.Convert.toIsoStringFromDate(new Date()),
            "Attachment": false,
            "Category": null,
            "ContactId": null,
            "ContactName": "",
            "CreateDate": "",
            "CreateUser": "",
            "Description": "",
            "Duration": 15,
            "ForeignId1": null,
            "ForeignId2": null,
            "ForeignId3": null,
            "ForeignId4": null,
            "LeadId": null,
            "LeadName": "",
            "LongNotes": null,
            "Notes": null,
            "OpportunityId": null,
            "OpportunityName": null,
            "OriginalDate": "",
            "PhoneNumber": "",
            "Priority": null,
            "ProcessId": null,
            "ProcessNode": null,
            "ProjectId": null,
            "RecurIterations": 0,
            "RecurPeriod": 0,
            "RecurPeriodSpec": 0,
            "Recurring": false,
            "RecurSkip": "",
            "Rollover": false,
            "StartDate": utility.Convert.toIsoStringFromDate(new Date()),
            "TicketId": null,
            "TicketNumber": null,
            "Timeless": false,
            "Type": "atAppointment",
            "UserDef1": null,
            "UserDef2": null,
            "UserDef3": null,
            //"UserId": "",
            "AttachmentCount": null,
            "Location": null,
            "EndDate": "",
            "Resources": {},
            "Leader": { "$key": "" },
            "UserActivities": {},
            "UserNotifications": {}
        }
    });
    return activityEditor;

});

},
'Sage/MainView/ActivityMgr/nls/ActivityGroupContextService':function(){
﻿define("Sage/MainView/ActivityMgr/nls/ActivityGroupContextService", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            activityTabDisplayName: 'My Activities',
            litTabDisplayName: 'Literature',
            eventTabDisplayName: 'Events',
            confirmTabDisplayName: 'Confirmations',
            pastDueTabDisplayName: 'Past Due',
            alarmTabDisplayName: 'Alarms',
            allOpenTabDisplayName: 'All Open'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/TextBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/TextBox", [
       'dijit/form/ValidationTextBox',
       'dojo/dom-class',
       'dojo/query',
       'dojo/_base/declare'
],
function (validationTextBox, domClass, dojoQuery, declare) {
    var widget = declare("Sage.UI.Controls.TextBox", [validationTextBox], {
        maxLength: '',
        // textWithIcons allows for styling to be applied to a textbox where an icon accompanies the text inside the box.
        textWithIcons: false,
        shouldPublishMarkDirty: true,
        //.Net control behavior
        autoPostBack: false,
        
        // Attribute maps
        hotKey: '',
        _setHotKeyAttr: { node: 'textbox', type: 'attribute', attribute: 'accessKey' },
        
        slxchangehook: 'true',
        _setslxchangehookAttr: { node: 'focusNode', type: 'attribute', attribute: 'slxchangehook' },

        postCreate: function () {
            this.connect(this, 'onChange', this.onChanged);
            this.inherited(arguments);
        },
        startup: function (parameters) {
            if (this.textWithIcons) {
                var self = this;
                dojo.ready(function () {
                    if (dojoQuery('#' + self.id)[0]) {
                        var element = dojoQuery('#' + self.id)[0];
                        domClass.add(element.parentNode, 'textcontainer-with-icons');
                    }
                });
            }
            this.inherited(arguments);
        },
        onChanged: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if (this.autoPostBack) {
                __doPostBack(this.id, '');
            }
        },
        setAttribute: function (attr, val) {
            /* Hide deprecated warnings, due to the parser and _WidgetBase assuming focusNode is a dom node and not a widget */
            this.set(attr, val);
        }
    });

    return widget;
});

},
'Sage/Services/ActivityService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/Services/ActivityService", [
        'Sage/UI/Dialogs',
        'Sage/MainView/ActivityMgr/ActivityEditor',
        'Sage/MainView/ActivityMgr/EditEventEditor',
        'Sage/MainView/ActivityMgr/QuickCompleteEditor',
        'Sage/Services/ActivityActionProcessor',
        'Sage/Services/ActivityAction',
        'Sage/MainView/ActivityMgr/HistoryEditor',
        'Sage/MainView/ActivityMgr/OccurrenceOrSeriesQueryDlg',
        'Sage/Data/SingleEntrySDataStore',
        'Sage/Data/SDataServiceRegistry',
        'dojo/string',
        'Sage/Utility',
        'dojo/i18n!./nls/ActivityService',
        'dojo/_base/declare',
        'dojo/topic',
        'dojo/_base/lang'
],

function (
    Dialogs,
    ActivityEditor,
    EditEventEditor,
    QuickCompleteEditor,
    ActivityActionProcessor,
    ActivityAction,
    HistoryEditor,
    OccurrenceOrSeriesQueryDlg,
    SingleEntrySDataStore,
    sDataServiceRegistry,
    dString,
    sageUtility,
    nlsActivityService,
    declare,
    topic,
    lang
) {

    var activityService = declare('Sage.Services.ActivityService', null, {
        _defaultActivitManagerTabId: null,
        _activityEditor: false,
        _eventEditor: false,
        _historyEditor: false,
        _editOccSeriesDlg: false,
        _deleteOccSeriesDlg: false,
        _compOccSeriesDlg: false,
        _processor: false,
        _actCompleteQueue: false,
        _histCompleteQueue: [],

        //add these constructors as properties so they can be changed by customizations:
        activityEditorType: ActivityEditor,
        eventEditorType: EditEventEditor,
        historyEditorType: HistoryEditor,

        constructor: function () {
            dojo.mixin(this, nlsActivityService);

        },
        _ensureEditor: function () {
            if (!this._activityEditor) {
                this._activityEditor = new this.activityEditorType({ id: 'activityEditor' });
                this.onActivityEditorCreated(this._activityEditor);
            }
        },
        onActivityEditorCreated: function (editor) { },
        _ensureEventEditor: function () {
            if (!this._eventEditor) {
                this._eventEditor = new this.eventEditorType();
                this.onEventEditorCreated(this._eventEditor);
            }
        },
        onEventEditorCreated: function (editor) { },
        _ensureHistoryEditor: function () {
            if (!this._historyEditor) {
                this._historyEditor = new this.historyEditorType({ id: 'historyEditor' });
                this.onHistoryEditorCreated(this._historyEditor);
            }
        },
        onHistoryEditorCreated: function (editor) { },
        _ensureProcessor: function () {
            if (!this._processor) {
                this._processor = new ActivityActionProcessor();
            }
        },
        _getIdFromGridSelection: function () {
            var selectedItem = this.getSelectedItem();
            if (!selectedItem) {
                return false;
            }
            if (selectedItem.hasCompositeKey) {
                //Coming from User Activity entity
                return selectedItem.entity.Activity['$key'];
            } else {
                return selectedItem.id;
            }
        },
        _getRecurringFromGridSelection: function () {
            var isRecurring = false,
                selectedItem = this.getSelectedItem();
            if (selectedItem && selectedItem.entity) {
                if (selectedItem.entity.hasOwnProperty('Activity')) {
                    isRecurring = selectedItem.entity.Activity["Recurring"] === true;
                    if ((isRecurring) && (selectedItem.entity.Activity['RecurIterations'] < 0)) {
                        isRecurring = false; // reoccurnces that have no ending.
                    }
                } else {
                    isRecurring = selectedItem.entity["Recurring"] === true;
                    if ((isRecurring) && (selectedItem.entity['RecurIterations'] < 0)) {
                        isRecurring = false; // reoccurnces that have no ending.
                    }
                }
            }
            return isRecurring;
        },
        editActivity: function (id, isRecurring, memberId) {
            if (!id) {
                id = this._getIdFromGridSelection();
                isRecurring = this._getRecurringFromGridSelection();
            }
            if (!id) { return; }
            if (id.length === 12 && !isRecurring) {
                this._ensureEditor();
                this._activityEditor.set('mode', 'Update');
                this._activityEditor.set('activityId', id);
                this._activityEditor.set('activityMemberId', memberId);
                this._activityEditor.show();
            } else {
                this.editOccurrenceOrSeriesQuery(id, memberId);
            }
        },
        editOccurrence: function (id, startDate, memberId) {
            this._ensureEditor();
            this._activityEditor.set('mode', 'Update');
            this._activityEditor.set('activityId', id);
            this._activityEditor.set('activityMemberId', memberId);
            this._activityEditor.show();
        },
        editOccurrenceOrSeriesQuery: function (id, memberId) {
            if (!this._editOccSeriesDlg) {
                this._editOccSeriesDlg = new OccurrenceOrSeriesQueryDlg({ id: 'editOccSeriesQuery', mode: 'edit' });
                dojo.connect(this._editOccSeriesDlg, 'onSelectSeries', this, function (actid, mId) {
                    this.editActivity(actid.substring(0, 12), false, mId);
                });
                dojo.connect(this._editOccSeriesDlg, 'onSelectOccurrence', this, function (actid, startDate, mId) {
                    this.editOccurrence(actid, startDate, mId);
                });
            }
            this._editOccSeriesDlg.set('activityMemberId', memberId);
            this._editOccSeriesDlg.set('activityId', id);
            this._editOccSeriesDlg.show();
        },
        editTempActivity: function (id) {
            this._ensureEditor();
            this._activityEditor.set('mode', 'deleteOnCancel');
            this._activityEditor.set('activityId', id);
            this._activityEditor.show();
        },

        completeOccurrenceOrSeriesQuery: function (id) {
            if (!this._compOccSeriesDlg) {
                this._compOccSeriesDlg = new OccurrenceOrSeriesQueryDlg({ id: 'compOccSeriesQuery', mode: 'complete' });
                dojo.connect(this._compOccSeriesDlg, 'onSelectSeries', this, function (id) { this.completeActivity(id.substring(0, 12), false); });
                dojo.connect(this._compOccSeriesDlg, 'onSelectOccurrence', this, this.completeActivityOccurrence);
            }
            this._compOccSeriesDlg.set('activityId', id);
            this._compOccSeriesDlg.show();
        },
        scheduleActivity: function (args) {
            var type = args['type'] || args['Type'];
            if (type === 'CompleteActivity') {
                this.scheduleCompletedActivity(type, args);
                return;
            }

            this._ensureEditor();
            this._activityEditor.set('mode', 'New ' + args['type'] || 'Meeting');
            if (args.hasOwnProperty('preConfigured')) {
                this._activityEditor.show(args.preConfigured);
            } else {
                this.getActivityEntityContext(this._activityEditor, function (editor, context) {
                    editor.show(context);
                });
            }

        },
        completeActivityOccurrence: function (id, startDate) {
            this._ensureEditor();
            if (id.indexOf(';') < 0) {
                var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('system'))
                .setResourceKind('activities')
                .setQueryArg('select', 'StartDate')
                .setQueryArg('where', 'id eq \'' + id + '\'')  //if there is a start date, we should add that here...
                .setQueryArg('orderby', 'StartDate asc')
                .setQueryArg('count', '1');
                req.read({
                    success: function (data) {
                        var acts = data['$resources'];
                        if (acts.length > 0) {
                            this._activityEditor.set('mode', 'Complete');
                            this._activityEditor.set('activityId', acts[0]['$key']);
                            this._activityEditor.show();
                        }
                    },
                    scope: this
                });
            } else {
                this._activityEditor.set('mode', 'Complete');
                this._activityEditor.set('activityId', id);
                this._activityEditor.show();
            }
        },
        completeActivity: function (id, isRecurring) {
            var selectionContext = this._getSelectionContext(id, this.txtActivity, this.txtActivities);
            if (selectionContext.count > 1) {
                this.completeActivitiesInSelectionContext(selectionContext);
            } else {
                if (selectionContext.id) {
                    var selid = selectionContext.id;
                    if (selectionContext.selectionInfo && selectionContext.selectionInfo.selections[0].entity) {
                        var entity = selectionContext.selectionInfo.selections[0].entity;
                        if (selectionContext.selectionInfo.hasCompositeKey) {
                            //in this case we are looking at a list of UserActivities...
                            selid = entity["Activity"]["$key"];
                        }
                        if (selid.length === 12) {
                            //in case we are looking at a list of UserActivities...
                            if (entity.hasOwnProperty('Activity')) {
                                entity = entity.Activity;
                            }
                            isRecurring = entity['Recurring'] === true;
                            if ((isRecurring) && (entity['RecurIterations'] < 0)) {
                                isRecurring = false; // reoccurnces that have no ending.
                            }
                        }
                    }
                    if (selid.length === 12 && !isRecurring) {
                        this._ensureEditor();
                        this._activityEditor.set('mode', 'Complete');
                        this._activityEditor.set('activityId', selid);
                        this._activityEditor.show();
                    } else {
                        this.completeOccurrenceOrSeriesQuery(selid);
                    }
                }
            }
        },
        _quickCompleteConnections: [],
        completeActivitiesInSelectionContext: function (selectionContext) {
            if (selectionContext.count < 1) {
                return;
            }
            this._actCompleteQueue = selectionContext; //.selectionInfo.selections;
            var config = {
                selectionContext: selectionContext
            };
            var qce = new QuickCompleteEditor(config);
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteIndividually', this, '_completeActivitiesInQueue'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteNow', this, '_completeActivitiesNow'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteAsScheduled', this, '_completeActivitiesAsScheduled'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCancel', this, function () { this._actCompleteQueue = false; }));
            this._quickCompleteConnections.push(dojo.connect(qce._dialog, 'onHide', this, '_quickCompleteHide'));
            qce.show();
        },
        _actEditorHideConnection: null,
        _quickCompleteHide: function () {
            if (!this._completingActivitiesIndividually) {
                this._actCompleteQueue = false;
            }
            dojo.forEach(this._quickCompleteConnections, function (connection) {
                dojo.disconnect(connection);
            });
            this._quickCompleteConnections = [];
        },
        _completingActivitiesIndividually: false,
        _completeActivitiesInQueue: function () {
            this._completingActivitiesIndividually = true;
            this._ensureEditor();
            this._actEditorHideConnection = dojo.connect(this._activityEditor, 'onHide', this, this._completeNextActivityInQueue);
            this._completeNextActivityInQueue();
        },
        _completeNextActivityInQueue: function () {
            var nextActivity = this._actCompleteQueue.selectionInfo.selections.pop();
            var id = nextActivity.id;
            var recurring = false;
            if (nextActivity.entity) {
                var activity = nextActivity.entity.hasOwnProperty('Activity') ? nextActivity.entity['Activity'] : nextActivity.entity;
                if (this._actCompleteQueue.selectionInfo.hasCompositeKey) {
                    id = nextActivity.entity["Activity"]["$key"]; ;
                }
                recurring = (id.length > 12 || activity['Recurring'] === true);
            }
            this.completeActivity(id, recurring);
            if (this._actCompleteQueues.selectionInfo.selections.length < 1) {
                dojo.disconnect(this._actEditorHideConnection);
                this._completingActivitiesIndividually = false;
            }
        },
        _completeActivitiesAsScheduled: function (options) {
            var args = {
                selectionInfo: options.selectionContext.selectionInfo,
                mode: 'asScheduled',
                note: options.note,
                resultCode: options.resultCode
            };

            var action = new ActivityAction();
            action.set('OperationName', "completeActivities");
            action.set('PublishMap', "/entity/activity/change");
            action.set('args', args);
            action.execute({
                success: function (result) {
                    topic.publish("/entity/activity/bulkComplete", "true");
                },
                failure: function () {
                    Dialogs.showError(this.txtErrorActionMsg);
                }

            });

        },
        _completeActivitiesNow: function (options) {
            var args = {
                selectionInfo: options.selectionContext.selectionInfo,
                mode: 'completeNow',
                note: options.note,
                resultCode: options.resultCode

            };
            var action = new Sage.Services.ActivityAction();
            action.set('OperationName', "completeActivities");
            action.set('PublishMap', "/entity/activity/change");
            action.set('Args', args);
            action.execute({
                success: function (result) {
                    topic.publish("/entity/activity/bulkComplete", "true");
                },
                failure: function () {
                    Dialogs.showError(this.txtErrorActionMsg);
                }
            });
        },
        completeHistoriesInList: function (histIds) {
            if (histIds.length < 1) {
                return;
            }
            if (histIds.length === 1) {
                this.completeHistory(histIds[0]);
                return;
            }
            this._histCompleteQueue = histIds;
            var config = {
                selectionContext: {
                    count: histIds.length,
                    selectionInfo: { selectedIds: histIds }
                }
            };
            this._histCompleteQueue = histIds;
            var qce = new QuickCompleteEditor(config);
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteIndividually', this, '_completeHistoriesInQueue'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteNow', this, '_updateHistoriesFromQuickComplete'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCompleteAsScheduled', this, '_updateHistoriesFromQuickComplete'));
            this._quickCompleteConnections.push(dojo.connect(qce, 'onCancel', this, '_cancelCompleteHistoryQueue'));
            this._quickCompleteConnections.push(dojo.connect(qce._dialog, 'onHide', this, '_quickCompleteHide'));
            qce.show();
        },
        completeHistory: function (historyId) {
            this._ensureHistoryEditor();
            this._historyEditor.set('historyId', historyId);
            this._historyEditor.set('mode', 'Complete');
            this._historyEditor.show();
        },
        _histEditorHideConnection: null,
        _quickHistoryCompleteHide: function () {
            dojo.forEach(this._histEditorHideConnection, function (connection) {
                dojo.disconnect(connection);
            });
            dojo.forEach(this._actEditorHideConnection, function (connection) {
                dojo.disconnect(connection);
            });
            this._histEditorHideConnection = false;
            this._actEditorHideConnection = false;
        },
        _completeHistoriesInQueue: function () {
            this._ensureHistoryEditor();
            this._historyEditor._doingFollowup = false;
            this._histEditorHideConnection = dojo.connect(this._historyEditor, 'onHide', this, this._completeNextHisotryInQueue);
            this._completeNextHisotryInQueue();
        },
        _completeNextHisotryInQueue: function (e) {
            if (this._histCompleteQueue.length < 1) {
                dojo.disconnect(this._histEditorHideConnection);
                dojo.disconnect(this._actEditorHideConnection);
                return;
            }
            if (this._historyEditor._doingFollowup) {
                //this._historyEditor._doingFollowup = false;
                this._ensureEditor();
                if (this._actEditorHideConnection) {
                    dojo.disconnect(this._actEditorHideConnection);
                }
                this._actEditorHideConnection = dojo.connect(this._activityEditor, 'onHide', this, this._followupCompleteNextHistoryInQueue);
                return;
            }
            var histid = this._histCompleteQueue.pop();
            var self = this;
            this.completeHistory(histid);

        },
        _followupCompleteNextHistoryInQueue: function () {
            this._historyEditor._doingFollowup = false;
            this._completeNextHisotryInQueue();
        },
        _cancelCompleteHistoryQueue: function () {
            this._deleteHistoryFromQuickComplete();
        },
        _deleteHistoryFromQuickComplete: function () {
            var doDelete = function (histId) {
                var store = new SingleEntrySDataStore({
                    resourceKind: 'history',
                    //select: ['LongNotes', 'Result'],
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
                store.fetch({
                    predicate: '"' + histId + '"',
                    onComplete: function (history) {
                        store.deleteEntity(history, this, null, null);
                    },
                    onError: function () { },
                    scope: this
                });
            };
            var count = this._histCompleteQueue.length;
            for (var i = 0; i < count; i++) {
                doDelete(this._histCompleteQueue.pop());
            }
        },
        _updateHistoriesFromQuickComplete: function (options) {
            //this._completingActivitiesIndividually = true;
            var doUpdate = function (histId) {
                var store = new SingleEntrySDataStore({
                    resourceKind: 'history',
                    select: ['LongNotes', 'Result'],
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
                store.fetch({
                    predicate: '"' + histId + '"',
                    onComplete: function (history) {
                        history.Result = options.resultCode || history.Result;
                        history.LongNotes = (history.LongNotes) ? history.LongNotes + '\n' + options.note : options.note;
                        store.save({
                            scope: this,
                            success: function (hist) { dojo.publish('/entities/history/create', hist); },
                            failure: function () { }
                        });
                    },
                    onError: function () { },
                    scope: this
                });
            };
            var count = this._histCompleteQueue.length;
            for (var i = 0; i < count; i++) {
                doUpdate(this._histCompleteQueue.pop());
            }
        },
        completeNewActivity: function (type, args) {
            this._ensureEditor();
            if (!args || typeof args != 'object') {
                args = {};
            }
            args['Type'] = args['Type'] || type || 'atAppointment';
            this._activityEditor.set('mode', 'CompleteUnscheduled');
            this._activityEditor.show(args);
        },
        deleteActivity: function (id, isRecurring, callback) {
            var selectionContext = this._getSelectionContext(id, this.txtActivity, this.txtActivities);
            if (id) {
                if ((id.length === 12 && !isRecurring) || id.indexOf("ActivityId") > -1) {
                    this.deleteActivitiesInSelectionContext(selectionContext, callback);
                }
                else {
                    this.deleteOccurrenceOrSeriesQuery(id);
                }
                return;
            }
            if (selectionContext.count < 1) {
                return;
            }
            if (selectionContext.count > 1) {
                this.deleteActivitiesInSelectionContext(selectionContext);
            }
            else {
                var selectedItem = selectionContext.selectionInfo.selections[0];
                if (selectionContext.selectionInfo.hasCompositeKey) {
                    //Coming from User Activity entity
                    if (selectedItem.entity) {
                        id = selectedItem.entity["Activity"]["$key"];
                    }
                } else {
                    id = selectedItem.id;
                }
                isRecurring = false;
                if (selectedItem.entity) {
                    if (selectedItem.entity.hasOwnProperty('Activity')) {
                        isRecurring = selectedItem.entity.Activity["Recurring"] === true;
                    } else {
                        isRecurring = selectedItem.entity["Recurring"] === true;
                    }
                }
            }
            if (!id) { return; }
            if (id.length === 12 && !isRecurring) {
                this.deleteActivitiesInSelectionContext(selectionContext);
            } else {
                this.deleteOccurrenceOrSeriesQuery(id);
            }
        },
        deleteActivitiesInSelectionContext: function (selectionContext, onComplete, onCompleteScope) {
            if (selectionContext.count < 1) {
                return;
            }
            var actionDescription = this.txtActionDeleteActivites;
            var actionQuestion = String.format(this.txtActionDeleteActivitiesQuestion, selectionContext.count, selectionContext.name);
            var action = new ActivityAction();

            var args = {
                selectionInfo: selectionContext.selectionInfo
            };

            //Needed in Activity Calendar to remove the deleted event from calendar
            if (selectionContext.count === 1) {
                var selectedItem = selectionContext.selectionInfo.selections[0];
                if (selectedItem && selectedItem.id && selectedItem.id.indexOf("ActivityId") > -1) {
                    action.set('PublishMapWithId', "/entity/userActivity/delete");
                    action.set('ActivityId', selectedItem.id);
                } else if (selectedItem) {
                    action.set('PublishMapWithId', "/entity/activity/delete/single");
                    action.set('ActivityId', selectedItem.id);
                }
            }

            action.set('OperationName', "deleteActivities");
            action.set('PublishMap', "/entity/activity/delete");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQuestion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);

            if (onComplete) {
                var connect = dojo.connect(this._processor, 'onActionComplete', this, function (result) {
                    dojo.disconnect(connect);
                    onComplete.call(onCompleteScope || this, result);
                });
            }
            this._processor.start();
        },

        declineMemberConfirmation: function (actObj, memberId) {
            if (actObj && memberId) {
                var payload = {
                    "$name": "DeclineMember",
                    "request": {
                        "entity": actObj,
                        "memberId": memberId
                    }
                };
                var request = new Sage.SData.Client.SDataServiceOperationRequest(sDataServiceRegistry.getSDataService('dynamic'))
                    .setResourceKind('activities')
                    .setOperationName('DeclineMember');
                request.execute(payload, {
                    success: function (ua) {
                        var activityData = dString.substitute("'ActivityId=${0};UserId=${1}'", [actObj.$key, memberId]);
                        topic.publish("/entity/userActivity/delete", activityData);
                    },
                    failure: function () {

                    },
                    scope: this
                });
            }
        },

        deleteOccurrenceOrSeriesQuery: function (id) {
            if (!this._deleteOccSeriesDlg) {
                this._deleteOccSeriesDlg = new OccurrenceOrSeriesQueryDlg({ id: 'deleteOccSeriesQuery', mode: 'delete' });
                dojo.connect(this._deleteOccSeriesDlg, 'onSelectOccurrence', this, function (id) { this.deleteOccurrence(id); });
                dojo.connect(this._deleteOccSeriesDlg, 'onSelectSeries', this, function (id) { this.deleteAllOccurrence(id); });
            }
            this._deleteOccSeriesDlg.set('activityId', id);
            this._deleteOccSeriesDlg.show();
        },
        deleteOccurrence: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtActivity, this.txtActivities);
            this.deleteActivitiesInSelectionContext(selectionContext);
        },
        deleteAllOccurrence: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtActivity, this.txtActivities);
            if (selectionContext.count < 1) {
                return;
            }
            var actionDescription = this.txtActionDeleteActivites;
            var actionQuestion = String.format(this.txtActionDeleteActivitiesQuestion, selectionContext.count, selectionContext.name);
            var action = new ActivityAction();

            var args = {
                selectionInfo: selectionContext.selectionInfo
            };

            //Needed in Activity Calendar to remove the deleted event from calendar
            if (selectionContext.count === 1) {
                var selectedItem = selectionContext.selectionInfo.selections[0];
                if (selectedItem) {
                    action.set('PublishMapWithId', "/entity/activity/delete/recurrence");
                    action.set('ActivityId', selectedItem.id);
                }
            }

            action.set('OperationName', "deleteAllOccurrence");
            action.set('PublishMap', "/entity/activity/delete");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQuestion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();

        },
        snooze: function (id, options) {
            var selectionContext = this._getSelectionContext(id, this.txtAlarm, this.txtAlarms);
            var actionDescription = this.txtActionSnoozeAlarm;
            var actionQeustion = String.format(this.txtActionSnoozeQuestion, selectionContext.count, selectionContext.name, options.name);
            var action = new ActivityAction();
            var args = {
                selectionInfo: selectionContext.selectionInfo,
                interval: options.interval,
                duration: options.duration
            };
            action.set('OperationName', "SnoozeAlarms");
            action.set('PublishMap', "/entity/UserActivity/change");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();

        },

        snoozeAll: function (options) {

            var id = null;
            var selectionContext = this._getSelectionContext(id, this.txtAlarm, this.txtAlarms);
            selectionContext.mode = 'ALL';
            var actionDescription = this.txtActionSnoozeAlarm;
            var actionQeustion = String.format(this.txtActionSnoozeAllQuestion, selectionContext.name, options.name);
            var action = new ActivityAction();
            var args = {
                selectionInfo: selectionContext.selectionInfo,
                interval: options.interval,
                duration: options.duration
            };
            action.set('OperationName', "SnoozeAlarms");
            action.set('PublishMap', "/entity/UserActivity/change");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();

        },

        dismissAlarm: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtAlarm, this.txtAlarms);
            var actionDescription = this.txtActionDismissAlarms;
            var actionQeustion = String.format(this.txtActionDismissAlarmsQuestion, selectionContext.count, selectionContext.name);
            var action = new ActivityAction();
            var args = {
                selectionInfo: selectionContext.selectionInfo

            };

            action.set('OperationName', "DismissAlarms");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('PublishMap', "/entity/UserActivity/change");
            action.set('Args', args);

            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();

        },

        scheduleCompletedActivity: function (activityType) {

            if (activityType) {
                this._ensureHistoryEditor();
                this._historyEditor.set('activityType', activityType);
                this._historyEditor.set('mode', 'New');
                this._historyEditor.set('historyId', '');
                this.getActivityEntityContext(this._historyEditor, function (scope, context) {
                    scope.show(context);
                });
            }
            else {
                alert('Show Schedule Completed Dialog');
            }
        },


        insertNote: function () {

            this._ensureHistoryEditor();
            this._historyEditor.set('activityType', 'Note');
            this._historyEditor.set('mode', 'New');
            this._historyEditor.set('historyId', '');
            this.getActivityEntityContext(this._historyEditor, function (scope, context) {
                scope.show(context);
            });
        },

        editHistory: function (historyId) {
            if (!historyId) {
                historyId = this.getSelectedId();
            }
            if (!historyId) { return; }
            this._ensureHistoryEditor();
            this._historyEditor.set('mode', 'Edit');
            this._historyEditor.set('historyId', historyId);
            this._historyEditor.show();
        },

        scheduleEvent: function (args) {
            this._ensureEventEditor();
            this._eventEditor.set('mode', 'New');
            this._eventEditor.set('eventId', '');
            this._eventEditor.show(args);
        },
        editEvent: function (id) {
            if (!id) {
                id = this.getSelectedId();
            }
            if (!id) { return; }
            this._ensureEventEditor();
            this._eventEditor.set('mode', 'Update');
            this._eventEditor.set('eventId', id);
            this._eventEditor.show();
        },
        deleteEvent: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtEvent, this.txtEvents);
            var actionDescription = this.txtActionDeleteEvents;
            var actionQeustion = String.format(this.txtActionDeleteEventsQuestion, selectionContext.count, selectionContext.name);
            var args = {
                selectionInfo: selectionContext.selectionInfo

            };

            var action = new ActivityAction();

            //Needed in Activity Calendar to remove the deleted event from calendar
            if (selectionContext.count === 1) {
                var selectedItem = selectionContext.selectionInfo.selections[0];
                if (selectedItem) {
                    action.set('PublishMapWithId', "/entity/event/delete/single");
                    action.set('ActivityId', selectedItem.id);
                }
            }

            action.set('OperationName', "deleteEvents");
            action.set('PublishMap', "/entity/event/delete");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();

        },
        confirmActivityFor: function (actId, userId, callBack, callBackScope) {
            if (actId) {
                actId = actId.substring(0, 12);
            }
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('userNotifications');
            //req.setResourceSelector('"' + actId + ';' + userId + '"');
            req.setQueryArg('where', dString.substitute('ActivityId eq \'${0}\' and ToUser.Id eq \'${1}\'', [actId, userId]));
            req.setQueryArg('precedence', '0');
            req.read({
                success: function (userNotifications) {
                    if (userNotifications['$resources'] && userNotifications['$resources'].length > 0) {
                        if (callBack) {
                            callBack.call(callBackScope || this, userNotifications['$resources'][0]['$key']);
                        } else {
                            this.editConfirmation(userNotifications['$resources'][0]['$key'], userId);
                        }
                    } else {
                        //No notifications, so go ahead and edit...
                        this.editActivity(actId, false); //assume not recurring, the scenario that reaches this code is rare anyway.
                    }
                },
                failure: function () {
                    console.warn('could not find notification information for activity:' + actId + ' and user: ' + userId);
                },
                scope: this
            });
        },
        editActivityIfConfirmed: function (activityid, isRecurring) {
            if (!activityid) {
                activityid = this._getIdFromGridSelection();
                isRecurring = this._getRecurringFromGridSelection();
            }
            //Note - only call this method if the data you have does not know if the current user has accepted
            // the activity.
            var currentUser = sageUtility.getClientContextByKey('userID');
            var predicate = dString.substitute('"${0};${1}"',
                [(activityid.indexOf(';') > 0) ? activityid.substring(0, 12) : activityid,
                  currentUser]);

            var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('dynamic'))
                .setResourceKind('userActivities')
                .setResourceSelector(predicate);
            req.read({
                success: function (ua) {
                    if (ua.Status === 'asUnconfirmed') {
                        this.confirmActivityFor(activityid, currentUser);
                    } else {
                        this.editActivity(activityid, isRecurring);
                    }
                },
                failure: function () {
                    this.editActivity(activityid, isRecurring);
                },
                scope: this
            });
        },
        editConfirmation: function (id, memberId) {
            if (!id) {
                id = this.getSelectedId();
            };
            if (!id) { return; }
            this._ensureEditor();
            this._activityEditor.set('mode', 'Confirm');
            this._activityEditor.set('userNotificationId', id);
            this._activityEditor.set('activityMemberId', memberId);
            this._activityEditor.show();
        },
        acceptConfirmation: function (options) {
            var id = false;
            if (options) {
                // run business rule to accept the notification - notification entity and notes, etc. are in the options...
                if (options.id) {
                    id = options.id;
                } else if (options.notification) {
                    if (options.notes) {
                        options.notification.Notes = options.notes;
                    }
                    /*
                    to get the payload template:
                    http://localhost:6666/SlxClient/slxdata.ashx/slx/dynamic/-/userNotifications/$service/accept/$template?format=json
                    */
                    var payload = {
                        "$name": "Accept",
                        "request": {
                            "entity": options.notification,
                            "UserNotificationId": options.notification['$key']
                        }
                    };

                    var request = new Sage.SData.Client.SDataServiceOperationRequest(sDataServiceRegistry.getSDataService('dynamic'))
	                    .setResourceKind('usernotifications')
	                    .setOperationName('accept');
                    request.execute(payload, {
                        success: options.success || function () { },
                        failure: options.failure || function () { },
                        scope: options.scope || this
                    });
                    return;
                }
            }
            var selectionContext = this._getSelectionContext(id, this.txtConfirmation, this.txtConfirmations);
            if (selectionContext.count > 1) {
                // run silently to accept all selected items...
                var args = {
                    selectionInfo: selectionContext.selectionInfo,
                    mode: 'accept',
                    note: ''
                };
                var actionDescription = this.txtActionAcceptConfirmations;
                var actionQeustion = String.format(this.txtActionAcceptConfirmQuestion, selectionContext.count, selectionContext.name);
                var action = new ActivityAction();
                action.set('OperationName', "acceptConfirmations");
                action.set('PublishMap', "/entity/userNotification/change");
                action.set('ActionDescription', actionDescription);
                action.set('ActionMessage', actionQeustion);
                action.set('Args', args);
                this._ensureProcessor();
                this._processor.set('Action', action);
                this._processor.set('SelectionContext', selectionContext);
                this._processor.start();
            } else {
                //open editor to accept/decline the notification
                this.editConfirmation(selectionContext.id);
            }
        },
        declineConfirmation: function (options) {
            var id = false;
            if (options) {
                if (options.id) {
                    id = options.id;
                } else if (options.notification) {
                    // run business rule to decline the notification - notification entity and notes, etc. are in the options...
                    if (options.notes) {
                        options.notification.Notes = options.notes;
                    }
                    var payload = {
                        "$name": "Decline",
                        "request": {
                            "entity": options.notification,
                            "UserNotificationId": options.notification['$key']
                        }
                    };
                    var request = new Sage.SData.Client.SDataServiceOperationRequest(sDataServiceRegistry.getSDataService('dynamic'))
	                    .setResourceKind('usernotifications')
	                    .setOperationName('decline');
                    request.execute(payload, {
                        success: options.success || function () { },
                        failure: options.failure || function () { },
                        scope: options.scope || this
                    });
                    return;
                }
            }
            var selectionContext = this._getSelectionContext(id, this.txtConfirmation, this.txtConfirmations);
            if (selectionContext.count > 1) {
                // run silently to decline all selected items...
                var args = {
                    selectionInfo: selectionContext.selectionInfo,
                    mode: 'decline',
                    note: ''
                };
                var actionDescription = this.txtDeclineConfirmations;
                var actionQeustion = String.format(this.txtActionDeclineConfrimQuestion, selectionContext.count, selectionContext.name);
                var action = new ActivityAction();
                action.set('OperationName', "declineConfirmations");
                action.set('PublishMap', "/entity/userNotification/change");
                action.set('ActionDescription', actionDescription);
                action.set('ActionMessage', actionQeustion);
                action.set('Args', args);
                this._ensureProcessor();
                this._processor.set('Action', action);
                this._processor.set('SelectionContext', selectionContext);
                this._processor.start();
            } else {
                //open editor to accept/decline the notification
                this.editConfirmation(selectionContext.id);
            }
        },
        deleteConfirmation: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtConfirmation, this.txtConfirmations);
            var args = {
                selectionInfo: selectionContext.selectionInfo
            };
            var actionDescription = this.txtActionRemoveConfirmations;
            var actionQeustion = String.format(this.txtActionRemoveConfirmationsQuestion, selectionContext.count, selectionContext.name);
            var action = new ActivityAction();
            action.set('OperationName', "deleteConfirmations");
            action.set('PublishMap', "/entity/userNotification/change");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('Args', args);
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();
        },

        goToActivityAssociation: function (association, id) {
            if (!id) {
                id = this.getSelectedId();
            };
            if (!id) {
                return;
            }
            this._getActivityAssociationId(association, id, function (result) {
                var entityId = '';
                switch (result.Association) {
                    case 'Account':
                        entityId = result.AccountId;
                        break;
                    case 'Contact':
                        entityId = result.ContactId;
                        break;
                    case 'Opportunity':
                        entityId = result.OpportunityId;
                        break;
                    case 'Lead':
                        entityId = result.LeadId;
                        break;
                    case 'Ticket':
                        entityId = result.TicketId;
                        break;
                    default:

                }
                if (!entityId) {
                    return;
                }
                Sage.Link.entityDetail(association, entityId);
            });
        },

        goToLitRequest: function (id) {
            if (!id) {
                id = this.getSelectedId();
            };
            if (!id) {
                return;
            }
            Sage.Link.entityDetail('LitRequest', id);
        },

        scheduleLitRequest: function () {
            var url = 'Literature.aspx?modeid=Insert';
            document.location.href = url;
        },

        deleteLitRequest: function (id) {
            var selectionContext = this._getSelectionContext(id, this.txtLiteratureRequest, this.txtLiteratureRequests);
            var actionDescription = this.txtActionDeleteLiteratureRequests;
            var actionQeustion = String.format(this.txtActionDeleteLiteratureRequestsQuestion, selectionContext.count, selectionContext.name);
            var action = new ActivityAction();
            var args = {
                selectionInfo: selectionContext.selectionInfo
            };
            action.set('Args', args);
            action.set('OperationName', "deleteLitRequests");
            action.set('ActionDescription', actionDescription);
            action.set('ActionMessage', actionQeustion);
            action.set('PublishMap', "/entity/litRequest/change");
            this._ensureProcessor();
            this._processor.set('Action', action);
            this._processor.set('SelectionContext', selectionContext);
            this._processor.start();
        },

        getActivityEntityContext: function (scope, callback) {

            var cec = Sage.Services.getService('ClientEntityContext');
            var entityContext = cec.getContext();
            var entityType = entityContext.EntityType;
            var entityId = entityContext.EntityId;
            var context = {};
            if ((entityId === '') || (entityId === 'Insert')) {
                if (callback) {
                    callback(scope, context);
                }
                return;
            }
            switch (entityType) {
                case 'Sage.Entity.Interfaces.IAccount':
                    this.getAccountContext(entityContext, scope, callback);
                    break;
                case 'Sage.Entity.Interfaces.IContact':
                    this.getContactContext(entityContext, scope, callback);
                    break;
                case 'Sage.Entity.Interfaces.IOpportunity':
                    this.getOpportunityContext(entityContext, scope, callback);
                    break;
                case 'Sage.Entity.Interfaces.ILead':
                    this.getLeadContext(entityContext, scope, callback);
                    break;
                case 'Sage.Entity.Interfaces.ITicket':
                    this.getTicketContext(entityContext, scope, callback);
                    break;
                case 'Sage.Entity.Interfaces.IReturn':
                    this.getReturnContext(entityContext, scope, callback);
                    break;
                default:
                    if (callback) {
                        callback(scope, context);
                    }
            }
        },

        getAccountContext: function (entityContext, scope, callback) {

            //look up the primary contact...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('accounts');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + entityContext.EntityId + '"';
            req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'NameLF,IsPrimary,WorkPhone');
            req.setQueryArg('orderby', 'IsPrimary desc');  //rather than selecting "where IsPrimary", do it this way so we at least get something - if there is one that is primary, it will come back, otherwise, we'll just get one.
            req.setQueryArg('count', '1');  //only need one...
            req.read({
                success: function (data) {

                    var context = {
                        AccountId: entityContext.EntityId,
                        AccountName: entityContext.Description,
                        ContactId: '',
                        ContactName: '',
                        PhoneNumber: ''
                    };

                    var contacts = data['$resources'];

                    if (contacts.length > 0) {
                        var primaryContact = contacts[0];
                        context.ContactId = sageUtility.getValue(primaryContact, '$key');
                        context.ContactName = sageUtility.getValue(primaryContact, 'NameLF');
                        context.PhoneNumber = sageUtility.getValue(primaryContact, 'WorkPhone');
                    }
                    if (callback) {
                        callback(scope, context);
                    }
                },
                failure: function () {

                    var context = {
                        AccountId: entityContext.EntityId,
                        AccountName: entityContext.Description,
                        ContactId: '',
                        ContactName: '',
                        PhoneNumber: ''
                    };

                    if (callback) {
                        callback(scope, context);
                    }
                },
                scope: this
            });
        },


        getContactContext: function (entityContext, scope, callback) {
            //look up the contact and account...
            var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('contacts');
            req.setResourceSelector('"' + entityContext.EntityId + '"');
            req.setQueryArg('select', 'NameLF,IsPrimary,WorkPhone,Account,AccountName');
            req.read({
                success: function (contact) {
                    var context = {
                        AccountId: sageUtility.getValue(contact, 'Account.$key'),
                        AccountName: sageUtility.getValue(contact, 'AccountName'),
                        ContactId: entityContext.EntityId,
                        ContactName: sageUtility.getValue(contact, 'NameLF'),
                        PhoneNumber: sageUtility.getValue(contact, 'WorkPhone')
                    };
                    if (callback) {
                        callback(scope, context);
                    }
                },
                failure: function () {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: entityContext.EntityId,
                        ContactName: entityContext.Description,
                        PhoneNumber: ''
                    };

                    if (callback) {

                        callback(scope, context);
                    }
                },
                scope: this
            });
        },

        getOpportunityContext: function (entityContext, scope, callback) {
            var store = new SingleEntrySDataStore({
                include: ['Contacts', 'Account'],
                select: ['Description', 'Contacts/IsPrimary', 'Contacts/Contact/NameLF', 'Contacts/Contact/WorkPhone', 'Account/Id', 'Account/AccountName'],
                resourceKind: 'opportunities',
                service: sDataServiceRegistry.getSDataService('dynamic')
            });
            store.fetch({
                predicate: '"' + entityContext.EntityId + '"',
                onComplete: function (opp) {
                    var context = {
                        AccountId: opp.Account.$key,
                        AccountName: opp.Account.AccountName,
                        ContactId: '',
                        ContactName: '',
                        OpportunityId: entityContext.EntityId,
                        OpportunityName: opp.Description,
                        PhoneNumber: ''
                    };
                    var oppCons = opp.Contacts.$resources;
                    var isFirst = true;
                    for (var i = 0; i < oppCons.length; i++) {
                        if (oppCons[i].IsPrimary || isFirst) {
                            context['ContactId'] = oppCons[i].Contact.$key;
                            context['ContactName'] = oppCons[i].Contact.NameLF;
                            context['PhoneNumber'] = oppCons[i].Contact.WorkPhone || '';
                        }
                        isFirst = false;
                    }
                    if (callback) {
                        callback(scope, context);
                    }
                },
                onError: function () {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: '',
                        ContactName: '',
                        OpportunityId: entityContext.EntityId,
                        OpportunityName: entityContext.Description,
                        PhoneNumber: ''
                    };
                    if (callback) {
                        callback(scope, context);
                    }
                },
                scope: this
            });
        },

        getLeadContext: function (entityContext, scope, callback) {
            var store = new SingleEntrySDataStore({
                include: [],
                select: ['LeadFullName', 'Company', 'WorkPhone'],
                resourceKind: 'leads',
                service: sDataServiceRegistry.getSDataService('dynamic')
            });
            store.fetch({
                predicate: '"' + entityContext.EntityId + '"',
                onComplete: function (entity) {
                    var context = {
                        LeadId: entityContext.EntityId,
                        LeadName: entity.LeadFullName,
                        AccountName: entity.Company,
                        PhoneNumber: entity.WorkPhone
                    };
                    if (callback) {
                        callback(scope, context);
                    }
                },
                onError: function () {
                    var context = {
                        LeadId: entityContext.EntityId,
                        LeadName: entityContext.Description,
                        AccountName: '',
                        PhoneNumber: ''
                    };
                    if (callback) {
                        callback(scope, context);
                    }
                },
                scope: this
            });
        },

        getTicketContext: function (entityContext, scope, callback) {
            //look up the contact and account...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('tickets');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + entityContext.EntityId + '"';
            // req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'Account,Account/AccountName,Contact,Contact/NameLF,Contact/WorkPhone');
            //req.setQueryArg('orderby', 'IsPrimary desc');  //rather than selecting "where IsPrimary", do it this way so we at least get something - if there is one that is primary, it will come back, otherwise, we'll just get one.
            //req.setQueryArg('count', '1');  //only need one...
            req.read({
                success: function (data) {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: '',
                        ContactName: '',
                        TicketId: entityContext.EntityId,
                        TicketNumber: entityContext.Description,
                        PhoneNumber: ''
                    };
                    var contacts = data['$resources'];

                    if (contacts.length > 0) {
                        var contact = contacts[0];

                        context.AccountId = sageUtility.getValue(contact, 'Account.$key');
                        context.AccountName = sageUtility.getValue(contact, 'Account.AccountName');
                        context.ContactId = sageUtility.getValue(contact, 'Contact.$key');
                        context.ContactName = sageUtility.getValue(contact, 'Contact.NameLF');
                        context.PhoneNumber = sageUtility.getValue(contact, 'Contact.WorkPhone');
                    }
                    if (callback) {
                        callback(scope, context);
                    }

                },
                failure: function () {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: '',
                        ContactName: '',
                        TicketId: entityContext.EntityId,
                        TicketNumber: entityContext.Description,
                        PhoneNumber: ''
                    };

                    if (callback) {

                        callback(scope, context);
                    }
                },
                scope: this
            });

        },

        getReturnContext: function (entityContext, scope, callback) {
            //look up the contact and account...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('returns');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + entityContext.EntityId + '"';
            req.setQueryArg('select', 'Account,Account/AccountName,ReturnedBy,ReturnedBy/NameLF,ReturnedBy/WorkPhone,Ticket,Ticket/TicketNumber');
            req.read({
                success: function (data) {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: '',
                        ContactName: '',
                        TicketId: '',
                        TicketNumber: '',
                        PhoneNumber: ''
                    };
                    var returns = data['$resources'];

                    if (returns.length > 0) {
                        var rma = returns[0];

                        context.AccountId = sageUtility.getValue(rma, 'Account.$key');
                        context.AccountName = sageUtility.getValue(rma, 'Account.AccountName');
                        context.ContactId = sageUtility.getValue(rma, 'ReturnedBy.$key');
                        context.ContactName = sageUtility.getValue(rma, 'ReturnedBy.NameLF');
                        context.PhoneNumber = sageUtility.getValue(rma, 'ReturnedBy.WorkPhone');
                        context.TicketNumber = sageUtility.getValue(rma, 'Ticket.TicketNumber');
                        context.TicketId = sageUtility.getValue(rma, 'Ticket.$key');
                    }
                    if (callback) {
                        callback(scope, context);
                    }

                },
                failure: function () {
                    var context = {
                        AccountId: '',
                        AccountName: '',
                        ContactId: '',
                        ContactName: '',
                        TicketId: '',
                        TicketNumber: '',
                        PhoneNumber: ''
                    };

                    if (callback) {

                        callback(scope, context);
                    }
                },
                scope: this
            });

        },


        _getActivityAssociationId: function (association, activityId, callback) {

            //look up activity...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('activities');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + activityId + '"';
            req.setQueryArg('select', 'AccountId,ContactId,OpportunityId,TicketId,LeadId');
            req.read({
                success: function (data) {
                    var result = {
                        Association: association,
                        ActivityId: activityId,
                        AccountId: '',
                        ContactId: '',
                        OpportunityId: '',
                        TicketId: '',
                        LeadId: ''
                    };
                    var acts = data['$resources'];

                    if (acts.length > 0) {
                        var act = acts[0];

                        result.AccountId = sageUtility.getValue(act, 'AccountId');
                        result.ContactId = sageUtility.getValue(act, 'ContactId');
                        result.OpportunityId = sageUtility.getValue(act, 'OpportunityId');
                        result.TicketId = sageUtility.getValue(act, 'TicketId');
                        result.LeadId = sageUtility.getValue(act, 'LeadId');
                    }
                    if (callback) {
                        callback(result);
                    }

                },
                failure: function () {
                    var result = {
                        Association: association,
                        ActivityId: activityId,
                        AccountId: '',
                        ContactId: '',
                        OpportunityId: '',
                        TicketId: '',
                        LeadId: ''
                    };

                    if (callback) {
                        callback(result);
                    }
                },
                scope: this
            });
        },
        getActivityFreeBusyFor: function (scope, options, onSuccessCallback, onfailCallback) {
            var self = this;
            this.getResourceActivitiesFor(self, options,
            function (resourceData) {
                self.getUserActivitiesFor(self, options,
                function (userData) {
                    var freeBusyData = self._buildFreeBusyData(resourceData, userData);
                    if (onSuccessCallback) {
                        onSuccessCallback.call(scope, freeBusyData);
                    }
                },
                function (userData) {
                    if (onfailCallback) {
                        onfailCallback.call(scope, data);
                    }
                });
            },
            function (data) {

                if (onfailCallback) {

                    onfailCallback.call(scope, data);
                }
            });
        },
        getResourceActivitiesFor: function (scope, options, onSuccessCallback, onfailCallback) {
            var select = ['Timeless',
                      'Type',
                      'StartDate',
                      'Duration',
                      'Description',
                      'Resources/Resource'
                     ];
            var include = ['$descriptors'];
            var resourceKind = 'activities';
            var service = sDataServiceRegistry.getSDataService('system');
            var isoStartDate = sageUtility.Convert.toIsoStringFromDate(options.startDate);
            var isoEndDate = sageUtility.Convert.toIsoStringFromDate(options.endDate);
            var self = this;
            var where = "(Resources.ResourceId in (" + options.quotedIds.join(',') + "))" + dojo.string.substitute("and (Timeless ne true) and (StartDate between @${0}@ and @${1}@)", [isoStartDate, isoEndDate]);
            var request = new Sage.SData.Client.SDataResourceCollectionRequest(service);
            if (options.select) {
                select = options.select;
            }
            request.setResourceKind(resourceKind);
            request.setQueryArg('select', select.join(','));
            request.setQueryArg('where', where);
            request.setQueryArg('include', include.join(','));
            request.uri.queryArgs['_expandRecurrences'] = options.expandRecurrences;
            request.read({
                success: function (data) {
                    if (onSuccessCallback) {
                        var resourceData = self._processResourceActivityData(data);
                        onSuccessCallback.call(scope, resourceData);
                    }
                },
                failure: dojo.hitch(scope, onfailCallback)
            });
        },
        getUserActivitiesFor: function (scope, options, onSuccessCallback, onfailCallback) {
            var select = ['Timeless',
                      'Type',
                      'StartDate',
                      'Duration',
                      'Description',
                      'Leader',
                      'UserActivities/User',
                      'UserActivities/Status'
                     ];

            var include = ['$descriptors'];
            var resourceKind = 'activities';
            var service = sDataServiceRegistry.getSDataService('system');
            var isoStartDate = sageUtility.Convert.toIsoStringFromDate(options.startDate);
            var isoEndDate = sageUtility.Convert.toIsoStringFromDate(options.endDate);
            var self = this;
            var where = "(UserActivities.UserId in (" + options.quotedIds.join(',') + ")) and (Type ne 'atLiterature') and (UserActivities.Status ne 'asDeclned')" + dojo.string.substitute("and (StartDate between @${0}@ and @${1}@)", [isoStartDate, isoEndDate]);
            var request = new Sage.SData.Client.SDataResourceCollectionRequest(service);
            if (options.timelessOnly) {
                where = where + ' and (Timeless eq true)'
            } else {
                if (!options.includeTimless) {
                    where = where + ' and (Timeless ne true)'
                }
            }
            if (options.select) {
                select = options.select;
            }
            request.setResourceKind(resourceKind);
            request.setQueryArg('select', select.join(','));
            request.setQueryArg('where', where);
            request.setQueryArg('include', include.join(','));
            request.uri.queryArgs['_expandRecurrences'] = options.expandRecurrences;
            request.read({
                success: function (data) {
                    var cleanList = self._processUserActivityData(data);
                    if (onSuccessCallback) {
                        onSuccessCallback.call(scope, cleanList);
                    }
                },
                failure: dojo.hitch(scope, onfailCallback)
            });
        },
        _processUserActivityData: function (actvityData) {
            var cleanData = [];
            cleanData['$resources'] = [];
            var data = actvityData['$resources'];
            if (data) {
                var cnt = data.length;
                for (var i = 0; i < cnt; i++) {
                    var userActivityFound = false;
                    var activityId = data[i]["$key"];
                    if (data[i].UserActivities) {
                        var userActivities = data[i].UserActivities.$resources;
                        var ln = userActivities.length;
                        for (var j = 0; j < ln; j++) {
                            var userId = data[i].UserActivities.$resources[j].User.$key
                            var userActvityKey = userId + ':' + activityId
                            userActivityFound = cleanData[userActvityKey];
                            if (!userActivityFound) {
                                var userActView = {
                                    $Key: userActvityKey,
                                    UserId: data[i].UserActivities.$resources[j].User.$key,
                                    ActivityId: activityId,
                                    UserActivity: data[i].UserActivities.$resources[j],
                                    Activity: data[i]
                                };
                                cleanData[userActvityKey] = userActView;
                                cleanData[userActvityKey] = userActvityKey;
                                cleanData['$resources'].push(userActView);
                                continue;
                            }

                        } //end for
                    } else {
                        //Personal Activities will not have User Activities
                        //Attach 'UserActvities.$resources' as this is the key on grid binding for userColor column
                        var uId = data[i].Leader.$key;
                        var userActvityKey = uId + ':' + activityId;
                        data[i].UserActivities = [];
                        data[i].UserActivities.$resources = [];
                        var userObj = {};
                        userObj.$key = uId;
                        userObj.User = { $key: uId };
                        data[i].UserActivities.$resources.push(userObj);
                        var userActView = {
                            $key: userActvityKey,
                            UserId: data[i].Leader.$key,
                            ActivityId: activityId,
                            UserActivity: data[i].UserActivities.$resources,
                            Activity: data[i]
                        };
                        userActivityFound = cleanData[userActvityKey];
                        if (!userActivityFound) {
                            cleanData[userActvityKey] = userActvityKey;
                            cleanData['$resources'].push(userActView);
                        }
                    }
                } //end for
            } //end if
            var resData = [];
            resData['$resources'] = cleanData['$resources']
            return resData;
        },
        _processResourceActivityData: function (actvityData) {
            var cleanData = [];
            cleanData['$resources'] = [];
            var data = actvityData['$resources'];
            if (data) {
                var cnt = data.length;
                for (var i = 0; i < cnt; i++) {
                    var resourceFound = false;
                    var activityId = data[i]["$key"];
                    if (data[i].Resources) {
                        var Resources = data[i].Resources.$resources;
                        var ln = Resources.length;
                        for (var j = 0; j < ln; j++) {
                            var resourceId = data[i].Resources.$resources[j].Resource.$key
                            var resourceActvitiyKey = resourceId + ':' + activityId
                            resourceFound = cleanData[resourceActvitiyKey];
                            if (!resourceFound) {
                                var resourceActView = {
                                    $Key: resourceActvitiyKey,
                                    ResourceId: resourceId,
                                    ActivityId: activityId,
                                    ResourceActivity: data[i].Resources.$resources[j],
                                    Activity: data[i]
                                };
                                cleanData[resourceActvitiyKey] = resourceActView;
                                cleanData[resourceActvitiyKey] = resourceActvitiyKey;
                                cleanData['$resources'].push(resourceActView);
                                continue;
                            } //end if
                        } //end for 
                    } //end if
                } //end for
            } //end if
            var resData = [];
            resData['$resources'] = cleanData['$resources']
            return resData;
        },
        _buildFreeBusyData: function (resourceData, userData) {
            var rData = resourceData['$resources'];
            var uData = userData['$resources'];
            var vData = [];
            vData['$resources'] = [];
            for (var i = 0; i < uData.length; i++) {
                var itemObj = {
                    id: uData[i].$key,
                    activityId: uData[i].ActivityId,
                    itemId: uData[i].UserId,
                    type: uData[i].Activity.Type,
                    startDate: uData[i].Activity.StartDate,
                    duration: uData[i].Activity.Duration,
                    timless: uData[i].Activity.Timeless,
                    description: uData[i].Activity.Description
                };
                vData['$resources'].push(itemObj);
            }
            for (var i = 0; i < rData.length; i++) {
                var itemObj = {
                    id: rData[i].$key,
                    activityId: rData[i].ActivityId,
                    itemId: rData[i].ResourceId,
                    type: rData[i].Activity.Type,
                    startDate: rData[i].Activity.StartDate,
                    duration: rData[i].Activity.Duration,
                    timless: rData[i].Activity.Timeless,
                    description: rData[i].Activity.Description
                };
                vData['$resources'].push(itemObj);
            }
            return vData;
        },
        getDefaultActivityManagerTabId: function () {
            if (!this._defaultActivitManagerTabId) {
                var optionsSvc = Sage.Services.getService('UserOptions');
                var self = this;
                if (optionsSvc) {
                    optionsSvc.get('DefaultView', 'ActivityAlarm', function (data) {
                        self._defaultActivitManagerTabId = self.getTabIdFromCode(data.value);
                    },
                    null,
                    this,
                    false
                    );
                }
            }
            return this._defaultActivitManagerTabId;
        },
        setDefaultActivityManagerTabId: function (tabId) {
            this._defaultActivitManagerTabId = tabId;
        },
        getTabIdFromCode: function (code) {
            var tabId = 'activities';
            switch (code) {
                case '0':
                    tabId = 'activities';
                    break;
                case '1':
                    tabId = 'allopen';
                    break;
                case '2':
                    tabId = 'pastdue';
                    break;
                case '3':
                    tabId = 'alarms';
                    break;
                case '4':
                    tabId = 'events';
                    break;
                case '5':
                    tabId = 'confirmations';
                    break;
                case '6':
                    tabId = 'literature';
                    break;
            }
            return tabId;
        },
        getSelectedId: function () {
            var selectionInfo = this.getSelectionInfo();
            var id = "";
            if (selectionInfo) {
                if (selectionInfo.hasCompositeKey) {
                    var entity = selectionInfo.selections[0].entity;
                    return entity["Activity"]["$key"];
                }
                if (selectionInfo.selections.length == 1) {
                    id = selectionInfo.selections[0].id;
                } else {
                    id = selectionInfo.selections[0].id;
                }
            }
            return id;
        },

        getSelectedItem: function () {
            var selectionInfo = this.getSelectionInfo();
            var selectedItem = { id: false, hasCompositeKey: false, entity: false };
            if (selectionInfo) {
                selectedItem.hasCompositeKey = selectionInfo.hasCompositeKey;
                selectedItem.entity = selectionInfo.entity;
                if (selectionInfo.selections.length == 1) {
                    selectedItem.id = selectionInfo.selections[0].id;
                    selectedItem.entity = selectionInfo.selections[0].entity;
                } else {
                    selectedItem.id = selectionInfo.selections[0].id;
                    selectedItem.entity = selectionInfo.selections[0].entity;
                }
            }
            return selectedItem;
        },


        getSelections: function () {
            var selectionInfo = this.getSelectionInfo();
            var selections = null;
            if (selectionInfo) {
                selections = selectionInfo.selections;
            }
            return selections;
        },
        prepareSelections: function () {
            return this.getSelectionInfo();
        },
        getSelectionInfo: function () {
            var selectionInfo = false;
            try {
                var panel = dijit.byId('list');
                if (panel) {
                    selectionInfo = panel.getSelectionInfo(true);
                }
            }
            catch (e) {
                Dialogs.alert(this.txtErrorActionMsg || "error getting selectionInfo");
            }
            return selectionInfo;
        },
        getTotalSelectionCount: function () {
            var count = 0;
            try {
                var panel = dijit.byId('list');
                if (panel) {
                    count = panel.getTotalSelectionCount();
                }
            }
            catch (e) {
            }
            return count;
        },

        verifySelection: function (selectionInfo) {
            if (selectionInfo != null) {
                return (selectionInfo.selectionCount != 0);
            }
            return false;
        },
        verifySingleSelection: function (selectionInfo) {
            if (selectionInfo != null) {
                return (selectionInfo.selectionCount === 1);
            }
            return false;
        },
        setSelectionCount: function () {
            try {
                var panel = dijit.byId('list');
                if (panel) {
                    $("#selectionCount").text(panel.getTotalSelectionCount());
                }
            }
            catch (e) {
            }
        },

        refreshList: function (tabId) {
            try {
                var panel = dijit.byId('list');
                if (panel) {
                    var grpContextSvc = Sage.Services.getService('ClientGroupContext');
                    if (grpContextSvc) {
                        var ctx = grpContextSvc.getContext();
                        if (tabId === ctx.CurrentGroupID) {
                            panel.refreshView(tabId);
                        }
                    }
                }
            }
            catch (e) {
            }
        },
        _getSelectionContext: function (id, singularName, pluralName) {
            var selectionContext = {
                id: null,
                selectionInfo: null,
                count: 0,
                mode: 'select',
                name: null
            };
            if (!id) {
                selectionContext.selectionInfo = this.getSelectionInfo();
                selectionContext.count = selectionContext.selectionInfo.selectionCount;
                if (selectionContext.count === 1) {
                    selectionContext.id = selectionContext.selectionInfo.selectedIds[0];
                }
            } else {
                var selectedIds = [];
                var selections = [];
                selectedIds.push(id);
                selections.push({ rn: 0, id: id });
                var selectionInfo = {
                    key: '',
                    mode: 'singleSelect',
                    selectionCount: 1,
                    recordCount: 1,
                    sortDirection: '',
                    sortField: '',
                    keyField: '',
                    hasCompositeKey: id.indexOf("Activity") > -1 ? true : false,
                    ranges: [],
                    selections: selections,
                    selectedIds: selectedIds
                };
                selectionContext.selectionInfo = selectionInfo;
                selectionContext.id = id;
                selectionContext.count = 1;
            }
            selectionContext.name = (selectionContext.count > 1) ? pluralName : singularName;
            return selectionContext;
        },


        getActivityService: function () {
            var service = sDataServiceRegistry.getSDataService('dynamic');
            return service;
        }


    }); // end dojo declare

    /**
    * Make an instance of this service available to the 
    * Sage.Services.getService method.
    */
    if (!Sage.Services.hasService('ActivityService')) {

        Sage.Services.addService('ActivityService', new activityService());

    }
    return activityService;
})

},
'Sage/UI/JsonPrintDetailPane':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/JsonPrintDetailPane", [
        'Sage/UI/_DetailPane',
        'Sage/_Templated',
        'dojo/_base/declare'
],
function (_DetailPane, _Templated, declare) {
    return declare('Sage.UI.JsonPrintDetailPane', [_DetailPane, _Templated], {
        widgetsInTemplate: true,
        contentNode: null,
        attributeMap: {
            'content': { node: 'contentNode', type: 'innerHTML' }
        },
        widgetTemplate: new Simplate([
            '<div class="json-print-detail-pane">',
            '<pre dojoAttachPoint="contentNode"></pre>',
            '</div>'
        ]),
        _onSelected: function (index, row, grid) {
            this.set('content', dojo.toJson(row, true));
        }
    });
});

},
'Sage/UI/Alarms/AlarmButton':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, sessionStorage */
define("Sage/UI/Alarms/AlarmButton", [
        'dojo/_base/declare',
        'Sage/_Templated',
        'dijit/_Widget',
        'Sage/Utility',
        'Sage/Utility/Activity',
        'dojo/string',
        'dojox/storage/LocalStorageProvider',
        'dojo/date',
        'dijit/form/ComboButton',
        'dojo/_base/event',
        'dojo/_base/lang',
        'dojo/dom-class',
        'Sage/Data/SDataServiceRegistry',
        'Sage/UI/Alarms/AlarmPopup',
        'Sage/UI/ImageButton',
        'Sage/Services/UserOptions'
],
function (
    declare,
    _Templated,
    _Widget,
    utility,
    activityUtility,
    dString,
    LocalStorageProvider,
    ddate,
    ComboButton,
    event,
    lang,
    domClass,
    sDataServiceRegistry) {
    var alarmButton = declare('Sage.UI.Alarms.AlarmButton', [_Widget, _Templated], {
        pastDueToolTipFmt: ' You have ${0} activities that are past due.',
        pastDueButtonIconClass: 'icon_alertIcon_16x16',
        widgetsInTemplate: true,
        options: {
            displayPastDueInToolbar: true,
            displayAlertsInToolbar: true,
            promptAlerts: true,
            includeAlarms: true,
            includeConfirmations: true,
            defaultSnooze: '5'
        },
        pollInterval: 1,
        _localStore: null,
        _alertCountKey: 'AlertsCount',
        _pastDueCountKey: 'PastDueCount',
        _started: false,
        _pastDueVisible: false,
        _alertBtnVisible: false,
        widgetTemplate: new Simplate([
            '<span class="alarm-button-container">',
                '<button data-dojo-type="Sage.UI.ImageButton" id="pastDueButton" imageClass="{%= $.pastDueButtonIconClass %}" class="past-due-button display-none" data-dojo-attach-point="_pastDueBtn" data-dojo-attach-event="onClick:_pastDueClick" >',
                '</button>',
                '<span id="alertButton" data-dojo-attach-point="_alertButton" class="alarm-button-container alarm-button display-none">', // displaynone
                    '<button data-dojo-type="dijit.form.ComboButton" data-dojo-attach-point="_button" data-dojo-attach-event="onClick:_cboClick" class="" >',
                        '<div data-dojo-type="Sage.UI.Alarms.AlarmPopup" id="alarmPopup" data-dojo-attach-point="_popup" data-dojo-attach-event="onClose:_popupClosed"></div>',
                    '</button>',
                '</span>',
            '</span>'
        ]),
        _setPollIntervalAttr: function (val) {
            this.pollInterval = val;
        },
        _getPollIntervalAttr: function () {
            return this.pollInterval;
        },
        startup: function () {
            if (this._started) {
                return;
            }
            this.inherited(arguments);
            this.connect(this._popup, 'onAlertChanged', this._alarmChanged);

            var optionsSvc = Sage.Services.getService('UserOptions');
            if (optionsSvc) {
                optionsSvc.getByCategory('ActivityAlarm', this._receivedOptions, this);
            }
            this._localStore = new LocalStorageProvider();
            this._localStore.initialize();

            //The ComboButton click causes a weird postback in IE8 in our environment
            // stopping the event in the button's valueNode stops that...
            if (this._button.valueNode) {
                this.connect(this._button.valueNode, 'click', function (e) {
                    event.stop(e);
                });
            }
        },
        _receivedOptions: function (options) {
            this._sortOptions(options['$resources'] || options);
            this._popup.set('options', this.options);
            //setting pollInterval to 0 will turn off the alarms for everybody regardless of the user options
            if ((this.options.displayPastDueInToolbar || this.options.displayAlertsInToolbar)
                && (this.pollInterval > 0)) {
                var self = this;
                window.setTimeout(function () {
                    self._poll();
                },
                15000);
                this._initializeButton();
            }
            this._started = true;
        },
        _sortOptions: function (options) {
            var evaluateBool = function (strVal) {
                return ((strVal === 'T') || (strVal === 'Y') || (strVal === '1'));
            };
            for (var i = 0; i < options.length; i++) {
                var option = options[i];
                switch (option.name) {
                    case 'DisplayPastDueInToolbar':
                        this.options.displayPastDueInToolbar = evaluateBool(option.value);
                        break;
                    case 'DisplayAlertsInToolbar':
                        this.options.displayAlertsInToolbar = evaluateBool(option.value);
                        break;
                    case 'PromptAlerts':
                        this.options.promptAlerts = evaluateBool(option.value);
                        break;
                    case 'DisplayAlertAlarms':
                        this.options.includeAlarms = evaluateBool(option.value);
                        break;
                    case 'DisplayAlertConfirmations':
                        this.options.includeConfirmations = evaluateBool(option.value);
                        break;
                    case 'DefaultSnooze':
                        this.options.defaultSnooze = option.value;
                        break;
                }
            }
            if (!this.options.includeAlarms && !this.options.includeConfirmations) {
                //no sense prompting anything if there is nothing to show...
                this.options.promptAlerts = false;
            }
        },
        _poll: function () {
            var req = new Sage.SData.Client.SDataNamedQueryRequest(sDataServiceRegistry.getSDataService('mashups'))
                .setApplicationName('$app')
                .setResourceKind('mashups')
                .setQueryName('execute')
                .setQueryArg('_resultName', 'GetCounts')
                .setQueryArg('_beforeDate', utility.Convert.toIsoStringFromDate(new Date()))
                .setQueryArg('_timelessBeforeDate', activityUtility.formatTimelessEndDate(new Date(), 'day', -1))
                .setQueryArg('_userId', utility.getClientContextByKey('userID'));
            req.uri.setCollectionPredicate("'RemindersAndAlarms'");
            req.read({
                success: lang.hitch(this, this._onReceiveCounts),
                failure: lang.hitch(this, this._countsFailed)
            });
        },
        _onReceiveCounts: function (data) {
            var resources = data['$resources'];
            if (resources && resources.length > 0) {
                var counts = resources[0];
                var alarms = (this.options.includeAlarms) ? counts['ringingAlarms'] : 0;
                var confs = (this.options.includeConfirmations) ? counts['notifications'] : 0;
                var pastDues = counts['pastDue'];

                this._handlePastDueCount(pastDues);
                this._handleAlertCount(alarms, confs);
            }
            var self = this;
            window.setTimeout(function () {
                self._poll();
            },
            this.pollInterval * 60000);
        },
        _countsFailed: function (req) {
            console.warn('could not acquire notification counts... %o', req);
        },
        /* Past Due button handling...   */
        _handlePastDueCount: function (pastDues) {
            if (pastDues > 0 && this.options.displayPastDueInToolbar) {
                this._showPastDue();
                var savedPastDues = this._getFromSessionStorage(this._pastDueCountKey) || 0;
                if (pastDues != savedPastDues) {
                    this._pastDueBtn.set('title', dString.substitute(this.pastDueToolTipFmt, [pastDues]));
                    this._pastDueBtn.set('label', pastDues);
                    this._saveToSessionStorage(this._pastDueCountKey, pastDues);
                }
            } else {
                this._hidePastDue();
            }
        },
        _showPastDue: function () {
            if (!this._pastDueVisible) {
                domClass.remove(this._pastDueBtn.domNode, 'display-none');
                this._pastDueVisible = true;
            }
        },
        _hidePastDue: function () {
            if (this._pastDueVisible) {
                domClass.add(this._pastDueBtn.domNode, 'display-none');
                this._pastDueVisible = false;
                this._pastDueBtn.set('title', '');
                this._pastDueBtn.set('label', '');
            }
        },
        _pastDueClick: function () {
            Sage.Link.toActivityListView('pastdue');
        },
        /* Alert handling...   */
        _initializeButton: function () {
            var savedPastDues = this._getFromSessionStorage(this._pastDueCountKey) || 0;
            if (this.options.displayPastDueInToolbar && (savedPastDues) > 0) {
                this._showPastDue();
                this._pastDueBtn.set('title', dString.substitute(this.pastDueToolTipFmt, [savedPastDues]));
                this._pastDueBtn.set('label', savedPastDues);
            }
            var savedAlertCount = this._getFromSessionStorage(this._alertCountKey) || 0;
            if (this.options.displayAlertsInToolbar && (savedAlertCount) > 0) {
                this._button.set('label', ' ' + savedAlertCount + ' ');
                this._showAlertButton();
            }
        },
        _handleAlertCount: function (alarms, confs) {
            if (this.options.displayAlertsInToolbar) {
                if (alarms > 0 || confs > 0) {
                    var countChanged = false;
                    var savedAlertCount = this._getFromSessionStorage(this._alertCountKey) || 0;
                    if ((savedAlertCount * 1) !== (alarms + confs)) {
                        countChanged = true;
                    }
                    savedAlertCount = alarms + confs;
                    this._saveToSessionStorage(this._alertCountKey, savedAlertCount);
                    this._button.set('label', ' ' + savedAlertCount + ' ');
                    this._showAlertButton();
                    this._checkShowPopup(countChanged, savedAlertCount);
                } else {
                    this._hideAlertButton();
                }
            }
        },
        _showAlertButton: function () {
            if (!this._alertBtnVisible) {
                domClass.remove(this._alertButton, 'display-none');
                this._alertBtnVisible = true;
            }
        },
        _hideAlertButton: function () {
            if (this._alertBtnVisible) {
                domClass.add(this._alertButton, 'display-none');
                this._alertBtnVisible = false;
            }
        },
        _checkShowPopup: function (countChanged, newCount) {
            if (!this.options.promptAlerts) {
                return;
            }
            if (countChanged) {
                this._popup._dataRequested = false;
            }
            //Removed the check "_haveWaitedLongEnough" to avoid the popup opening every 5 minutes
            if (!this._popup.isOpen && newCount > 0 && countChanged) {
                this._button.openDropDown();
            }
        },
        _cboClick: function (e) {
            (this._popup.isOpen) ? this._button.closeDropDown() : this._button.openDropDown();
            return false;
        },
        _popupClosed: function () {

        },
        _alarmChanged: function () {
            var items = this._popup.getAlertCount();
            if (items === 0) {
                dijit.popup.hide(this._popup);
                this._hideAlertButton();
            } else { 
                this._showAlertButton();
            }
            this._button.set('label', ' ' + items + ' ');
            this._saveToSessionStorage(this._alertCountKey, items);
        },
        _saveToSessionStorage: function (key, value) {
            sessionStorage.setItem(key, value);
        },
        _getFromSessionStorage: function (key) {
            return sessionStorage.getItem(key);
        }
    });

    return alarmButton;
});


},
'Sage/UI/Controls/_DialogHelpIconMixin':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
/* 
Mixin for creating a help icon in dijit/Dialogs (or anything that has a titleBar attach point)
*/
define("Sage/UI/Controls/_DialogHelpIconMixin", [
        'dojo/_base/declare',
        'dojo/dom-construct',
        'dojo/dom-attr',
        'dojo/i18n!./nls/_DialogHelpIconMixin'
//'Sage/Link' /* Circular ref between Link/Utility - Don't require this */
],
function (declare, domConstruct, domAttr, nls) {
    return declare('Sage.UI.Controls._DialogHelpIconMixin', null, {
        helpTopic: '',
        createHelpIcon: function (url, target) {
            // Bail out if there is no url or we already have an existing helpIcon
            if (!url || this.helpIcon) {
                //if we have multiple dialogs living in the same workspace the help icon may contain the wrong help context
                domConstruct.destroy(this.helpIcon);
            }

            var link = domConstruct.create('a', { href: url, 'target': target || 'help', 'class': 'dialogHelpIcon' }, this.titleBar, 'first'),
                node = domConstruct.create('div', { 'class': 'Global_Images icon16x16 icon_Help_16x16', title: nls.helpTooltip }, link);

            // Assign a helpIcon attach point for this.
            this.helpIcon = link;
        },
        createHelpIconByTopic: function (topic, subsystem) {
            if (!topic) {
                topic = this.helpTopic;
            } else {
                this.helpTopic = topic;
            }
            var target = Sage.Link.getHelpUrlTarget(),
                url = Sage.Link.getHelpUrl(topic, subsystem);
            this.createHelpIcon(url, target);
        },
        destroy: function () {
            domConstruct.destroy(this.helpIcon);
            this.inherited(arguments);
        },
        _setHelpTopicAttr: function (topic) {
            this.helpTopic = topic;
            if (this.helpIcon) {
                var url = Sage.Link.getHelpUrl(topic);
                domAttr.set(this.helpIcon, 'href', url);
            } else {
                this.createHelpIconByTopic(topic);
            }
        },
        _getHelpTopicAttr: function () {
            return this.helpTopic;
        }
    });
});
},
'Sage/TaskPane/TaskPaneContent':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/TaskPaneContent", [
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/TaskPane/TaskPaneItem',
        'dojo/_base/declare'
],
function (_Widget, _Templated, TaskPaneItem, declare) {
    var taskPaneContent = declare('Sage.TaskPane.TaskPaneContent', [_Widget, _Templated], {
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
             '<div dojoAttachPoint="taskletContainerNode" class="task-pane-item-common-tasklist">',
                '{% for (var i = 0; i < $.taskItems.length; i++) { ',
                    'var task = $.taskItems[i]; %}',
                    //convert to use data-dojo-attach-event="{%= task.clientAction %}"
                    '<div data-dojo-type="Sage.TaskPane.TaskPaneItem" linkText="{%= task.displayName %}" securedAction="{%= task.securedAction %}" action="javascript: {%= task.clientAction %}"></div>',
                    '<br />',
                '{% } %}',
            '</div>'
        ])
    });
    return taskPaneContent;
});
},
'Sage/UI/Alarms/AlarmCountDown':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/AlarmCountDown", [
    'Sage/_Templated',
    'dijit/_Widget',
    'Sage/Utility',
    'dojo/date',
    'dojo/html',
    'dojo/i18n',
    'dojo/i18n!./nls/AlarmCountDown',
    'dojo/_base/declare'
],
function (_Templated, _Widget, utility, dojoDate, dojoHtml,
    i18n, alarmCountDownStrings, declare) {
    var alarmCountDown = declare('Sage.UI.Alarms.AlarmCountDown', [_Widget, _Templated], {
        widgetsInTemplate: false,
        startDate: '',
        _isOverdue: false,
        _timer: false,
        widgetTemplate: new Simplate([
            '<div>',
                '<div dojoAttachPoint="_startsIn"></div>',
                '<div>',
                    '<span dojoAttachPoint="_countDownAmount" class="alarm-countdown"></span>',
                    '<span dojoAttachPoint="_countDownTimeFrame"></span>',
                '</div>',
                '<div dojoAttachPoint="_countDown2">',
                    '<span dojoAttachPoint="_countDown2Amount" class="alarm-countdown"></span>',
                    '<span dojoAttachPoint="_countDown2TimeFrame"></span>',
                '</div>',
            '</div>'
        ]),
        constructor: function () {
            dojo.mixin(this, alarmCountDownStrings);
        },
        postCreate: function () {
            this.inherited(arguments);
            var c = utility.Convert;
            if (c.isDateString(this.startDate)) {
                this.startDate = c.toDateFromString(this.startDate);
            }
            if (!this.startDate) {
                return;
            }
            this._calculate();
        },
        _calculate: function () {
            var n = new Date();
            var firstDate, secondDate;
            if (dojoDate.difference(this.startDate, n, 'minute') < 0) {
                firstDate = n;
                secondDate = this.startDate;
                this._isOverdue = false;
            } else {
                firstDate = this.startDate;
                secondDate = n;
                this._isOverdue = true;
            }
            var diff;
            if (firstDate.getFullYear() === secondDate.getFullYear()
                && firstDate.getMonth() === secondDate.getMonth()
                && firstDate.getDate() === secondDate.getDate()) {
                //happens today, show hours and minutes and keep updating...
                diff = dojoDate.difference(firstDate, secondDate, 'minute');
                if (diff < 61) {
                    //less than an hour, show just minutes
                    this._setUI(diff, (diff > 1) ? this.minutesText : this.minuteText);
                } else {
                    var minutes = diff % 60;
                    var hours = Math.floor(diff / 60);
                    this._setUI(hours, (hours > 1) ? this.hoursText : this.hourText,
                        minutes, (minutes > 1) ? this.minutesText : this.minuteText);
                }
                var self = this;
                window.setTimeout(function () { self._update(); }, 60000);
                return;
            }
            diff = dojoDate.difference(firstDate, secondDate, 'day');
            if (diff < 31) {
                //less than a month, show number of days
                this._setUI(diff, (diff > 1) ? this.daysText : this.dayText, false, false);
                return;
            }
            diff = dojoDate.difference(firstDate, secondDate, 'month');
            if (diff < 13) {
                //less than a year, show number of months
                this._setUI(diff, (diff > 1) ? this.monthsText : this.monthText, false, false);
                return;
            }
            //over a year, just show how many years
            diff = dojoDate.difference(firstDate, secondDate, 'year');
            this._setUI(diff, (diff > 1) ? this.yearsText : this.yearText);
        },
        _setUI: function (amt, timeframeText, amt2, timeframe2Text) {
            if (amt !== 0) {
                dojoHtml.set(this._startsIn, (this._isOverdue) ? this.overduebyText : this.startsInText);
                dojoHtml.set(this._countDownAmount, ' ' + amt + ' ');
                if (amt2) {
                    dojoHtml.set(this._countDown2Amount, ' ' + amt2 + ' ');
                    dojo.removeClass(this._countDown2, 'display-none');
                } else {
                    dojo.addClass(this._countDown2, 'display-none');
                }
            } else {
                dojoHtml.set(this._startsIn, '');
                dojoHtml.set(this._countDownAmount, '');
                timeframeText = this.startsNowText;
            }
            dojoHtml.set(this._countDownTimeFrame, timeframeText);
            if (timeframe2Text) {
                dojoHtml.set(this._countDown2TimeFrame, timeframe2Text);
            }
            if (this._isOverdue) {
                dojo.addClass(this.domNode, 'overdue-alarm');
            } else {
                dojo.removeClass(this.domNode, 'overdue-alarm');
            }
        },
        _update: function () {
            this._calculate();
        },
        destroy: function () {
            if (this._timer) {
                window.clearTimeout(this._timer);
            }
            this.inherited(arguments);
        }
    });
    return alarmCountDown;
});
},
'Sage/main':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/main", [
    //// Root Sage modules ////
    "Sage/_ActionMixin",
    "Sage/Utility",
    "Sage/LanguageList",
    "Sage/Link",
    "Sage/Array",
    "Sage/_ConfigurationProvider",
    "Sage/_Templated",
    "Sage/Format",
    //// Sub Sage modules ////
    "Sage/Data/main",
    "Sage/Store/main",
    // GroupBuilder only required in the Manage Groups dialog.
    //"Sage/GroupBuilder/main",
    "Sage/Groups/main",
    "Sage/Layout/main",
    "Sage/MailMerge/main",
    "Sage/MainView/main",
    "Sage/QuickForms/Design/main",
    "Sage/Services/main",
    "Sage/TaskPane/main",
    "Sage/UI/main",
    "Sage/Utility/main",
    "Sage/Workspaces/main",
    'dojo/i18n!dijit/nls/common'  //for multiple files in our modules
], function() {
	// module:
	//		Sage/main
	// summary:
	//		The Sage/main module provides loading of all sub Sage modules.
});
},
'Sage/QuickForms/Design/DataSourcePanel':function(){
define("Sage/QuickForms/Design/DataSourcePanel", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/_base/Deferred',
    'dojo/string',
    'dojo/dom',
    'dojo/on',
    'dojo/dom-attr',
    'dojo/dom-class',
    'dojo/dom-construct',
    'dojo/DeferredList',
    'dijit/_Widget',
    'Sage/Services/_ServiceMixin',
    'Sage/_EventMapMixin',
    'Sage/_Templated',
    'dojo/dnd/Source',
    'dojo/dnd/Manager',
    'dojo/i18n!./nls/DataSourcePanel'
], function(
    declare,
    array,
    lang,
    Deferred,
    string,
    dom,
    on,
    domAttr,
    domClass,
    domConstruct,
    DeferredList,
    _Widget,
    _ServiceMixin,
    _EventMapMixin,
    _Templated,
    Source,
    Manager,
    localization
) {
    var _Source = declare('Sage.QuickForms.Design.DataSourcePanelDnDSource', [Source], {
        avatarTemplate: new Simplate([
            '<div class="design-property" data-property-type="{%: $.data.dataTypeId %}">',
            '<div class="design-property-icon"></div>',
            '<span>{%: $.propertyPath %}</span>',
            '</div>'
        ]),
        owner: null,
        accept: ['none'],
        constructor: function() {
            this.creator = true; /* flag to enable use of _normalizedCreator */
            lang.mixin(this, localization);
            // The help link for the task pane is handled by base.master
            // so it needs to be manually manipulated here to be different
            // on the FormManager page
            var taskPaneHelpIcon = dojo.byId('TaskPane_taskPaneHelp');
            if(taskPaneHelpIcon) {
                taskPaneHelpIcon.target = '';
                taskPaneHelpIcon.href = 'javascript:Sage.Utility.openHelp("Adding_Data_Field");';
            }
        },
        checkAcceptance: function(fromSource, nodes) {
            if (fromSource == this) return false;

            return this.inherited(arguments);
        },
        onDropInternal: function(fromSource, nodes, copy) {
            /* do nothing */
        },
        onDropExternal: function(fromSource, nodes, copy) {
            /* do nothing */
        },
        onDndStart: function(fromSource, nodes, copy) {
            this.inherited(arguments);
        },
        onDndCancel: function() {
            this.inherited(arguments);
        },
        getItem: function(key) {
            var value = this.inherited(arguments),
                node = dom.byId(key),
                path = domAttr.get(node, 'data-property'),
                context = node && this.owner._context[path];

            return lang.mixin({
                context: context
            }, value);
        },
        /**
         * The `_normalizedCreator` method is used to generate a separate, style-able, avatar, instead of
         * overriding avatar creation globally or swapping methods in and out on drag start and cancel.
         *
         * @unsafe
         */
        _normalizedCreator: function(data, hint) {
            var context = this.owner._context[data],
                contentNode = domConstruct.toDom(this.avatarTemplate.apply(context, this)),
                containerNode = domConstruct.create('div', {
                    'class': 'design-surface-dnd-avatar'
                });

            domConstruct.place(contentNode, containerNode);

            return {node: containerNode};
        }
    });

    var DataSourcePanel = declare('Sage.QuickForms.Design.DataSourcePanel', [_Widget, _ServiceMixin, _EventMapMixin, _Templated], {
        events: {
            'li:click': true
        },
        serviceMap: {
            'dataService': { type: 'sdata', name: 'metadata' }
        },
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="design-property-panel">',
            '<div class="design-property-panel-search">',
                '<div>',
                    '<input type="text" data-dojo-attach-point="queryNode" />',
                '</div>',
                '<input type="button" />',
            '</div>',
            '<div class="design-property-panel-tree" data-dojo-attach-point="treeNode">',
            '</div>',
            '</div>'
        ]),
        containerTemplate: new Simplate([
            '<ul></ul>'
        ]),
        propertyTemplate: new Simplate([
            '<li class="design-property" data-property="{%: $.propertyPath %}" data-property-category="{%: $.type %}" data-property-type="{%: $.data.dataTypeId %}" data-action="_toggle">',
            '<div class="design-property-expando"></div>',
            '<div class="design-property-icon"></div>',
            '<span>{%: $.displayName %}</span>',
            '</li>'
        ]),
        loadingTemplate: new Simplate([
            '<ul class="design-property-loading"><li>{%: $.loadingText %}</li></ul>'
        ]),

        _context: null,
        _designGroup: null,
        _designGroupTopics: null,
        designGroup: 'default',
        queryNode: null,
        treeNode: null,
        sortProperty: 'propertyName',

        loadingText: 'Loading...',

        _getDesignGroupAttr: function() {
            return this._designGroup;
        },
        _setDesignGroupAttr: function(value) {
            if (this._designGroupTopics)
            {
                array.forEach(this._designGroupTopics, function(topic) {
                    this.unsubscribe(topic);
                }, this);
            }

            this._designGroup = value;
            this._designGroupTopics = [
                this.subscribe(string.substitute('/quickforms/design/${0}/clear', [this._designGroup]), this._onFormCleared),
                this.subscribe(string.substitute('/quickforms/design/${0}/load', [this._designGroup]), this._onFormLoaded)
            ];
        },
        constructor: function() {
            this._context = {};
            this._sources = [];
        },
        uninitialize: function() {
            if (this._sources)
            {
                array.forEach(this._sources, function(source) {
                    source.destroy();
                });
            }

            this._sources = [];
        },
        clear: function() {
            domConstruct.empty(this.treeNode);
            this._context = {};
        },
        _onFormCleared: function() {
            this.clear();
        },
        _onFormLoaded: function(entry) {
            var entity = entry['entity']['EntityTypeName'].substr(1);
            this._load(entity, this.treeNode);
        },
        _toggle: function(evt, node) {
            var path = domAttr.get(node, 'data-property'),
                context = this._context[path];
            if (context && context.data['entityName'])
            {
                if (context['loaded'])
                {
                    domClass.toggle(node, 'design-property-expanded');
                }
                else
                {
                    domClass.add(node, 'design-property-expanded');

                    context['loaded'] = true;

                    this._load(context.data['entityName'], node);
                }
            }
        },
        _load: function(entity, node) {
            var loader = domConstruct.place(this.loadingTemplate.apply(this, this), node);

            var wait = [],
                deferred;

            deferred = new Deferred();
            new Sage.SData.Client.SDataSingleResourceRequest(this.dataService)
                .setResourceKind('entities')
                .setResourceSelector('"' + entity + '"')
                .setQueryArg('select', 'properties/*')
                .read({
                    success: lang.hitch(this, this._onPropertyRequestSuccess, deferred, entity),
                    failure: lang.hitch(this, this._onRequestFailure, deferred)
                });

            wait.push(deferred);

            deferred = new Deferred();
            new Sage.SData.Client.SDataResourceCollectionRequest(this.dataService)
                .setResourceKind('relationships')
                .setQueryArg('where',
                    string.substitute(
                        '(parentEntity.name eq "${0}" and cardinality eq "M:1") or (childEntity.name eq "${0}" and cardinality eq "1:M")', [entity]
                    ))
                .read({
                    success: lang.hitch(this, this._onRelationshipRequestSuccess, deferred, entity),
                    failure: lang.hitch(this, this._onRequestFailure, deferred)
                });

            wait.push(deferred);

            deferred = new Deferred();
            new Sage.SData.Client.SDataResourceCollectionRequest(this.dataService)
                .setResourceKind('entities')
                .setQueryArg('where',
                    string.substitute(
                        'extendedEntity.name eq "${0}"', [entity]
                    ))
                .setQueryArg('select', 'extendedEntityPropertyName')
                .read({
                    success: lang.hitch(this, this._onExtendedRequestSuccess, deferred, entity),
                    failure: lang.hitch(this, this._onRequestFailure, deferred)
                });

            wait.push(deferred);

            new DeferredList(wait, false, true, true)
                .then(
                    lang.hitch(this, this._process, node, loader),
                    lang.hitch(this, this._error, node, loader)
                );
        },
        _onPropertyRequestSuccess: function(deferred, entity, feed) {
            deferred.resolve(feed['properties']['$resources']);
        },
        _onExtendedRequestSuccess: function(deferred, entity, feed) {
            var properties = array.map(feed['$resources'], function(entry) {
                return {
                    displayName: entry['$descriptor'],
                    propertyName: entry['$key'],
                    entityName: entry['$key']
                };
            });

            deferred.resolve(properties);
        },
        _onRelationshipRequestSuccess: function(deferred, entity, feed) {
            var relationships = [],
                entries = feed['$resources'];

            array.forEach(entries, function(entry) {
                if (entity == entry['parentEntity']['$key'] && entry['parentProperty']['isIncluded'])
                {
                    relationships.push({
                        displayName: entry['parentProperty']['displayName'],
                        propertyName: entry['parentProperty']['propertyName'],
                        propertyId: entry['parentProperty']['id'],
                        entityName: entry['childEntity']['$key'],
                        includes: array.map(entry['columns']['$resources'], function(column) {
                            return column['parentPropertyId'];
                        })
                    });
                }
                else if (entity == entry['childEntity']['$key'] && entry['childProperty']['isIncluded'])
                {
                    relationships.push({
                        displayName: entry['childProperty']['displayName'],
                        propertyName: entry['childProperty']['propertyName'],
                        propertyId: entry['childProperty']['id'],
                        entityName: entry['parentEntity']['$key'],
                        includes: array.map(entry['columns']['$resources'], function(column) {
                            return column['childPropertyId'];
                        })
                    });
                }
            }, this);

            deferred.resolve(relationships);
        },
        _onRequestFailure: function(deferred, request) {
            deferred.reject(request);
        },
        _error: function(node, loader, error) {
            domConstruct.destroy(loader);
        },
        _process: function(node, loader, results) {
            var basePath = domAttr.get(node, 'data-property'),
                included = {},
                relationships = [],
                properties = [],
                extended;

            array.forEach(results[1][1], function(result) {
                array.forEach(result['includes'], function(id) { included[id] = true; });

                relationships.push({
                    propertyPath: basePath ? basePath + '.' + result['propertyName'] : result['propertyName'],
                    propertyName: result['propertyName'],
                    displayName: result['displayName'] || result['propertyName'],
                    type: 'relationship',
                    data: result
                });
            });

            array.forEach(results[0][1], function(result) {
                if (included[result['id']]) {
                    return;
                }

                if (result['isIncluded']) {
                    properties.push({
                        propertyPath: basePath ? basePath + '.' + result['propertyName'] : result['propertyName'],
                        propertyName: result['propertyName'],
                        displayName: result['displayName'] || result['propertyName'],
                        type: 'standard',
                        data: result,
                        dataTypeData: result['dataTypeData'] ? dojo.fromJson(result['dataTypeData']) : {}
                    });
                }
            });

            extended = array.map(results[2][1], function(result) {
                return {
                    propertyPath: basePath ? basePath + '.' + result['propertyName'] : result['propertyName'],
                    propertyName: result['propertyName'],
                    displayName: result['displayName'] || result['propertyName'],
                    type: 'extended',
                    data: result
                };
            });

            var all = properties.concat(relationships, extended),
                sortOn = this.sortProperty;

            all.sort(function(a, b) {
                var nameA = a[sortOn],
                    nameB = b[sortOn];

                return (nameA < nameB)
                    ? -1
                    : (nameA > nameB)
                        ? 1
                        : 0;
            });

            domConstruct.destroy(loader);

            this.render(node, all);
        },
        render: function(node, properties) {
            var containerNode = domConstruct.place(this.containerTemplate.apply(this, this), node);
            var self = this;
            array.forEach(properties, function(property) {
                this._context[property.propertyPath] = property;

                var propertyNode = domConstruct.place(this.propertyTemplate.apply(property, this), containerNode);
                if (propertyNode && property['type'] == 'standard')
                {
                    domAttr.set(propertyNode, 'dndType', 'property');
                    domAttr.set(propertyNode, 'dndData', property.propertyPath);

                    domClass.add(propertyNode, 'dojoDndItem');
                } else {
                    on(propertyNode, 'mousedown', function () {
                        if (self._sources && self._sources.length > 0) {
                            self._sources[0].selectNone();
                        }
                    });
                }
            }, this);

            // create DnD source
            var source = new DataSourcePanel.Source(containerNode, {
                owner: this,
                copyOnly: true,
                selfAccept: false
            });

            source.startup();

            this._sources.push(source);
        }
    });

    DataSourcePanel.Source = _Source;

    return DataSourcePanel;
});
},
'Sage/Groups/GroupNavigator':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Groups/GroupNavigator", [
    'Sage/_Templated',
    'dijit/_Widget',
    'Sage/UI/ToolBarLabel',
    'Sage/UI/ImageButton',
    'Sage/Groups/GroupContextService',
    'Sage/Services/ClientEntityContext',
    'dojo/i18n!./nls/GroupNavigator',
    'dojo/_base/lang',
    'dojo/_base/declare',
    'dojo/topic'
],
function (_Templated, _Widget, ToolBarlabel, ImageButton, GroupContextService, ClientEntityContext, nls, lang, declare, topic) {
    var groupNavigator = declare('Sage.Groups.GroupNavigator', [_Widget, _Templated], {
        widgetsInTemplate: true,
        //i18n strings...
        firstText: 'Move First',
        previousText: 'Move Previous',
        nextText: 'Move Next',
        lastText: 'Move Last',
        listText: 'List View',
        labelFmtText: '${0} of ${1}',
        noRecordsText: 'No Records',
        id: 'groupNavigator',
        //end i18n strings
        _entityContextService: false,
        _groupContextService: false,
        _entityChangedHandle: false,
        _groupChangedHandle: false,
        widgetTemplate: new Simplate([
            '<span class="list-panel-tbar">',
                '<div id="{%= $.id %}-Start" data-dojo-type="Sage.UI.ImageButton" imageClass="icon_Start_16x16" tooltip="{%= $.firstText %}" alt="{%= $.firstText %}" dojoAttachPoint="_firstButton" dojoAttachEvent="onClick:_moveFirst"></div>',
                '<div id="{%= $.id %}-Previous"  data-dojo-type="Sage.UI.ImageButton" imageClass="icon_Browse_Previous_16x16" tooltip="{%= $.previousText %}" alt="{%= $.previousText %}" dojoAttachPoint="_previousButton" dojoAttachEvent="onClick:_movePrevious"></div>',
                '<div id="{%= $.id %}-Label"  data-dojo-type="Sage.UI.ToolBarLabel" label="" dojoAttachPoint="_groupNavLabel"></div>',
                '<div id="{%= $.id %}-Next"  data-dojo-type="Sage.UI.ImageButton" imageClass="icon_Browse_Next_16x16" tooltip="{%= $.nextText %}" alt="{%= $.nextText %}" dojoAttachPoint="_nextButton" dojoAttachEvent="onClick:_moveNext"></div>',
                '<div id="{%= $.id %}-End"  data-dojo-type="Sage.UI.ImageButton" imageClass="icon_End_16x16" tooltip="{%= $.lastText %}" alt="{%= $.lastText %}" dojoAttachPoint="_lastButton" dojoAttachEvent="onClick:_moveLast"></div>',
                '<div id="{%= $.id %}-Switcher"  data-dojo-type="Sage.UI.ImageButton" imageClass="icon_Switch_to_List_View_16x16" tooltip="{%= $.listText %}" alt="{%= $.listText %}" dojoAttachPoint="_listButton" dojoAttachEvent="onClick:_moveToList"></div>',
            '</span>'  //Toolbar
        ]),
        //        constructor: function() {
        //            //console.log('constructing the GroupNavigator');
        //        },
        startup: function () {
            /*
             * This control lives in an update panel. That means it will get destroyed and re-created when:
             *  1) We change groups
             *  2) We navigate to different records
             *
             *  Startup will get called each time to set the label. Do not set the label on the group context change event
             *  as it will cause a double refresh of the label.
             */
            this._setLabel();
        },
        destroy: function () {
            if (this._groupChangedHandle) {
                dojo.disconnect(this._groupChangedHandle);
                this._groupChangedHandle = false;
            }
            this.inherited(arguments);
        },
        postMixInProperties: function () {
            this._entityContextService = Sage.Services.getService('ClientEntityContext');
            this._groupContextService = Sage.Services.getService('ClientGroupContext');
            lang.mixin(this, nls);
        },
        _setLabel: function (args) {
            var groupCtx = this._getGroupContext(),
                position = groupCtx.CurrentEntityPosition,
                count = groupCtx.CurrentGroupCount,
                eCtx = this._entityContextService.getContext();

            this._enableButtons();
            if (this._groupNavLabel && groupCtx) {

                if (count === 0) {
                    position = 0;
                }

                var lbl = dojo.string.substitute(this.labelFmtText, [position, count]);
                this._groupNavLabel.set('label', lbl);

                // Disable the appropriate buttons if we are at the 
                // end or beginning of the group.
                if (position === 0 || position === 1) {
                    this._previousButton.set('disabled', true);
                    this._firstButton.set('disabled', true);
                }
                if (position === groupCtx.CurrentGroupCount || position === 0) {
                    this._nextButton.set('disabled', true);
                    this._lastButton.set('disabled', true);
                }
            }
        },
        _enableButtons: function () {
            this._nextButton.set('disabled', false);
            this._lastButton.set('disabled', false);
            this._previousButton.set('disabled', false);
            this._firstButton.set('disabled', false);
        },
        _moveFirst: function () {
            var groupCtx = this._getGroupContext();
            var eCtx = this._entityContextService.getContext();
            if (groupCtx.FirstEntityID !== '' && groupCtx.FirstEntityID != eCtx.EntityId) {
                this._publishTopic("/group/nav/first", groupCtx.FirstEntityID, eCtx.EntityId, groupCtx.CurrentEntityPosition, groupCtx.CurrentGroupCount);
                this._entityContextService.navigateSLXGroupEntity(groupCtx.FirstEntityID, eCtx.EntityId);
            }
        },
        _movePrevious: function () {
            var groupCtx = this._getGroupContext();
            var eCtx = this._entityContextService.getContext();
            if (groupCtx.PreviousEntityID !== '' && groupCtx.PreviousEntityID != eCtx.EntityId) {
                this._publishTopic("/group/nav/previous", groupCtx.PreviousEntityID, eCtx.EntityId, groupCtx.CurrentEntityPosition, groupCtx.CurrentGroupCount);
                this._entityContextService.navigateSLXGroupEntity(groupCtx.PreviousEntityID, eCtx.EntityId);
            }
        },
        _moveNext: function () {
            var groupCtx = this._getGroupContext();
            var eCtx = this._entityContextService.getContext();
            if (groupCtx.NextEntityID !== '' && groupCtx.NextEntityID != eCtx.EntityId) {
                this._publishTopic("/group/nav/next", groupCtx.NextEntityID, eCtx.EntityId, groupCtx.CurrentEntityPosition, groupCtx.CurrentGroupCount);
                this._entityContextService.navigateSLXGroupEntity(groupCtx.NextEntityID, eCtx.EntityId);
            }
        },
        _moveLast: function () {
            var groupCtx = this._getGroupContext();
            var eCtx = this._entityContextService.getContext();
            if (groupCtx.LastEntityID !== '' && groupCtx.LastEntityID != eCtx.EntityId) {
                this._publishTopic("/group/nav/last", groupCtx.LastEntityID, eCtx.EntityId, groupCtx.CurrentEntityPosition, groupCtx.CurrentGroupCount);
                this._entityContextService.navigateSLXGroupEntity(groupCtx.LastEntityID, eCtx.EntityId);
            }
        },
        _moveToList: function () {
            Sage.Link.toListView();
        },
        _getGroupContext: function () {
            return this._groupContextService.getContext();
        },
        _publishTopic: function (key, toEntityID, currentEntityID, currentPosition, count){
            topic.publish(key, { 'toEntityId': toEntityID, 'fromEntityId': currentEntityID, 'position': currentPosition, 'count': count });
        }
    });
    return groupNavigator;
});

},
'Sage/QuickForms/Design/DesignSurface':function(){
define("Sage/QuickForms/Design/DesignSurface", [
    'dojo/query',
    'dojo/keys',
    'dojo/string',
    'dojo/topic',
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/_base/event',
    'dojo/dom-attr',
    'dojo/dom-class',
    'dojo/dom-style',
    'dojo/dom-geometry',
    'dojo/dom-construct',
    'dojo/NodeList-traverse',
    'dojo/NodeList-manipulate',
    'dijit/registry',
    'dijit/focus',
    'dijit/layout/_LayoutWidget',
    'dijit/Menu',
    'dijit/MenuItem',
    'dijit/MenuSeparator',
    'dijit/PopupMenuItem',
    'Sage/_EventMapMixin',
    'dojo/dnd/Source',
    'dojo/dnd/Manager',
    './ControlDesignerRegistry',
    './ControlDesigner',
    './FormDesigner',
    './RowDesigner',
    './ColumnDesigner',
    'dojo/i18n!./nls/DesignSurface'
], function(
    query,
    keys,
    string,
    topic,
    declare,
    array,
    lang,
    event,
    domAttr,
    domClass,
    domStyle,
    domGeometry,
    domConstruct,
    nodeListTraverse,
    nodeListManipulate,
    registry,
    focus,
    _LayoutWidget,
    Menu,
    MenuItem,
    MenuSeparator,
    PopupMenuItem,
    _EventMapMixin,
    Source,
    Manager,
    ControlDesignerRegistry,
    ControlDesigner,
    FormDesigner,
    RowDesigner,
    ColumnDesigner,
    localization
) {
    var _Source = declare([Source], {
        owner: null,
        accept: ['designer', 'property'],
        constructor: function() {
            this.creator = true; /* flag to enable use of _normalizedCreator */
        },
        checkAcceptance: function(fromSource, nodes) {
            if (fromSource == this) return false;

            return this.inherited(arguments);
        },
        onDropInternal: function(fromSource, nodes, copy) {
            /* do nothing */
        },
        onDropExternal: function(fromSource, nodes, copy) {
            if (fromSource.isInstanceOf(_Source))
            {
                var node = nodes[0],
                    item = node && fromSource.getItem(node.id);
                if (item)
                {
                    fromSource.selectNone();
                    this.selectNone();
                    this.onDropDesigner(this, registry.byId(item.data));
                }
            }
            else
            {
                var node = nodes[0],
                    item = node && fromSource.getItem(node.id);
                if (item && array.indexOf(item.type, 'property') >= 0)
                {
                    fromSource.selectNone();
                    this.selectNone();
                    this.onDropProperty(this, item.context);
                }
            }
        },
        onDropProperty: function(toSource, propertyContext) {
        },
        onDropDesigner: function(toSource, widget) {

        },
        onDndStart: function(fromSource, nodes, copy) {
            this.inherited(arguments);
        },
        onDndCancel: function() {
            this.inherited(arguments);
        },
        /**
         * The `_normalizedCreator` method is used to generate a separate, style-able, avatar, instead of
         * overriding avatar creation globally or swapping methods in and out on drag start and cancel.
         *
         * @unsafe
         */
        _normalizedCreator: function(data, hint) {
            var widget = registry.byId(data),
                contentNode = domConstruct.toDom(widget.domNode.parentNode.innerHTML),
                containerNode = domConstruct.create('div', {
                    'class': 'design-surface-dnd-avatar'
                });

            /* todo: we could pull width/height from the original node via. lookup by id of `contentNode` as it is the same, unfortunately */

            domConstruct.place(contentNode, containerNode);

            return {node: containerNode};
        },
        onDraggingOver: function() {
            this.inherited(arguments);

            /* only need to check over when the cell is empty, otherwise, we check based on inner positioning. */
            if (this.empty)
            {
                var manager = Manager.manager();
                if (manager.source.isInstanceOf(_Source))
                {
                    var result = this.owner.validateMoveFromSource(this, manager.source);

                    /* todo: add processing for the error result to add indicator bisected cells */

                    manager.canDrop(!result);
                }
                else
                {
                    /* always accept */
                }
            }
        },
        onMouseMove: function(e) {
            var before,
                targetAnchor;

            /* only need to check based on positioning when the cell is not empty. */
            if (this.isDragging && !this.empty)
            {
                before = this.before;
                targetAnchor = this.targetAnchor;
            }

            this.inherited(arguments);

            if (this.isDragging && !this.empty)
            {
                /* the target and/or position has changed, re-check acceptance */
                if (this.targetAnchor != targetAnchor || this.before != before)
                {
                    var manager = Manager.manager();
                    if (manager.source.isInstanceOf(_Source))
                    {
                        var result = this.owner.validateMoveFromSource(this, manager.source);

                        /* todo: add processing for the error result to add indicator bisected cells */

                        manager.canDrop(!result);
                    }
                    else
                    {
                        /* always accept */
                    }
                }
            }
        }
    });

    var _CellContextMenu = declare([Menu], {
        owner: null,

        aboveText: 'Above',
        belowText: 'Below',
        leftText: 'Left',
        rightText: 'Right',
        insertRowText: 'Insert Row',
        insertColumnText: 'Insert Column',

        constructor: function() {
            lang.mixin(this, localization);
        },
        postCreate: function() {
            this.inherited(arguments);

            var rowSubMenu = new Menu(),
                columnSubMenu = new Menu();

            rowSubMenu.addChild(new MenuItem({
                label: this.aboveText,
                onClick: lang.hitch(this, this._insertRow, true)
            }));

            rowSubMenu.addChild(new MenuItem({
                label: this.belowText,
                onClick: lang.hitch(this, this._insertRow, false)
            }));

            columnSubMenu.addChild(new MenuItem({
                label: this.leftText,
                onClick: lang.hitch(this, this._insertColumn, true)
            }));

            columnSubMenu.addChild(new MenuItem({
                label: this.rightText,
                onClick: lang.hitch(this, this._insertColumn, false)
            }));

            this.addChild(new PopupMenuItem({
                label: this.insertRowText,
                popup: rowSubMenu
            }));

            this.addChild(new PopupMenuItem({
                label: this.insertColumnText,
                popup: columnSubMenu
            }));
        },
        _insertColumn: function(before) {
            if (this.owner)
                this.owner.insertColumnAround(this.target, before);
        },
        _insertRow: function(before) {
            if (this.owner)
                this.owner.insertRowAround(this.target, before);
        },
        open: function(target, node, coords) {
            this.target = target;

            if (this.target) this._scheduleOpen(node, null, coords);
        }
    });

    var _RowContextMenu = declare([Menu], {
        owner: null,

        aboveText: 'Above',
        belowText: 'Below',
        insertRowText: 'Insert Row',
        deleteRowText: 'Delete Row',

        constructor: function() {
            lang.mixin(this, localization);
        },
        postCreate: function() {
            this.inherited(arguments);

            var rowSubMenu = new Menu();

            rowSubMenu.addChild(new MenuItem({
                label: this.aboveText,
                onClick: lang.hitch(this, this._insertRow, true)
            }));

            rowSubMenu.addChild(new MenuItem({
                label: this.belowText,
                onClick: lang.hitch(this, this._insertRow, false)
            }));

            this.addChild(new PopupMenuItem({
                label: this.insertRowText,
                popup: rowSubMenu
            }));

            this.addChild((this._delete = new MenuItem({
                label: this.deleteRowText,
                onClick: lang.hitch(this, this._deleteRow, false)
            })));
        },
        open: function(target, node, coords) {
            this.target = target;

            if (this.target)
            {
                this._delete.set('disabled', this.owner.validateDeleteRowAt(this.target.index));

                this._scheduleOpen(node, null, coords);
            }
        },
        _insertRow: function(before) {
            if (this.owner)
            {
                var index = before
                    ? this.target.get('index')
                    : this.target.get('index') + 1;
                this.owner.insertRowAt(index);
            }
        },
        _deleteRow: function() {
            if (this.owner)
                this.owner.deleteRowAt(this.target.index);
        }
    });

    var _ColumnContextMenu = declare([Menu], {
        owner: null,

        leftText: 'Left',
        rightText: 'Right',
        insertColumnText: 'Insert Column',
        deleteColumnText: 'Delete Column',

        constructor: function() {
            lang.mixin(this, localization);
        },
        postCreate: function() {
            this.inherited(arguments);

            var columnSubMenu = new Menu();

            columnSubMenu.addChild(new MenuItem({
                label: this.leftText,
                onClick: lang.hitch(this, this._insertColumn, true)
            }));

            columnSubMenu.addChild(new MenuItem({
                label: this.rightText,
                onClick: lang.hitch(this, this._insertColumn, false)
            }));

            this.addChild(new PopupMenuItem({
                label: this.insertColumnText,
                popup: columnSubMenu
            }));

            this.addChild((this._delete = new MenuItem({
                label: this.deleteColumnText,
                onClick: lang.hitch(this, this._deleteColumn)
            })));
        },
        open: function(target, node, coords) {
            this.target = target;

            if (this.target)
            {
                this._delete.set('disabled', !!this.owner.validateDeleteColumnAt(this.target.index));

                this._scheduleOpen(node, null, coords);
            }
        },
        _insertColumn: function(before) {
            if (this.owner)
            {
                var index = before
                    ? this.target.get('index')
                    : this.target.get('index') + 1;
                this.owner.insertColumnAt(index);
            }
        },
        _deleteColumn: function() {
            if (this.owner)
                this.owner.deleteColumnAt(this.target.index);
        }
    });

    var DesignSurface = declare('Sage.QuickForms.Design.DesignSurface', [_LayoutWidget, _EventMapMixin], {
        events: {
            'click': '_onClick',
            'keydown': '_onKeyDown',
            '.design-surface-selector-cell[data-select-row]:contextmenu': '_onRowContextMenu',
            '.design-surface-selector-cell[data-select-column]:contextmenu': '_onColumnContextMenu',
            '.dojoDndSource:contextmenu': '_onCellContextMenu'
        },

        _designGroup: null,
        _designGroupTopics: null,
        _rowContextMenu: null,
        _columnContextMenu: null,
        _cellContextMenu: null,
        baseClass: 'design-surface',
        selections: null,
        form: null,
        columns: null,
        rows: null,
        columnCount: 3,
        currentLayout: null,
        tableNode: null,
        singleSelection: true,
        designGroup: 'default',

        bisectionErrorText: 'The placement will cause another control to be bisected.',
        rowBoundsErrorText: 'The chosen row is out of bounds.',
        columnBoundsErrorText: 'The chosen column is out of bounds.',
        rowSpanBoundsErrorText: 'The chosen row span is out of bounds.',
        columnSpanBoundsErrorText: 'The chosen column span is out of bounds.',
        occupiedErrorText: 'There is not enough empty space for the chosen size.',

        _getDesignGroupAttr: function() {
            return this._designGroup;
        },
        _setDesignGroupAttr: function(value) {
            if (this._designGroupTopics)
            {
                array.forEach(this._designGroupTopics, function(topic) {
                    this.unsubscribe(topic);
                }, this);
            }

            this._designGroup = value;
            this._designGroupTopics = [
                this.subscribe(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), this._onDesignerSelected)
            ];
        },
        _onRowContextMenu: function(evt) {
            event.stop(evt);

            if (this._rowContextMenu)
                this._rowContextMenu.open(
                    this.findDesignerByNode(evt.target),
                    evt.target,
                    {x: evt.pageX, y: evt.pageY}
                );
        },
        _onColumnContextMenu: function(evt) {
            event.stop(evt);

            if (this._columnContextMenu)
                this._columnContextMenu.open(
                    this.findDesignerByNode(evt.target),
                    evt.target,
                    {x: evt.pageX, y: evt.pageY}
                );
        },
        _onCellContextMenu: function(evt) {
            event.stop(evt);

            if (this._cellContextMenu)
                this._cellContextMenu.open(
                    this.findDesignerByNode(evt.target),
                    evt.target,
                    {x: evt.pageX, y: evt.pageY}
                );
        },
        constructor: function() {
            this.selections = [];
            lang.mixin(this, localization);
        },
        buildRendering: function() {
            this.inherited(arguments);

            domAttr.set(this.domNode, 'tabIndex', 0);
        },
        createContextMenus: function() {
            this._rowContextMenu = new _RowContextMenu({ owner: this });
            this._rowContextMenu.startup();

            this._columnContextMenu = new _ColumnContextMenu({ owner: this });
            this._columnContextMenu.startup();

            this._cellContextMenu = new _CellContextMenu({ owner: this });
            this._cellContextMenu.startup();
        },
        postCreate: function() {
            this.inherited(arguments);
        },
        uninitialize: function() {
            if (this._sources)
            {
                array.forEach(this._sources, function(source) {
                    source.destroy();
                });
            }

            if (this._contextMenu) this._contextMenu.destroyRecursive();

            this._sources = [];

            this.inherited(arguments);
        },
        startup: function() {
            if (this._started) {
                return;
            }

            this.inherited(arguments);

            this.createContextMenus();
        },
        resize: function() {
            this.inherited(arguments); // calls layout

            array.forEach(this.getChildren(), function(child) {
                if (typeof child.resize == 'function') {
                    child.resize();
                }
            });

            if (this._sources)
            {
                array.forEach(this._sources, function(source) {
                    source.sync();
                });
            }
        },
        _buildKeyHandlerMap: function() {
            var map = {};
            map[this.isLeftToRight() ? keys.LEFT_ARROW : keys.RIGHT_ARROW] = "_onLeftArrow";
            map[this.isLeftToRight() ? keys.RIGHT_ARROW : keys.LEFT_ARROW] = "_onRightArrow";
            map[keys.UP_ARROW]="_onUpArrow";
            map[keys.DOWN_ARROW]="_onDownArrow";
            return map;
        },
        _onKeyDown: function(evt) {
            var key = evt.keyCode,
                map = this._keyHandlerMap || (this._keyHandlerMap = this._buildKeyHandlerMap());
            if (map[key] && this[map[key]])
            {
                this[map[key]](evt);
                event.stop(evt);
            }
        },
        _onLeftArrow: function(evt) {
            this._moveSelectionIndicator('l');
        },
        _onRightArrow: function(evt) {
            this._moveSelectionIndicator('r');
        },
        _onUpArrow: function(evt) {
            this._moveSelectionIndicator('u');
        },
        _onDownArrow: function(evt) {
            this._moveSelectionIndicator('d');
        },
        _moveSelectionIndicator: function(direction) {
            /* a *single* selection is required for this */
            var selection = this.selections.length == 1 ? this.selections[0] : null,
                designer = selection && selection.designer;
            if (designer && designer.isInstanceOf(ControlDesigner))
            {
                var next = this._findNextWidget(designer, direction),
                    cell = next && query(next.domNode).closest('.design-surface-cell')[0];
                if (next) this._handleSelectionOf(next, false, cell, next.domNode);
            }
        },
        _findNextWidget: function(fromWidget, direction) {
            /* direction: u,d,l,r */
            var layout = this.currentLayout,
                fromWidgetRow = fromWidget.get('row') || 0,
                fromWidgetColumn = fromWidget.get('column') || 0,
                fromWidgetRowSpan = fromWidget.get('rowSpan') || 1,
                fromWidgetColumnSpan = fromWidget.get('columnSpan') || 1,
                spanV = [fromWidgetRow, fromWidgetRow + fromWidgetRowSpan - 1],
                spanH = [fromWidgetColumn, fromWidgetColumn + fromWidgetColumnSpan - 1],
                boundR, deltaR, boundC, deltaC;

            switch (direction)
            {
                case 'u':
                    boundR = [fromWidgetRow - 1, 0]; // 2, 0 or 2, 10
                    deltaR = -1;
                    boundC = spanH;
                    deltaC = 1;
                    break;
                case 'd':
                    boundR = [fromWidgetRow + fromWidgetRowSpan, layout.rows.length - 1];
                    deltaR = 1;
                    boundC = spanH;
                    deltaC = 1;
                    break;
                case 'l':
                    boundR = spanV;
                    deltaR = 1;
                    boundC = [fromWidgetColumn - 1, 0];
                    deltaC = -1;
                    break;
                case 'r':
                    boundR = spanV;
                    deltaR = 1;
                    boundC = [fromWidgetColumn + fromWidgetColumnSpan, layout.columnCount - 1];
                    deltaC = 1;
                    break;
            }

            for (var row = boundR[0]; deltaR*row <= boundR[1]; row += deltaR)
            {
                for (var column = boundC[0]; deltaC*column <= boundC[1]; column += deltaC)
                {
                    var data = this._readFromLayout(layout, row, column);

                    /* empty cell - skip */
                    if (!data) continue;

                    var widget = data.widget;

                    /* encountered self - skip */
                    if (widget === fromWidget) continue;

                    return widget;
                }
            }

            return null;
        },
        _handleSelectionOf: function(designer, append, styleNode, focusNode) {
            if (designer)
            {
                var selected = array.some(this.selections, function(selection) { return (selection.designer === designer); });

                if (append && !this.singleSelection)
                {
                    if (!selected)
                    {
                        array.forEach(this.selections, function(selection) {
                            selection.focusNode && domAttr.set(selection.focusNode, 'tabIndex', '-1');
                        });

                        this.selections.push({designer: designer, styleNode: styleNode, focusNode: focusNode});

                        if (focusNode)
                        {
                            domAttr.set(focusNode, 'tabIndex', 0);

                            focus.focus(focusNode);
                        }

                        if (styleNode)
                        {
                            domClass.add(styleNode, 'design-surface-cell-selected');
                        }

                        this.onSelectionChanged(this.selections, true);

                        topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), designer, true, this);
                    }
                }
                else
                {
                    this._clearSelectionDom();
                    this._clearSelectionState(false);

                    this.selections = [{designer: designer, styleNode: styleNode, focusNode: focusNode}];

                    if (focusNode)
                    {
                        domAttr.set(focusNode, 'tabIndex', 0);

                        focus.focus(focusNode);
                    }

                    if (styleNode)
                    {
                        domClass.add(styleNode, 'design-surface-cell-selected');
                    }

                    this.onSelectionChanged(this.selections, false);

                    topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), designer, false, this);
                }
            }
            else
            {
                if (this.singleSelection || !append)
                {
                    this._clearSelectionDom();
                    this._clearSelectionState();
                }
            }
        },
        findDesignerByNode: function(target) {
            var result = this._findSelectableDesignerByNode(target);
            return result && result.designer;
        },
        _findSelectableDesignerByNode: function(target) {
            var cell = query(target).closest('.design-surface-cell')[0],
                node = cell && query('.dojoDndItem > *', cell)[0],
                designer = node && registry.byNode(node);

            if (designer)
                return {
                    designer: designer,
                    styleNode: cell,
                    focusNode: designer.domNode
                };

            if (cell && domAttr.has(cell, 'data-select-row'))
                return {
                    designer: this.form && this.form.get('rows')[parseInt(domAttr.get(cell, 'data-select-row'))],
                    styleNode: cell,
                    focusNode: cell
                };

            if (cell && domAttr.has(cell, 'data-select-column'))
                return {
                    designer: this.form && this.form.get('columns')[parseInt(domAttr.get(cell, 'data-select-column'))],
                    styleNode: cell,
                    focusNode: cell
                };

            return null;
        },
        _onClick: function(evt) {
            var append = evt.shiftKey,
                result = this._findSelectableDesignerByNode(evt.target);
            if (result)
            {
                if (result.designer.isInstanceOf(ControlDesigner))
                    this._handleSelectionOf(result.designer, append, result.styleNode, result.focusNode);
                else
                    this._handleSelectionOf(result.designer, false, result.styleNode, result.focusNode);
            }
            else
            {
                this._handleSelectionOf(this.form, append);
            }
        },
        onSelectionChanged: function(selections, append) {

        },
        _clearSelectionDom: function() {
            if (this.selections.length > 0)
            {
                array.forEach(this.selections, function(selection) {
                    selection.focusNode && domAttr.set(selection.focusNode, 'tabIndex', '-1');
                    selection.styleNode && domClass.remove(selection.styleNode, 'design-surface-cell-selected');
                });
            }
        },
        _clearSelectionState: function(notify) {
            if (this.selections.length > 0)
            {
                this.selections = [];

                if (notify !== false)
                {
                    this.onSelectionChanged(this.selections);

                    topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), false, false, this);
                }
            }
        },
        _syncDomWithSelectionState: function() {
            array.forEach(this.selections, function(selection) {
                var designer = selection.designer;
                if (designer.isInstanceOf(ControlDesigner))
                {
                    selection.styleNode = query(designer.domNode).closest('.design-surface-cell')[0];
                    selection.focusNode = designer.domNode;
                }
                else if (designer.isInstanceOf(RowDesigner))
                {
                    selection.styleNode = query(string.substitute('.design-surface-selector-cell[data-select-row="${0}"]', [designer.index]), this.domNode)[0];
                    selection.focusNode = selection.styleNode;
                }
                else if (designer.isInstanceOf(ColumnDesigner))
                {
                    selection.styleNode = query(string.substitute('.design-surface-selector-cell[data-select-column="${0}"]', [designer.index]), this.domNode)[0];
                    selection.focusNode = selection.styleNode;
                }

                domAttr.set(selection.focusNode, 'tabIndex', 0);

                focus.focus(selection.focusNode);

                domClass.add(selection.styleNode, 'design-surface-cell-selected');
            }, this);
        },
        _onDesignerSelected: function(designer, append, source) {
            if (designer && source !== this)
            {
                this._clearSelectionDom();
                this._clearSelectionState(false);
            }
        },
        /**
         * Creates a layout containing a uniform, sparse, matrix with span information.
         * @param children
         */
        _buildLayoutFor: function(children) {
            var rows = [],
                columnCount = this.form ? this.form.get('columnCount') : this.columnCount;

            array.forEach(children, function(child) {
                var designRow = child.get('row') || 0,
                    designColumn = child.get('column') || 0,
                    designRowSpan = child.get('rowSpan') || 1,
                    designColumnSpan = child.get('columnSpan') || 1,
                    row, edge, i, j;

                if (designRowSpan > 1 || designColumnSpan > 1)
                {
                    edge = [designColumn, designColumn + (designColumnSpan - 1)];

                    for (i = 0; i < designRowSpan; i++)
                    {
                        row = rows[designRow + i] || (rows[designRow + i] = []);

                        for (j = 0; j < designColumnSpan; j++)
                        {
                            /* todo: remove span/edge data as no longer needed? */
                            row[designColumn + j] = {
                                widget: child,
                                span: (i > 0 || j > 0),
                                edge: edge // reference to edge data for widget
                            };
                        }
                    }
                }
                else
                {
                    row = rows[designRow] || (rows[designRow] = []);

                    /* todo: remove span/edge data as no longer needed? */
                    row[designColumn] = {
                        widget: child,
                        span: false,
                        edge: [designColumn, designColumn]
                    };
                }

                if ((designColumn + designColumnSpan) > columnCount) columnCount = (designColumn + designColumnSpan);

            }, this);

            //console.log('built: %o', rows);

            return {rows: rows, columnCount: columnCount, children: children};
        },
        _syncNonVisibleDesigners: function(layout) {
            if (!this.form) return;

            var layoutRows = layout.rows,
                layoutRowCount = layoutRows.length,
                layoutColumnCount = layout.columnCount;

            if (this.form.get('rowCount') > layoutRowCount)
            {
                // remove any added row designers

                var rows = this.form.get('rows');

                for (var i = (rows.length - 1); i > (layoutRowCount - 1); i--)
                {
                    if (rows[i].added)
                        this.form.removeRow(i);
                    else
                        break; /* promote any previous auto-added ones */
                }
            }
            else if (this.form.get('rowCount') < layoutRowCount)
            {
                // add row designers for newly added rows

                var rows = this.form.get('rows'),
                    count = rows.length;

                for (var i = 0; i < (layoutRowCount - count); i++)
                {
                    this.form.addRow(new RowDesigner({
                        entry: {
                            'Height': 35,
                            'SizeType': 'Absolute'
                        },
                        form: this.form,
                        index: count + i,
                        added: true
                    }));
                }
            }

            if (this.form.get('columnCount') > layoutColumnCount)
            {
                // remove any added column designers

                var columns = this.form.get('columns');

                for (var i = (columns.length - 1); i > (layoutColumnCount - 1); i--)
                {
                    if (columns[i].added)
                        this.form.removeColumn(i);
                    else
                        break; /* promote any previous auto-added ones */
                }
            }
            else if (this.form.get('columnCount') < layoutColumnCount)
            {
                // add column designers for newly added columns

                var columns = this.form.get('columns'),
                    count = columns.length;

                for (var i = 0; i < (layoutColumnCount - count); i++)
                {
                    this.form.addColumn(new ColumnDesigner({
                        entry: {
                            'Width': 10.0,
                            'SizeType': 'Percent'
                        },
                        form: this.form,
                        index: count + i,
                        added: true
                    }));
                }
            }
        },
        _renderLayout: function(layout) {
            //console.log('applying layout.');

            // destroy existing DnD sources
            if (this._sources)
            {
                array.forEach(this._sources, function(source) {
                    source.destroy();
                });
            }

            this._sources = [];

            var rows = layout.rows,
                children = layout.children,
                rowCount = Math.max((this.form && this.form.get('rowCount')) || 0, rows.length),
                columnCount = Math.max((this.form && this.form.get('columnCount')) || 0, layout.columnCount),
                tableNode = domConstruct.create('table', {
                    'class': 'design-surface-table'
                }, this.domNode),
                tableColGroupNode = domConstruct.create('colgroup', null, tableNode),
                tableBodyNode = domConstruct.create('tbody', null, tableNode),
                tableRowNode,
                tableCellNode,
                containerNode,
                source;

            domConstruct.create('col', {
            }, tableColGroupNode);

            /* todo: process actual column widths */
            var columnWidth = 100 / columnCount;
            for (var j = 0; j < columnCount; j++)
            {
                domConstruct.create('col', {
                    'width': columnWidth + '%'
                }, tableColGroupNode);
            }

            var placements = [];

            if (rows.length > 0)
            {
                tableRowNode = domConstruct.create('tr', {
                    'class': 'design-surface-selector-row'
                }, tableBodyNode);

                for (var i = 0; i < columnCount + 1; i++)
                {
                    tableCellNode = domConstruct.create('td', {
                        'class': 'design-surface-cell design-surface-selector-cell',
                        'data-select-column': i-1
                    }, tableRowNode);
                }
            }

            for (var j = 0; j < rowCount; j++)
            {
                var row = rows[j];

                tableRowNode = domConstruct.create('tr', {
                    'class': 'design-surface-row'
                }, tableBodyNode);

                tableCellNode = domConstruct.create('td', {
                    'class': 'design-surface-cell design-surface-selector-cell',
                    'data-select-row': j
                }, tableRowNode);

                for (var i = 0; i < columnCount; i++)
                {
                    var cell = row && row[i];
                    if (cell)
                    {
                        // do not do anything for spanned cells
                        if (cell.span) continue;

                        var widget = cell.widget,
                            designRow = widget.get('row') || 0,
                            designRowSpan = widget.get('rowSpan') || 1,
                            designColumn = widget.get('column') || 0,
                            designColumnSpan = widget.get('columnSpan') || 1;

                        tableCellNode = domConstruct.create('td', {
                            'colspan': designColumnSpan,
                            'rowspan': designRowSpan,
                            'class': 'design-surface-cell',
                            'data-design-row': designRow,
                            'data-design-column': designColumn
                        }, tableRowNode);

                        placements.push({
                            node: tableCellNode,
                            widget: widget
                        });
                    }
                    else
                    {
                        tableCellNode = domConstruct.create('td', {
                            'class': 'design-surface-cell design-surface-cell-empty'
                        }, tableRowNode);
                    }

                    // create DnD source
                    source = new DesignSurface.Source(tableCellNode, {
                        owner: this,
                        empty: !cell,
                        row: j,
                        column: i,
                        copyOnly: true,
                        selfAccept: false,
                        onDropProperty: lang.hitch(this, this._onDropProperty),
                        onDropDesigner: lang.hitch(this, this._onDropDesigner)
                    });

                    source.startup();

                    this._sources.push(source);
                }
            }

            /* we do placement at this point so that sizing can be calculated correctly */
            array.forEach(placements, function(placement) {
                var placementStyle = domStyle.getComputedStyle(placement.node),
                    placementBox = domGeometry.getMarginBox(placement.node, placementStyle),
                    placementPadExtents = domGeometry.getPadExtents(placement.node, placementStyle),
                    placementBorderExtents = domGeometry.getBorderExtents(placement.node, placementStyle);

                containerNode = domConstruct.create('div', {
                    'dndType': 'designer',
                    'dndData': placement.widget.id,
                    'class': 'dojoDndItem',
                    'style': {
                        'padding': '0px' // MUST be zero
                    }
                }, placement.node);

                var containerStyle = domStyle.getComputedStyle(containerNode),
                    containerBorderExtents = domGeometry.getBorderExtents(containerNode, containerStyle);

                domGeometry.setContentSize(containerNode, {
                    h: (placementBox.h - placementPadExtents.h - placementBorderExtents.h - containerBorderExtents.h)
                });

                containerNode.appendChild(placement.widget.domNode);
            }, this);

            if (this.tableNode)
                this.tableNode.parentNode.removeChild(this.tableNode);

            array.forEach(children, function(child) {
                if (typeof child.layout == 'function') child.layout();
            });

            this.currentLayout = layout;
            this.tableNode = tableNode;

            if (this._sources)
            {
                array.forEach(this._sources, function(source) {
                    source.sync();
                });
            }
        },
        _readFromLayout: function(layout, row, column) {
            return (layout.rows[row] && layout.rows[row][column]);
        },
        _applyPushToConnectionTree: function(amount, parent, result) {
            result = result || {};

            for (var i = 0; i < parent.children.length; i++)
            {
                var connection = parent.children[i],
                    displacement = amount - connection.distance,
                    node = connection.node;

                if (result[node.id])
                {
                    if (displacement > result[node.id].value)
                        result[node.id].value = displacement;
                }
                else
                {
                    result[node.id] = {
                        widget: node.widget,
                        value: displacement
                    };
                }

                this._applyPushToConnectionTree(displacement, node, result);
            }

            return result;
        },
        _buildConnectionTree: function(layout, parent, nodes, root) {
            /* node: {widget: null, row: 0, column: 0, rowSpan: 0, columnSpan: 0, children:[{distance: 0, node: null}]} */

            var span = [parent.column, parent.column + parent.columnSpan],
                rowCount = layout.rows.length,
                columnCount = layout.columnCount,
                encountered = {},
                nodes = nodes || {},
                root = root || parent;

            //console.log('build col:%d to %d, row:%d', span[0], span[1], parent.row);

            for (var column = span[0]; column < span[1]; column++)
            {
                for (var row = (parent.row + parent.rowSpan); row < rowCount; row++)
                {
                    var data = this._readFromLayout(layout, row, column);

                    /* empty cell - skip */
                    if (!data) continue;

                    var widget = data.widget;

                    /* encountered self (i.e. due to scan from top of root) - skip */
                    if (widget === parent.widget) continue;

                    /* encountered the node being moved (also this tree's root) - skip */
                    if (widget === root.widget) continue;

                    /* already encountered (i.e. spanned cell in layout) - skip */
                    if (encountered[widget.id]) continue;

                    encountered[widget.id] = true;

                    if (nodes[widget.id])
                    {
                        /* re-using an existing node, no need to build child tree */
                        parent.children.push({
                            distance: row - (parent.row + parent.rowSpan),
                            node: nodes[widget.id]
                        });
                    }
                    else
                    {
                        var node = {
                            id: widget.id,
                            widget: widget,
                            row: widget.get('row'),
                            rowSpan: widget.get('rowSpan') || 1,
                            column: widget.get('column'),
                            columnSpan: widget.get('columnSpan') || 1,
                            children: []
                        };

                        nodes[widget.id] = node;

                        parent.children.push({
                            distance: row - (parent.row + parent.rowSpan),
                            node: node
                        });

                        this._buildConnectionTree(layout, node, nodes, root);
                    }

                    break;
                }
            }
        },
        moveWidget: function(widget, targetRow, targetColumn) {
            var layout = this.currentLayout,
                widgetRowSpan = widget.get('rowSpan') || 1,
                widgetColumnSpan = widget.get('columnSpan') || 1,
                root = {
                    id: widget.id,
                    widget: widget,
                    row: targetRow,
                    rowSpan: 0, /* always start scan from top of root */
                    column: targetColumn,
                    columnSpan: widgetColumnSpan,
                    children: []
                };

            this._buildConnectionTree(layout, root);

            var push = this._applyPushToConnectionTree(widgetRowSpan, root);

            //console.log('tree: %o', root);
            //console.log('push: %o', push);

            /* apply push values to widgets */
            for (var name in push)
            {
                var pushed = push[name].widget,
                    value = push[name].value;
                if (value > 0)
                {
                    pushed.unchecked(function() {
                        this.set('row', this.get('row') + value);
                    });
                }
            }

            widget.unchecked(function() {
                this.set('row', targetRow);
                this.set('column', targetColumn);
            });

            topic.publish(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), widget, this);

            /* delay to allow other dnd functionality to stop */
            /* todo: is there an event/message to listen to for this? */
            setTimeout(lang.hitch(this, function() {
                this.layout(true);
            }), 50);
        },
        _onDropProperty: function(toSource, propertyContext) {
            var ctor = ControlDesignerRegistry.getDesignerForDataType(propertyContext.data['dataTypeId']);

            if (!ctor) return;

            var designer = new ctor({
                form: this.form
            });

            designer.setupFor(propertyContext);

            this.form.addControl(designer);

            this.addChild(designer);

            this._handleSelectionOf(designer, false);

            this._onDropDesigner(toSource, designer);
        },
        _onDropDesigner: function(toSource, widget) {
            var layout = this.currentLayout,
                columnCount = layout.columnCount,
                toData = this._readFromLayout(layout, toSource.row, toSource.column),
                toWidget = toData && toData.widget,
                toRowSpan = (toWidget && toWidget.get('rowSpan')) || 1,
                widgetRowSpan = (widget && widget.get('rowSpan')) || 1,
                widgetColumnSpan = (widget && widget.get('columnSpan')) || 1,
                /* if we are dropping before a widget, or if there is no widget, the target row is the dropped row */
                targetRow = (!toData || toSource.before)
                    ? toSource.row
                    : toSource.row + toRowSpan,
                targetColumn = ((toSource.column + widgetColumnSpan) > columnCount)
                    ? columnCount - widgetColumnSpan
                    : toSource.column;

            this.moveWidget(widget, targetRow, targetColumn);
        },
        insertRowAround: function(widget, before) {
            var widgetRow = widget.get('row') || 0,
                widgetRowSpan = widget.get('rowSpan') || 1,
                targetRow = before ? widgetRow : widgetRow + widgetRowSpan;

            this.insertRowAt(targetRow);
        },
        insertRowAt: function(targetRow) {
            this.form.addRow(new RowDesigner({
                entry: {
                    'Height': 35,
                    'SizeType': 'Absolute'
                },
                form: this.form,
                index: targetRow
            }), targetRow);

            array.forEach(this.getChildren(), function(childWidget) {
                var childRow = childWidget.get('row') || 0;
                if (childRow >= targetRow)
                {
                    childWidget.unchecked(function() {
                        this.set('row', this.get('row') + 1);
                    });

                    topic.publish(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), childWidget, this);
                }
            }, this);

            /* delay to allow other dnd functionality to stop */
            /* todo: is there an event/message to listen to for this? */
            setTimeout(lang.hitch(this, function() {
                this.layout(true);
            }), 50);
        },
        deleteRowAt: function(targetRow) {
            var layout = this.currentLayout,
                rowCount = layout.rows.length,
                columnCount = layout.columnCount;

            for (var column = 0; column < columnCount; column++)
            {
                var currentData = this._readFromLayout(layout, targetRow, column);
                if (currentData) return; /* not empty */
            }

            this.form.removeRow(targetRow);

            array.forEach(this.getChildren(), function(childWidget) {
                var childRow = childWidget.get('row') || 0;
                if (childRow >= targetRow)
                {
                    childWidget.unchecked(function() {
                        this.set('row', this.get('row') - 1);
                    });

                    topic.publish(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), childWidget, this);
                }
            }, this);

            /* delay to allow other dnd functionality to stop */
            /* todo: is there an event/message to listen to for this? */
            setTimeout(lang.hitch(this, function() {
                this.layout(true);
            }), 50);
        },
        validateDeleteRowAt: function(targetRow) {
            var layout = this.currentLayout,
                rowCount = layout.rows.length,
                columnCount = layout.columnCount;

            for (var column = 0; column < columnCount; column++)
            {
                var currentData = this._readFromLayout(layout, targetRow, column);
                if (currentData) return {error: 'occupied'};
            }

            return false;
        },
        insertColumnAround: function(widget, before) {
            var widgetColumn = widget.get('column') || 0,
                widgetColumnSpan = widget.get('columnSpan') || 1,
                targetColumn = before ? widgetColumn : widgetColumn + widgetColumnSpan;

            this.insertColumnAt(targetColumn);
        },
        insertColumnAt: function(targetColumn) {
            this.form.addColumn(new ColumnDesigner({
                entry: {
                    'Width': 10.0,
                    'SizeType': 'Percent'
                },
                form: this.form,
                index: targetColumn
            }), targetColumn);

            array.forEach(this.getChildren(), function(childWidget) {
                var childColumn = childWidget.get('column') || 0;
                if (childColumn >= targetColumn)
                {
                    childWidget.unchecked(function() {
                        this.set('column', this.get('column') + 1);
                    });

                    topic.publish(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), childWidget, this);
                }
            }, this);

            /* delay to allow other dnd functionality to stop */
            /* todo: is there an event/message to listen to for this? */
            setTimeout(lang.hitch(this, function() {
                this.layout(true);
            }), 50);
        },
        deleteColumnAt: function(targetColumn) {
            var layout = this.currentLayout,
                rowCount = layout.rows.length,
                columnCount = layout.columnCount;

            for (var row = 0; row < rowCount; row++)
            {
                var currentData = this._readFromLayout(layout, row, targetColumn);
                if (currentData) return; /* not empty */
            }

            this.form.removeColumn(targetColumn);

            array.forEach(this.getChildren(), function(childWidget) {
                var childColumn = childWidget.get('column') || 0;
                if (childColumn >= targetColumn)
                {
                    childWidget.unchecked(function() {
                        this.set('column', this.get('column') - 1);
                    });

                    topic.publish(string.substitute('/quickforms/design/${0}/designerMoved', [this._designGroup]), childWidget, this);
                }
            }, this);

            /* delay to allow other dnd functionality to stop */
            /* todo: is there an event/message to listen to for this? */
            setTimeout(lang.hitch(this, function() {
                this.layout(true);
            }), 50);
        },
        validateDeleteColumnAt: function(targetColumn) {
            var layout = this.currentLayout,
                rowCount = layout.rows.length,
                columnCount = layout.columnCount;

            for (var row = 0; row < rowCount; row++)
            {
                var currentData = this._readFromLayout(layout, row, targetColumn);
                if (currentData) return {error: 'occupied'};
            }

            return false;
        },
        validateSize: function(widget, targetRowSpan, targetColumnSpan) {
            var layout = this.currentLayout,
                rowCount = layout.rows.length,
                columnCount = layout.columnCount,
                widgetRow = widget.get('row') || 0,
                widgetRowSpan = widget.get('rowSpan') || 1,
                widgetColumn = widget.get('column') || 0,
                widgetColumnSpan = widget.get('columnSpan') || 1;

            //console.log('row: %d, col: %d, rSpan: %d, cSpan: %d', widgetRow, widgetColumn, widgetRowSpan, widgetColumnSpan);

            if (targetRowSpan < 1)
                return { error: 'bounds', what: 'rowSpan', message: this.rowSpanBoundsErrorText };

            if (targetColumnSpan < 1)
                return { error: 'bounds', what: 'columnSpan', message: this.columnSpanBoundsErrorText };

            /* size being reduced, no need to validate beyond minimum */
            if (targetRowSpan <= widgetRowSpan && targetColumnSpan <= widgetColumnSpan)
                return false;

            if (columnCount < (widgetColumn + targetColumnSpan))
                return { error: 'bounds', what: 'column', message: this.columnBoundsErrorText };

            //console.log('checking row %d to %d', widgetRow, widgetRow + targetRowSpan - 1);

            for (var row = widgetRow; row < (widgetRow + targetRowSpan) && row < rowCount; row++)
            {
                var span = [
                    row < (widgetRow + widgetRowSpan)
                        ? widgetColumn + widgetColumnSpan
                        : widgetColumn,
                    widgetColumn + targetColumnSpan
                ];

                //console.log('row %d checking column %d to %d', row, span[0], span[1]);

                for (var column = span[0]; column < span[1]; column++)
                {
                    var currentData = this._readFromLayout(layout, row, column);

                    /* empty cell - skip */
                    if (!currentData) continue;

                    var currentWidget = currentData.widget;

                    /* encountered self - skip */
                    if (currentWidget === widget) continue;

                    /* since we do not push on widget resize, return an error as we've encountered something */
                    return { error: 'occupied', what: currentWidget.id, message: this.occupiedErrorText };
                }
            }

            return false;
        },
        validateMove: function(widget, targetRow, targetColumn) {
            var layout = this.currentLayout,
                columnCount = layout.columnCount,
                widgetColumnSpan = widget.get('columnSpan') || 1,
                /* if we are dropping before a widget, or if there is no widget, the target row is the dropped row */
                encountered = {};

            if (targetRow < 0)
                return { error: 'bounds', what: 'row', message: this.rowBoundsErrorText };

            if (targetColumn < 0)
                return { error: 'bounds', what: 'column', message: this.columnBoundsErrorText };

            if (columnCount < (targetColumn + widgetColumnSpan))
                return { error: 'bounds', what: 'column', message: this.columnBoundsErrorText };

            for (var column = targetColumn; column < (targetColumn + widgetColumnSpan); column++)
            {
                var currentData = this._readFromLayout(layout, targetRow, column);

                /* empty cell - skip */
                if (!currentData) continue;

                var currentWidget = currentData.widget;

                /* encountered self - skip */
                if (currentWidget === widget) continue;

                if (currentData.span)
                {
                    if (encountered[currentWidget.id]) continue;

                    /* encountered bisection - error */
                    return {
                        error: 'bisection',
                        what: currentWidget.id,
                        message: this.bisectionErrorText
                    };
                }

                encountered[currentWidget.id] = true;
            }

            return false;
        },
        validateMoveFromSource: function(toSource, fromSource) {
            var layout = this.currentLayout,
                columnCount = layout.columnCount,
                toData = this._readFromLayout(layout, toSource.row, toSource.column),
                toWidget = toData && toData.widget,
                toRowSpan = (toWidget && toWidget.get('rowSpan')) || 1,
                fromRow = fromSource.row,
                fromColumn = fromSource.column,
                fromData = this._readFromLayout(layout, fromRow, fromColumn),
                fromWidget = fromData && fromData.widget,
                fromRowSpan = (fromWidget && fromWidget.get('rowSpan')) || 1,
                fromColumnSpan = (fromWidget && fromWidget.get('columnSpan')) || 1,
                /* if we are dropping before a widget, or if there is no widget, the target row is the dropped row */
                targetRow = (!toData || toSource.before)
                    ? toSource.row
                    : toSource.row + toRowSpan,
                targetColumn = ((toSource.column + fromColumnSpan) > columnCount)
                    ? columnCount - fromColumnSpan
                    : toSource.column;

            return this.validateMove(fromWidget, targetRow, targetColumn);
        },
        clearSelections: function() {
            this._clearSelectionDom();
            this._clearSelectionState();
        },
        clear: function() {
            this._clearSelectionState();

            array.forEach(this.getChildren(), function(child) {
                this.removeChild(child);
            }, this);

            this.form = null;

            this.layout();
        },
        layout: function(force) {
            if(!this._borderBox || !this._borderBox.h) return;

            var layout = this.currentLayout,
                children = this.getChildren(),
                lookup = {},
                update = false;

            if (layout)
            {
                array.forEach(layout.children, function(child) {
                    lookup[child.id] = true;
                });

                for (var i = 0; i < children.length; i++)
                {
                    if (!lookup[children[i].id]) break;
                }

                update = (children.length != i) || (children.length != layout.children.length);
            }
            else
            {
                update = true;
            }

            if (update || force)
            {
                layout = this._buildLayoutFor(children);

                this._syncNonVisibleDesigners(layout);
                this._renderLayout(layout);
                this._syncDomWithSelectionState();
            }
        }
    });

    DesignSurface.Source = _Source;
    DesignSurface.RowContextMenu = _RowContextMenu;
    DesignSurface.ColumnContextMenu = _ColumnContextMenu;
    DesignSurface.CellContextMenu = _CellContextMenu;

    return DesignSurface;
});
},
'Sage/TaskPane/LeadTasksTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/LeadTasksTasklet", [
    'dojo/i18n!./nls/LeadTasksTasklet',
    'Sage/TaskPane/_BaseTaskPaneTasklet',
    'Sage/TaskPane/TaskPaneContent',
    'Sage/MainView/Lead/UpdateLeads',
    'Sage/UI/Dialogs',
    'dojo/_base/declare'
],
function (i18nStrings, _BaseTaskPaneTasklet, TaskPaneContent, UpdateLeads, Dialogs, declare) {
    var leadTasksTasklet = declare('Sage.TaskPane.LeadTasksTasklet', [_BaseTaskPaneTasklet, TaskPaneContent], {
        taskItems: [],
        constructor: function () {
            dojo.mixin(this, i18nStrings);
            this.taskItems = [
                { taskId: 'UpdateLeads', type: "Link", displayName: this.updateLeadsTitle, clientAction: 'leadTasksActions.updateLeads();',
                    securedAction: 'Entities/Lead/MultiUpdate'
                },
                { taskId: 'DeleteLeads', type: "Link", displayName: this.deleteLeadsTitle, clientAction: 'leadTasksActions.deleteLeads();',
                    securedAction: 'Entities/Lead/MultiDelete'
                }
            ];
        },
        updateLeads: function () {
            this.prepareSelectedRecords(this.updateLeadsActionItem(this.getSelectionInfo()));
        },
        updateLeadsActionItem: function (selectionInfo) {
            return function () {
                var updateDialog = dijit.byId("dlgUpdateMultipleLeads");
                if (!updateDialog) {
                    updateDialog = new UpdateLeads(selectionInfo);
                } else {
                    updateDialog.setSelectionInfo(selectionInfo);
                }
                updateDialog.show();
            };
        },
        deleteLeads: function () {
            this.prepareSelectedRecords(this.confirmDeleteLeadJob(this));
        },
        confirmDeleteLeadJob: function (self) {
            return function () {
                Dialogs.raiseQueryDialog(
                    i18nStrings.deleteLeadsTitle,
                    dojo.string.substitute('${0}', [i18nStrings.confirmDeleteLeads]),
                    function (result) {
                        self.deleteLeadsActionItem(result, self);
                    },
                    self.yesButtonText,
                    self.noButtonText
                );
            };
        },
        deleteLeadsActionItem: function (result, self) {
            if (result) {
                self.getSelectionInfo();
                var service = Sage.Data.SDataServiceRegistry.getSDataService('scheduling');
                var request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                                    .setApplicationName('$app')
                                    .setOperationName('trigger')
                                    .setResourceKind("jobs('Sage.SalesLogix.BusinessRules.Jobs.DeleteEntityJob')");
                var entry = {
                    "$name": "Sage.SalesLogix.BusinessRules.Jobs.DeleteEntityJob",
                    "request": {
                        "parameters": [
                        { "name": "EntityName", "value": "Lead" },
                        { "name": "SelectedIds", "value": (self.selectionInfo.selectionCount > 0) ? self.selectionInfo.selectedIds.join(',') || '' : '' },
                        { "name": "GroupId", "value": (this.selectionInfo.selectionCount == 0) ? this.getCurrentGroupId() || '' : '' }
                    ]
                    }
                };
                request.execute(entry, {
                    success: function (result) {
                    },
                    failure: function (result) {
                        console.log(result);
                        Dialogs.showError(dojo.string.substitute(i18nStrings.deleteJobError, [result.statusText]));
                    }
                });
            }
        },
        getCurrentGroupId: function () {
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (grpContextSvc) {
                var contextService = grpContextSvc.getContext();
                return contextService.CurrentGroupID;
            }
            return '';
        }
    });
    return leadTasksTasklet;
});
},
'Sage/MainView/Opportunity/nls/UpdateOpportunities':function(){
﻿define("Sage/MainView/Opportunity/nls/UpdateOpportunities", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            addToForecast_No: 'No',
            addToForecast_Yes: 'Yes',
            btnCancel_Caption: 'Cancel',
            btnOK_Caption: 'OK',
            estimatedClose_Days: 'days',
            estimatedClose_MoveOut: 'Move',
            estimatedClose_To: 'To',
            moveEstCloseDate_Backward: 'Backward',
            moveEstCloseDate_Forward: 'Forward',
            update_To_Caption: 'To:',
            update_Property_Caption: 'Update:',
            updateMultipleOpps_Caption: 'Update Opportunities',
            updateProp_AcctMgr: 'Account Manager',
            updateProp_Comments: 'Comments',
            updateProp_EstClose: 'Estimated Close',
            updateProp_Forecast: 'Add To Forecast',
            updateProp_Probability: 'Close Probability %',
            lookupActMgrText: 'Lookup Account Manager',
            lookupNameColText: 'Name',
            lookupTitleColText: 'Title',
            lookupDepartmentColText: 'Department',
            lookupRegionColText: 'Region',
            lookupTypeColText: 'Type',
            errorUnspecifiedValue: 'Please specify a value before continuing.',
            errorRequestingJobMgr: 'An error occured performing update: ${0}'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Filters/templates/EditFilterItems.html':"<div>\r\n    <div class=\"filter-items-dialog\" data-dojo-type=\"dijit.Dialog\" data-dojo-props=\"title:'${dialogTitle}'\" data-dojo-attach-point=\"dialogNode\">\r\n        <div class=\"filter-items-search\">\r\n            <label>${findItemText}</label> <input data-dojo-attach-point=\"textFind\" data-dojo-type=\"dijit.form.TextBox\" />\r\n            <span data-dojo-attach-point=\"buttonFind\" title=\"${findText}\" data-dojo-type=\"Sage.UI.ImageButton\" data-dojo-props=\"imageClass: 'icon_Find_16x16'\" data-dojo-attach-event=\"onClick:_onFindClick\"></span>&nbsp;\r\n\t\t\t<span data-dojo-attach-point=\"buttonClear\" title=\"${clearText}\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_onClearClick\">${clearText}</span>\r\n        </div>\r\n        <div class=\"filter-clear-all\">\r\n            <input data-dojo-attach-point=\"checkAll\" data-dojo-type=\"dijit.form.CheckBox\" />\r\n            <label>${selectAllText}</label>\r\n        </div>\r\n        <div class=\"filter-items-dialog-content\" data-dojo-attach-point=\"contentNode\">\r\n        </div>\r\n        <div class=\"button-bar alignright\">\r\n            <button data-dojo-attach-point=\"buttonOK\" data-dojo-attach-event=\"onClick:_onOKClick\" data-dojo-type=\"dijit.form.Button\">${okText}</button>\r\n            <button data-dojo-attach-point=\"buttonCancel\" data-dojo-attach-event=\"onClick:_onCancelClick\" data-dojo-type=\"dijit.form.Button\">${cancelText}</button>\r\n        </div>\r\n    </div>\r\n</div>",
'Sage/Store/main':function(){
define("Sage/Store/main", [
    "Sage/Store/SData"
    ], function() {
    // module:
    //		Sage/Store/main
    // summary:
    //		The Sage/Store/main module provides loading of all Sage/Store modules.
});
},
'Sage/UI/main':function(){
define("Sage/UI/main", [
    "Sage/UI/Columns/main",
    "Sage/UI/Controls/main",
    "Sage/UI/Dashboard/main",
    "Sage/UI/Alarms/main",
    "Sage/UI/SLXPreviewGrid/main",
    "Sage/UI/_DetailPane",
    "Sage/UI/_DialogLoadingMixin",
    "Sage/UI/widgetEditorLookup",
    "Sage/UI/_DetailPanelConfigurationProvider",
    "Sage/UI/_TitlePaneConfigProvider",
    "Sage/UI/AttachmentList",
    "Sage/UI/ActivityList",
    "Sage/UI/NotesHistoryList",
    "Sage/UI/ComboBox",
    "Sage/UI/ConditionManager",
    "Sage/UI/DashboardGroupListConfigurationProvider",
    "Sage/UI/DateTextBox",
    "Sage/UI/DetailPanel",
    "Sage/UI/Dialogs",
    "Sage/UI/EditableGrid",
    "Sage/UI/EditorContainer",
    "Sage/UI/Filters/CheckBoxFilter",// TODO: Create a Sage/UI/Filters/main
    "Sage/UI/Filters/LookupFilter",
    "Sage/UI/Filters/EditFilterItems",
    "Sage/UI/Filters/EditFilters",
    "Sage/UI/FilteringSelect",
    "Sage/UI/Filters/FilterManager",
    "Sage/UI/Filters/FilterPanel",
    "Sage/UI/Filters/GroupFilterConfigurationProvider",
    "Sage/UI/GridContainer",
    "Sage/UI/GridMenuItem",
    "Sage/UI/GroupListConfigurationProvider",
    "Sage/UI/GroupMenuFmtScope",
    "Sage/UI/GroupsTitlePaneConfigProvider",
    "Sage/UI/GroupTabPane",
    "Sage/UI/ImageButton",
    "Sage/UI/JsonPrintDetailPane",
    "Sage/UI/ListPanel",
    "Sage/UI/MenuBar",
    "Sage/UI/MenuBarItem",
    "Sage/UI/MenuItem",
    "Sage/UI/NavBar",
    "Sage/UI/NavBarPane",
    "Sage/UI/NumberTextBox",
    "Sage/UI/OrientableMenuBar",
    "Sage/UI/PopupMenuBarItem",
    "Sage/UI/PopupMenuItem",
    "Sage/UI/SDataLookup",
    //"Sage/UI/SDataMainViewConfigurationProvider",
    "Sage/UI/SearchConditionWidget",
    "Sage/UI/SLXPreviewGrid",
    "Sage/UI/SpeedSearch",
    "Sage/UI/SummaryContainer",
    "Sage/UI/SummaryContents",
    "Sage/UI/SummaryDetailPane",
    "Sage/UI/SummaryFormatterScope",
    "Sage/UI/TextBox",
    "Sage/UI/TimeZoneItem",
    "Sage/UI/TitleContentPane",
    "Sage/UI/ToggleButton",
    "Sage/UI/ToolBarLabel",
    "Sage/UI/UniqueToListValidationTextBox",
    "Sage/UI/URL",
    "Sage/UI/WidgetEditor",
    "Sage/UI/ActivityScheduler",
    "Sage/UI/TimelessActivitiesPane",
    "Sage/UI/Calendar",
    "Sage/UI/CalendarUsersListPane"
], function() {
	// module:
        // Sage/UI/main
	// summary:
        // The Sage/UI/main module provides loading of all Sage/UI modules.
});

},
'Sage/UI/Columns/PickList':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/PickList", [
    'Sage/UI/Controls/PickList',
    'Sage/UI/Controls/DropDownSelectPickList',
    'Sage/Data/BaseSDataStore',
    'dojo/_base/declare'
],
function (PickList, DropDownSelectPickList, BaseSDataStore, declare) {
    var widget = declare('Sage.UI.Columns.PickList', dojox.grid.cells._Widget, {
        icon: '',
        widgetClass: DropDownSelectPickList,
        /**
        * @property {object} storeData Data fetched from SData stored here.
        */
        storeData: null,
        pickList: null,
        storageMode: 'id', //Default for column picklist
        displayMode: 'AsText', //Default for column picklist formatting
        constructor: function (args) {
            this.inherited(arguments);
            if (this.storageMode === 'id' && this.displayMode === 'AsText') {
                if (this.pickListName && this.storeData === null) {
                    this._loadPickList();
                }
            }
        },
        formatter: function (val, index) {
            if (this.storageMode === 'id') {
            val = this.getStoreTextById(val);
            }
            return val;
        },
        _loadPickList: function () {
            var deferred = new dojo.Deferred();
            var config = {
                pickListName: this.pickListName, // Required
                // storeOptions: {}, // Optional
                // dataStore: {}, // Optional
                canEditText: false,
                itemMustExist: true,
                maxLength: -1,
                storeMode: this.storageMode, // text, id, code
                sort: false,
                displayMode: this.displayMode
            };
            this.pickList = new PickList(config);
            this.pickList.getPickListData(deferred);
            deferred.then(dojo.hitch(this, this._loadData), function (e) {
                console.error(e); // errback
            });

        },
        getStoreTextById: function (val) {
            if (this.storeData) {
                //If the value is not found as an id in the list, return the value back.
                var result = val;
                dojo.forEach(this.storeData.items, function (item, index, array) {
                    //console.log(item.id + ' === ' + id);
                    if (item.id === val) {
                        result = item.text;
                    }
                }, this);
            }

            return result;
        },
        _loadData: function (data) {
                var items = [];
                for (var i = 0; i < data.items.$resources.length; i++) {
                    var item = data.items.$resources[i];
                    items.push({
                        id: item.$key,
                        code: item.code,
                        number: item.number,
                        text: item.text
                    });
                }
                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };
            }
    });

    return widget;
});

},
'Sage/UI/Controls/DurationSelect':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/DurationSelect", [
    'Sage/UI/Controls/_customSelectMixin',
    'Sage/Utility/Activity',
    'dojo/date',
    'dojo/data/ItemFileReadStore',
    'dojo/i18n!./nls/DurationSelect',
    'dojo/_base/declare'
],
function (_customSelectMixin, activityUtility, dojoDate, ItemFileReadStore, durSelectStrings, declare) {
    var durationSelect = declare('Sage.UI.Controls.DurationSelect', _customSelectMixin, {
        id: '',
        startTime: new Date(),
        timeValue: new Date(),
        valuesAreAfterStart: true,
        _store: null,
        _storeData: {},
        labelFmt: '${amount} ${interval} (${endTime})',
        splitAmoutLabelFmt: '${amount1} ${interval1}, ${amount2} ${interval2} (${endTime})',

        //i18n strings
        minuteText: 'minute',
        minutesText: 'minutes',
        hourText: 'hour',
        hoursText: 'hours',
        dayText: 'day',
        daysText: 'days',
        //end i18n strings.
        timeIncrements: [0, 5, 10, 15, 30, 60, 120, 240],
        items: [],
        itemsByDur: {},
        constructor: function () {
            dojo.mixin(this, durSelectStrings);
        },
        resetItems: function () {
            this.items = [];
            this.itemsByDur = {};
        },
        _fillSelect: function () {
            if (this._select) {
                this.resetItems();
                var hasItemForCurrentValue = false;
                for (var i = 0; i < this.timeIncrements.length; i++) {
                    var inc = this.timeIncrements[i];
                    this.items.push(this._createItem(inc));
                    hasItemForCurrentValue = hasItemForCurrentValue || (this.value === inc);
                }
                if (!hasItemForCurrentValue && (this.value)) {
                    //this.timeIncrements.push(this.value);
                    this.items.push(this._createItem(this.value));
                }
                this._storeData = {
                    identifier: 'value',
                    label: 'label',
                    items: this.items
                };

                this._store = new ItemFileReadStore({ data: this._storeData });
                this._select.set('store', this._store);
                this._select.set('searchAttr', 'label');
                if (this.value || this.value === 0) {
                    this.set('value', this.value);
                }
            }
        },
        _createItem: function (inc) {
            var st = this.startTime;
            if (st.getHours() === 0 && st.getMinutes === 0 && st.getSeconds() === 5) {
                st = new Date(st.getUTCFullYear(), st.getUTCMonth(), st.getUTCDate(), 0, 0, 0);
            }
            var newD;
            newD = dojoDate.add(st, 'minute', (this.valuesAreAfterStart) ? inc : inc * -1);
            var obj = {
                'value': inc,
                'dateValue': newD,
                'label': this._formatLabel(inc, newD)
            };
            this.itemsByDur[inc] = obj;
            return obj;
        },
        _formatLabel: function (inc, dateval) {
            var hourinc;
            var fmtOptions = {
                amount: inc,
                interval: (inc === 1) ? this.minuteText : this.minutesText,
                endTime: dojoDate.locale.format(dateval, { selector: 'time' })
            };
            var fmtStr = this.labelFmt;
            if (inc > 59) {
                var mod = inc % 60;
                hourinc = Math.floor(inc / 60);
                if (mod === 0) {
                    fmtOptions['amount'] = hourinc;
                    fmtOptions['interval'] = (hourinc === 1) ? this.hourText : this.hoursText;
                } else {
                    fmtOptions['amount1'] = hourinc;
                    fmtOptions['interval1'] = (hourinc === 1) ? this.hourText : this.hoursText;
                    fmtOptions['amount2'] = mod;
                    fmtOptions['interval2'] = (mod === 1) ? this.minuteText : this.minutesText;
                    fmtStr = this.splitAmoutLabelFmt;
                }
                if (hourinc > 23) {
                    var dayinc = Math.round(hourinc / 24);
                    fmtOptions['amount'] = dayinc;
                    fmtOptions['interval'] = (dayinc === 1) ? this.dayText : this.daysText;
                    fmtOptions['endTime'] = dojoDate.locale.format(dateval, { selector: 'datetime' });
                }
            }
            return dojo.string.substitute(fmtStr, fmtOptions);
        },
        _handleValueNotInStore: function (newValue) {
            //override this method to create a new item, or revert to last known good value...
            var curVal = this.text;
            var timeReg = /\(([\s\S]*)\)/;
            var newMatches = timeReg.exec(newValue);
            var curMatches = timeReg.exec(curVal);
            if ((newMatches) && (curMatches)) {
                //we have something in parenthesis - 
                if (newMatches[1] === curMatches[1]) {
                    //the time was the same, so focus on what they put as the duration number...
                    newValue = newValue.replace(newMatches[0], '');
                } else {
                    //they changed the time... can we parse it?
                    var timeDate = dojoDate.locale.parse(newMatches[1], { selector: 'time' });
                    if (timeDate) {
                        timeDate.setFullYear(this.startTime.getFullYear());
                        timeDate.setMonth(this.startTime.getMonth());
                        timeDate.setDate(this.startTime.getDate());
                        this._setTimeValueAttr(timeDate);
                        return this.value;
                    }
                }
            }

            var dur = 0;
            if (typeof newValue === 'number') {
                dur = newValue;
            } else {
                //see if we have one or more numbers and intervals...
                if (newValue.indexOf(',') > 0) {
                    var sections = newValue.split(',');
                    for (var i = 0; i < sections.length; i++) {
                        var partDur = this._getMinutesFromStringPart(sections[i]);
                        if (partDur) {
                            dur += partDur;
                        }
                    }
                } else {
                    dur = this._getMinutesFromStringPart(newValue);
                }
            }
            if (!dur) {
                this._select.set('value', this.text);
                return this.value;
            }
            var newOption = this._createItem(dur);
            this.value = newOption.value;
            this.text = newOption.label;
            this._select.set('displayedValue', newOption.label);
            return newOption.value;
        },
        _setValueAttr: function (value) {
            this._removeOldValueFromStore();
            this.text = value;
            this.value = value;
            if (this._store) {
                this._store.fetchItemByIdentity({
                    identity: value,
                    onItem: function (item) {
                        if (item) {
                            //                        console.log('found the item in the store... %o', item);
                            this._select.set('value', this._store.getValue(item, this._storeData.label));
                            this.value = this._store.getValue(item, this._storeData.identifier);
                            this.text = this._store.getValue(item, this._storeData.label);
                        } else {
                            this._handleValueNotInStore(value);
                            //this._select.set('value', value);
                        }
                    },
                    onError: function () {
                        //console.log('did not find item. ' + this.value);
                    },
                    scope: this
                });
            }
        },
        _removeOldValueFromStore: function () {
            //we may want to leave it...
            for (var i = 0; i < this.timeIncrements.length; i++) {
                if (this.value === this.timeIncrements[i]) {
                    return;
                }
            }
            delete (this.itemsByDur[this.value]);
            var l = this.items.length;
            for (i = 0; i < l; i++) {
                if (this.items[i].value === this.value || this.items[i].value[0] === this.value) {
                    this.items.splice(i, 1);
                    return;
                }
            }
        },
        _getMinutesFromStringPart: function (str) {
            var parts = str.trim().split(' ');
            var num = parseInt(parts[0], 10);
            if (isNaN(num)) {
                return false;
            }
            if (parts.length > 1) {
                if (this.hoursText.indexOf(parts[1]) > -1) {
                    num = num * 60;
                }
            }
            return num;
        },
        _setStartTimeAttr: function (startTime) {
            if (dojoDate.compare(this.startTime, startTime, 'datetime') !== 0) {
                this.startTime = startTime;
                this._fillSelect();
            }
        },
        _setValuesAreAfterStartAttr: function (areAfter) {
            if (this.valuesAreAfterStart !== areAfter) {
                this.valuesAreAfterStart = areAfter;
                this._fillSelect();
            }
        },
        _getTimeValueAttr: function () {
            if (this.itemsByDur.hasOwnProperty(this.value)) {
                var dVal = this.itemsByDur[this.value].dateValue;
                return (dojo.isArray(dVal)) ? dVal[0] : dVal;
            } else {
                if (this.value && this.startTime) {
                    var d = dojoDate.add(this.startTime, 'minute', (this.valuesAreAfterStart) ? this.value : this.value * -1);
                    this.dateValue = d;
                    return this.dateValue;
                }
                return null;
            }
        },
        _setTimeValueAttr: function (time) {
            if (!time) {
                return;
            }
            if (this.items.length < 1) {
                this._fillSelect();
            }
            var d = this.startTime;
            if (d.getHours() === 0 && d.getMinutes === 0 && d.getSeconds() === 5) {
                time = new Date(d.getUTCFullYear(),
                    d.getUTCMonth(),
                    d.getUTCDate(),
                    d.getUTCHours(),
                    d.getUTCMinutes(),
                    d.getUTCSeconds());
            }
            for (var obj in this.itemsByDur) {
                if (obj && this.itemsByDur[obj].dateValue) {
                    var compDate = dojo.isArray(this.itemsByDur[obj].dateValue) ? this.itemsByDur[obj].dateValue[0] : this.itemsByDur[obj].dateValue;
                    if (dojoDate.compare(compDate, time, 'datetime') === 0) {
                        this.set('value', this.itemsByDur[obj].value);
                        this.text = this.itemsByDur[obj].label;
                        this._select.set('displayedValue', this.itemsByDur[obj].label);
                        return;
                    }
                }
            }
            //need to make one...
            //find difference in minutes, then create item
            var dur = dojoDate.difference(this.startTime, time, 'minute');
            if (dur < 0) {
                dur = dur * -1; // ensure it is a positive value...
            }
            var o = {
                'value': dur,
                'dateValue': time,
                'label': this._formatLabel(dur, time)
            };
            this.set('value', dur);
            this.text = o.label;
            this.itemsByDur[dur] = o;
            this._select.set('displayedValue', o.label);
        },
        _setTimeIncrementsAttr: function (incrments) {
            if (this.timeIncrements === incrments) {
                return;
            }
            this.timeIncrements = incrments;
            this._fillSelect();
        }
    });
    return durationSelect;
});
},
'Sage/Services/ClientEntityContext':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, TabControl, __doPostBack */
define("Sage/Services/ClientEntityContext", [
    'dojo/_base/declare'
],
function (declare) {
    var widget = declare('Sage.Services.ClientEntityContext', null, {
        hasClearListener: false,
        tempContext: false,
        constructor: function (options) {
            //console.log('ClientEntityContext is starting up...');
            this.inherited(arguments);
            dojo.mixin(this, options);
            this.emptyContext = { "EntityId": "", "EntityType": "", "Description": "", "EntityTableName": "" };
        },
        getContext: function () {
            if (this.tempContext) {
                return this.tempContext;
            }
            if ((Sage.Data) && (Sage.Data.EntityContextStore)) {
                return Sage.Data.EntityContextStore;
            }
            return this.emptyContext;
        },
        setContext: function (obj) {
            Sage.Data.EntityContextStore = dojo.mixin(this.emptyContext, obj);
            this.onEntityContextChanged(Sage.Data.EntityContextStore);
        },
        setTemporaryContext: function (obj) {
            this.tempContext = obj;
        },
        clearTemporaryContext: function () {
            this.tempContext = false;
        },
        navigateSLXGroupEntity: function (toEntityId, previousEntityid, clientPosition) {
            if (Sage.Services) {
                var mgr = Sage.Services.getService("ClientBindingManagerService");
                if ((mgr) && (!mgr.canChangeEntityContext())) {
                    return false;
                }

                var contextservice = Sage.Services.getService("ClientContextService");
                if (contextservice.containsKey("ClientEntityId")) {
                    contextservice.setValue("ClientEntityId", toEntityId);
                } else {
                    contextservice.add("ClientEntityId", toEntityId);
                }
                previousEntityid = (previousEntityid) ? previousEntityid : Sage.Data.EntityContextStore.EntityId;
                if (contextservice.containsKey("PreviousEntityId")) {
                    contextservice.setValue("PreviousEntityId", previousEntityid);
                } else {
                    contextservice.add("PreviousEntityId", previousEntityid);
                }
                if (clientPosition) {
                    if (contextservice.containsKey("ClientEntityPosition")) {
                        contextservice.setValue("ClientEntityPosition", clientPosition);
                    } else {
                        contextservice.add("ClientEntityPosition", clientPosition);
                    }
                }
                //wire up cleanup service...
                if (!this.hasClearListener) {
                    Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(function () {
                        if (Sage.Services) {
                            var contextservice = Sage.Services.getService("ClientContextService");
                            if (contextservice.containsKey("PreviousEntityId")) {
                                contextservice.remove("PreviousEntityId");
                            }
                        }
                    });
                    this.hasClearListener = true;
                }
                //set current state for things that load earlier in the response than the new full context.
                Sage.Data.EntityContextStore.EntityId = toEntityId;
                Sage.Data.EntityContextStore.Description = '';

            }
            if (window.TabControl) {
                var tState = TabControl.getState();
                if (tState) {
                    tState.clearUpdatedTabs();
                    TabControl.updateStateProxy();
                }
            }
            __doPostBack("MainContent", "");
            return true;
        },
        onEntityContextChanged: function (newContext) {

        }
    });

    if (!Sage.Services.hasService('ClientEntityContext')) {
        Sage.Services.addService('ClientEntityContext', new Sage.Services.ClientEntityContext());
    }

    return widget;
});
},
'Sage/QuickForms/Design/Editors/CheckBoxAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/CheckBoxAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/CheckBoxAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.CheckBoxAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" style="display:none;" title="{%= $.checkedTooltipText %}">',
                        '<label>{%= $.checkedText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_checked" data-dojo-attach-event="onChange:_onCheckedChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _checked: null,
        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        checkedText: 'Checked:',
        checkedTooltipText: 'Sets default state of checkbox to selected.',
        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._checked.set('value', this._designer.get('checked'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onCheckedChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('checked', value);
        },
        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('enabled', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'url:Sage/MainView/Contact/templates/ContactDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Contact.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccount_Caption || \"Account:\" %}</td>',\r\n                        '<td class=\"DataItem\"><a href=\"Account.aspx?entityid={{%= $.templateData.account_id %}}\">{%= Sage.Utility.htmlEncode($.templateData.accountname) %}</a></td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Caption || \"Title:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.title %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWorkPhone_Caption || \"Work Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.workphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svHomePhone_Caption || \"Home Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.homephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMobilePhone_Caption || \"Mobile Phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mobilephone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n] ",
'Sage/UI/GridContainer':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GridContainer", [
       'dojox/layout/GridContainer',
       'dojo/_base/declare'
],
function (gridContainer, declare) {
    var container = declare("Sage.UI.GridContainer", gridContainer, {
        /**
        * The OOB dojox gridContainer class has a bug where this method
        * doesn't always get called with a manager object.
        * Create a new args object with the correct _dragManager.
        * @private
        */  

        _updateColumnsWidth: function (/*Object*/manager) {
            if (!manager) {            
                var newArgs = [];
                newArgs.push(this._dragManager);
                newArgs.callee = arguments.callee;
                this.inherited(newArgs);
            }
            else {
                this.inherited(arguments);
            }
        }
    });

    return container;
});


},
'Sage/QuickForms/Design/nls/DateTimePickerControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/DateTimePickerControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "DateTime Picker"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/DateTextBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/DateTextBox", [
       'dijit/form/DateTextBox',
       'Sage/Utility',
       'dojo/_base/declare'
],
function (dateTextBox, util, declare) {
    var widget = declare('Sage.UI.DateTextBox', dateTextBox, {
        _getValueAttr: function () {
            var d = this.inherited(arguments);
            return (d) ? util.Convert.toJsonStringFromDate(d) : d;
        },
        _setValueAttr: function (/*Date*/value, /*Boolean?*/priorityChange, /*String?*/formattedValue) {
            if (Sage.Utility.Convert.isDateString(value)) {
                value = util.Convert.toDateFromString(value);
            }
            this.inherited(arguments, [value, priorityChange, formattedValue]);
        }
    });

    return widget;
});
},
'Sage/UI/Controls/nls/HelpMenu':function(){
﻿define("Sage/UI/Controls/nls/HelpMenu", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            helpText: 'Help',    
            aboutText: 'About',
            webClientHelpText: 'Web Client Help',
            gettingStartedText: 'Getting Started Guide',
            quickReferenceText: 'Quick Reference Card'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/nls/LayoutPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/LayoutPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Layout",
            positionText: "Position",
            sizeText: "Size",
            rowText: "Row:",
            rowTooltipText: "Row number of the control.",
            columnText: "Column:",
            columnTooltipText: "Column number of the control.",
            rowSpanText: "Row Span:",
            rowSpanTooltipText: "Number of cells the control occupies vertically.",
            columnSpanText: "Column Span:",
            columnSpanTooltipText: "Number of cells the control occupies horizontally."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/_DetailPanelConfigurationProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/_DetailPanelConfigurationProvider", [
    'dojo/_base/declare'
],
function (declare) {
    var configProvider = declare('Sage.UI._DetailPanelConfigurationProvider', null, {
        // summary:
        //      Base class for classes that will act as a configuration provider for a Sage.UI.DetailPanel.

        // detailModeConfiguration: object
        //      The configuration object for the Sage.UI.DetailPanel.  Do not access this property directly, use requestDetailModeConfiguration() 
        //      and provide a callback instead.  Classes deriving from this can set this property for returning to the DetailPanel
        //      Example configuration object: { toolBar: false, contentType: typename, <other configuration options for constructor of the object defined by contentType> }
        detailModeConfiguration: false,        
        
        constructor: function(options) {
            dojo.mixin(this, options);
        },
        requestDetailModeConfiguration: function(options) {
            // summary:
            //      returns the configuration for the detail panel.
            // options: object
            //      An object containing callback methods: 'success' and 'failure'.  The configuration object will be passed 
            //      as an argument to the success method.
            if (options.success && this.detailModeConfiguration) {
                options.success.call(options.scope || this, this.detailModeConfiguration, this);
            }
        }
    });
    
    return configProvider;
});
},
'Sage/TaskPane/nls/UserTasklet':function(){
﻿define("Sage/TaskPane/nls/UserTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        addToRoleTitle: 'Add to Role',
        resetUsersTitle: 'Reset Users'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Utility/File/LibraryDocument':function(){
﻿/*globals define, Sage, window, dojo */
define("Sage/Utility/File/LibraryDocument", [
        'Sage/Data/SingleEntrySDataStore',
        'Sage/Data/SDataServiceRegistry',
        'Sage/Utility/File',
        'Sage/UI/Dialogs',
        'dojo/_base/lang',
        'dojo/string',
        'Sage/Utility',
        'Sage/Utility/ErrorHandler',
        'Sage/Utility/File/DescriptionsForm',
        'dojo/i18n!./nls/LibraryDocument'
    ],
// ReSharper disable InconsistentNaming
    function (SingleEntrySDataStore, SDataServiceRegistry, FileUtil, dialogs, dLang, dString,
        Utility, ErrorHandler, DescriptionsForm, nls) {

        Sage.namespace('Utility.File.LibraryDocument');
        Sage.Utility.File.LibraryDocument = {
            _stateInfo: {
                total: 0,
                processed: 0,
                successCount: 0,
                failedCount: 0
            },
            _errors: [],
            _store: false,
            _target: false,
            _totalProgress: 0,
            _attachmentTemplate: false,
            _files: [],
            _fileCount: 0,
            _uploadAttemptCount: 0,
            _isUploading: false,
            _descriptionsForm: false,
            _uploadUrlFmt: 'slxdata.ashx/slx/system/-/libraryDirectories(\'${0}\')/documents/file',
            _uploadUrl: false,
            createDocuments: function (files, target) {
                this._target = (target && typeof target !== 'undefined') ? target : false;
                var entityDesc = 'Library Document';
                this._ensureDescriptionsForm();
                this._descriptionsForm.set('entityDesc', entityDesc);
                this._descriptionsForm.set('files', files);
                this._descriptionsForm.show();
            },
            handleDescriptions: function (files, descriptions) {
                var propname = '';
                var id = '';
                for (var i = 0; i < descriptions.length; i++) {
                    descriptions[i][propname] = id;
                }
                for (var i = 0; i < files.length; i++) {
                    this._files.push(files[i]);
                }
                this.uploadFiles();
            },
            _checkState: function () {
                if (this._stateInfo.processed == this._stateInfo.total) {
                    dialogs.closeProgressBar();
                    if (this._errors.length > 0) {
                        var crlf = '<br>';
                        var arrMsg = [];
                        arrMsg.push(dString.substitute(this.uploadError, [this._stateInfo.failedCount, this._stateInfo.successCount]));
                        arrMsg.push(crlf);
                        var self = this;
                        dojo.forEach(this._errors, function (err, idx) {
                            if (err && typeof err === 'object' && err.hasOwnProperty('message')) {
                                arrMsg.push(dString.substitute(self.failureNumber, [(idx + 1)]) + err.message);
                                if (idx !== (self._errors.length - 1)) {
                                    arrMsg.push(crlf);
                                }
                            }
                        });
                        this._errors = [];
                        Sage.UI.Dialogs.showError(arrMsg.join(crlf));
                    }
                    dojo.publish('/sage/library/manager/libraryDocuments/refresh', null);
                    this._resetCounts();
                }
            },
            _resetCounts: function () {
                this._fileCount = 0;
                this._uploadAttemptCount = 0;
                this._isUploading = false;
                this._totalProgress = 0;
                this._stateInfo.processed = 0;
                this._stateInfo.total = 0;
                this._stateInfo.failedCount = 0;
                this._stateInfo.successCount = 0;
            },
            _failAdd: function (xhr) {
                var options = { url: this._uploadUrl };
                var oError = ErrorHandler.getHttpStatusInfo(xhr, options);
                if (oError && typeof oError === 'object') {
                    this._errors.push(oError);
                } else {
                    this._errors.push({ message: this.unknownError });
                }
                this._uploadAttemptCount = this._uploadAttemptCount + 1;
                this._updateProgress((this._fileCount < 1) ? 100 : (this._uploadAttemptCount / this._fileCount) * 100);
                this._stateInfo.processed++;
                this._stateInfo.failedCount++;
                this._checkState();
            },
            _ensureDescriptionsForm: function () {
                if (!this._descriptionsForm) {
                    this._descriptionsForm = new DescriptionsForm({
                        entityDesc: '',
                        fileType: Sage.Utility.File.fileType.ftLibraryDocs,
                        files: this._files || []
                    });
                    dojo.connect(this._descriptionsForm, 'onDescriptionsEntered', this, 'handleDescriptions');
                }
            },
            _successUpload: function (request) {
                this._uploadAttemptCount = this._uploadAttemptCount + 1;
                this._updateProgress((this._fileCount < 1) ? 100 : (this._uploadAttemptCount / this._fileCount) * 100);
                this._stateInfo.processed++;
                this._stateInfo.successCount++;
                this._checkState();
            },
            _updateProgress: function (curFileProgress) {
                //console.log('progress obj: %o', curFileProgress);
                var pct = this._totalProgress;
                //console.log('pct: ' + pct);
                if (curFileProgress && curFileProgress.lengthComputable) {
                    var thisFilePercent = (curFileProgress.loaded / curFileProgress.total) * 100;
                    pct += Math.round(thisFilePercent / this._fileCount);
                } else if (curFileProgress) {
                    pct = curFileProgress;
                }
                this._totalProgress = pct;
                //console.log('now calculated pct: ' + pct);
                if (pct < 99) {
                    dialogs.showProgressBar({
                        pct: pct,
                        title: this.percentComplete
                    });
                }
            },
            uploadFiles: function (template) {
                this._isUploading = true;
                this._fileCount = this._files.length;
                if (template && !this._attachmentTemplate) {
                    this._attachmentTemplate = template;
                }
                var sDirId = '';
                if (Sage.Library && Sage.Library.FileHandler) {
                    sDirId = Sage.Library.FileHandler.findDirectoryId(this._target);
                }
                var sUrl = dString.substitute(this._uploadUrlFmt, [sDirId]);
                this._uploadUrl = sUrl;
                this._stateInfo.processed = 0;
                this._stateInfo.total = this._files.length;
                while (this._files.length > 0) {
                    var file = this._files.pop();
                    Sage.Utility.File.uploadFile(file,
                        this._uploadUrl,
                        this._updateProgress,
                        this._successUpload,
                        this._failAdd,
                        this);
                }
            }
        };

        dLang.mixin(Sage.Utility.File.LibraryDocument, nls);
        return Sage.Utility.File.LibraryDocument;
    });

},
'Sage/UI/Controls/DropDownSelectUser':function(){
require({cache:{
'url:Sage/UI/Controls/templates/DropDownSelectUser.html':"<div>\r\n    <select data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" dojoAttachPoint=\"comboBox\" dojoAttachEvent=\"onBlur: _onBlur\">\r\n    </select>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/DropDownSelectUser", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/_Widget',
       'dijit/form/ComboBox',
       'dojo/data/ItemFileReadStore',
       'Sage/Data/BaseSDataStore',
       'Sage/Data/SDataServiceRegistry',
       'Sage/UI/ComboBox',
       'dojo/text!./templates/DropDownSelectUser.html',
       'dojo/_base/declare'
],
function (_TemplatedMixin, _WidgetsInTemplateMixin, _Widget, comboBox, itemFileReadStore, baseSDataStore, _SDataServiceRegistry, sageComboBox, template, declare) {
    /**
     * @class Search Condition "user" widget.
     */
    var widget = declare('Sage.UI.Controls.DropDownSelectUser', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        /**
         * @property {object} dataStore The data store which implements fetch()
         */
        dataStore: null,

        /**
         * @property {object} storeOptions The data store options object. See default values in constructor.
         */
        storeOptions: null,
        
        storeData: null,
        
        // Display properties
        templateString: template,
        widgetsInTemplate: true,
        
        /**
         * Takes the following options object: 
         * {
         *  storeOptions: {}, // Optional
         * }
         *
         * @constructor
         */
        constructor: function(options) {
            this.storeOptions = options.storeOptions || {
                    include: ['UserInfo'],
                    select: [
                        'Id',
                        'UserName',
                        'UserInfo/FirstName',
                        'UserInfo/LastName',
                        'Type'
                    ],
                    sort: [
                        { attribute: 'UserInfo.LastName', descending: false }
                    ],
                    service: _SDataServiceRegistry.getSDataService('dynamic', false, true, true), 
                    resourceKind: 'users'
            };

            this.dataStore = new baseSDataStore(this.storeOptions);
            
            this.inherited(arguments);
        },
        postCreate: function () {            
            var def = new dojo.Deferred();
            this.getUserData(def);

            def.then(dojo.hitch(this, function(data) {
                if(!data) {
                    return;
                }

                var items = [];
                var count = data.length;
                var item = null;
                for(var i = 0; i < count; i++) {
                    item = data[i];
                    if (item.Type !== 'Template') {
                        items.push({
                            id: item.$key,
                            text: [item.UserInfo.FirstName, item.UserInfo.LastName].join(' ')
                        });
                    }
                }

                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };

                var tempStore = new itemFileReadStore({data: this.storeData});
                this.comboBox.set('store', tempStore);
                this.comboBox.set('searchAttr', 'text');

            }), function(e) {
                // errback
                console.error(e);
            });
            
            this.inherited(arguments);
        },
        /**
         * @returns {object} SData users object with child UserInfo resource included. dojo.Deferred required as an argument.
         */
        getUserData: function(deferred) {
            this.dataStore.fetch({
                onComplete: function(data) {
                    deferred.callback(data);
                },
                onError: function(e) {
                    deferred.errback(e);
                },
                scope: this
            });
        },
        _getValueAttr: function() {
            return this.comboBox.get('value');
        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/Editors/PickListAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/PickListAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dojo/data/ItemFileWriteStore',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/PickListAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    ItemFileWriteStore,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.PickListAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.displayModeTooltipText %}">',
                        '<label>{%= $.displayModeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_displayMode" data-dojo-attach-event="onChange:_onDisplayModeChange">',
                        '{% for (var mode in $.displayModeTypeText) { %}',
                            '<span value="{%= mode %}">{%= $.displayModeTypeText[mode] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.allowMultiplesTooltipText %}">',
                        '<label>{%= $.allowMultiplesText %}</label>',
                        '<div data-dojo-attach-point="_allowMultiples" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onAllowMultiplesChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.canEditTextTooltipText %}">',
                        '<label>{%= $.canEditTextText %}</label>',
                    '<div data-dojo-attach-point="_canEditText" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onCanEditTextChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.mustExistInListTooltipText %}">',
                        '<label>{%= $.mustExistInListText %}</label>',
                        '<div data-dojo-attach-point="_mustExistInList" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onMustExistInListChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.maxLengthTooltipText %}">',
                        '<label>{%= $.maxLengthText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_maxLength" data-dojo-attach-event="onChange:_onMaxLengthChange" data-dojo-props="constraints:{min:-1,places:0}"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.pickListNameTooltipText %}">',
                        '<label>{%= $.pickListNameText %}</label>',
                        '<div data-dojo-type="dijit.form.ComboBox" data-dojo-attach-point="_pickListName" data-dojo-attach-event="onChange:_onPickListNameChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.storageModeTooltipText %}">',
                        '<label>{%= $.storageModeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_storageMode" data-dojo-attach-event="onChange:_onStorageModeChange" data-dojo-props="disabled:true">',
                        '{% for (var mode in $.storageModeTypeText) { %}',
                            '<span value="{%= mode %}">{%= $.storageModeTypeText[mode] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _allowMultiples: null,
        _canEditText: null,
        _controlType: null,
        _controlId: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _displayMode: null,
        _enabled: null,
        _maxLength: null,
        _mustExistInList: null,
        _pickListName: null,
        _required: null,
        _storageMode: null,
        _visible: null,

        pickListRequest: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        allowMultiplesText: 'Allow Multiple Selections:',
        allowMultiplesTooltipText: 'Allows user to select more than one item.',
        canEditTextText: 'Can Edit Text:',
        canEditTextTooltipText: 'Allows user to type value.',
        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        displayModeText: 'Display Mode:',
        displayModeTooltipText: 'Mode of display of control: text box, hyperlink, or plain text.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        maxLengthText: 'Max Length:',
        maxLengthTooltipText: 'Maximum number of characters user can enter.',
        mustExistInListText: 'Item Must Exist:',
        mustExistInListTooltipText: 'Requires typed value to be on list.',
        pickListNameText: 'Pick List Name:',
        pickListNameTooltipText: 'Name of the list of values the user can select from when entering data.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        storageModeText: 'Storage Mode:',
        storageModeTooltipText: 'How the value is stored: Text, Id, or Code.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },
        displayModeTypeText: {
            'AsControl': 'As Control',
            'AsText': 'As Text',
            'AsHyperlink': 'As Hyperlink'
        },
        storageModeTypeText: {
            'Text': 'Text',
            'Id': 'ID',
            'Code': 'Code'
        },
        pickListRequestErrorText: 'Unable to retrieve picklists from server.',


        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            // set to readonly until support is added
            //this.requestPickListNames();


            this._allowMultiples.set('value', this._designer.get('allowMultiples'));
            this._canEditText.set('value', this._designer.get('canEditText'));
            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._displayMode.set('value', this._designer.get('displayMode'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._maxLength.set('value', this._designer.get('maxLength'));
            this._mustExistInList.set('value', this._designer.get('mustExistInList'));
            this._pickListName.set('value', this._designer.get('pickListName'));
            this._required.set('value', this._designer.get('required'));
            this._storageMode.set('value', this._designer.get('storageMode'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },
        destroy: function(){
            if(this.pickListRequest)
                this.pickListRequest.abort();

            this.inherited(arguments);
        },

        createPickListRequest: function(){
            var request = new Sage.SData.Client.SDataResourceCollectionRequest(this.dataService)
                .setCount(300)
                .setStartIndex(0);

            request.setResourceKind('picklists');
            request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.OrderBy, 'name asc');

            return request;
        },
        requestPickListNames: function(){
            var request = this.createPickListRequest();
            if (request)
                this.pickListRequest = request.read({
                    success: this.onRequestPickListNamesSuccess,
                    failure: this.onRequestPickListNamesFailure,
                    scope: this
                });
        },
        onRequestPickListNamesSuccess: function(feed){
            this.pickListRequest = null;
            this.processPickListFeed(feed);
        },
        onRequestPickListNamesFailure: function(response, o){
            this.pickListRequest = null;
            alert(string.substitute(this.pickListRequestErrorText, [response, o]));
        },
        processPickListFeed: function(feed){
            if (!feed['$resources']) return;

            var options = new ItemFileWriteStore({
                data: {
                    identifier: '$key',
                    label: 'name',
                    items: []
                }
            });

            for (var i = 0; i < feed['$resources'].length; i++)
            {
                var entry = feed['$resources'][i];
                if (entry.name)
                    options.newItem(entry);
            }

            this._pickListName.set({
                store: options,
                disabled: false
            });
        },


        _onAllowMultiplesChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('allowMultiples', value);
        },
        _onCanEditTextChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('canEditText', value);
        },
        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onDisplayModeChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('displayMode', value);
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onMaxLengthChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('maxLength', value);
        },
        _onMustExistInListChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('mustExistInList', value);
        },
        _onPickListNameChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('pickListName', value);

            var selectedItem = this._pickListName.get('item');
            this._designer.set('pickListId', selectedItem['$key'][0]);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onStorageModeChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('storageMode', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/TaskPane/ActivityTaskContents':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/ActivityTaskContents", [
        'dijit/_Widget',
        'Sage/_Templated',
        'dojo/_base/declare'
],
function(
   _Widget,
   _Templated,
   declare
){     
  var activityTaskContents = declare('Sage.TaskPane.ActivityTaskContents', [_Widget, _Templated], {
        widgetsInTemplate: true,
        templateLocation: '', 
        templateString: '', 
        widgetTemplate: '',
        constructor: function(config) {
            this.widgetTemplate = config.taskTemplate;
            dojo.subscribe('/sage/ui/list/selectionChanged', function (listPanel) {
                    var countSpan = dojo.byId('selectionCount');
                    if (countSpan) {
                        countSpan.innerHTML = listPanel.getTotalSelectionCount();
                    }
                });
        },

        _clearSelection: function(e){
            var listPanel = dijit.byId('list');
            if (listPanel) {
                 listPanel._listGrid.selection.clear();
             }            
          }

    });
    return activityTaskContents;  
});
},
'Sage/UI/Controls/Phone':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Phone", [
       'dijit/_Widget',
       'Sage/_Templated',
       'Sage/UI/Controls/TextBox',
       'dojo/_base/declare'
],
function (_Widget, _Templated, textBox, declare) {
    var widget = declare('Sage.UI.Controls.Phone', textBox, {
        slxchangehook: 'true',
        _setslxchangehookAttr: { node: 'focusNode', type: 'attribute', attribute: 'slxchangehook' },
        shouldPublishMarkDirty: true,
        //.Net control behavior
        autoPostBack: false,
        postCreate: function () {
            this.inherited(arguments);
            this.unformattedValue = this.unformatNumber(this.get('value'));
        },
        unformattedValue: '',
        formatPhoneChange: function (number) {
            var formattedVal = this.formatNumberForDisplay(number);
            this.unformattedValue = this.unformatNumber(number);
            this.set('value', formattedVal);
        },
        /*
        {0}: original value
        {1}: cleaned value
        {2}: entire match (against clean value)
        {3..n}: match groups (against clean value)
        */
        formatters: [{
            test: /^\+.*/,
            format: '{0}'
        }, {
            test: /^(\d{3})(\d{3,4})$/,
            format: '{3}-{4}'
        }, {
            test: /^(\d{3})(\d{3})(\d{2,4})$/, // 555 555 5555
            format: '({3}) {4}-{5}'
        }, {
            test: /^(\d{3})(\d{3})(\d{2,4})([^0-9]{1,}.*)$/, // 555 555 5555x
            format: '({3}) {4}-{5}{6}'
        }, {
            test: /^(\d{11,})(.*)$/,
            format: '{1}'
        }],
        unformatNumber: function (number) {
            var n = number;
            n = n.replace("(", "");
            n = n.replace(")", "");
            n = n.replace(" ", "");
            n = n.replace("-", "");
            return n;
        },
        formatNumberForDisplay: function (number, clean) {
            var n = number;
            if (typeof clean === 'undefined') clean = n;
            for (var i = 0; i < this.formatters.length; i++) {
                var formatter = this.formatters[i],
                        match;
                if ((match = formatter.test.exec(clean))) {
                    return String.format.apply(String, [formatter.format, n, clean].concat(match));
                }
            }
            return n;
        },
        onChange: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            this.formatPhoneChange(e);
        }
    });

    return widget;
});


},
'Sage/UI/Alarms/nls/ActivityAlarm':function(){
﻿define("Sage/UI/Alarms/nls/ActivityAlarm", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            noSubjectText: 'No Subject',
            contactText: 'Contact',
            accountText: 'Account',
            opportunityText: 'Opportunity',
            leadText: 'Lead',
            companyText: 'Company',
            recurringText: 'Recurring',
            ticketText: 'Ticket',
            leaderText: 'Leader',
            locationText: 'Location'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'url:Sage/Utility/File/templates/FallbackFilePicker_LibraryDoc.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"uploadFileDialog\" title=\"{%= $.addLibraryFileText %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onHide\">',\r\n        '<iframe src=\"about:blank\" style=\"width:0px;height:0px;border-width:0px;\" name=\"{%= $._iframeId %}\" id=\"{%= $._iframeId %}\" dojoAttachPoint=\"_iframe\" dojoAttachEvent=\"onload:_iframeLoad\"></iframe>',\r\n        '<form method=\"post\" enctype=\"multipart/form-data\" action=\"\" target=\"{%= $._iframeId %}\" dojoAttachPoint=\"_postForm\" class=\"attachment-properties-form\">',\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"160\">',\r\n                 '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.uploadFileText %}\" >',\r\n                    '<input name=\"file\" multiple=\"false\" type=\"file\" dojoAttachEvent=\"onchange:_onNewFile\" dojoAttachPoint=\"btn_FileSelect\" class=\"uploadButton\" />',\r\n                 '</div>',\r\n                 '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.descriptionText %}\" name=\"description\" id=\"{%= $.id %}_tb_Description\" dojoAttachPoint=\"tb_Description\" maxlength=\"255\" ></div>',\r\n                 '<input type=\"hidden\" dojoType=\"dijit.form.TextBox\" name=\"fileName\" id=\"{%= $.id %}_tb_realFileName\" dojoAttachPoint=\"tb_realFileName\" maxlength=\"255\" />',\r\n            '</div>',\r\n            '<div class=\"general-dialog-actions\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                '<span>&nbsp;&nbsp</span>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n            '</div>',\r\n        '</form>',\r\n    '</div>',\r\n'</div>'\r\n]",
'Sage/TaskPane/ActivityTaskPaneActions':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/ActivityTaskPaneActions", [
        'dojo/parser',
         'dojo/ready'
],

function (
   parser,
   ready
) {
    Sage.namespace('TaskPane.ActivityTaskPaneActions');
    Sage.TaskPane.ActivityTaskPaneActions = {

        scheduleMeeting: function () {
            this._getActivityService().scheduleActivity({ type: 'Meeting' });
        },
        scheduleToDo: function () {
            this._getActivityService().scheduleActivity({ type: 'ToDo' });
        },
        schedulePhoneCall: function () {
            this._getActivityService().scheduleActivity({ type: 'PhoneCall' });
        },
        schedulePerosnalActivity: function () {
            this._getActivityService().scheduleActivity({ type: 'Personal' });
        },
        completeActivity: function () {
            this._getActivityService().completeActivity();
        },
        deleteActivity: function () {
            this._getActivityService().deleteActivity();
        },
        acceptConfirmation: function () {
            this._getActivityService().acceptConfirmation();
        },
        declineConfirmation: function () {
            this._getActivityService().declineConfirmation();
        },
        deleteConfirmation: function () {
            this._getActivityService().deleteConfirmation();
        },
        scheduleEvent: function () {
            this._getActivityService().scheduleEvent();
        },
        deleteEvent: function () {
            this._getActivityService().deleteEvent();
        },
        scheduleLitRequest: function () {
            this._activityService.scheduleLitRequest();
        },
        deleteLitRequest: function () {
            this._getActivityService().deleteLitRequest();
        },
        _getActivityService: function () {
            return Sage.Services.getService('ActivityService');
        }

    };
    return Sage.TaskPane.ActivityTaskPaneActions;

});
},
'Sage/MainView/Opportunity/nls/OpportunityStatistics':function(){
﻿define("Sage/MainView/Opportunity/nls/OpportunityStatistics", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            opportunityStatistics_Caption: 'Opportunity Statistics',
            loadingMessge: 'Loading...',
            opportunityCount: '# of Opportunities',
            salesPotentialTotal: 'Sales Potential Total (Average)',
            weightedPotentialTotal: 'Weighted Potential Total (Average)',
            averageCloseProbability: 'Average Close Probability',
            actualAmountTotal: 'Actual Amount Total (Average)',
            averageDaysOpen: 'Average # of Days Open',
            rangeEstClose: 'Range of Est. Close (Min - Max)',
            btnClose_Caption: 'Close',
            errorRequestingStatistics: 'Sorry an error occured attempting to request opportunity statistics.'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Filters/GroupFilterConfigurationProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/GroupFilterConfigurationProvider", [
        'Sage/Services/_ServiceMixin',
        'Sage/_ConfigurationProvider',
        'Sage/Data/GroupLayoutSingleton',
        'Sage/Data/SDataStore',
        'dojo/_base/declare',
        'dojo/_base/lang',
        'dijit/registry',
        'dojo/string',
        'Sage/Utility/Filters',
        'dojo/json'
], function (
        _ServiceMixin,
        _ConfigurationProvider,
        GroupLayoutSingleton,
        SDataStore,
        declare,
        lang,
        registry,
        dString,
        FiltersUtility,
        json) {
    var widget = declare('Sage.UI.Filters.GroupFilterConfigurationProvider', [_ConfigurationProvider, _ServiceMixin], {
        FILTER_COUNT: 150,
        _configuration: null,
        _hasLayoutConfiguration: false,
        _hasFilterHiddenConfiguration: false,
        serviceMap: {
            'groupContextService': 'ClientGroupContext',
            'metaDataService': { type: 'sdata', name: 'metadata' },
            'systemDataService': { type: 'sdata', name: 'system' }
        },
        constructor: function (options) {
            this.inherited(arguments);
            this._subscribes.push(dojo.subscribe('/group/context/changed', this, this._onGroupContextChanged));

            // todo: subscribe to filter reload to capture state?
        },
        _onGroupContextChanged: function () {
            this.onConfigurationChange();
        },
        onConfigurationChange: function () {
        },
        _createConfiguration: function (entry, options) {
            var layout = entry && entry.layout,
                properties = [],
                captions = [],
                i = 0,
                groupContext = this.groupContextService && this.groupContextService.getContext(),
                groupId = groupContext && groupContext.CurrentGroupID,
                entityName = groupContext && groupContext.CurrentEntity,
                systemService = this.systemDataService,
                metaService = this.metaDataService,
                request, where;

            for (i = 0; i < layout.length; i++) {
                properties.push('"' + layout[i].propertyPath + '"');
                captions.push('"' + layout[i].caption + '"');
            }


            request = new Sage.SData.Client.SDataResourcePropertyRequest(metaService);
            request.setResourceKind('entities');
            request.setResourceSelector('"' + entityName + '"');
            request.setResourceProperty('filters');
            request.setQueryArg('count', this.FILTER_COUNT);

            if (entityName === 'User') {
                // This is a hack to get custom filters not in the layout (Roles and Teams).
                captions.push('"Role"');
                captions.push('"Team"');
            }

            where = dString.substitute('filterType ne "analyticsMetric" and (propertyName in (${0}) or displayName in (${1}))', [properties.join(','), captions.join(',')]);
            request.setQueryArg('where', where);

            this._configuration.store = new SDataStore({
                executeReadWith: 'readFeed',
                request: request
            });

            this._configuration.createStoreForFilter = function (filter) {
                var request = new Sage.SData.Client.SDataResourcePropertyRequest(systemService);
                request.setResourceKind('groups');
                request.setResourceSelector('"' + groupId + '"');
                request.setResourceProperty('$queries/executeMetric');
                request.setQueryArg('_filterName', filter.filterName);
                request.setQueryArg('orderby', 'displayName');
                return filter && filter.filterName ? new SDataStore({
                    executeReadWith: 'readFeed',
                    request: request
                }) : null;
            };

            this._configuration.getFilterManager = function () {
                var listPanel = registry.byId('list');
                return listPanel && listPanel.get('filterManager');
            };

            this._configuration.groupId = groupId;
        },
        requestConfiguration: function (options) {
            this._configuration = {};
            this._hasLayoutConfiguration = false;
            this._hasFilterHiddenConfiguration = false;

            var singleton = new GroupLayoutSingleton(),
                group = this.getCurrentGroup(),
                onGroupLayoutSuccess = lang.hitch(this, this._onRequestConfigurationSuccess, options || {}),
                onGroupLayoutFail = lang.hitch(this, this._onRequestConfigurationFailure, options || {});

            singleton.getGroupLayout(this.formatPredicate(group), onGroupLayoutSuccess, onGroupLayoutFail, group.$key);
            this._getHiddenFilters(options);
        },
        formatPredicate: function (group) {
            return "'" + group.$key + "'";
        },
        getCurrentGroup: function () {
            var groupContext = this.groupContextService && this.groupContextService.getContext(),
                family = groupContext && groupContext.CurrentFamily,
                name = groupContext && groupContext.CurrentName,
                id = groupContext && groupContext.CurrentGroupID;
            return {
                name: name,
                family: family,
                $key: id
            };
        },
        _onRequestConfigurationSuccess: function (options, entry) {
            this._createConfiguration(entry, options);
            this._hasLayoutConfiguration = true;
            this._callOptionsSuccess(options);
        },
        _onRequestConfigurationFailure: function (options, response) {
            if (options.failure) {
                options.failure.call(options.scope || this, response, options, this);
            }
        },
        _getHiddenFilters: function (options) {
            var key = this._getHiddenFiltersKey();
            if (key) {
                FiltersUtility.getHiddenFilters(key,
                    lang.hitch(this, this._onHiddenFiltersFetchComplete, options || {}),
                    function (err) {
                        console.error(err);
                    }
                );
            }
        },
        _getHiddenFiltersKey: function () {
            var key = FiltersUtility.getHiddenFiltersKey();
            return key;
        },
        _onHiddenFiltersFetchComplete: function (options, result) {
            if (result && result.response && result.response.value) {
                this._configuration._hiddenFilters = json.parse(result.response.value);
                // Getting a key without data will return "[]"
                if (this._configuration._hiddenFilters && this._configuration._hiddenFilters.constructor === Array) {
                    this._configuration._hiddenFilters = {};
                }
            }
            this._configuration._hiddenFiltersKey = this._getHiddenFiltersKey();
            this._hasFilterHiddenConfiguration = true;
            this._callOptionsSuccess(options);
        },
        _callOptionsSuccess: function (options) {
            if (!this._hasLayoutConfiguration || !this._hasFilterHiddenConfiguration) {
                return;
            }

            if (options.success) {
                options.success.call(options.scope || this, this._configuration, options, this);

                this._hasLayoutConfiguration = false;
                this._hasFilterHiddenConfiguration = false;
            }
        }
    });
    return widget;
});
},
'Sage/UI/NavBarPane':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/NavBarPane", [
        'dijit/layout/_LayoutWidget',
        'Sage/_Templated',
        'Sage/UI/MenuItem',
        'dijit/Menu',
        'dojo/_base/declare'
],
function (_LayoutWidget, _Templated, MenuItem, DijitMenu, declare) {
    var navBarPane = declare('Sage.UI.NavBarPane', [_LayoutWidget, _Templated], {
        textImageRelationMap: {
            // ImageAboveText
            0: new Simplate([
                '<div class="Global_Images icon32x32 {%: $.imageClass %}"></div>',
                '<br />',
                '<span>{%: $.text %}</span>'
            ]),
            // TextAboveImage
            1: new Simplate([
                '<span>{%: $.text %}</span>',
                '<br />',
                '<div class="Global_Images icon32x32 {%: $.imageClass %}"></div>'
            ]),
            // ImageBeforeText
            2: new Simplate([
                '<div class="Global_Images icon32x32 {%: $.imageClass %}"></div>',
                '<span>{%: $.text %}</span>'
            ]),           
            
            // TextBeforeImage
            3: new Simplate([
                '<span>{%: $.text %}</span>',
                '<div class="Global_Images icon32x32 {%: $.imageClass %}"></div>'
            ]),
            // ImageBeforeText legacy (No Sprite)
            4: new Simplate([
               '<img src="{%: $.img %}" alt="" />',
               '<span>{%: $.text %}</span>'
            ]),
        },
        attributeMap: {
            'listContent': { node: 'listNode', type: 'innerHTML' }
        },
        widgetTemplate: new Simplate([
            '<div class="nav-bar-pane">',
            '<ul dojoAttachPoint="listNode,containerNode"></ul>',
            '</div>'
        ]),
        itemTemplate: new Simplate([
            '<li id="{%: $.id %}" class="{%: $.className %}" aria-haspopup="{%: $.haspopup %}">',
            '<a href="{%: $.href %}">',
            '{%= $.innerTemplate.apply($) %}',
            '</a>',
            '</li>'
        ]),
        title: null,
        items: null,
        _requiredContextMenus: null,
        _contextMenus: null,
        constructor: function() {
            this._requiredContextMenus = [];
            this._contextMenus = [];
        },
        postCreate: function() {
            this.inherited(arguments);

            this._processItemCollection(this.items);
        },
        startup: function() {
            this.inherited(arguments);

            this._processContextMenus(this._requiredContextMenus);
        },
        destroy: function(preserveDom) {
            this.inherited(arguments);

            dojo.forEach(this._contextMenus, function(item) {
                item.destroy(preserveDom);
            });
        },
        _processItemCollection: function(items) {
            var output = [];

            dojo.forEach(items, function(item) {
                item.id = item.id || Sage.guid('NavItem');
                if(window.location.href.indexOf(item.href) !== -1) {
                    item.className = 'nav-bar-item-current-page';
                }
                else {
                    item.className = 'nav-bar-item';
                }

                if (item.contextmenu) {
                    this._requiredContextMenus.push({id: item.id, name: item.contextmenu});
                    item.haspopup = "true";
                } else {
                    item.haspopup = "false";
                }
                if (item.imageClass == "") {
                    //To support custom modules like Analytics Dashboard 
                    item.innerTemplate = this.textImageRelationMap[4];
                } else {
                    item.innerTemplate = this.textImageRelationMap[item.textImageRelation];
                }                
                output.push(this.itemTemplate.apply(item, this));
            }, this);

            this.set('listContent', output.join(''));
        },
        _processContextMenus: function(menus) {
            var i,
                j,
                menu,
                contextMenu,
                item,
                definition,
                items;
                
            for (i = 0; i < menus.length; i++)
            {
                menu = menus[i];
                definition = Sage.UI.DataStore.ContextMenus && Sage.UI.DataStore.ContextMenus[menu.name];
                items = definition && definition.items;

                if (items && items.length > 0)
                {
                    contextMenu = new DijitMenu({
                        targetNodeIds: [menu.id]
                    });
                    
                    for (j = 0; j < items.length; j++)
                    {
                        item = items[j];

                        contextMenu.addChild(new MenuItem({
                            id: contextMenu.id + '_' + item.id,
                            label: item.text || '...',
                            title: item.tooltip || '...',
                            img: item.img || this._blankGif,
                            ref: item.href,
                            onClick: this._onContextMenuClick
                        }));
                    }

                    this._contextMenus.push(contextMenu);
                }
            }
        },
        _onContextMenuClick: function() {
            if (this.ref !== '')
            {
                try
                {
                    window.location.href = this.ref;
                }
                catch (e) { }
            }
        }
    });
    
    return navBarPane;
});

},
'Sage/UI/URL':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/URL", [
       "dijit/_Widget",
       "Sage/_Templated",
       "dijit/form/ValidationTextBox",
       "dojox/validate/regexp",
       "Sage/UI/Controls/TextBox",
       "dojo/_base/declare"
],
function (_Widget, _Templated, ValidationTextBox, regexp, TextBox, declare) {
    //TODO: This hook will be depricated once ClientBindingManagerService has been converted with Dojo.
    dojo.mixin(ValidationTextBox.prototype.attributeMap, { slxchangehook: 'focusNode' });

    var widget = declare("Sage.UI.URL", [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        widgetTemplate: new Simplate([
            '<div class="urlcontrol" slxcompositecontrol="true" id="{%= $.id %}" >',
            '<input data-dojo-type="Sage.UI.Controls.TextBox" name="{%= $.name %}" ',
            // textWithIcons allows for styling to be applied to a textbox where an icon accompanies the text inside the box.
            'data-dojo-props="textWithIcons: {%= $.buttonVisible %}"',
            'dojoAttachPoint="focusNode" type="text" style="" ',
            'hotKey="{%= $.hotKey %}" ',
             '{% if($.disabled === "disabled") { %} ',
                'disabled="disabled" ',
             '{% } %}',
            '{% if($.readonly === "readonly") { %} ',
                'readonly="readonly" ',
            '{% } %}',
            '{% if ($.disabled !== "disabled") { %} ',
            ' dojoAttachEvent="onChange:formatURLChange, onDblClick:launchWebSite" ',
            '{% } %}',
            ' regExpGen="dojox.validate.regexp.url" tabindex="{%= $.tabIndex %}" ',
            'value="{%= $.url %}" required="{%= $.required %}" ',
            'id="{%= $.id %}_urlText" maxlength="{%= $.maxLength %}" > ',
            '{% if ($.buttonVisible && $.disabled !== "disabled") { %}',
            '<img alt="{%= $.buttonToolTip %}" data-dojo-attach-event="ondijitclick: launchWebSite"   ',
            ' tabindex="{%= $.tabIndex %}" alt="{%= $.buttonToolTip %}" ',
            'src="{%= $.buttonImageUrl %}" title="{%= $.buttonToolTip %}" id="{%= $.id %}_urlButton"> ',
            '{% } %}',
            '</div>'
        ]),
        name: '',
        autoPostBack: false,
        readonly: '',
        disabled: '',
        hotKey: '',
        buttonVisible: true,
        maxLength: 128,
        buttonImageUrl: '',
        buttonToolTip: 'WWW',
        required: false,
        tabIndex: 0,
        url: '',
        webAddressId: '',
        constructor: function (options) {
            options.id = options.webAddressId;
        },
        postCreate: function () {
            this.formatURL();
            this.inherited(arguments);
        },
        widgetsInTemplate: true,
        attributeMap: {
            slxchangehook: { node: 'focusNode', type: 'attribute', attribute: 'slxchangehook'}//,        
        },
        formatURL: function () {
            //TODO: replace with class
            dojo.style(this.focusNode.focusNode, 'color', '#000099');
            dojo.style(this.focusNode.focusNode, 'font-family', 'Tahoma');
        },
        formatURLChange: function () {
            //TODO: Value formatting goes here, if applicable
            if (this.url !== this.focusNode.value) {
                this.url = this.focusNode.value;
            }
        },
        launchWebSite: function () {
            var url = this.url;
            if (url.length < 1) { return; }
            var startURL = "http://";
            var startURL2 = "https://";
            var winH;
            if (url.indexOf(startURL) === -1 && url.indexOf(startURL2) === -1) {
                url = startURL + url;
            }
            winH = window.open(url, '', [
                'dependent=no',
                'directories=yes',
                'location=yes',
                'menubar=yes',
                'resizeable=yes',
                'pageXOffset=0px',
                'pageYOffset=0px',
                'scrollbars=yes',
                'status=yes',
                'titlebar=yes',
                'toolbar=yes'
            ].join(',')
            );
        }
    });

    return widget;
});

},
'Sage/UI/Grid/Plugins/ShowHideColumns':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Grid/Plugins/ShowHideColumns", [
        'dojo/_base/declare',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dojox/grid/enhanced/_Plugin',
        'dojox/grid/EnhancedGrid',
        'dijit/Menu',
        'dijit/CheckedMenuItem',
        'dojo/on',
        'dojo/topic'
], function(
    declare,
    array,
    lang,
    _Plugin,
    EnhancedGrid,
    Menu,
    CheckedMenuItem,
    on,
    topic){

    var ShowHideColumns = declare("Sage.UI.Grid.Plugins.ShowHideColumns", _Plugin, {
        // name: String
        //      Plugin name.
        name: "showHideColumns",
        
        //privates: Object
        //      Private properties/methods shouldn't be mixin-ed anytime.
        privates: {},
        
        hideQueue: null,
        
        constructor: function(){
            this.hideQueue = [];
            this.inherited(arguments);
        },
        onStartUp: function(){
            var menu = new Menu(),
                menuItem;
            menu.startup();
            
            on(menu, 'open', lang.hitch(this, function () {
                if (this.grid.headerMenu) {
                    this.grid.headerMenu.destroyDescendants();
                }
                
                array.forEach(this.grid.layout.cells, function(cell){
                    menuItem = new CheckedMenuItem({
                        label: cell.name || '',
                        checked: !cell.hidden
                    });
                    
                    menuItem._onClick = lang.hitch({plugin: this, item: menuItem, cell: cell}, function (e) {
                            this.plugin.hideQueue.push(this.cell);
                            this.item.set('checked', !this.item.checked);
                            // Prevent menu from closing so we can multi-select
                            e.cancelBubble = true;
                    });
                    
                    this.grid.headerMenu.addChild(menuItem);
                }, this);
            }));
            
            on(menu, 'blur', lang.hitch(this, function () {
                array.forEach(this.hideQueue, function (item) {
                    this.grid.layout.setColumnVisibility(item.index, item.hidden);
                    topic.publish('/sage/ui/grid/columnToggle/' + this.grid.id, item);
                }, this);
                topic.publish('/sage/ui/grid/columnsToggled/' + this.grid.id);
                this.hideQueue = [];
            }));
            
            this.grid.set('headerMenu', menu);
        }
    });

    EnhancedGrid.registerPlugin(ShowHideColumns/*name:'showHideColumns'*/);

    return ShowHideColumns;
});

},
'Sage/MainView/IntegrationContract/nls/AdvancedSearchOptions':function(){
﻿define("Sage/MainView/IntegrationContract/nls/AdvancedSearchOptions", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dialogCaption: "Link to Accounting",
            searchOptionsHeader: "Search for Matches in ",
            searchOptionsText: "The following criteria was used in the previous search. Modify the criteria for a new search. Click OK to begin searching.",
            propertyText: "Property",
            operatorText: "Operator",
            searchText: "Search Value",
            loadingText: "loading...",
            loadingDisplay: "Searching for results...",
            hideImgAltText: 'Remove Condition',
            addImgAltText: 'Add Condition',
            okText: "OK",
            cancelText: "Cancel"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/FormAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/FormAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/FormAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.FormAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.generalText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.useEntityNameAsTitleTooltipText %}">',
                        '<label>{%= $.useEntityNameAsTitleText %}</label>',
                        '<div data-dojo-attach-point="_useEntityNameAsTitle" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onUseEntityNameAsTitleChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _useEntityNameAsTitle: null,

        //Localization
        titleText: 'Advanced',

        generalText: 'General',

        useEntityNameAsTitleText: 'Use Entity Name As Title:',
        useEntityNameAsTitleTooltipText: 'Use name of current entity in form title.',

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function(){
            this.inherited(arguments);

            this._useEntityNameAsTitle.set('value', this._designer.get('useEntityNameAsTitle'));
        },

        _onUseEntityNameAsTitleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('useEntityNameAsTitle', value);
        }
    });
});
},
'Sage/QuickForms/Design/nls/ColumnDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/ColumnDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Column"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/SingleSelectPickList':function(){
require({cache:{
'url:Sage/UI/Controls/templates/SingleSelectPickList.html':"<div>\r\n    <select id=\"${id}-Combo\" data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" required=\"${required}\" dojoAttachPoint=\"comboBox\" dojoAttachEvent=\"onBlur: _onBlur,onChange:_onChange\">\r\n    </select>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/SingleSelectPickList", [
       'dijit/_Widget',
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/form/ComboBox',
       'dojo/data/ItemFileReadStore',
       'dojo/data/ObjectStore',
       'dojo/store/Memory',
       'Sage/UI/ComboBox',
       'Sage/UI/Controls/PickList',
       'dojo/text!./templates/SingleSelectPickList.html',
       'dojo/_base/declare'
],
function (_Widget, _TemplatedMixin, _WidgetsInTemplateMixin, _comboBox, itemFileReadStore, objectStore, memory, sageComboBox, pickList, template, declare) {
    /**
    * @class Class for single select picklists.
    */
    var widget = declare('Sage.UI.Controls.SingleSelectPickList', [pickList, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {

        /**
        * Takes the following options object: 
        * {
        *  pickListName: 'PickListName', // Required
        *  storeOptions: {}, // Optional
        *  dataStore: {}, // Option
        *  canEditText: false,
        *  itemMustExist: true,
        *  maxLength: -1,
        *  storeMode: 'text', // text, id, code
        *  sort: true,
        *  displayMode: 'AsControl',
        *  clientId: 'ASP.NET Control ClientID Here',
        *  required: false
        * }
        *
        * @constructor
        */
        constructor: function (options) {
            if (options.clientId) {
                this.id = options.clientId + '-SingleSelectPickList';
            }

            this.inherited(arguments);
        },
        postCreate: function () {
            this._setupTooltips(this.comboBox._buttonNode, this.comboBox.textbox);
            this._setupRenderAsHyperlink();
            this._setupTooltips();            
            this.inherited(arguments);
            var existingText = dojo.byId(this._textId);
            if (existingText && existingText.value && (this.comboBox.value !== existingText.value)) {
                this.comboBox.set('value', existingText.value);
            }
        },
        _setupTooltips: function () {
            if (this.controlTooltip && this.controlTooltip !== '') {
                this.comboBox.set('title', this.controlTooltip);
            }

            if (this.buttonTooltip && this.buttonTooltip !== '') {
                if (this.comboBox._buttonNode) {
                    this.comboBox._buttonNode.title = this.buttonTooltip;
                }
            }
        },
        _setupRenderAsHyperlink: function () {
            if (!this.renderAsHyperlink) {
                return;
            }

            dojo.addClass(this.comboBox.domNode, 'comboAsHyperlink');
            dojo.connect(this.comboBox.domNode, 'onclick', this, function () {
                this.comboBox.loadDropDown();
            });
        },
        _loadData: function () {
            var def = new dojo.Deferred();
            this.getPickListData(def);

            def.then(dojo.hitch(this, function (data) {
                if (typeof data === 'string') {
                    this.comboBox.set('value', data);
                }

                var items = [];
                for (var i = 0; i < data.items.$resources.length; i++) {
                    var item = data.items.$resources[i];
                    items.push({
                        id: item.$key,
                        code: item.code,
                        number: item.number,
                        text: item.text
                    });
                }

                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };

                var tempStore = new itemFileReadStore({ data: this.storeData });
                this.comboBox.set('store', tempStore);
                this.comboBox.set('searchAttr', 'text');

                var existingText = dojo.byId(this._textId);
                var existingId = dojo.byId(this._codeId);
                if (existingText && existingText.value) {
                    //this is here when the server control added it to the dom with a value in it
                    this.lastValidValue = existingText.value;
                    this.initialValue = this.lastValidValue;
                    this.comboBox.set('value', this.lastValidValue);
                }

                if (existingId && existingId.value) {
                    var storeItem = this.getStoreItemById(existingId.value);
                    if (storeItem) {
                        this.lastValidValue = storeItem.text;
                        this.initialValue = this.lastValidValue;
                        this.comboBox.set('value', this.lastValidValue);
                    }
                } else {
                    //this is when it is used as a strictly client-side control and the value may have already been set.
                    var val = this.comboBox.get('value');
                    if (val || val === '') {
                        this.lastValidValue = val;
                    } else {
                        this.lastValidValue = items[0].text;
                        this.comboBox.set('value', this.lastValidValue);
                    }
                }
            }), function (e) {
                // errback
                console.error(e);
            });

            // Adjust control according to properties set in AA

            // Disable textbox to prevent edit
            if (this.get('canEditText') === false) {
                this.comboBox.textbox.disabled = true;
            }

            var len = this.get('maxLength');
            if (len > 0) {
                this.comboBox.set('maxLength', len);
            }

            if (this.get('itemMustExist')) {
                dojo.connect(this.comboBox, 'onChange', dojo.hitch(this, function (currentVal) {

                    // Check if what we have entered is valid or not
                    var valid = dojo.some(this.storeData.items, function (item) {
                        // There is no guarantee the types will match so evaluate the type as well
                        // (i.e. do not use === for comparison). This can happen if a custom store is
                        // used to store the data, etc.
                        if (item.text == currentVal || currentVal == '') {
                            return true;
                        } else {
                            return false;
                        }
                    }, this);

                    if (valid) {
                        this.lastValidValue = currentVal;
                    }

                    if (!valid) {
                        // Attempt to restore last valid value.
                        if (this.lastValidValue !== 'undefined' && this.lastValidValue !== null) {
                            this.comboBox.set('value', this.lastValidValue);
                        }
                    }
                }));
            }
        },
        uninitialize: function () {
            this.inherited(arguments);
        },
        _onBlur: function () {
            // Send the values to the hidden ASP.NET fields if we are valid, and the value actually changed.
            if (this.comboBox.isValid() && this.storeData) {
                var val = this.comboBox.get('value');

                if (val != this.initialValue) {
                    var code = '';
                    dojo.forEach(this.storeData.items, function (item, index, array) {
                        if (item.text == val) {
                            code = item.id;
                        }
                    }, this);

                    this.setASPNETInputs(val, code);
                }
            }
        },
        getStoreItemById: function (id) {
            if (this.storeData) {
                var results = null;
                dojo.forEach(this.storeData.items, function (item, index, array) {
                    if (item.id === id) {
                        results = item;
                    }
                }, this);
            }

            return results;
        },
        _onChange: function (newVal) {
            this.onChange(newVal);
        },
        _setPickListNameAttr: function (value) {
            this.inherited(arguments);
            this._loadData();
        },
        _setValueAttr: function (value) {
            this.inherited(arguments);
            this.comboBox.set('value', value);
        },
        _getValueAttr: function () {
            return this.comboBox.get('value');
        },
        // Display properties
        templateString: template,
        widgetsInTemplate: true,

        /**
        * @property {object} storeData Data fetched from SData stored here.
        */
        storeData: null,

        /**
        * @property {string} lastValidValue Last valid value entered into the control.
        */
        lastValidValue: '',

        /**
        * @property {string} initialValue Initial value set to the control, if any.
        */
        initialValue: '',

        /**
        * @property {bool} disabled.
        */
        disabled: false,

        _setDisabledAttr: function (disabled) {
            this.disabled = disabled;


            this.comboBox.set('disabled', disabled);
        },
        _getDisabledAttr: function () {
            return this.disabled = this.comboBox.get('disabled');
        },
        focus: function () {
            this.comboBox.focus();
        },
        onChange: function (newVal) { }
    });

    return widget;
});


},
'Sage/UI/OrientableMenuBar':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/OrientableMenuBar", [
    'dijit/MenuBar',
    'dojo/_base/declare'
], function (MenuBar, declare) {
    var orientableMenuBar = declare('Sage.UI.OrientableMenuBar', MenuBar, {
        postCreate: function (args) {
            this.inherited(arguments);
            //the private _orient property is set internally in the postCreate method
            //by waiting until now, we can override it if an orientation was passed to the constructor
            if (typeof this.orientation !== 'undefined') {
                this._orient = this.orientation;
            }
        }
    });
    return orientableMenuBar;
});
},
'Sage/UI/nls/SearchMenuItem':function(){
define("Sage/UI/nls/SearchMenuItem", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            findText: 'Find',
            clearText: 'Clear',
            showHiddenText: 'Show Hidden: '
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Help':function(){
define("Sage/QuickForms/Design/Help", [
    'dojo/string'
], function(
    string
) {
    return {
        defaultTarget: 'MCWebHelp',
        defaultTopic: null,
        defaultSubSystem: null,

        defaultUrlFormat: 'help/WebClient_CSH.htm#${0}',
        subSystemUrlFormat: 'help/Subsystems/${1}/${1}_CSH.htm#${0}',

        open: function(topic, subSystem, target) {
            /* only open help at the root level (non-subSystem) */
            var url = Sage.Link.getHelpUrl(topic, subSystem); // subSystem ? this.subSystemUrlFormat : this.defaultUrlFormat;
            window.open(url, target || this.defaultTarget);
        }
    };
});
},
'Sage/UI/nls/NotesHistoryList':function(){
﻿define("Sage/UI/nls/NotesHistoryList", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            typeText: 'Type',
            showDbChangesText: 'Show Database Changes',
            selectAllText: 'Select All',
            dateText: 'Date',
            dateTimeText: 'Date/Time',
            dateRangeText: 'Date Range',
            userText: 'User',
            accountText: 'Account',
            contactText: 'Contact',
            opportunityText: 'Opportunity',
            regardingText: 'Regarding',
            notesText: 'Notes',
            resultText: 'Result',
            categoryText: 'Category',
            sendEmailText: 'Send via E-Mail',
            sendToWordText: 'Send to Word',
            addNoteText: 'Add Note',
            completeAnActivityText: 'Complete an Activity',
            helpText: 'Help',
            pleaseSelectRecordsText: 'Please select one or more records',
            UnableToFindWordMsg: 'Cannot start Microsoft Word.  Please check your security settings.',
            printedOnText: 'Printed On'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Columns/Lookup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Lookup", [
    'Sage/Utility',
    'dojox/grid/cells',
    'dojo/_base/declare'
],
function (Utility, cells, declare) {
    var widget = declare("Sage.UI.Columns.Lookup", cells._Widget, {
		widgetClass: Sage.UI.SDataLookup,
        defaultValue: '',
        constructor: function(o) {
            if (o.lookupOptions.returnObject) {
                this.formatter = function(inDatum, inRowIndex, inNode) {
                    if (inDatum != null) {
                        // The field could be serveral positions in length.
                        //Extract the field value from the object by walking the sdata relationship path.
                        var fieldPath = o.lookupOptions.field.split('.');
                        var fieldValue = inDatum;
                        for (var i=0;i<fieldPath.length;i++) {
                            if (fieldValue) {
                                fieldValue = fieldValue[fieldPath[i]];
                            }
                        }
                        return fieldValue;
                    }
                    return null;
                };
            }
        },
        //summary:
        //  Get the options from the column configuration and set them on the widget, SDataLookup config object.        
		getWidgetProps: function (inDatum) {
            var luId = this.LuId();
            var sRelatedEntityId = '';
            if (this.lookupOptions.seedOnRelatedEntity) {
                var oItem = this.item[this.lookupOptions.seedOnRelatedEntity];
                if (oItem && typeof oItem.$key !== 'undefined') {
                    sRelatedEntityId = oItem.$key;
                }
                else {
                    // This will be valid for custom products added to a Sales Order (FreeText).
                }
            }           
			return dojo.mixin({}, this.widgetProps || {}, {
                id: luId,    
				value: inDatum, //User value to set selected item
				displayMode: this.lookupOptions.displayMode,
                //The seed value for this lookup should come from the current row's entity
                seedOnRowEntity: this.lookupOptions.seedOnRowEntity,
                seedOnRelatedEntity: this.lookupOptions.seedOnRelatedEntity,
                relatedEntityId: sRelatedEntityId,
                rowEntityId: this.item.$key,
                returnObject: this.lookupOptions.returnObject, 
                addEmptyListItem: this.lookupOptions.addEmptyListItem,
                field: this.lookupOptions.field,
                name: this.lookupOptions.name,
                structure: this.lookupStructure,
                storeOptions: this.lookupStoreOptions,
                gridOptions: this.lookupGridOptions,
                //Controls in the grid are not responsible for publishing dirty data.  The grid takes care of this.
                shouldPublishMarkDirty: false
			});
		},
        //summary:
        //  Override - formatNode: Enable the column to have individual instances of the widget for each cell,
        //  rather than one shared instance accross the column.        
        formatNode: function (inNode, inDatum, inRowIndex) {
            if (!this.widgetClass) {
                return inDatum;
            }
            // Check to see if the instance for the selected node already exists
            var thisLookup = dijit.byId(this.LuId());
            if (!thisLookup) {
                this.widget = this.createWidget.apply(this, arguments);
            } else {
                this.widget = thisLookup;
                this.attachWidget.apply(this, arguments);
            }
            this.sizeWidget.apply(this, arguments);
            // BEGIN: Changeset 22903 http://bugs.dojotoolkit.org/changeset/22903
            // this.grid.rowHeightChanged(inRowIndex);
            this.grid.views.renormalizeRow(inRowIndex); 
 	        this.grid.scroller.rowHeightChanged(inRowIndex, true/*fix #11101*/);   
            // END
            this.focus();
            return undefined;
        },
        //summary:
        //  Retrieves current select item from parent SDataTabGrid
        setCurrentItems: function () {
            this.editInfo = this.grid.edit.info;
            this.item = this.grid.getItem(this.editInfo.rowIndex);
        },
        //summary:
        //  Generates an Id for this instance of the Lookup widget
        LuId: function () {
            this.setCurrentItems(); 
            var retVal = [this.item.$key, this.editInfo.cell.field].join("_");
            if (Utility.getModeId() === 'insert') {
                retVal = [this.item.$cacheID, this.editInfo.cell.field].join("_");
            }
            return retVal;
        },
        //summary:
        //  Retreives the selected value and applies it to the grid and grid store.
        getValue: function () {
            this.setCurrentItems();
            if (this.lookupOptions.returnObject) {
                // If the user clicks into the Lookup column but does not physically make a selection
                // then we still need to return the current value.
                return (this.widget.focusNode.item !== null) ?
                    this.widget.focusNode.item : this.widget.focusNode.value;
            }
            return this.widget.focusNode.value;
        }
	});
    return widget;
});
},
'Sage/UI/Columns/Dnd':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Dnd", [
    'Sage/UI/Columns/DndCell',
    'dojo/_base/declare'
],
function (DndCell, declare) {
    var widget = declare('Sage.UI.Columns.Dnd', dojox.grid.cells._Base, {
        formatter: function (val, index) {
            var item = this.grid.getItem(index);
            var results = item.displayName || item.columnName || this.defaultValue;
            var cell = new DndCell({ value: results, index: index });
            return cell;
        }
    });
    return widget;
});

},
'Sage/QuickForms/Design/EditableGridControlDesigner':function(){
define("Sage/QuickForms/Design/EditableGridControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/dom-construct',
    'dojo/dom-style',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/GenericBasicPropertyEditor',
    './Editors/GenericAdvancedPropertyEditor',
    'dojo/i18n!./nls/EditableGridControlDesigner'
], function(
    declare,
    array,
    lang,
    domConstruct,
    domStyle,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    GenericBasicPropertyEditor,
    GenericAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.EditableGridControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            GenericBasicPropertyEditor,
            GenericAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
                '<table class="{%= $.fieldClass %}-table" data-dojo-attach-point="tableNode">',
                '</table>',
            '</div>'
        ]),
        tableHeaderTemplate: new Simplate([
            '<th>{%: $.ColumnHeading || $.Text %}</th>'
        ]),

        fieldClass: 'design-editablegrid',
        helpTopicName: 'visual_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Editable Grid',

        constructor: function() {
            lang.mixin(this, localization);
        },
        _getColumnsAttr: function() {
            return lang.getObject('Columns', false, this.entry);
        },
        _setColumnsAttr: function(value) {
            lang.setObject('Columns', value, this.entry);
        },

        renderColumns: function(){
            var columns = this.get('columns'),
                row = domConstruct.create('tr');

            for(var i = 0; i < columns.length; i++) {
                var column = lang.clone(columns[i]);

                column.widthStyle = column.Width > 0 ? column.Width + 'em' : 'auto';

                domConstruct.place(this.tableHeaderTemplate.apply(column, this), row, 'last');
            }
            domConstruct.place(row, this.tableNode, 'only');
        },

        startup: function() {
            this.inherited(arguments);

            this.renderColumns();
        }
    });
});
},
'Sage/QuickForms/Design/nls/UrlControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/UrlControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Url"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Data/QBTreeStoreModel':function(){
/*globals Sage, define */
define("Sage/Data/QBTreeStoreModel", [
        'dijit/tree/ForestStoreModel',
        'Sage/Data/SDataServiceRegistry',
        'dojo/string',
        'dojo/_base/array',
        'dojo/_base/declare',
        'dojo/_base/lang'
],
function (
    ForestStoreModel,
    SDataServiceRegistry,
    dString,
    array,
    declare,
    lang
    ) {
    return declare("Sage.Data.QBTreeStoreModel", ForestStoreModel, {
        insertedChildren: null,
        constructor: function() {
            this.insertedChildren = [];
        },
        convertDescriptionToFilter: function(parentNode) {
            // Just ensure the descriptor exists, otherwise this is the root node
            if(parentNode.$descriptor) {
                var dataPath = parentNode.$descriptor;
                dataPath = dataPath.replace(this.rootId + ':', '');
                return dataPath;
            }
            return parentNode.id;
        },
        getChildren: function (parentItem, complete_cb, error_cb) {
            this.store.fetch({
                queryArgs: { "_pathFilter": this.convertDescriptionToFilter(parentItem) },
                resourcePredicate: parentItem.root ? undefined : '',
                onComplete: lang.hitch(this, function (data, obj) {
                    var service = SDataServiceRegistry.getSDataService('metadata', false, true, false),
                        request,
                        table,
                        i,
                        temp,
                        fields = [],
                        transforms,
                        makeFn;

                    table = parentItem.id || parentItem.toTable;

                    array.forEach(this.insertedChildren, lang.hitch(this, function (child) {
                        if (child.parentItem === parentItem) {
                            data.push(child);
                        }
                    }));

                    // Array of transform functions to run on the data
                    transforms = [
                        // Invert if needed
                        function (item) {
                            if (item.toTable === table) {
                                item.toTable = item.fromTable;
                                temp = item.toField;
                                item.toField = item.fromField;
                                item.fromTable = table;
                                item.fromField = temp;
                            }
                        },
                        // Add a label property
                        function(item) {
                            var joinTypeChar = item.joinType,
                                joinTypeMap = {
                                    /* <join char> : <label> */
                                    'Left': '[left]',
                                    '>': '[left]',
                                    'Inner': '[inner]',
                                    '=': '[inner]',
                                    'Right': '[right]',
                                    '<': '[right]'
                                },
                                joinType = joinTypeMap[joinTypeChar];

                            if (item.toTable) {
                                item.label = dString.substitute("${2} (${1} -> ${3})${4}", [item.fromTable, item.fromField, item.toTableDisplayName, item.toField, joinType]);
                            }
                        },
                        // Add parent item
                        function (item) {
                            item.parentItem = parentItem;
                        },
                        // Add child property
                        function (item) {
                            item.children = [];
                        },
                        // Add dataPathSegment property
                        function (item) {
                            var joinTypeChar = item.joinType,
                                joinTypeMap = {
                                    'Left': '>',
                                    'Inner': '=',
                                    'Right': '<',
                                },
                                joinType = joinTypeMap[joinTypeChar] || item.joinType;
                            item.dataPathSegment = dString.substitute("${0}${1}${2}.${3}", [item.fromField, joinType, item.toField, item.toTable]);
                        },
                        // Add displayPathSegment (ToTable)
                        function (item) {
                            item.displayPathSegment = dString.substitute("${0}", [item.toTable]);
                        },
                        // Add full dataPath
                        function (item) {
                            var results;

                            function GetDataPath(path, _item) {
                                if (_item.root) {
                                    if (path && path.length > 0) {
                                        if (path.startsWith("!")) {
                                            path = path.substring(1, path.length);
                                        }
                                    }
                                    return _item.id + ":" + path;
                                }

                                return GetDataPath(dString.substitute("!${0}", [_item.dataPathSegment]) + path, _item.parentItem);
                            }

                            results = GetDataPath("!", item);
                            item.dataPath = results;
                            item['$descriptor'] = item['$descriptor'] || results;
                        },
                        // Add full display path
                        function (item) {
                            var results;
                            function GetDisplayPath(path, _item) {
                                if (_item.root) {
                                    return _item.id + path;
                                }
                                
                                return GetDisplayPath(dString.substitute(".${0}${1}", [_item.displayPathSegment, path]), _item.parentItem);
                            }

                            results = GetDisplayPath("", item);
                            item.displayPath = results;
                        }
                    ];

                    // Clojure for our transform loop
                    makeFn = function (item) {
                        return function(func) {
                            func(item);
                        };
                    };
                    
                    for (i = 0; i < data.length; i++) {
                        array.forEach(transforms, lang.hitch(this, makeFn(data[i])));
                    }
                    // Filter out data that includes a relationship that's already in the existing
                    // branch (ACCOUNT -> CONTACT -> ACCOUNT, ACCOUNT -> ADDRESS -> ACCOUNT, etc.)
                    data = array.filter(data, lang.hitch(this, function(item) {
                        var parentItem = item.parentItem;
                        while(!parentItem.root) {
                            if(item.fromField === parentItem.fromField) {
                                return false;
                            }
                            parentItem = parentItem.parentItem;
                        }
                        // check against the root item's id field instead
                        if(item.fromField === parentItem.id) {
                            return false;
                        }
                        return true;
                    }));

                    data.sort(function(a, b) {
                        if(a.toTable < b.toTable) {
                            return -1;
                        }

                        if(a.toTable > b.toTable) {
                            return 1;
                        }

                        return 0;
                    });
                   
                    parentItem.children = data;
                    complete_cb(data, obj);
                }),
                onError: error_cb
            });
        },
        getIdentity: function (item) {
            return item.$descriptor;
        },
        mayHaveChildren: function (item) {
            return item.root || true;
        },
        newItem: function (args, parentNode) {
            var child = {
                "$descriptor": args.fromtable,
                "$etag": "",
                "$httpStatus": 200,
                "fromTable": args.fromtable,
                "fromField": args.fromfield,
                "toTable": args.totable,
                "toTableDisplayName": args.fromtable,
                "toField": args.tofield,
                "cascadeType": args.cascadetype,
                "joinType": args.jointype,
                "parentItem": parentNode.item,
                "children": []
            };
            this.insertedChildren.push(child);
            this.addItemToStore(child, parentNode.item);
        },
        addItemToStore: function (childItem, newParentItem) {
            var store = this.store,
                parentAttr = this.childrenAttrs[0],// name of "children" attr in parent item
                children = store.getValue(newParentItem, parentAttr),
                updated;

            // modify target item's children attribute to include this item
            if(newParentItem){
                if (children) {
                    updated = children.slice(0);
                    updated.push(childItem);
                    store.setValue(newParentItem, parentAttr, updated);
                }
            }
        }
    });
});
},
'Sage/UI/ImageButton':function(){
require({cache:{
'url:Sage/templates/ImageButton.html':"<span id=\"${id}\" class=\"dijit dijitReset dijitInline\" role=\"presentation\">\r\n<span class=\"dijitReset dijitInline dijitButtonNode imageButtonNode\" data-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\">\r\n        <span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\">\r\n                <img alt=\"\" src=\"\" data-dojo-attach-point=\"iconNode\"/>\r\n                <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\r\n            </span\r\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\r\n\t\t\t></span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\r\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\r/></span>\r\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */define("Sage/UI/ImageButton", [    'dijit/form/Button',    'dijit/_Widget',    'dojo/text',    'dojo/dom-style',    'dojo/_base/declare',    'dojo/text!../templates/ImageButton.html'],function (button, _Widget, text, domStyle, declare, template) {    var widget = declare('Sage.UI.ImageButton', button, {        hoverText: '',        templateString: template,        // we don't need the iconClass property so override the mapping        // this will work for our MenuBarItem as well...        iconClass: '',        _setIconClassAttr: { node: 'iconNode', type: 'class' },                label: '',        _setLabelAttr: { node: 'containerNode', type: 'innerHTML' },                icon: '',        _setIconAttr: { node: 'iconNode', type: 'attribute', attribute: 'src' },                imageClass: '',                iconStyle: '',        _setIconStyleAttr: { node: 'iconNode', type: 'style' },                tooltip: '',        _setTooltipAttr: { node: 'titleNode', type: 'attribute', attribute: 'title' },                alt: '',        _setAltAttr: { node: 'valueNode', type: 'attribute', attribute: 'title'},                postMixInProperties: function() {            if (this.hasImageClass() && this.hasIcon()) {                this.icon = this._blankGif;            } else {                this.icon = this.icon || this._blankGif;            }            this.inherited(arguments);        },        postCreate: function () {            this.inherited(arguments);            if (this.hasImageClass()) {                this.set('icon', this._blankGif);                domStyle.set(this.iconNode, 'display', 'none');            } else {                domStyle.set(this.iconNodeSprite, 'display', 'none');            }        },        hasImageClass: function () {            if (this.imageClass && this.imageClass !== 'noIcon') {                return true;            }                        return false;        },        hasIcon: function () {            if (this.icon && this.icon !== this._blankGif) {                return true;            }                        return false;        },        _onButtonClick: function (e) {        }    });        return widget;});
},
'Sage/MainView/ActivityMgr/PastDueListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/PastDueListPanelConfig", [
    'Sage/MainView/ActivityMgr/BaseListPanelConfig',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/SummaryFormatterScope',
     'Sage/UI/SDataSummaryFormatterScope',
    'Sage/Data/SDataStore',
    'Sage/Data/SDataStore',
    'Sage/UI/Columns/DateTime',
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/declare',
    'dojo/i18n!./nls/ActivityListPanelConfig'

],

function (
    BaseListPanelConfig,
    SageUtility,
    UtilityActivity,
    SummaryFormatterScope,
    SDataSummaryFormatterScope,
    SDataStore,
    BaseSDataStore,
    ColumnsDateTime,
    SDataServiceRegistry,
    declare,
    nlsResources
) {

    //dojo.requireLocalization("Sage.MainView.ActivityMgr", "PastDueListPanelConfig");
    var pastDueListPanelConfig = declare('Sage.MainView.ActivityMgr.PastDueListPanelConfig', [BaseListPanelConfig], {
        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'pastdue';
            this._resourceKind = 'useractivities';
            this.entityName = 'UserActivity';
            this._contextMenu = 'ActivityListContextMenu';
            this._scheduleContextMenu = 'ScheduleContextMenu';
            //this._service = SDataServiceRegistry.getSDataService('dynamic');
            this._service = SDataServiceRegistry.getSDataService('system');
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._include = this._getInclude();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.toolBar = this._getToolBars();
            this.keyField = "$key";
            this.hasCompositeKey = true;
            this.rebuildOnRefresh = true,
            dojo.subscribe('/entity/activity/change', this._onListRefresh);
            dojo.subscribe('/entity/activity/delete', this._onListRefresh);
            dojo.subscribe('/entity/activity/create', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/change', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/delete', this._onListRefresh);
            dojo.subscribe('/entity/userActivity/create', this._onListRefresh);
            dojo.subscribe('/entity/activity/confirm', this._onListRefresh);
            dojo.subscribe('/entity/activity/decline', this._onListRefresh);
            dojo.subscribe('/entity/userNotification/delete', this._onListRefresh);
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('pastdue');
        },
        _getSelect: function () {
            var select = [
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Alarm',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'UserId',
                      'AlarmTime',
                      'Alarm',
                      'Status'
                     ];
            return select;
        },
        _getInclude: function () {
            var includes = ["Activity", "$descriptors"];
            return includes;
        },
        _getSort: function () {
            var sort = [];
            return sort;
        },
        _getWhere: function () {
            var where;
            var dt = new Date();
            var dtNow = Sage.Utility.Convert.toIsoStringFromDate(dt);
            var dtTimelessDate = UtilityActivity.formatTimelessEndDate(dt, 'day', -1);
            // where = dojo.string.substitute('(UserId eq \'${0}\') and ( Activity.Type ne "atLiterature" ) and ((Alarm eq \'false\') or (Alarm eq null)) and ((Activity.StartDate lt \'${1}\' and Activity.Timeless eq \'false\' ) or (Activity.StartDate lt \'${2}\' and Activity.Timeless eq \'true\' )) and ((AlarmTime lt \'${3}\') or (Alarm eq \'false\') or (Alarm eq null ))', [this._currentUserId, dtNow, dtTimelessDate, dtNow]);
            where = dojo.string.substitute('(User.Id eq \'${0}\') and ( Activity.Type ne "atLiterature" ) and ((Alarm eq \'false\') or (Alarm eq null)) and ((Activity.StartDate lt \'${1}\') and ((Activity.Timeless eq \'false\') or (Activity.Timeless eq null )) or ((Activity.StartDate lt \'${2}\') and (Activity.Timeless eq \'true\' )))', [this._currentUserId, dtNow, dtTimelessDate]);
         
            return where;
        },
        _getStructure: function () {

            var colNameAttachment = "<div class='Global_Images icon16x16 icon_attach_to_16' title='" + this._nlsResources.colNameAttachment + "' />"; //this._nlsResources.colNameAttachment || 'Attachment';
            var colNameRecurring = "<div class='Global_Images icon16x16 icon_recurring' title='" + this._nlsResources.colNameRecurring + "' />"; // this._nlsResources.colNameRecurring || 'Recurring';
            var colNameStatus = "<div class='Global_Images icon16x16 icon_unconfirmedActivity16x16' title='" + this._nlsResources.colNameUnConfirmStatus + "' />";
            var colNameType = this._nlsResources.colNameType || 'Activity Type';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            var colNameDuration = this._nlsResources.colNameDuration || 'Duration';
            var colNameContact = this._nlsResources.colNameContact || 'Name';
            var colNameAccount = this._nlsResources.colNameAccount || 'Account/Company';
            var colNameRegarding = this._nlsResources.colNameRegarding || 'Regarding';
            var colNamePriority = this._nlsResources.colNamePriority || 'Priority';
            var colNameUserId = this._nlsResources.colNameUserId || 'Leader';
            var colNameTypeName = this._nlsResources.colNameTypeName || 'Type';

            var structure = [
                { field: 'Status', name: colNameStatus, type: UtilityActivity.activityConfirmStatusCell, width: '20px' },
                { field: 'Activity.Attachment', name: colNameAttachment, type: UtilityActivity.activityAttachCell, width: '20px' },
                { field: 'Activity.Recurring', name: colNameRecurring, type: UtilityActivity.activityRecurringCell, width: '20px' },
                { field: 'Activity.Type', name: colNameType, type: UtilityActivity.activityTypeCell, width: '90px' },
                { field: 'Activity.StartDate', name: colNameStartDate, type: ColumnsDateTime, timelessField: 'Activity.Timeless', width: '100px' },
                { field: 'Activity.Duration', name: colNameDuration, type: UtilityActivity.activityDurationCell, width: '40px' },
                { field: 'Activity.ContactId', name: colNameTypeName, type: UtilityActivity.activityNameTypeCell, width: '40px' },
                { field: 'Activity.ContactName', name: colNameContact, type: UtilityActivity.activityNameCell, width: '200px' },
                { field: 'Activity.AccountName', name: colNameAccount, type: UtilityActivity.activityAccountCell, width: '200px' },
                { field: 'Activity.Description', name: colNameRegarding, width: '100px' },
                { field: 'Activity.Priority', name: colNamePriority, width: '40px' },
                { field: 'Activity.Leader', name: colNameUserId, type: UtilityActivity.activityLeaderCell, width: '200px' }
            ];

            return structure;
        },

        _getSummaryConfig: function () {
            var store = new SDataStore({
                id: this._listId,
                service: this._service,
                resourceKind: this._resourceKind,
                include: ['Activity', '$descriptors'],
                select: ['$key'],
                expandRecurrences: false,
                // sort: this._sort,
                //query: {conditions:this._where }
                where: this._where
            });

            var structure = [
                {
                    field: '$key',
                    formatter: 'formatSummary',
                    width: '100%',
                    name: 'Summary View'
                }
            ];
            var formatScope = this._getFormatterScope();
            var summaryConfig = {
                structure: structure,
                layout: 'layout',
                store: store,
                rowHeight: 120,
                rowsPerPage: 10,
                formatterScope: formatScope
            };

            return summaryConfig;
        },

        _getDetailConfig: function () {

            var formatScope = this._getFormatterScope();
            var requestConfig = this._getSummaryDetailRequestConfig();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: requestConfig,
                templateLocation: 'MainView/ActivityMgr/Templates/UserActivityDetailSummary.html'
            };
            return detailConfig;

        },
        _getSummaryListRequestConfig: function () {

            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/Notes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity', '$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getSummaryDetailRequestConfig: function () {
            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Alarm',
                      'Status',
                      'Activity/Attachment',
                      'Activity/Timeless',
                      'Activity/Recurring',
                      'Activity/RecurIterations',
                      'Activity/Type',
                      'Activity/StartDate',
                      'Activity/Duration',
                      'Activity/ContactName',
                      'Activity/ContactId',
                      'Activity/LeadName',
                      'Activity/LeadId',
                      'Activity/AccountName',
                      'Activity/AccountId',
                      'Activity/Description',
                      'Activity/Priority',
                      'Activity/Leader',
                      'Activity/Location',
                      'Activity/TicketId',
                      'Activity/TicketNumber',
                      'Activity/OpportunityId',
                      'Activity/OpportunityName',
                      'Activity/LongNotes',
                      'Activity/PhoneNumber'
                     ],
                include: ['Activity', '$descriptors'],
                useBatchRequest: true,
                expandRecurrences: false
            };
            return requestConfig;

        },
        _getFormatterScope: function () {
            var requestConfig = this._getSummaryListRequestConfig();
            var formatScope = new SDataSummaryFormatterScope({
                templateLocation: 'MainView/ActivityMgr/templates/UserActivityListSummary.html',
                resetDataManager: true,
                requestConfiguration: requestConfig

            });
            return formatScope;

        },
        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        },
        getTimelessProperty: function (propertyName) {
            return "Activity.Timeless";

        }

    });
    return pastDueListPanelConfig;
});
},
'Sage/Utility/File/nls/GoogleDocPicker':function(){
﻿define("Sage/Utility/File/nls/GoogleDocPicker", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            googleDocumentsTitle: 'Google Documents',
            couldNotOpenWindowMsg: 'Could not open authentication window - please check your popup blocker settings.'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/nls/ComboBoxControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/ComboBoxControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "ComboBox"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/SDataSummaryFormatterScope':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SDataSummaryFormatterScope", [
        'Sage/UI/SummaryContainer',
        'dojo/i18n',
        'Sage/UI/SummaryFormatterScope',
        'Sage/Data/SDataSummaryViewDataManager',
        'Sage/UI/Controls/SummaryAggregate',
        'dojo/_base/declare'
],
function (summaryContainer, i18n, SummaryFormatterScope, SDataSummaryViewDataManager, SummaryAggregate, declare) {
    var sDataSummaryFormatterScope = declare('Sage.UI.SDataSummaryFormatterScope', [SummaryFormatterScope], {
        
        constructor: function (args) {
            dojo.mixin(this, args);
            this.widgets = [];
            this.preFetchResources();
            this._setupDataManager();
        },
        _setupDataManager: function () {
            this.dataManager = new SDataSummaryViewDataManager(this.requestConfiguration);
            if (Sage.Services.hasService('SummaryViewDataManager')) {
                Sage.Services.removeService('SummaryViewDataManager');
            }
            Sage.Services.addService('SummaryViewDataManager', this.dataManager);
        }      

    });
    return sDataSummaryFormatterScope;
});

},
'Sage/MainView/ActivityMgr/nls/LitRequestListPanelConfig':function(){
﻿define("Sage/MainView/ActivityMgr/nls/LitRequestListPanelConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            colNameView:'View',
            colNameContact:'Contact',
            colNameDescription:'Description',
            colNameFillDate: 'Filled',
            colNameFillStatus:'Status',
            colNameOptions:'Options',
            colNamePriority:'Priority',
            colNameReqestDate:'Request Date',
            colNameSendDate:'Send Date',
            colNameSendVia:'Send Via',
            colNameTotalCost:'Total Cost',
            colNameFillUser: 'Fill User',
            colNameReqestUser:'Request User',
            colNameAccount:'Account',
            colNamePostalCode:'Postal Code'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/nls/HistoryEditor':function(){
﻿define("Sage/MainView/ActivityMgr/nls/HistoryEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            labelWidth: '100',
            tabNameGeneralText: 'General',
            tabNameAttachmentsText: 'Attachments',
            scheduleText: 'Schedule',
            startTimeText: 'Scheduled',
            completedDateText: 'Completed',
            timeLessText: 'Timeless',
            durationText: 'Duration',
            contactText: 'Contact',
            accountText: 'Account',
            leadText: 'Lead',
            opportunityText: 'Opportunity',
            ticketText: 'Ticket',
            companyText: 'Company',
            regardingText: 'Regarding',
            resultText: 'Result',
            notesText: 'Notes',
            priorityText: 'Priority',
            leaderText: 'Leader',
            categoryText: 'Category',
            locationText: 'Location',
            scheduledByFormatText: 'Scheduled by ${user} on ${date}',
            cancelText: 'Cancel',
            okText: 'OK',
            deleteText: 'Delete',
            lookupActText: 'Lookup Account',
            lookupContactText: 'Lookup Contact',
            lookupOpportunityText: 'Lookup Opportunity',
            lookupTicketText: 'Lookup Ticket',
            lookupLeadText: 'Lookup Lead',
            lookupLeaderText: 'Lookup Leader',
            lookupResourcesText: 'Lookup',
            mainPhoneText: 'Main Phone',
            typeText: 'Type',
            subTypeText: 'Sub-Type',
            nameText: 'Name',
            cityText: 'City',
            stateText: 'State',
            workphoneText: 'Work Phone',
            emailText: 'Email',
            acctMgrText: 'Acct Manager',
            descriptionText: 'Description',
            stageText: 'Stage',
            statusText: 'Status',
            ownerText: 'Owner',
            ticketNumberText: 'Ticket Number',
            phoneText: 'Phone',
            urgencyText: 'Urgency',
            areaText: 'Area',
            recurringText: 'Recurring',
            followupText: 'Follow-up',
            noneText: 'None',
            carryOverAttachmentsText: 'Carry Over Attachments',
            carryOverNotesText: 'Carry Over Notes',
            asScheduledText: 'As Scheduled',
            insertText: 'Insert',
            couldNotSaveErrorText: 'We\'re sorry, the history could not be saved because an error occurred.',
            deleteMessage: 'You are about to permanently delete this record.',
            deleteTitle: 'Delete History',
            couldNotDeleteErrorText: 'We\'re sorry, the history could not be deleted because an error occurred.',
            postalText: 'Postal Code'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/DetailPanel':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/DetailPanel", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'dojo/dom-construct',
    'dojo/dom-class',
    'dojo/i18n',
    'dijit/registry',
    'dijit/layout/BorderContainer',
    'dijit/Toolbar',
    'dijit/ToolbarSeparator',
    'Sage/_Templated',
    'Sage/UI/_DetailPanelConfigurationProvider'
], function (
    declare,
    lang,
    array,
    domConstruct,
    domClass,
    i18n,
    registry,
    BorderContainer,
    Toolbar,
    ToolbarSeparator,
    _Templated,
    _DetailPanelConfigurationProvider,
    undefined
) {
    return declare('Sage.UI.DetailPanel', [BorderContainer, _Templated], {        
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<div class="detail-panel-toolbar listPanelToolbar rightTools" data-dojo-type="dijit.Toolbar" style="{%= $.toolbarStyle %}" data-dojo-attach-point="_toolbar" data-dojo-props="region: \'top\', align: \'right\', splitter: false">',
            '<span data-dojo-type="dijit.ToolbarSeparator" data-dojo-attach-point="_buttonSeparator"></span>',
            '<div data-dojo-type="dijit.form.Button" data-dojo-attach-point="_helpButton" data-dojo-attach-event="onClick:showHelp" data-dojo-props="showLabel:true">{%= $.helpText %}</div>',
            '</div>'
        ]),

        helpText: 'Help',
        helpTopicName: 'detailview',
        toolbarStyle: '',
        toolbarActive: true,
        id: 'detailPanel',

        buildRendering: function() {
            this.inherited(arguments);

            domClass.add(this.domNode, 'detail-panel');
        },
        startup: function() {     
            this.inherited(arguments);

            this.requestConfiguration();
        },
        showHelp: function() {
            // summary:
            //      Shows the context sensitive help associated with this detail view.  Used
            //      as the callback method for the help button in the toolbar.
            Sage.Utility.openHelp(this.helpTopicName);
        },
        requestConfiguration: function() {
            // summary:
            //      requests the configuration from the provider.
            if (this.configurationProvider) {
                this.configurationProvider.requestDetailModeConfiguration({
                    scope: this,
                    success: this._applyConfiguration
                });
            }            
        },
        _applyConfiguration: function(configuration) {
            // summary:
            //      The callback method for receiving the configuration from the provider.
            //      Creates and starts the toolbar and content.
            this._configuration = configuration;

            this._configureToolbar(configuration);
            this._configureContent(configuration)                       
        },
        _configureContent: function(configuration) {
            var contentConfiguration = configuration && configuration.content;
            if (contentConfiguration) 
            {
                var widget = contentConfiguration;

                if (lang.isFunction(widget)) widget = widget.call(this, configuration, this);

                if (widget)
                {
                    if (this._content)
                    {
                        this.removeChild(this._content);

                        this._content.destroyRecursive();
                        this._content = null;
                    }

                    widget.set('region', 'center');                    

                    this._content = widget;

                    this.addChild(widget);
                    this.layout();
                }
            }
        },
        _configureToolbar: function(configuration) {
            if (this._toolbarApplied) return; /* temporary */

            var toolbarConfiguration = configuration && configuration.toolBar;            
            if (toolbarConfiguration === false)
            {
                if (this.toolbarActive) 
                {
                    this.removeChild(this._toolbar);
    
                    this.toolbarActive = false;
                }
            }
            else if (toolbarConfiguration)
            {
                if (!this.toolbarActive) 
                {
                    this.addChild(this._toolbar);

                    this.toolbarActive = true;
                }
                
                array.forEach(toolbarConfiguration.items, function(item, index) {
                    this._toolbar.addChild(new dijit.form.Button(item), index);                    
                }, this);
            }

            this._toolbarApplied = true;
        }
    });
});


},
'Sage/Groups/nls/GroupManager':function(){
define("Sage/Groups/nls/GroupManager", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            ConfirmDeleteMessage: "Are you sure you want to delete the current group?",
            ConfirmDeleteFmtMessage: "Are you sure you want to delete this group: ${0}",
            InvalidSortStringMessage: "Error: Invalid sort string - ",
            InvalidConditionStringMessage: "Error: Invalid condition string - ",
            InvalidLayoutConditionStringMessage: "Error: Invalid layout string - ",
            noneSelectedTitle: 'No records selected',
            noneSelectedPromptFmt: 'No records selected. The full group, ${0} record(s), will be added.  Proceed?',
            noneSelectedRemovePromptFmt: 'No records selected. The full group, ${0} record(s), will be removed.  Proceed?',
            noRecordsInGroup: 'There are no records to be selected from this group.',
            newGroupTitle: 'Add Records to new Group',
            newGroupNamePrompt: '${0} selected record(s) will be added to this new group.<br><br>Group Name:<br>${1}',
            newGroupRePrompt: '&nbsp;&nbsp;<i>Please enter a group name.</i>',
            invalidCharMsg: 'Name Cannot contain: / \\ : * ? " <> | or \'',
            groupNameText: 'Group Name:',
            saveLookupDlgTitle: 'Save Lookup Results as New Group',
            yesCaption: 'Yes',
            noCaption: 'No',
            cancelCaption: 'Cancel',
            okCaption: 'OK',
            LOCALSTORE_NAMESPACE: 'SageGroups'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/TimelessActivitiesPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/TimelessActivitiesPane", [
    'dijit/_Widget',
    'dojo/i18n',
    'Sage/UI/SLXPreviewGrid',
    'Sage/UI/EditableGrid',
    'Sage/UI/Columns/ActivityType',
    'Sage/UI/Columns/HistoryType',
    'Sage/Utility',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Data/WritableSDataStore',
    'dojo/_base/lang',
    'dojo/string',
    'dojo/i18n!./nls/TimelessActivitiesPane',
    'dojo/_base/declare'
], function (_Widget, i18n, slxPreviewGrid, editableGrid, activityType, historyType, sUtility, sDataServiceRegistry, writableSDataStore, lang, dstring, nlsResource, declare) {
        var timelessGrid = declare('Sage.UI.TimelessActivitiesPane', _Widget, {
            gridMode: null,
            Id: null,
            grid: null,
            currentUserIds: [],
            userColor: [],
            queryStartDate: null,
            queryEndDate: null,
            currentUserDeafultCalendarView: null,
            schedulerDate: null,
            weekStart: null,
            workWeekStart: null,
            users: {},
            userActivities: [],
            
            // i18n strings from nls\{language}\TimelessActivitiesPane.js

            constructor: function (options) {
                lang.mixin(this, i18n.getLocalization("Sage.UI", "TimelessActivitiesPane", this.lang));
                this.Id = options.Id;
                this.users = options.users;
                this.gridMode = options.mode;
                var cUserId;
                var self = this;

                var setQueryDates = function (data) {
                    var ndate = data.date.valueOf();
                    switch (data.mode) {
                        case 'day':
                            var stDate = new Date(ndate);
                            stDate.setHours(0, 0, 0, 0);
                            self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(stDate);
                            self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(stDate);

                            break;
                        case 'month':
                            var daysInMonth = dojo.date.getDaysInMonth(new Date(ndate));
                            var firstDayOfMonth = new Date(new Date(ndate).setDate(1));
                            firstDayOfMonth.setHours(0, 0, 0, 0);
                            var lastDayOfMonth = new Date(new Date(ndate).setDate(daysInMonth));
                            lastDayOfMonth.setHours(0, 0, 0, 0);
                            self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(firstDayOfMonth);
                            self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(lastDayOfMonth);
                            break;
                        case 'week':
                            var weekStartDate = new Date(data.weekStartDate.valueOf());
                            var weekEndDate = new Date(data.weekEndDate.valueOf());
                            weekStartDate.setHours(0, 0, 0, 0);
                            weekEndDate.setHours(0, 0, 0, 0);
                            self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(weekStartDate);
                            self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(weekEndDate);
                            break;
                        case 'workweek':
                            var workWeekStartDate = new Date(data.workWeekStartDate.valueOf());
                            var workWeekEndDate = new Date(data.workWeekEndDate.valueOf());
                            workWeekStartDate.setHours(0, 0, 0, 0);
                            workWeekEndDate.setHours(0, 0, 0, 0);
                            self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(workWeekStartDate);
                            self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(workWeekEndDate);
                            break;
                        default:
                            var sDate = new Date(ndate);
                            sDate.setHours(0, 0, 0, 0);
                            self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(sDate);
                            self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(sDate, "day", 1);
                            break;
                    }
                };

                if (this.users) {
                    for (var i in this.users) {
                        cUserId = lang.trim(this.users[i]["userId"].toString());
                        var tUserId = dstring.substitute('\'${0}\'', [cUserId]);
                        if (dojo.indexOf(this.currentUserIds, tUserId) == -1) {
                            this.currentUserIds.push(tUserId);
                        }                        
                        if (this.users[i]["usercolor"]) {
                            this.userColor[cUserId] = lang.trim(this.users[i]["usercolor"].toString());
                        }
                        if (this.currentUserDeafultCalendarView == null) {
                            this.currentUserDeafultCalendarView = this.users[i]["defaultcalendarview"].toString();
                        }
                        if (this.weekStart == null) {
                            this.weekStart = this.users[i]["weekstartdate"];
                        }
                        if (this.weekEnd == null) {
                            this.weekEnd = this.users[i]["weekenddate"];
                        }
                        if (this.workWeekStart == null) {
                            this.workWeekStart = this.users[i]["workweekstartdate"];
                        }
                        if (this.workWeekEnd == null) {
                            this.workWeekEnd = this.users[i]["workweekenddate"];
                        }
                    }


                    var dataObj = {};
                    dataObj.mode = this.currentUserDeafultCalendarView;
                    dataObj.date = new Date();
                    dataObj.weekStartDate = this.weekStart;
                    dataObj.weekEndDate = this.weekEnd;
                    dataObj.workWeekStartDate = this.workWeekStart;
                    dataObj.workWeekEndDate = this.workWeekEnd;

                    setQueryDates(dataObj);
                }

                dojo.subscribe("/sage/ui/calendarUser/selectionChanged/add", function addUser(data) {

                    var userId = lang.trim(data.userId.toString());
                    var nUserId = dstring.substitute('\'${0}\'', [userId]);
                    if (dojo.indexOf(self.currentUserIds, nUserId) == -1) {
                        self.currentUserIds.push(nUserId);
                    }
                    self.userColor[userId] = data.usercolor.toString();
                    self.userActivities = [];
                    setTimeout(function () { self.grid.refresh(); }, "1");
                });

                dojo.subscribe("/sage/ui/calendarUser/selectionChanged/remove", function removeUser(data) {
                    self.currentUserIds = dojo.filter(self.currentUserIds, function (item) {
                        return item != "'" + data.userId.toString() + "'";
                    });
                    self.userActivities = [];
                    self.grid.refresh();
                });


                dojo.subscribe("/entity/activity/calendar/schedulerDateChanged", function refreshList(data) {
                    setQueryDates(data);
                    self.userActivities = [];
                    self.grid.refresh();
                });

                dojo.subscribe("/entity/activity/create", function (data) {
                    self.refreshGrid(data);
                });

                dojo.subscribe("/entity/userActivities/timeless/saved", function (data) {
                    //Summary : As we are refreshing the whole grid, wait until all the userActivities saved
                    self.grid.refresh();
                });

                dojo.subscribe("/entity/activity/change", function (data) {
                    self.refreshGrid(data);
                });

                dojo.subscribe("/entity/activity/timeless/delete", function (data) {
                    self.userActivities = [];
                    self.grid.refresh();
                });

            },
            refreshGrid: function (data) {
                if (data != null) {
                    if (data.Timeless) {
                        this.userActivities = [];
                        this.grid.refresh();
                    }
                }
            },
            startup: function () {
                var self = this;
                var options;
                //Completed Timeless Activities Grid
                if (this.gridMode === 'completed') {
                    options = {
                        context: null,
                        readOnly: true,
                        columns: [
                            {
                                field: '$key',
                                editable: false,
                                hidden: true,
                                id: 'id',
                                formatter: function (value, rowIdx, cel) {
                                    var insertId = [cel.grid.id, '-row', rowIdx].join('');
                                    var id = (Sage.Utility.getModeId() === 'insert') ? insertId : value;
                                    var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                                    return anchor;
                                }
                            }, {
                                field: 'UserId',
                                name: " ",
                                sortable: false,
                                width: "20px",
                                formatter: function (value) {
                                    return "<div class='userStyles " + self.userColor[value] + "'></div>";
                                }
                            }, {
                                field: 'Type',
                                keyField: '$key',
                                name: this.header_type,
                                type: historyType,
                                width: '90px'
                            }, {
                                field: 'ContactName',
                                name: this.header_contact,
                                width: '100px'
                            }, {
                                field: 'Description',
                                name: this.header_regarding,
                                width: '100px'
                            }
                        ],
                        storeOptions: {
                            service: sDataServiceRegistry.getSDataService('dynamic'),
                            resourceKind: 'history',
                            include: ['$descriptors'],
                            select: ['$key', 'Regarding', 'Description', 'AccountId', 'AccountName', 'ActivityId', 'ContactName', 'Recurring', 'StartDate', 'Timeless', 'Type', 'Priority', 'Leader/$key', 'PhoneNumber', 'LeadId', 'LeadName', 'LongNotes', 'Location', 'UserName'],
                            sort: [{ attribute: 'StartDate', descending: true}]
                        },
                        tools: [],
                        //contextualCondition: function () { return 'UserActivities.UserId in (' + self.currentUserIds.toString() + ') and Timeless eq "true" and Type in ("atPhoneCall","atToDo","atAppointment","atPersonal")'; },
                        contextualCondition: function () {
                            if (self.queryStartDate == null)
                                self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(new Date());
                            if (self.queryEndDate == null)
                                self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(new Date());

                            return dojo.string.substitute('UserId in (${0}) and Timeless and StartDate between @${1}@ and @${2}@ and Type in (\'atPhoneCall\',\'atToDo\',\'atAppointment\',\'atPersonal\')', [self.currentUserIds.toString(), self.queryStartDate, self.queryEndDate]);


                        },
                        id: this.Id,
                        tabId: 'ActivityCalendar',
                        gridNodeId: this.gridNodeId,
                        rowsPerPage: 10,
                        singleClickEdit: true,
                        dblClickAction: Link.editActivity
                    };
                } else {
                    options = {
                        context: null,
                        readOnly: true,
                        columns: [
                            {
                                field: '$key',
                                editable: false,
                                hidden: true,
                                id: 'id',
                                formatter: function (value, rowIdx, cel) {
                                    var insertId = [cel.grid.id, '-row', rowIdx].join('');
                                    var id = (Sage.Utility.getModeId() === 'insert') ? insertId : value;
                                    var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                                    return anchor;
                                }
                            }, {
                                field: 'UserActivities.$resources',
                                name: " ",
                                sortable: false,
                                width: "20px",
                                formatter: function (data) {
                                    var uId;
                                    if (data) {
                                        for (var i = 0; i < data.length; i++) {
                                            var resource = data[i];
                                            if (!resource["remove"]) {
                                                var userId = resource.User.$key;
                                                uId = userId;
                                            }
                                        }
                                    }
                                    return "<div class='userStyles " + self.userColor[uId] + "'></div>";
                                }
                            }, {
                                field: 'Type',
                                keyField: '$key',
                                name: this.header_type,
                                type: activityType,
                                width: '90px'
                            }, {
                                field: 'ContactName',
                                name: this.header_contact,
                                width: '100px'
                            }, {
                                field: 'Description',
                                name: this.header_regarding,
                                width: '100px'
                            }
                        ],
                        storeOptions: {
                            service: sDataServiceRegistry.getSDataService('system'),
                            resourceKind: 'activities',
                            include: ['$descriptors,UserInfo'],
                            select: ['$key', 'Regarding', 'Description', 'AccountId', 'AccountName', 'ActivityId', 'ContactName', 'Recurring', 'StartDate', 'Timeless', 'Type', 'Priority', 'Leader/$key', 'PhoneNumber', 'LeadId', 'LeadName', 'LongNotes', 'Location', 'UserActivities/User/$key'],
                            sort: [{ attribute: 'StartDate', descending: true}],
                            onComplete: this._onComplete
                        },
                        tools: [],
                        contextualCondition: function () {
                            if (self.queryStartDate == null)
                                self.queryStartDate = Sage.Utility.Activity.formatTimelessStartDate(new Date());
                            if (self.queryEndDate == null)
                                self.queryEndDate = Sage.Utility.Activity.formatTimelessEndDate(new Date());

                            return dojo.string.substitute('UserActivities.UserId in (${0}) and Timeless and UserActivities.Status ne \'asDeclned\' and StartDate between @${1}@ and @${2}@ and Type in (\'atPhoneCall\',\'atToDo\',\'atAppointment\',\'atPersonal\')', [self.currentUserIds.toString(), self.queryStartDate, self.queryEndDate]);


                        },
                        id: this.Id,
                        tabId: 'ActivityCalendar',
                        gridNodeId: this.gridNodeId,
                        rowsPerPage: 10,
                        singleClickEdit: true,
                        dblClickAction: Link.editActivity
                    };
                }

                var grid = new editableGrid(options);
                var container = dijit.byId(grid.gridNodeId);
                container.addChild(grid);
                window.setTimeout(function () { grid.startup(); container.resize(); }, 1);
                this.grid = grid;
                //Bind RMB context menu from "ContextCalendar.mnuCalendarActivity"
                grid.onRowContextMenu = function (e) {
                    var item = e.grid.getItem(e.rowIndex);
                    self._bindContextMenu(item.$key, new Date(), e.grid.domNode);
                };

                var isValidId = function (id) {
                    var valid = false;
                    if (id) {
                        if (id.trim() != '') {
                            valid = true;
                        }
                    }
                    return valid;
                };

                grid.onRowMouseOver = function (e) {
                    var item = e.grid.getItem(e.rowIndex);
                    var html = "";
                    var userId, userName = "";

                    if (item.Type) html += self.tooltip_type + " : " + Sage.Utility.Activity.getActivityTypeName(item.Type) + "<br>";


                    if (isValidId(item.LeadId)) {
                        html += self.tooltip_lead + " : " + item.LeadName + "<br>";
                        if (item.AccountName)
                            html += self.tooltip_company + " : " + item.AccountName + "<br>";
                    } else {
                        if (item.ContactName)
                            html += self.tooltip_contact + " : " + item.ContactName + "<br>";

                        if (item.AccountName)
                            html += self.tooltip_account + " : " + item.AccountName + "<br>";
                    }

                    if (item.PhoneNumber) html += self.tooltip_phone + " : " + item.PhoneNumber + "<br>";

                    if (item.UserId) {
                        userId = item.UserId;
                        userName = item.UserName;
                    } else if (item.Leader) {
                        userId = item.Leader.$key;
                        userName = item.Leader.$descriptor;
                    }


                    if (lang.trim(sUtility.getClientContextByKey('userID')).toUpperCase() !== userId) {
                        if (userName)
                            html += self.tooltip_leader + " : " + userName + "<br>";
                    }

                    if (item.Description) html += self.tooltip_regarding + " : " + item.Description + "<br>";
                    if (item.Location) html += self.tooltip_location + " : " + item.Location + "<br>";
                    if (item.LongNotes) html += self.tooltip_notes + " : " + item.LongNotes + "<br>";

                    dijit.showTooltip(html, e.cellNode);
                };
                grid.onRowMouseOut = function (e) {
                    dijit.hideTooltip(e.cellNode);
                };

                dojo.connect(this.grid, "onHeaderCellClick", function (e) {
                    self.userActivities = [];
                    this.inherited(arguments);
                });

                dojo.connect(dijit.byId("TaskPane_splitter"), "onMouseUp", function (e) {
                    self.userActivities = [];
                });

            },
            _startGrid: function (data) {
                this.grid.startup();
            },
            _onComplete: function (data) {
                //	summary:
                //		Identify duplicates and set "remove" flag
                //      Example: If an activity has 3 members, the feed will have 3 activity records and each activity record
                //      contains 3 userActivity records
                if (data) {
                    self.userActivities = [];
                    var cnt = data.length;
                    for (var i = 0; i < cnt; i++) {
                        var userAssigned = false;
                        var activityId = data[i]["$key"];
                        if (data[i].UserActivities) {
                            var userActivities = data[i].UserActivities.$resources;
                            var ln = userActivities.length;

                            for (var j = 0; j < ln; j++) {

                                if (userAssigned) {
                                    //data[i].UserActivities.$resources.splice(j);
                                    data[i].UserActivities.$resources[j]["remove"] = true;
                                    continue;
                                }
                                var resource = userActivities[j];
                                var userId = resource.User.$key;

                                var userIds = self.userActivities[activityId];
                                if (userIds) {
                                    if (dojo.indexOf(userIds, userId) < 0) {
                                        self.userActivities[activityId].push(userId);
                                        userAssigned = true;
                                    } else {
                                        //data[i].UserActivities.$resources.splice(j);
                                        data[i].UserActivities.$resources[j]["remove"] = true;
                                    }
                                } else {
                                    self.userActivities[activityId] = [];
                                    self.userActivities[activityId].push(userId);
                                    userAssigned = true;
                                }
                            }
                        } else {
                            //Personal Activities will not have User Activities
                            //Attach 'UserActvities.$resources' as this is the key on grid binding for userColor column
                            var uId = data[i].Leader.$key;
                            var uIds = self.userActivities[activityId];
                            if (uIds) {
                                if (dojo.indexOf(uIds, uId) < 0) {
                                    self.userActivities[activityId].push(uId);
                                }
                            } else {
                                self.userActivities[activityId] = [];
                                self.userActivities[activityId].push(uId);
                            }
                            data[i].UserActivities = [];
                            data[i].UserActivities.$resources = [];
                            var userObj = {};
                            userObj.$key = uId;
                            userObj.User = { $key: uId };
                            data[i].UserActivities.$resources.push(userObj);
                        }

                    }
                }
            },
            _bindContextMenu: function (eventId, startDate, gridDomNode) {

                if (this.pMenu1) {
                    this.pMenu1.unBindDomNode(gridDomNode);
                }
                this.pMenu1 = null;
                this.pMenu1 = new dijit.Menu({});
                var menuType = "mnuCalendarActivity";
                if (this.gridMode === 'completed') {
                    menuType = "mnuCalendarHistory";
                }

                var menuConfig = Sage.UI.DataStore.ContextMenus.calendar_activityContextMenu.items;

                var len = menuConfig.length;
                for (var i = 0; i < len; i++) {
                    var mDef = menuConfig[i];
                    if (mDef.id === menuType) {
                        this._buildChildMenu(mDef.submenu, null, eventId, startDate);
                        break;
                    }
                }
                //Binding context menu to iFrame
                this.pMenu1.bindDomNode(gridDomNode);

            },
            _buildChildMenu: function (parentMenuDef, parentMenu, eventId, startDate) {

                var len = parentMenuDef.length;
                for (var i = 0; i < len; i++) {
                    var mDef = parentMenuDef[i];
                    if (mDef.submenu.length > 0) {
                        var subMenu = new dijit.Menu();
                        this._buildChildMenu(mDef.submenu, subMenu, eventId, startDate);
                        var popsubMenu = new dijit.PopupMenuItem({
                            label: mDef.text,
                            popup: subMenu
                        });

                        if (parentMenu) {
                            parentMenu.addChild(popsubMenu);
                        }
                        else {
                            this.pMenu1.addChild(popsubMenu);
                        }
                    }
                    else {

                        var menuItem = null;
                        if ((mDef.text === '-') || (mDef.text === ' ') || (mDef.isspacer)) {
                            menuItem = new dijit.MenuSeparator();
                        } else {
                            var href = mDef.href;
                            var self = this;
                            menuItem = new Sage.UI.MenuItem({
                                label: mDef.text || '...',
                                icon: 'Libraries/dojo/dojo/resources/blank.gif',
                                title: mDef.tooltip || '',
                                ref: href,
                                onClick: function () {
                                    switch (this.ref.toUpperCase()) {
                                        case "OPENACTIVITY":
                                            Sage.Link.editActivity(eventId);
                                            break;
                                        case "OPENHISTORY":
                                            Sage.Link.editHistory(eventId);
                                            break;
                                        case "COMPLETEACTIVITY":
                                            Sage.Link.completeActivity(eventId);
                                            break;
                                        case "DELETEACTIVITY":
                                            Sage.Link.deleteActivity(eventId, function (data) {
                                                self.grid.refresh();
                                            });
                                            break;
                                        case "GOTOACCOUNT":
                                            Sage.Link.goToActivityAssociation('Account', eventId);
                                            break;
                                        case "GOTOCONTACT":
                                            Sage.Link.goToActivityAssociation('Contact', eventId);
                                            break;
                                        case "GOTOOPPORTUNITY":
                                            Sage.Link.goToActivityAssociation('Opportunity', eventId);
                                            break;
                                        case "GOTOTICKET":
                                            Sage.Link.goToActivityAssociation('Ticket', eventId);
                                            break;
                                        case "GOTOLEAD":
                                            Sage.Link.goToActivityAssociation('Lead', eventId);
                                            break;
                                    }
                                }
                            });
                        }
                        if (parentMenu) {
                            parentMenu.addChild(menuItem);
                        }
                        else {
                            this.pMenu1.addChild(menuItem);
                        }
                    }
                }
            }

        });
        return timelessGrid;
    });


},
'url:Sage/MainView/ActivityMgr/templates/RecurringEditor.html':"﻿\r\n['<div>',\r\n    '<table style=\"width:100%\">',\r\n        '<tr>',\r\n            '<td class=\"recurring-selectors\">',  //radio buttons...\r\n                '<div>{%= $.activityOccurrsText %}</div>',\r\n                '<div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"None\" id=\"{%= $.id %}_rdo_Once\" dojoAttachPoint=\"rdo_Once\" checked=\"true\" dojoAttachEvent=\"onChange:_onceChanged\" />',  //  \r\n                    '<label for=\"{%= $.id %}_rdo_Once\">&nbsp;{%= $.onceText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"daily\" id=\"{%= $.id %}_rdo_Daily\" dojoAttachPoint=\"rdo_Daily\" dojoAttachEvent=\"onChange:_dailyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Daily\">&nbsp;{%= $.dailyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"weekly\" id=\"{%= $.id %}_rdo_Weekly\" dojoAttachPoint=\"rdo_Weekly\" dojoAttachEvent=\"onChange:_weeklyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Weekly\">&nbsp;{%= $.weeklyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"monthly\" id=\"{%= $.id %}_rdo_Monthly\" dojoAttachPoint=\"rdo_Monthly\" dojoAttachEvent=\"onChange:_monthlyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Monthly\">&nbsp;{%= $.monthlyText %}</label>',\r\n                '</div><div>',\r\n                    '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"recurPeriod\" value=\"yearly\" id=\"{%= $.id %}_rdo_Yearly\" dojoAttachPoint=\"rdo_Yearly\" dojoAttachEvent=\"onChange:_yearlyChanged\" />',\r\n                    '<label for=\"{%= $.id %}_rdo_Yearly\">&nbsp;{%= $.yearlyText %}</label>',\r\n                '</div>',\r\n            '</td>',\r\n            '<td>',  //panel for each different recurring type...\r\n                '<div dojoType=\"dijit.layout.StackContainer\" dojoAttachPoint=\"_panelContainer\" class=\"recurring-body\" >',\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_oncePanel\" class=\"recurring-panel\"  >',\r\n                        '{%= $.occursOnceText %}',\r\n                    '</div>',\r\n//daily panel...............................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_dailyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"dailyEvery\" value=\"days\" id=\"{%= $.id %}_rdoDailyEvery\" checked=\"true\" dojoAttachPoint=\"_rdoDailyEvery\" dojoAttachEvent=\"onChange:_dailyEveryChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoDailyEvery\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_dailyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.daysText %}</span>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"dailyEvery\" value=\"daysAfter\" id=\"{%= $.id %}_rdoDailyEveryAfter\" dojoAttachPoint=\"_rdoDailyEveryAfter\" />',\r\n                                '<label for=\"{%= $.id %}_rdoDailyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_dailyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.daysAfterText %}</span>',\r\n                            '</div>',\r\n                    '</div>',\r\n//weekly panel............................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_weeklyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"weeklyEvery\" value=\"weeksOn\" id=\"{%= $.id %}_rdoWeeklyEvery\" checked=\"true\" dojoAttachPoint=\"_rdoWeeklyEvery\" dojoAttachEvent=\"onChange:_weeklyEveryChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoWeeklyEvery\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_weeklyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.weeksOnText %}</span>',\r\n                        '</div>',\r\n                        '<div style=\"white-space:normal;padding-bottom:10px;\">',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkMonday\" value=\"mon\" id=\"{%= $.id %}_chkMonday\" dojoAttachPoint=\"_chkMonday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkMonday\" class=\"padded-inline-label\">{%= $.monText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkTuesday\" value=\"tue\" id=\"{%= $.id %}_chkTuesday\" dojoAttachPoint=\"_chkTuesday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkTuesday\" class=\"padded-inline-label\">{%= $.tueText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkWednesday\" value=\"wed\" id=\"{%= $.id %}_chkWednesday\" dojoAttachPoint=\"_chkWednesday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkWednesday\" class=\"padded-inline-label\">{%= $.wedText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkThursday\" value=\"thu\" id=\"{%= $.id %}_chkThursday\" dojoAttachPoint=\"_chkThursday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkThursday\" class=\"padded-inline-label\">{%= $.thurText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkFriday\" value=\"fri\" id=\"{%= $.id %}_chkFriday\" dojoAttachPoint=\"_chkFriday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkFriday\" class=\"padded-inline-label\">{%= $.friText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkSaturday\" value=\"sat\" id=\"{%= $.id %}_chkSaturday\" dojoAttachPoint=\"_chkSaturday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkSaturday\" class=\"padded-inline-label\">{%= $.satText %}</label>',\r\n                            '</span>',\r\n                            '<span class=\"no-wrap\">',\r\n                                '<input dojoType=\"dijit.form.CheckBox\" type=\"checkbox\" name=\"chkSunday\" value=\"sun\" id=\"{%= $.id %}_chkSunday\" dojoAttachPoint=\"_chkSunday\" dojoAttachEvent=\"onClick:_dayChecked\" />',\r\n                                '<label for=\"{%= $.id %}_chkSunday\" class=\"padded-inline-label\">{%= $.sunText %}</label>',\r\n                            '</span>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"weeklyEvery\" value=\"weeksAfter\" id=\"{%= $.id %}_rdoWeeklyEveryAfter\" dojoAttachPoint=\"_rdoWeeklyEveryAfter\" />',\r\n                                '<label for=\"{%= $.id %}_rdoWeeklyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_weeklyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.weeksAfterText %}</span>',\r\n                        '</div>',\r\n                    '</div>',\r\n//monthly panel.........................................................\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_monthlyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyOn\" id=\"{%= $.id %}_rdoMonthlyOn\" checked=\"true\" dojoAttachPoint=\"_rdoMonthlyOn\" dojoAttachEvent=\"onChange:_monthlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyOn\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsOnText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_datesSelect\" dojoAttachEvent=\"onChange:_calculateEnd\" maxHeight=\"300\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyOnThe\" id=\"{%= $.id %}_rdoMonthlyOnThe\" dojoAttachPoint=\"_rdoMonthlyOnThe\" />', // dojoAttachEvent=\"onChange:_monthlyOnChanged\"\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyOnThe\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyOnTheText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsOnTheText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_weeksSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_calculateEnd\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_weekdaySelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_calculateEnd\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"monthlyOn\" value=\"monthyAfter\" id=\"{%= $.id %}_rdoMonthlyAfter\" dojoAttachPoint=\"_rdoMonthlyAfter\" dojoAttachEvent=\"onChange:_monthlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoMonthlyAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_monthlyAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.monthsAfterText %}</span>',\r\n                        '</div>',\r\n                    '</div>',\r\n// yearly panel..............\r\n                    '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"_yearlyPanel\" class=\"recurring-panel\"  >',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyOn\" id=\"{%= $.id %}_rdoYearlyOn\" checked=\"true\" dojoAttachPoint=\"_rdoYearlyOn\" dojoAttachEvent=\"onChange:_yearlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyOn\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_yearlyEveryText\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_intervalChanged\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.yearsOnText %}</span>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_monthNamesSelect\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" maxHeight=\"300\" dojoAttachPoint=\"_yearDatesSelect\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= ($.labelWidth - 3) %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyOnThe\" id=\"{%= $.id %}_rdoYearlyOnThe\" dojoAttachPoint=\"_rdoYearlyOnThe\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyOnThe\" class=\"padded-inline-label\">{%= $.theText %}</label>',\r\n                            '</div>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearWeeksSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearWeekdaySelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                            '<label class=\"padded-inline-label\">{%= $.inText %}</label>',\r\n                            '<select dojoType=\"dijit.form.Select\" dojoAttachPoint=\"_yearMonthNamesSelect\" disabled=\"true\" dojoAttachEvent=\"onChange:_yearlyRecurDateChanged\"></select>',\r\n                        '</div>',\r\n                        '<div>',\r\n                            '<div class=\"recurring-radio-label\" style=\"min-width:{%= $.labelWidth %}px;\">',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"yearlyOn\" value=\"yearlyEveryAfter\" id=\"{%= $.id %}_rdoYearlyEveryAfter\" dojoAttachPoint=\"_rdoYearlyEveryAfter\" dojoAttachEvent=\"onChange:_yearlyOnChanged\" />',\r\n                                '<label for=\"{%= $.id %}_rdoYearlyEveryAfter\" class=\"padded-inline-label\">{%= $.everyText %}</label>',\r\n                            '</div>',\r\n                            '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"1\" constraints=\"{places: 0, type: \\'decimal\\'}\" dojoAttachPoint=\"_yearlyEveryAfterText\" disabled=\"true\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_calculateEnd\" />',\r\n                            '<span class=\"padded-inline-label\">{%= $.yearsAfterText %}</span>',\r\n                            '</div>',\r\n                    '</div>',\r\n                '</div>', //stack container\r\n// End date calculator section.........................................\r\n                '<div dojoAttachPoint=\"_startEndCalculator\" class=\"display-none\">',\r\n                    '<hr />',\r\n                    '<table>',\r\n                        '<tr>',\r\n                            '<td>{%= $.startRecurringText %}</td>',\r\n                            '<td>',\r\n                                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_StartRecur\" value=\"{%= $.startDate %}\" dojoAttachPoint=\"dtp_startRecur\" displayDate=\"true\" displayTime=\"false\" dojoAttachEvent=\"onChange:_recurringStartDateChanged\" readOnly=\"true\" ></div>',\r\n                            '</td>',\r\n                        '</tr>',\r\n                        '<tr>',\r\n                            '<td>',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"endRecur\" value=\"endAfterNum\" id=\"{%= $.id %}_rdoEndAfterNum\" dojoAttachPoint=\"_rdoEndAfter\" dojoAttachEvent=\"onChange:_endCalcModeChanged\" checked=\"true\" />',\r\n                                '<label for=\"{%= $.id %}_rdoEndAfterNum\" class=\"padded-inline-label\">{%= $.endAfterText  %}</label>',\r\n                            '</td><td>',\r\n                                '<input dojoType=\"Sage.UI.NumberTextBox\" shouldPublishMarkDirty=\"false\" value=\"2\" constraints=\"{places: 0, type: \\'decimal\\', max: 999, min: 1}\" maxlength=\"3\" id=\"{%= $.id %}_num_Occurances\" dojoAttachPoint=\"num_Occurances\" class=\"small-inline-textbox\" dojoAttachEvent=\"onChange:_numOccurancesChanged\" />',\r\n                                '<span class=\"padded-inline-label\">{%= $.occurrencesText %}</span>',\r\n                            '</td>',\r\n                        '</tr><tr>',\r\n                            '<td>',\r\n                                '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"endRecur\" value=\"endOn\" id=\"{%= $.id %}_rdoEndOn\" dojoAttachPoint=\"_rdoEndOn\" />',\r\n                                '<label for=\"{%= $.id %}_rdoEndOn\" class=\"padded-inline-label\">{%= $.endOnText %}</label>',\r\n                            '</td>',\r\n                            '<td>',\r\n                                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_EndRecur\" dojoAttachPoint=\"dtp_endRecur\" displayDate=\"true\" displayTime=\"false\" dojoAttachEvent=\"onChange:_endRecurChanged\" ></div>',\r\n                            '</td>',\r\n                        '</tr>',\r\n                    '</table>',\r\n                '</div>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</table>',\r\n'</div>']",
'Sage/UI/Columns/DndCell':function(){
require({cache:{
'url:Sage/UI/Columns/templates/DndCell.html':"<div>\r\n    <div data-dojo-type=\"dojo.dnd.Source\" dojoAttachPoint=\"sourceNode\" copyOnly=\"true\" accept=\"\">\r\n        <div class=\"dojoDndItem\" dojoAttachPoint=\"dndItem\"></div>\r\n    </div>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/DndCell", [
    'dijit/_Widget',
    'dijit/_Templated',
    'dojo/dnd/Source',
    'dojo/text!./templates/DndCell.html',
    'dojo/_base/declare'
],
function (_Widget, _Templated, Source, template, declare) {
    var widget = declare('Sage.UI.Columns.DndCell', [_Widget, _Templated], {
        templateString: template,
        widgetsInTemplate: true,
        value: null,
        index: -1,
        constructor: function (options) {
            this.inherited(arguments);
        },
        postCreate: function () {
            this.dndItem.innerHTML = this.get('value');
            this.dndItem.type = 'cell';
            this.dndItem.data = {
                value: this.get('value'),
                index: this.index
            };
            this.inherited(arguments);
        }
    });
    return widget;
});
},
'Sage/QuickForms/Design/Editors/nls/DateTimePickerAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/DateTimePickerAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            buttonToolTipText: "Button Tooltip:",
            buttonToolTipTooltipText: "The tooltip  to display when the user\\'s mouse hovers over the button part of the control.",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            displayModeText: "Display Mode:",
            displayModeTooltipText: "Mode of display of control: text box, hyperlink, or plain text.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            timelessText: "Timeless:",
            timelessTooltipText: "Use date without time and no DST conversion.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            },
            displayModeTypeText: {
                AsControl: "As Control",
                AsText: "As Text",
                AsHyperlink: "As Hyperlink"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/ComboBoxBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/ComboBoxBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/ComboBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/ComboBox", [
       'dijit/form/ComboBox',
       'dojo/currency',
       'dojo/_base/declare'
],
function (comboBox, currency, declare) {
    var widget = declare("Sage.UI.ComboBox", [comboBox], {
        _hClickBody: false,
        maxHeight: dojo.isIE ? 160 : 170,
        shouldPublishMarkDirty: true,
        //.Net control behavior
        autoPostBack: false,
        _onKeyPress: function (e) {
            //ToDo: Enable option to allow free text
            //ToDo: Fix tab out option to auto complete on elements that do not allow free text.
            // if (option to allow free text (i.e. picklist) === false) {
            //if (e.constructor.DOM_VK_DOWN !== e.charOrCode && e.constructor.DOM_VK_IP !== e.charOrCode) {
            dojo.stopEvent(e);
            //}
            // }
        },
        postCreate: function () {
            this.connect(this, 'onChange', this.onChanged);
            this.inherited(arguments);
        },
        onChanged: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if (this.autoPostBack) {
                __doPostBack(this.id, '');
            }
        },
        onClickBody: function (e) {
            if (dojo.isIE >= 9 && this._opened) {
                var obj = dijit.getEnclosingWidget(e.target);
                if (obj && obj === this) {
                    /* Fixes a bug in dijit.form.ComboBox where the document.body onclick
                    event will get called when the mouse is over the dropdown button.
                    The dojo control handles the event OK so there is no need to call
                    this.closeDropDown() in this scenario (IE9).             
                    */
                    return;
                }
                this.closeDropDown();
            }
        },
        closeDropDown: function (/*Boolean*/focus) {
            if (dojo.isIE >= 9 && this._hClickBody) {
                dojo.disconnect(this._hClickBody);
                this._hClickBody = false;
            }
            this.inherited(arguments);
        },
        openDropDown: function () {
            if (dojo.isIE >= 9) {
                // WORKAROUND: Please see http://bugs.dojotoolkit.org/ticket/14408. This issue is still [not] fixed.
                this._hClickBody = dojo.connect(document.body, 'onclick', this, this.onClickBody);
            }
            this.inherited(arguments);
        }
    });

    return widget;
});

},
'Sage/UI/Dialogs':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dialogs", [
    'dijit/form/Button',
    'dijit/Dialog',
    'dijit/ProgressBar',
    'dijit/form/TextBox',
    'dijit/form/ValidationTextBox',
    'dojo/i18n!./nls/Dialogs',
    'dojo/_base/array'
],
function (Button, Dialog, ProgressBar, TextBox, ValidationTextBox, nlsResources, array) {
    Sage.namespace('UI.Dialogs');
    dojo.mixin(Sage.UI.Dialogs, {
        raiseQueryDialog: function (title, query, callbackFn, yesText, noText, messageIcon) {
            //ToDo:  add icon: <question>
            return this.raiseQueryDialogExt({ title: title, query: query, callbackFn: callbackFn, yesText: yesText, noText: noText, icon: messageIcon });
        },
        raiseQueryDialogExt: function (opts) {
            var dlg = dijit.byId('queryDialog'),
                iWidth,
                queryDialog,
                commonCallback,
                questionDivs,
                i,
                buttonDiv,
                yesButton,
                noButton;

            if (dlg) {
                dlg.destroyRecursive();
            }

            iWidth = (opts && typeof opts.width === 'number') ? opts.width : 700;
            queryDialog = new dijit.Dialog({ id: 'queryDialog', title: opts.title, style: opts.style || { 'width': iWidth} });
            // When either button is pressed, kill the dialog and call the callbackFn.
            commonCallback = function (result) {
                queryDialog.hide();
                if (!opts.callbackFn || typeof opts.callbackFn !== 'function') {
                    return;
                }

                if (result) { //Yes was clicked
                    opts.callbackFn.call(opts.scope || this, true);
                } else {
                    opts.callbackFn.call(opts.scope || this, false);
                }
            };

            queryDialog.on('hide', function () {
                queryDialog.destroyRecursive();
            });


            if (opts.icon) {
                var iconDiv = new dojo.create('div', { id: 'queryDialog-iconDiv', 'class': 'messageIcon ' + opts.icon });
                queryDialog.containerNode.appendChild(iconDiv);
            }

            questionDivs = [];

            if (opts.query instanceof Array) {
                for (i = 0; i < opts.query.length; i++) {
                    questionDivs.push(dojo.create('div', { id: 'queryDialog-questionDiv_' + i, innerHTML: opts.query[i] }));
                }
            }
            else {
                var div = dojo.create('div', { id: 'queryDialog-questionDiv', innerHTML: opts.query });

                // Check for scripts contained in opts.query; scripts will not work in div.innerHTML, so process them so they will work.                
                var arrScripts = div.getElementsByTagName('script');
                array.forEach(arrScripts, function (script) {
                    var src = script.getAttribute('src');
                    if (src === null && script.innerHTML !== '') {
                        // Script should be in the form window.someFunction = function() {};
                        eval(script.innerHTML);
                    }
                    else if (src !== null && script.innerHTML === '') {
                        var head = document.getElementsByTagName('head')[0];
                        // Must be cloned; otherwise, div.removeChild(script) will fail.
                        var clone = dojo.clone(script);
                        (head || document.body).appendChild(clone);
                    }
                    else {
                        if (typeof console !== 'undefined') {
                            console.warn('Unable to process script in Sage.UI.Dialogs.');
                        }
                    }
                    div.removeChild(script);
                });
                questionDivs.push(div);
            }

            buttonDiv = new dojo.create("div", { id: 'queryDialog-buttonDiv', style: "text-align: " + (opts.align || "center") + "; margin-top: 10px" });

            yesButton = new dijit.form.Button({
                label: opts.yesText || nlsResources.yesText,
                id: 'qry_yesButton',
                onClick: function (result) { commonCallback(true); }
            });

            buttonDiv.appendChild(yesButton.domNode);
            if ((opts.noText) || (opts.showNoButton)) {
                noButton = new dijit.form.Button({
                    label: opts.noText || nlsResources.noText,
                    id: 'qry_noButton',
                    style: 'padding-left: 10px',
                    onClick: function (result) { commonCallback(false); }
                });
                buttonDiv.appendChild(noButton.domNode);
            }

            dojo.forEach(questionDivs, function (questionDiv) {
                queryDialog.containerNode.appendChild(questionDiv);
            });

            queryDialog.containerNode.appendChild(buttonDiv);
            queryDialog.show();
        },
        raiseInputDialog: function (title, query, callbackFn, yesText, noText, defaultValue, regExp, invalidMessage) {
            return this.raiseInputDialogExt(
                {
                    title: title,
                    query: query,
                    callbackFn: callbackFn,
                    yesText: yesText,
                    noText: noText,
                    defaultValue: defaultValue,
                    regExp: regExp,
                    invalidMessage: invalidMessage
                });
        },
        raiseInputDialogExt: function (opts) {
            //ToDo: implement the icon property from opts...
            var inputDialog, questionDiv, inputBox, commonCallback, yesButton, noButton, buttonDiv;
            
            inputDialog = dijit.byId('inputDialog');
            if (inputDialog) {
                inputDialog.destroyRecursive();
            }
            
            inputDialog = new dijit.Dialog({ id: 'inputDialog', title: opts.title });
            questionDiv = dojo.create('div', { id: 'inputDialog-questionDiv', innerHTML: opts.query });
            inputBox = (opts.regExp && dojo.isString(opts.regExp)) ?
                new dijit.form.ValidationTextBox({
                    id: 'inputDialog-inputBox',
                    value: opts.defaultValue || '',
                    style: 'margin-top: 8px',
                    regExp: opts.regExp || '',
                    invalidMessage: opts.invalidMessage || ''
                })
                : new dijit.form.TextBox({
                    id: 'inputDialog-inputBox',
                    value: opts.defaultValue || '',
                    style: 'margin-top: 8px'
                });
            commonCallback = function (result) {
                if (result) {
                    opts.callbackFn(true, inputBox.get('value'));
                } else {
                    opts.callbackFn(false, inputBox.get('value'));
                }
                inputDialog.hide();
            };
            yesButton = new dijit.form.Button({
                label: opts.yesText || nlsResources.yesText,
                id: 'inp_yesButton',
                onClick: function (result) { commonCallback(true); }
            });
            noButton = new dijit.form.Button({
                label: opts.noText || nlsResources.noText,
                id: 'inp_noButton',
                onClick: function (result) { commonCallback(false); }
            });
            buttonDiv = new dojo.create("div", { id: 'inputDialog-buttonDiv' });

            inputDialog.on('hide', function () {
                inputDialog.destroyRecursive();
            });

            buttonDiv.appendChild(yesButton.domNode);
            buttonDiv.appendChild(noButton.domNode);

            inputDialog.containerNode.appendChild(questionDiv);
            inputDialog.containerNode.appendChild(inputBox.domNode);
            inputDialog.containerNode.appendChild(buttonDiv);

            if (opts.closable === false) {
                dojo.destroy(inputDialog.closeButtonNode);
            }

            inputDialog.show();
        },
        showProgressBar: function (opts) {
            var iMax = (opts && typeof opts.maximum !== "undefined") ? opts.maximum : 100,
                prog,
                iWidth = (opts && typeof opts.width === 'number') ? opts.width : 300,
                iHeight = (opts && typeof opts.width === 'number') ? opts.height : 125,
                sStyle = dojo.string.substitute('width: ${0}px; height: ${1}px', [iWidth, iHeight]),
                bCanClose = (opts && typeof opts.canclose === 'boolean') ? opts.canclose : true,
                progressDialog,
                sMsg,
                msgDiv,
                bar,
                msg;

            if (!dijit.byId('progressDialog')) {
                prog = new dijit.ProgressBar({
                    id: 'progressDialogBar',
                    style: 'margin-top: 10px; margin-bottom: 10px',
                    indeterminate: (opts && opts.indeterminate !== "undefined") ? opts.indeterminate : false,
                    maximum: iMax
                });
                progressDialog = new dijit.Dialog({ id: 'progressDialog', title: opts.title, style: sStyle, closable: bCanClose });
                if (opts && typeof opts.showmessage === 'boolean' && opts.showmessage) {
                    sMsg = (opts && typeof opts.message === 'string') ? opts.message : "";
                    msgDiv = new dojo.create('div', { innerHTML: sMsg, style: 'text-align: left; margin-top: 10px; margin-bottom: 10px', id: 'progressDialogMessage' });
                    progressDialog.containerNode.appendChild(msgDiv);
                }

                progressDialog.containerNode.appendChild(prog.domNode);
                progressDialog.show();
            }

            bar = dijit.byId('progressDialogBar');
            bar.update({ progress: opts.pct, title: opts.title });
            if (opts && typeof opts.showmessage === 'boolean' && opts.showmessage && typeof opts.message === 'string') {
                msg = dojo.byId('progressDialogMessage');
                if (msg) {
                    msg.innerHTML = opts.message;
                }
            }
        },
        closeProgressBar: function (opts) {
            var dlg = dijit.byId("progressDialog");
            if (dlg) {
                dlg.hide();
                dlg.destroyRecursive();
            }
        },
        alert: function (msg, title, icon) {
            var opts = {
                title: title || 'Sage SalesLogix',   //  ToDo:  Localize   <---<<<   <---<<<   <---<<<
                query: msg,
                callbackFn: false,
                yesText: nlsResources.okText || 'OK',
                noText: false,
                scope: window,
                icon: icon || 'noIcon',
                style: { width: '700px' }
            };
            Sage.UI.Dialogs.raiseQueryDialogExt(opts);
        },
        showInfo: function (msg, title) {
            this.alert(msg, title, 'infoIcon');
        },
        showWarning: function (msg, title) {
            this.alert(msg, title, 'warningIcon');
        },
        showError: function (msg, title) {
            this.alert(msg, title, 'errorIcon');
        }
    });

    //Backward compatability - marked as deprecated
    Sage.WebClientMessageService = function (options) {

    };
    Sage.WebClientMessageService.prototype.hideClientMessage = function () {
        //Ext.Msg.hide();
        if (typeof console !== 'undefined') {
            console.warn(['DEPRECATED: The WebClientMessageService is deprecated.  (hideClientMessage)',
                'Use Sage.UI.Dialogs instead.'].join('\n'));
        }
    };
    Sage.WebClientMessageService.prototype.showClientMessage = function (title, msg, fn, scope) {
        if (typeof console !== 'undefined') {
            console.warn(['DEPRECATED: The WebClientMessageService is deprecated.  ',
                'Use Sage.UI.Dialogs instead.',
                'Change code like:',
                'var svc = Sage.Services.getService("WebClientMessageService");',
                'if (svc) {',
                '    Sage.UserOptionsService.showClientMessage(<title>, <msg>, <callback>, <scope>);',
                '}',
                'to this: ',
                'Sage.UI.Dialogs.raiseQueryDialog(<title>, <msg>, <callback>, <yesText>, <noText>);'
                ].join('\n'));
        }
        if (typeof title === 'object') {
            Sage.UI.Dialog.raiseQueryDialogEx(title);
        }
        var o = {
            title: (typeof msg === "string") ? title : '',
            query: (typeof msg === "string") ? msg : title,
            callbackFn: fn,
            yesText: nlsResources.yesText || 'Yes',
            noText: nlsResources.noText || 'No',
            scope: scope
        };
        Sage.UI.Dialogs.raiseQueryDialogExt(o);
    };
    Sage.Services.addService("WebClientMessageService", new Sage.WebClientMessageService());

    return Sage.UI.Dialogs;
});

},
'Sage/_EventMapMixin':function(){
define("Sage/_EventMapMixin", [
    'dojo/on',
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/dom-attr',
    'dojo/query' /* required for delegation */
], function(on, declare, array, lang, domAttr, query) {
    var proxy = function(fn, scope) {
        return function(evt) {
            /* `this` is the matched element for delegation */
            fn.call(scope, evt, this);
        };
    };

    /**
     * Allows a widget to map events to actions by defining an event map.
     */
    return declare('Sage._EventMapMixin', null, {
        /**
         * Can be in the form:
         *   * `'<event>': '<action>'`
         *   * `'<selector>:<event>': '<action>'`
         *   * `'<name>': { selector: '<selector>', event: <extension event>, action: '<action>' }`
         */
        events: null,
        _eventSignals: null,
        postCreate: function() {
            this.inherited(arguments);

            this._eventSignals = (this._eventSignals || []);

            if (this.events)
            {
                for (var name in this.events)
                {
                    var item = this.events[name];
                    if (item)
                    {
                        var event = null,
                            fn = null;

                        if (lang.isObject(item))
                        {
                            event = item.selector
                                ? on.selector(item.selector, item.event || name)
                                : item.event || name;
                            fn = lang.isFunction(this[item.action])
                                ? this[item.action]
                                : this._invokeDynamicAction;
                        }
                        else
                        {
                            event = name;
                            fn = lang.isFunction(this[item])
                                ? this[item]
                                : this._invokeDynamicAction;
                        }

                        this._eventSignals.push(
                            on(this.domNode, event, proxy(fn, this))
                        );
                    }
                }
            }
        },
        _invokeDynamicAction: function(evt, node) {
            var action = domAttr.get(node, 'data-action'),
                fn = lang.isFunction(this[action]) ? this[action] : null;
            if (fn) fn.call(this, evt, node);
        },
        uninitialize: function() {
            this.inherited(arguments);

            array.forEach(this._eventSignals, function(signal) {
                signal.remove();
            });
        }
    });
});
},
'Sage/UI/SLXPreviewGrid/Filter/Lookup':function(){
﻿/*globals Sage, dojo, define */
define("Sage/UI/SLXPreviewGrid/Filter/Lookup", [
    'dojo/_base/declare',
    'dijit/_Widget',
    'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin'
],
function (declare, _Widget, _filterMixin) {
    var lookupFilter = declare('Sage.UI.SLXPreviewGrid.Filter.Lookup', [_Widget, _filterMixin], {
        okText: 'OK',
        //These properties can come from the column configuration if it is a lookup column
        // type, or they can come directly from the filterConfig.
        lookupStructure: [],
        lookupGridOptions: {},
        lookupStoreOptions: {},
        postCreate: function () {
            this.inherited(arguments);
            var lupConfig = {
                structure: this.lookupStructure,
                gridOptions: this.lookupGridOptions,
                storeOptions: this.lookupStoreOptions,
                isModal: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.name,
                dialogButtonText: this.okText
            };
            this._lup = new Sage.UI.Controls.Lookup({
                id: this.id + '_lup',
                config: lupConfig,
                required: false
            }, this.domNode);
            var div = document.createElement('div');
            this.domNode.appendChild(div);
            dojo.place(this._lup.domNode, div, 'only');
        },
        getQuery: function () {
            var obj = this._lup.get('selectedObject');
            if (obj && obj['$key']) {
                return this.field + ' eq \'' + obj['$key'] + '\'';
            }
            return '';
        },
        reset: function () {
            this._lup.set('selectedObject', null);
        },
        getState: function () {
            return { 'value': this._lup.get('selectedObject') };
        },
        applyState: function (state) {
            if (state) {
                this._lup.set('selectedObject', state['value'] || '');
            }
        }
    });
    return lookupFilter;
}
);
},
'Sage/Data/SingleEntryPropertySDataStore':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/SingleEntryPropertySDataStore", [
        'Sage/Data/SingleEntrySDataStore',
        'dojo/_base/declare'
],
function (SingleEntrySDataStore, declare) {
    var SingleEntryPropertySDataStore = declare('Sage.Data.SingleEntryPropertySDataStore', SingleEntrySDataStore, {
        propertyName: null,
        fetch: function (context) {
            var request = this._getRequest(context),
                key;
                
            if (this.sort) {
                request.setQueryArg('orderby', this.sort);
            }

            this.verifyService();
            
            if (context.predicate) {
                if (this._entity && (context.predicate === this._entity.$key) && this._okToCache) {
                    if (context.onComplete) {
                        context.onComplete.call(context.scope || this, this._entity, context);
                        return;
                    }
                }
                request.setResourceSelector(context.predicate);
            }

            if (this.select && this.select.length > 0) {
                request.setQueryArg('select', this.select.join(','));
            }
            
            if (this.include && this.include.length > 0) {
                request.setQueryArg('include', this.include.join(','));
            }
            if (this.predicate && this.predicate.length > 0) {
                request.setResourceSelector(this.predicate);
            }

            if (context.beforeRequest) {
                context.beforeRequest.call(context.scope || this, request);
            }

            request.setQueryArg('startIndex', context.start + 1);
            request.setQueryArg('count', context.count || 100);
            
            key = request.readFeed({
                success: dojo.hitch(this, this.onSuccess, context),
                failure: dojo.hitch(this, this.onFailure, context)
            });
            
            return {
                abort: dojo.hitch(this, this.abortRequest, key)
            };
        },
        abortRequest: function (key) {
            this.service.abortRequest(key);
        },
        onSuccess: function (context, feed) {
            if (context.onBegin) {
                context.onBegin.call(context.scope || this, feed.$totalResults, context);
            }
            if (context.onComplete) context.onComplete.call(context.scope || this, feed.$resources, context);
        },
        _getRequest: function (context) {
            // Override the _getRequest of SingleEntrySDataStore to use a different SData client request
            if (!this._request) {
                var req = new Sage.SData.Client.SDataResourcePropertyRequest(this.service);
                req.setResourceKind(this.resourceKind);
                req.setResourceProperty(this.propertyName);
                this._request = req;
            }
            return this._request;
        },
    });
    return SingleEntryPropertySDataStore;
});
},
'Sage/MainView/ActivityMgr/nls/RecurringEditor':function(){
﻿define("Sage/MainView/ActivityMgr/nls/RecurringEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            activityOccurrsText: 'This activity occurs...',
            onceText: 'Once',
            dailyText: 'Daily',
            weeklyText: 'Weekly',
            monthlyText: 'Monthly',
            yearlyText: 'Yearly',
            occursOnceText: 'This activity occurs only once',
            everyText: 'Every',
            daysText: 'Day(s)',
            daysAfterText: 'Day(s) after completion',
            startRecurringText: 'Start Recurring: ',
            endAfterText: 'End After',
            endOnText: 'End Recurring',
            occurrencesText: 'occurrences',
            weeksOnText: 'Week(s) on',
            monText: 'Monday',
            tueText: 'Tuesday',
            wedText: 'Wednesday',
            thurText: 'Thursday',
            friText: 'Friday',
            satText: 'Saturday',
            sunText: 'Sunday',
            weeksAfterText: 'Week(s) after completion',
            monthsOnText: 'Month(s) on day',
            monthsOnTheText: 'Month(s) on the',
            monthsAfterText: 'Month(s) after completion',
            firstText: '1st',
            secondText: '2nd',
            thirdText: '3rd',
            fourthText: '4th',
            lastText: 'last',
            yearsOnText: 'Year(s) on',
            yearsAfterText: 'Year(s) after completion',
            janText: 'January',
            febText: 'February',
            marText: 'March',
            aprText: 'April',
            mayText: 'May',
            junText: 'June',
            julText: 'July',
            augText: 'August',
            sepText: 'September',
            octText: 'October',
            novText: 'November',
            decText: 'December',
            theText: 'The',
            inText: 'in'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/DataGridAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/DataGridAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            dataSourceText: "Data Source:",
            dataSourceTooltipText: "Source of the data for this control such as another control or an entity.",
            emptyTableRowText: "Empty Table Row Text:",
            emptyTableRowTooltipText: "Text to display if grid shows no data.",
            expandableRowsText: "Expandable Rows:",
            expandableRowsTooltipText: "Allows user to expand grid rows to show more text.",
            renderVerticalText: "Render Vertically:",
            renderVerticalTooltipText: "Show grid rows as columns.",
            showSortIconText: "Show Sort Icon:",
            showSortIconTooltipText: "Show sort icon on columns that are sortable.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/EditableGrid':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, TabControl */

define("Sage/UI/EditableGrid", ['dojox/grid/DataGrid',
    'dijit/Toolbar',
    'dijit/form/Button',
    'dijit/layout/ContentPane',
    'Sage/Data/WritableSDataStore',
    'Sage/Data/WritableStore',
    'Sage/UI/SDataLookup',
    'dojo/i18n',
    'dojo/_base/lang',
    'Sage/Utility',
    'Sage/UI/ImageButton',
    'Sage/UI/Dialogs',
    'Sage/Utility/_LocalStorageMixin',
    'dojo/i18n!./nls/EditableGrid',
    'Sage/UI/ToolBarLabel',
    'dojo/parser',
    'dojo/dom-construct',
    'dojo/_base/declare',
    'dojo/_base/array'
],
function (DataGrid,
    Toolbar,
    Button,
    ContentPane,
    WritableSDataStore,
    WritableStore,
    SDataLookup,
    i18n,
    dojolang,
    Utility,
    ImageButton,
    Dialogs,
    _LocalStorageMixin,
    nlsEditablGrid,
    ToolBarLabel,
    parser,
    domConstruct,
    declare,
    array
) {
    var editableGrid = declare('Sage.UI.EditableGrid', [DataGrid, _LocalStorageMixin], {
        recordCountLabel: null,
        STORE_KEY_COLUMN_SIZE: '_COLUMN_UNIT_WIDTH_',
        STORE_NS: 'SAGE_UI_EDITABLEGRID',
        STORE_KEY_SORT: '_SORT_INFO_',
        lookupControl: null,
        mode: '',
        region: 'center',
        _dataChangeConnections: [],
        _registeredWidgets: null,

        constructor: function (opts) {
            this.mode = Utility.getModeId();
            if (opts.storeOptions && opts.storeOptions.isInsertMode) {
                this.mode = 'insert';
            }

            this._dataChangeConnections = [];
            this._registeredWidgets = [];
        },

        _setModeAttr: function (mode) {
            if (this.mode !== mode) {
                this.mode = mode;
                if (!this.store) {
                    return;
                }
                if (((mode === 'insert') && (this.store.declaredClass !== 'Sage.Data.WritableStore')) ||
                   ((mode !== 'insert') && (this.store.declaredClass != 'Sage.Data.WritableSDataStore'))) {
                    this._replaceStore();
                }
            }
        },
        _getModeAttr: function () {
            return this.mode;
        },
        // Fixes IE. Issue was the grid itself has focus, so blur on cells doesn't work
        onBlur: function () {
            if (this.edit && this.edit.isEditing()) {
                this.edit.apply();
            }
        },

        //end i18n strings.
        postMixInProperties: function () {
            dojo.mixin(this, nlsEditablGrid);
            dojo.mixin(this, i18n.getLocalization("dijit", "common"));
            this.setEditable();

            if (!this.storeOptions) {
                this.storeOptions = {};
            }
            this.ensureValue(this.storeOptions, 'pagesize', this.rowsPerPage || 20);
            this.ensureValue(this, 'singleClickEdit', true);

            if (typeof this.contextualCondition === 'function') {
                this.query = { fn: this.contextualCondition, scope: this };
            } else if (typeof this.contextualCondition === 'object') {
                if (this.contextualCondition.fn) {
                    this.ensureValue(this.contextualCondition, 'scope', this);
                    this.query = this.contextualCondition;
                }
            }

            //set up structure:
            this.structure = [
                {
                    defaultCell: dojolang.mixin({ defaultValue: '' }, this.columnDefaults),
                    cells: this.columns
                }
            ];
            function addToListUnique(item, list) {
                for (var i = 0; i < list.length; i++) {
                    if (item === list[i]) {
                        return;
                    }
                }
                list.push(item);
            }

            //create and startup the toolbar...
            if ((this.tabId) && (this.tabId !== '')) {
                this.addToolsToWorkspaceToolbar();
                this.currentEntityId = Utility.getCurrentEntityId();
            } else {
                this.createOwnToolbar();
            }

            //set up the datastore if they didn't give us one...
            this._setUserPrefColumnWidths();
            var cols = this.columns,
                sel, i, p, inc, parts, combined;

            if (!this.store) {
                sel = this.storeOptions.select || [];
                for (i = 0; i < sel.length; i++) {
                    sel[i] = sel[i].replace(/\./g, '/');
                }
                inc = this.storeOptions.include || [];
                var field;
                for (i = 0; i < cols.length; i++) {
                    if (cols[i].field) {
                        field = cols[i].field;
                        addToListUnique(field.replace(/\./g, '/'), sel);
                    }
                    if (cols[i].field.indexOf('.') > 0) {
                        parts = cols[i].field.split('.');
                        combined = '';
                        for (p = 0; p < parts.length - 1; p++) {
                            combined += parts[p];
                            addToListUnique(combined, inc);
                            combined += '/';
                        }
                    }
                }
                this.store = this.getStore();
                //Clean up any dirty data flags.  We can assume it is clean with a new store.
                this.markClean();
            } else {
                //this means a datastore was given to us - most likely a proxydatastore.
                sel = this.store.select = this.store.select || [];
                inc = this.store.include = this.store.include || [];
                for (i = 0; i < sel.length; i++) {
                    sel[i] = sel[i].replace(/\./g, '/');
                }
                for (i = 0; i < cols.length; i++) {
                    if (cols[i].field) {
                        field = cols[i].field;
                        addToListUnique(field.replace(/\./g, '/'), sel);
                    }
                    if (cols[i].field.indexOf('.') > 0) {
                        parts = cols[i].field.split('.');
                        combined = '';
                        for (p = 0; p < parts.length - 1; p++) {
                            combined += parts[p];
                            addToListUnique(combined, inc);
                            combined += '/';
                        }
                    }
                }
            }
            //apply saved sort information...
            this._setSortInfo();
            this.inherited(arguments);
        },
        postCreate: function () {
            //summary:
            //Add event connections
            //Enable the grid to commit its changes on Enter -- TODO: Review behavior.
            dojo.connect(this, 'onKeyDown', this.customKeyDown);
            // Store column resizings
            dojo.connect(this, 'onResizeColumn', this._onResizeColumn);
            dojo.subscribe('Sage/events/TabWorkspace/MIDDLE_AREA_DROP', this, this._setMiddleAreaHeight);
            // Enhanced Loading message when adding and deleting items from the editable 
            // grid to display immediately rather than waiting for datastore fetch.
            this.connect(this, '_onNew', this.showLoading);
            // Update the display count.
            this.connect(this.scroller, 'scroll', this._onScroll);
            dojo.connect(this, 'onResizeColumn', this._onScroll);
            this.setupHeader();
            this.inherited(arguments);
        },
        showLoading: function () {
            this.showMessage(this.loadingMessage);
            this._clearData();
            this.markClean();
        },
        headerTemplate: new Simplate([
            '<div>',
            '<div id="{%= $.id %}_HeaderBar"  data-dojo-type="dijit.layout.ContentPane" gutters="false"  region="top" ',
                'style="{%= $.headerStyle %}" class="editable-grid-hbar">',
                '<div class="editable-grid-hbar-left"></div>',
                '<div class="editable-grid-hbar-center"></div>',
                    '<div class="editable-grid-hbar-right"><div id="{%= $.gridNodeId %}_recordCountLabel"></div></div>',
            '</div>',
            '</div>'
        ]),
        setupHeader: function () {
            //Get the headerBar created and ready.
            this.recordCountLabel = new ToolBarLabel();
            this.recordCountLabel.set('label', dojo.string.substitute(this.recordCountFormatString, this._getRecordCount()));
            var headerBar = this.headerTemplate.apply(this);
            headerBar = dojo.toDom(headerBar);
            this.headerContentPane = parser.parse(headerBar);
            // Put the header bar in place.
            //dojo.place(this.headerBar, this.gridNodeId, 'before');
            var container = dijit.byId(this.gridNodeId);
            container.addChild(this.headerContentPane[0]);
            // Put the record label in place
            dojo.place(this.recordCountLabel.domNode, this.gridNodeId + '_recordCountLabel', 'replace');
        },
        resetContextualCondition: function (contextualCondition) {
            if (typeof contextualCondition === 'function') {
                this.query = { fn: contextualCondition, scope: this };
            } else if (typeof contextualCondition === 'object') {
                if (contextualCondition.fn) {
                    this.ensureValue(contextualCondition, 'scope', this);
                    this.query = contextualCondition;
                }
            }
            this.contextualCondition = contextualCondition;

        },
        _getRecordCount: function () {
            // summary: Returns an array with the counts for the displayed records in the grid.  [firstrow, lastrow, count]
            var scroller,
                firstrow,
                lastrow,
                count;
            scroller = this.scroller;
            count = scroller.rowCount;
            if (count <= 0) {
                firstrow = 0;
                lastrow = 0;
                count = 0;
            } else {
                firstrow = (scroller.firstVisibleRow === 0) ? 1 : scroller.firstVisibleRow + 1;
                lastrow = (scroller.lastVisibleRow >= scroller.rowCount) ? scroller.rowCount : scroller.lastVisibleRow;
            }
            return [firstrow, lastrow, count];
        },
        _onScroll: function (inTop) {
            // Set the record count.
            if (this.recordCountLabel) {
                this.recordCountLabel.set('label', dojo.string.substitute(this.recordCountFormatString, this._getRecordCount()));
            }
        },
        _setMiddleAreaHeight: function (data) {
            var selfQuery = ['#', data.tab.ElementId, ' #', this.id].join('');
            var self = dojo.query(selfQuery)[0];
            if (self) {
                var middleTabItemQuery = ['#', data.tab.ElementId, ' .tws-tab-view-body'].join('');
                var middleTabItemViewBody = dojo.query(middleTabItemQuery)[0];
                //Set a default height (> 0) so the grid will have a place to expand from.
                dojo.style(middleTabItemViewBody, 'height', '10px');
                TabControl.setViewBodyHeight();
            }
        },
        _setUserPrefColumnWidths: function () {
            var self = this;
            dojo.forEach(this.columns, function (col) {
                if (col && col.field) {
                    var key = self._getColumnSizeKey(col),
                        value = self.getFromLocalStorage(key, self.STORE_NS);
                    if (value) {
                        col.width = value;
                    }
                }
            });
        },
        _getColumnSizeKey: function (cell) {
            var fieldStripped = cell.field.replace(/[\.\$]/g, '_'),
                id = [this.id, '_', this.STORE_KEY_COLUMN_SIZE, fieldStripped].join('');
            return id;
        },
        _onResizeColumn: function (columnIndex) {
            // Handle size storage
            var cell = this.getCell(columnIndex),
                value = cell.unitWidth,
                key = this._getColumnSizeKey(cell);
            this.saveToLocalStorage(key, value, this.STORE_NS);
        },
        listenForPageSave: function () {
            var bindingMgr = Sage.Services.getService('ClientBindingManagerService');
            if (bindingMgr) {
                bindingMgr.addListener(bindingMgr.ON_SAVE, this.saveChanges, this);
            }
        },
        removePageSaveListener: function () {
            var bindingMgr = Sage.Services.getService('ClientBindingManagerService');
            if (bindingMgr) {
                bindingMgr.removeListener(bindingMgr.ON_SAVE, this.saveChanges);
            }
        },
        setEditable: function () {
            var editable = true;
            //Check Action security of the grid.
            if (this.appliedSecurity) {
                var svc = Sage.Services.getService("RoleSecurityService");
                if (svc) {
                    editable = svc.hasAccess(this.appliedSecurity);
                }
            }
            if (this.readOnly) {
                editable = false;
            }

            //If user does not have edit access to the grid, we need to override each column and set them to false.
            if (!editable) {
                for (var i = 0; i < this.columns.length; i++) {
                    if (this.columns[i].editable) {
                        this.columns[i].editable = false;
                    }
                }
                this.editable = false;
            } else {
                //if any of the columns are editable, assume the grid is editable...
                for (var i = 0; i < this.columns.length; i++) {
                    if (this.columns[i].editable) {
                        this.editable = true;
                        break;
                    }
                }
            }
        },
        onHeaderCellClick: function (e) {
            // summary:
            // OVERRIDE of event fired when a header cell is clicked.
            // e: Event
            // Decorated event object which contains reference to grid, cell, and rowIndex
            // description:
            // Override for grid sorting to allow for:
            // 1. Disabling of sorting on a column level.
            // 2. Disabling of sorting on Insert mode due to limitations in the WritableStore.
            // 3. Displaying PageExitWarningMessage when unsaved data exists.
            var r = true;
            if (this.store.dirtyDataCache.isDirty) {
                var s = Sage.Services.getService("ClientBindingManagerService");
                r = confirm(s._PageExitWarningMessage);
            }
            if (this.columns[e.cell.index].sortable === false || !r || this.mode === 'insert') {
                dojo.stopEvent(e);
            }
            else {
                this.inherited(arguments);
                var sortProps = this.getSortProps();
                if (sortProps && sortProps.length > 0) {
                    var sortInfo = sortProps[0];
                    sortInfo.cellIndex = e.cell.index;
                    this.saveToLocalStorage(this.STORE_KEY_SORT + this.id, sortInfo, this.STORE_NS);
                }
            }
        },
        _setSortInfo: function () {
            var key = this.STORE_KEY_SORT + this.id;
            var sortProps = this.getFromLocalStorage(key, this.STORE_NS);
            if (sortProps) {
                if (sortProps.descending) {
                    this.sortInfo = (sortProps.cellIndex + 1) * -1;
                } else {
                    this.sortInfo = sortProps.cellIndex + 1;
                }
            }
        },
        ensureValue: function (obj, key, defaultValue) {
            obj[key] = obj[key] || defaultValue;
        },
        amIInATab: function () {
            if (this.context && this.context.workspace) {
                return (this.context.workspace.indexOf('TabWorkspace') > -1);
            }
            return false;
        },
        isMyTabVisible: function () {
            if (this.amIInATab() && window.TabControl) {
                return window.TabControl.getState().isTabVisible(this.tabId);
            }
            return true;
        },
        startup: function () {
            if (this._started) {
                return;
            }

            console.warn('ToDo: EditableGrid needs to connect to tab change events to properly refresh themselves.   EditableGrid - startup()');

            //            if (!this.isMyTabVisible()) {
            //                if (this.hasTabListeners) {
            //                    return;
            //                }
            //                if (typeof TabControl !== 'undefined') {
            //                    this.moreTabListener = TabControl.addListener('moretabchange', this.startup, this);
            //                    this.mainTabListener = TabControl.addListener('maintabchange', this.startup, this);
            //                    this.hasTabListeners = true;
            //                    return;
            //                }
            //            } else {
            //                if (this.hasTabListeners && TabControl) {
            //                    TabControl.removeListener('moretabchange', this.startup, this);
            //                    TabControl.removeListener('maintabchange', this.startup, this);
            //                    this.hasTabListeners = false;
            //                }
            //            }

            this.inherited(arguments);
            if (this.mode !== 'insert') {
                this.listenForPageSave();
            }
            // There are certain scenarios where a default height is required.
            if (this.context && this.context.workspace) {
                if (this.context.workspace.indexOf('TabWorkspace') <= -1) {
                    //console.log('grid.id = ' + this.id);
                    dojo.style(dojo.byId(this.id + '_Container'), 'height', '300px');
                    var main = dijit.byId(this.gridNodeId);
                    main.resize();
                }
            }
            if (this.amIInATab() && this.isMyTabVisible()) {
                var formtableQuery = ['#', 'element_', this.tabId, ' .formtable'].join('');
                var formTableBody = dojo.query(formtableQuery)[0];
                // Control is in a visible tab that is using a table layout
                if (formTableBody) {
                    //Editable Grid with it's container in markup
                    var container = dojo.byId(this.id + '_Container');
                    if (!container) {
                        //Preview Grid Layout container
                        container = dijit.byId(this.id).getParent();
                        container = container.domNode;
                    }

                    dojo.style(container, 'height', '300px');
                }
            }
        },
        destroy: function () {
            if (this.lookupControl) {
                this.lookupControl.destroy(false);
            }

            if (this.toolbar) {
                this.toolbar.destroy(false);
            }

            if (this.grid) {
                this.grid.destroy(false);
            }

            if (this.store && this.store.destroy) {
                this.store.destroy(false);
            }

            if (this._registeredWidgets) {
                array.forEach(this._registeredWidgets, function (item) {
                    item.destroy(false);
                });

                this._registeredWidgets = null;
            }

            this.removePageSaveListener();
            this.inherited(arguments);
        },
        _replaceStore: function () {
            dojo.forEach(this._dataChangeConnections, function (connection) {
                dojo.disconnect(connection);
            });
            if (this.store && this.store.destroy) {
                this.store.destroy(false);
            }
            this.store = false;
            this.store = this.getStore();
        },
        getStore: function () {
            if (this.store) {
                return this.store;
            }

            this.storeOptions['isInsertMode'] = (this.mode === 'insert');

            var store = (this.mode !== 'insert')
                ? new WritableSDataStore(this.storeOptions)
                : new WritableStore(this.storeOptions);

            if (this.onDataChange) {
                this._dataChangeConnections.push(dojo.connect(store, 'onSet', this.onDataChange));
            }
            if (store.onDataChange) {
                this._dataChangeConnections.push(dojo.connect(store, 'setValue', store.onDataChange));
                this._dataChangeConnections.push(dojo.connect(store, 'saveNewEntity', store.onDataChange));
                this._dataChangeConnections.push(dojo.connect(store, 'deleteItem', store.onDataChange));
                this._dataChangeConnections.push(dojo.connect(store, 'createItem', store.onDataChange));
            }
            this._dataChangeConnections.push(dojo.connect(store, 'onSet', this, function (entity, attribute, oldValue, newValue) {
                if (this.mode !== 'insert' && newValue) {
                    //Varying column types have different levels of depth. We must check down the chain to
                    // get to our returnObject property.
                    if (this.edit.info.cell &&
                        this.edit.info.cell.widget &&
                        this.edit.info.cell.widget.returnObject === true) {
                        if (oldValue.$key !== newValue.$key) {
                            this.markDirty();
                        }
                    }
                    else {
                        if (oldValue !== newValue) {
                            this.markDirty();
                        }
                    }
                }
            }));

            return store;
        },
        customKeyDown: function (e) {
            this.applyEditOnEnter(e);
            this.navigateOnKeyDown(e);
        },
        navigateOnKeyDown: function (e) {
            /* This code is causing the cells data to copy into the next cell on down arrow.
            if (e.keyCode === 38 || e.keyCode === 40) {
            var newRow = this.selection.selectedIndex;
            newRow = (e.keyCode === 38) ? newRow - 1 : newRow + 1;  // Arrow button conditions
            newRow = (newRow < 0) ? 0 : newRow;
            newRow = (newRow > this.rowCount - 1) ? this.rowCount - 1 : newRow;
            this.focus.setFocusIndex(newRow, 0);
            this.selection.deselectAll();
            this.selection.select(newRow);
            this.focus.scrollIntoView();
            dojo.stopEvent(e);
            }
            */
        },
        applyEditOnEnter: function (e) {
            if (e.charOrCode == 13 || e.keyCode == 13) {
                this.doApplyEdit();
                this.edit.apply();
                dojo.stopEvent(e);
            }
        },
        createOwnToolbar: function () {
            var roleService = Sage.Services.getService("RoleSecurityService");
            var container = dijit.byId(this.gridNodeId);
            this.toolbar = new Toolbar({ 'class': 'right-tools', 'region': 'top' });
            container.addChild(this.toolbar);
            for (var i = 0; i < this.tools.length; i++) {
                var tool = this.tools[i];
                if (tool.appliedSecurity && tool.appliedSecurity !== '') {
                    if ((roleService) && (!roleService.hasAccess(tool.appliedSecurity))) {
                        continue;
                    }
                }
                var btn = false;
                if (typeof tool === 'string') {
                    switch (tool) {
                        case 'add':
                            btn = new ImageButton({
                                imageClass: 'icon_plus_16x16',
                                tooltip: this.addText,
                                id: this.id + '_addBtn',
                                onClick: dojolang.hitch(this, function () { this.addNew(); })
                            });
                            break;
                        case 'delete':
                            btn = new ImageButton({
                                imageClass: 'icon_Delete_16x16',
                                tooltip: this.deleteText,
                                id: this.id + '_delBtn',
                                onClick: dojolang.hitch(this, function () { this.deleteSelected(); })
                            });
                            break;
                        case 'save':
                            btn = new ImageButton({
                                imageClass: 'icon_Save_16x16',
                                tooltip: this.saveText,
                                id: this.id + '_saveBtn',
                                onClick: dojolang.hitch(this, function () { this.saveChanges(); })
                            });
                            break;
                        case 'cancel':
                            btn = new ImageButton({
                                imageClass: 'icon_Reset_16x16',
                                tooltip: this.cancelText,
                                id: this.id + '_cancelBtn',
                                onClick: dojolang.hitch(this, function () { this.cancelChanges(); })
                            });
                            break;
                    }
                } else {
                    if ((tool.type) && (tool.type === 'Sage.UI.SDataLookup')) {
                        var conf = tool.controlConfig || tool;
                        btn = new SDataLookup(conf);
                        this.lookupControl = btn;
                    } else {
                        btn = new ImageButton({
                            icon: tool.icon || '',
                            imageClass: tool.imageClass || '',
                            id: tool.id,
                            onClick: dojolang.hitch(tool.scope || this, tool.handler),
                            tooltip: tool.alternateText || tool.tooltip
                        });
                    }
                }
                if (btn) {
                    this.toolbar.addChild(btn);
                    btn = false;
                }
            }

            this.toolbar.startup();
        },
        addToolsToWorkspaceToolbar: function () {
            //summary:
            //Add items to the rightToolsContainer

            if (this.readOnly) {
                return;
            }
            //Add dirty data message.
            //TODO: Rename TabId to containerNodeId.  Requires template change.
            this.dirtyDataMsgID = this.tabId + '_dirtydatamsg';
            var msgBox = domConstruct.create('span', {
                'class': 'grid-unsaveddata-msg',
                'id': this.dirtyDataMsgID,
                'style': 'display:none;',
                //TODO: Localize
                'content': (this.editable) ? this.unsavedDataText : ''
            });
            var rightToolsContainer, containerId;
            //Place the tools and 'unsaved data' message into the correct workspace.
            switch (this.context.workspace) {
                case 'Sage.Platform.WebPortal.Workspaces.Tab.TabWorkspace':
                    //Don't add the dirty data message if we are in insert mode.  All data is dirty in insert mode.
                    if (this.mode !== 'insert') {
                        var elem = dojo.query('#' + 'element_' + this.tabId + ' td.tws-tab-view-title');
                        if (elem) {
                            dojo.place(msgBox, elem[0]);
                        }
                    }
                    containerId = ['element_', this.tabId].join('');
                    rightToolsContainer = dojo.query(['#', containerId, ' td.tws-tab-view-tools-right'].join(''));
                    break;
                case 'Sage.Platform.WebPortal.Workspaces.MainContentWorkspace':
                    //Don't add the dirty data message if we are in insert mode.  All data is dirty in insert mode.
                    if (this.mode !== 'insert') { dojo.place(msgBox, dojo.query('#' + this.tabId + ' span.mainContentHeaderTitle')[0]); }
                    //This containerId assignment appears redundant but we need the specific Id for the later query when placing the tool.
                    containerId = this.tabId;
                    rightToolsContainer = dojo.query('#' + containerId + ' td.mainContentHeaderToolsRight');
                    break;
                case 'Sage.Platform.WebPortal.Workspaces.DialogWorkspace':
                    //This containerId assignment appears redundant but we need the specific Id for the later query when placing the tool.
                    rightToolsContainer = dojo.query('td.dialog-tools-right');
                    break;
                default:
            }

            var roleService = Sage.Services.getService("RoleSecurityService");
            //Some buttons may be hidden in different modes and/or security levels.  
            //We'll keep a position variable to make sure the group stays together.            
            var position = 0, positionString, refNode;
            for (var i = 0; i < this.tools.length; i++) {
                positionString = '';
                var tool = this.tools[i];
                if (typeof tool.mergeControlId !== 'undefined' && tool.mergeControlId.length !== 0) {
                    refNode = dojo.query('[id$=' + tool.mergeControlId + ']', dojo.byId('element_' + this.tabId))[0];
                    positionString = tool.mergePosition.toLowerCase();
                }
                if (!refNode) {
                    // No control to place next to.  Use the container and possition 0.
                    refNode = rightToolsContainer[0];
                    positionString = '';
                }
                if (this.mode === 'insert' && !tool.displayInInsert) {
                    continue;
                }
                //check user's access to this functionality...
                if (tool.appliedSecurity && tool.appliedSecurity !== '') {
                    if ((roleService) && (!roleService.hasAccess(tool.appliedSecurity))) {
                        continue;
                    }
                }
                if (typeof tool === 'string') {
                    switch (tool) {
                        case 'add':
                            var addid = this.id + '_addBtn';
                            var addBtn = new ImageButton({
                                id: addid,
                                imageClass: 'icon_plus_16x16',
                                onClick: dojolang.hitch(this, this.addNew),
                                tooltip: this.addText
                            });
                            this._registeredWidgets.push(addBtn);
                            dojo.place(addBtn.domNode, rightToolsContainer[0], position);
                            break;
                        case 'delete':
                            var delid = this.id + '_delBtn';
                            var delBtn = new ImageButton({
                                id: delid,
                                tooltip: this.deleteText,
                                imageClass: 'icon_Delete_16x16',
                                onClick: dojolang.hitch(this, this.deleteSelected)
                            });
                            this._registeredWidgets.push(delBtn);
                            dojo.place(delBtn.domNode, rightToolsContainer[0], position);
                            break;
                        case 'save':
                            var saveid = this.id + '_saveBtn';
                            var saveBtn = new ImageButton({
                                id: saveid,
                                tooltip: this.saveText,
                                imageClass: 'icon_Save_16x16',
                                onClick: dojolang.hitch(this, this.saveChanges)
                            });
                            this._registeredWidgets.push(saveBtn);
                            dojo.place(saveBtn.domNode, rightToolsContainer[0], position);
                            break;
                        case 'cancel':
                            var cclid = this.id + '_cancelBtn';
                            var cancelBtn = new ImageButton({
                                id: cclid,
                                tooltip: this.cancelText,
                                imageClass: 'icon_Reset_16x16',
                                onClick: dojolang.hitch(this, this.cancelChanges)
                            });
                            this._registeredWidgets.push(cancelBtn);
                            dojo.place(cancelBtn.domNode, rightToolsContainer[0], position);
                            break;
                    }
                } else {
                    if ((tool.type) && (tool.type === 'Sage.UI.SDataLookup')) {
                        var conf = tool.controlConfig || tool;
                        var lup = new SDataLookup(conf);
                        dojo.place(lup.domNode, refNode, position);
                        this.lookupControl = lup;
                    } else {
                        var custombtn = new ImageButton({
                            id: tool.id,
                            icon: tool.icon || '',
                            imageClass: tool.imageClass || '',
                            onClick: dojolang.hitch(tool.scope || this, tool.handler),
                            tooltip: tool.alternateText || tool.tooltip
                        });
                        this._registeredWidgets.push(custombtn);
                        dojo.place(custombtn.domNode, refNode, (positionString.length > 0) ? positionString : position);
                    }
                }
                //Increment the position for consistent grouping of these items.
                position++;
            }
        },
        addNew: function (args) {
            if (this.store) {
                this.store.newItem(args);
            }
        },
        addAssociatedItems: function (items, parentName, childName, lookup) {
            // summary:
            //  Helper function for lookup tools.  This can be called by the handler to add items selected in a lookup
            var grid = this;
            if (Utility.getModeId() !== 'insert' && this.store.dirtyDataCache.isDirty) {
                Dialogs.raiseQueryDialog(
                    'SalesLogix',
                    this.dirtyDataMessage,
                    function (result) {
                        if (result) {
                            grid.addSelectedItems(items, parentName, childName, lookup);
                        }
                    },
                    this.okText,
                    this.cancelText
                );
            }
            else {
                grid.addSelectedItems(items, parentName, childName, lookup);
            }
        },
        addSelectedItems: function (items, parentName, childName, lookup) {
            var entities = [];
            var grid = this;
            for (var i = 0; i < items.length; i++) {
                var hasRecord = false;
                // duplicate detection
                for (var k in grid.store.dataCache) {
                    var rec = grid.store.dataCache[k];
                    if (rec[childName] && rec[childName].$key == items[i].$key)
                        hasRecord = true;
                }
                if (hasRecord)
                    continue;

                //Insert mode check
                var newRecord = {};
                if (Utility.getModeId() !== 'insert') {
                    newRecord[parentName] = { $key: Utility.getCurrentEntityId() };
                }
                newRecord[childName] = {};
                Utility.extend(newRecord[childName], items[i]);
                delete newRecord.$key;
                delete newRecord.$name;
                delete newRecord.$url;
                entities.push(newRecord);
            }
            if (entities.length > 0)
                grid.createItems(entities, function () {
                    if (Utility.getModeId() !== 'insert') {
                        __doPostBack("MainContent", "");
                    }
                });
            if (lookup)
                lookup.lookupDialog.hide();
        },
        createItems: function (items, callback) {
            if (dojo.isArray(items)) {
                var store = this.store;
                var iCreateCount = items.length;
                if (typeof console !== 'undefined') {
                    console.log('createItems() items.length = %o', iCreateCount);
                }
                //TODO: Replace callback with webworker.
                var fnResponse = function (arg1) {
                    // "this.", within the scope of fnResponse(), refers to the scope object below.
                    this.currentCount = this.currentCount + 1;
                    if (typeof console !== 'undefined') {
                        if (arg1 && typeof arg1 !== 'undefined' && arg1.getResponseHeader) {
                            console.log('createItems() response: (status = %o; statusText = %o): currentCount = %o; totalCount = %o',
                            arg1.status || 0, arg1.statusText || "", this.currentCount, this.totalCount);
                            console.log('createItems() response ETag: %o', arg1.getResponseHeader('ETag'));
                        } else {
                            if (arg1 && typeof arg1 !== 'undefined' && typeof arg1.$httpStatus === 'string') {
                                console.log('createItems() response ($httpStatus: %o; $key: %o; $descriptor: %o $etag: %o): currentCount = %o; totalCount = %o',
                                arg1.$httpStatus, arg1.$key || "", arg1.$descriptor, arg1.$etag, this.currentCount, this.totalCount);
                            } else {
                                console.log('createItems() response: (unknown status): currentCount = %o; totalCount = %o',
                                this.currentCount, this.totalCount);
                            }
                        }
                    }
                    if (this.currentCount === this.totalCount) {
                        this.grid.refresh();
                        if (typeof this.onComplete === 'function') {
                            this.onComplete.call(this.grid);
                        }
                    }
                };
                var scope = { grid: this, totalCount: iCreateCount, currentCount: 0, onResponse: fnResponse, onComplete: callback || null };
                for (var i = 0; i < items.length; i++) {
                    store.createItem(items[i], scope);
                }
            }
            else {
                //TODO: Localize and use message service.
                Dialogs.showError(this.createItemsInvalidArrayText);
            }
        },
        deleteSelected: function (callback) {
            var selectedItems = this.selection.getSelected();
            if (selectedItems.length < 1) {
                Dialogs.showError(this.noSelectionsText);
                return;
            }
            if (this.mode !== 'insert') {
                if (!this.store._checkPageExitWarningMessage()) {
                    return;
                }
            }
            var self = this;
            var opts = {
                title: 'Sage SalesLogix',
                query: dojo.string.substitute(this.confirmDeleteFmtTxt, [selectedItems.length]),
                callbackFn: function (result) { self.deleteCallback(result, callback, selectedItems); },
                yesText: this.buttonOk, //OK
                noText: this.buttonCancel //Cancel
            };
            Dialogs.raiseQueryDialogExt(opts);
        },
        deleteCallback: function (result, callback, selectedItems) {
            if (result) {
                var grid = this;
                var store = this.store;
                var iDeleteCount = 0;
                for (var i = 0; i < selectedItems.length; i++) {
                    if (this.store.isItem(selectedItems[i])) {
                        iDeleteCount++;
                    }
                }
                grid.selection.clear();
                this.showLoading();
                //TODO: Replace callback with webworker.
                var fnResponse = function (arg1, arg2) {
                    // "this.", within the scope of fnResponse(), refers to the scope object below.
                    this.currentCount = this.currentCount + 1;
                    if (typeof console !== 'undefined') {
                        if (arg1 && typeof arg1 !== 'undefined' && arg1.getResponseHeader) {
                            console.log('deleteSelected() response: (status = %o; statusText = %o): currentCount = %o; totalCount = %o',
                                arg1.status || 0, arg1.statusText || "", this.currentCount, this.totalCount);
                            console.log('deleteSelected() response ETag: %o', arg1.getResponseHeader('ETag'));
                        } else {
                            console.log('deleteSelected() response (OK): currentCount = %o; totalCount = %o', this.currentCount, this.totalCount);
                        }
                    }
                    if (this.currentCount === this.totalCount) {
                        grid.refresh();
                        if (typeof this.onComplete === 'function') {
                            this.onComplete.call(grid);
                        }
                    }
                };
                var scope = { grid: grid, totalCount: iDeleteCount, currentCount: 0, onResponse: fnResponse, onComplete: callback || null };
                for (var i = 0; i < selectedItems.length; i++) {
                    if (store.isItem(selectedItems[i])) {
                        store.deleteItem(selectedItems[i], scope);
                    }
                }
                store.clearCache();
            }
        },
        cancelChanges: function () {
            if (this.store && this.store.revert) {
                this.store.revert();
                this.markClean();
                this.refresh();
            }
        },
        saveChanges: function (callback) {
            //grids onBlur event doesn't work as expected in IE9, have to actually click outside the grid to have the event fire, so in lieu of relying on that event we'll just apply here
            if (this.exit) {
                this.edit.apply();
            }

            //Can be called from a listener on the page level save.  If the store is a proxy sdata store, it will not have a save function.
            if (!this.store.save) return;

            var iSaveCount = 0;
            for (var key in this.store.dirtyDataCache) {
                if (key !== 'isDirty') {
                    var entity = this.store.dirtyDataCache[key];
                    if (this.store.isItem(entity)) {
                        iSaveCount++;
                    }
                }
            }
            //TODO: Replace callback with webworker.
            var fnResponse = function (arg1, arg2) {
                // "this.", within the scope of fnResponse(), refers to the scope object below.
                this.currentCount = this.currentCount + 1;
                if (typeof console !== 'undefined') {
                    if (arg1 && typeof arg1 !== 'undefined' && arg1.getResponseHeader) {
                        console.log('saveChanges() response: (status = %o; statusText = %o): currentCount = %o; totalCount = %o',
                        arg1.status || 0, arg1.statusText || "", this.currentCount, this.totalCount);
                        console.log('saveChanges() response ETag: %o', arg1.getResponseHeader('ETag'));
                    } else {
                        if (arg1 && typeof arg1 !== 'undefined' && typeof arg1.$httpStatus === 'string') {
                            console.log('saveChanges() response ($httpStatus: %o; $key: %o; $descriptor: %o $etag: %o; $updated: %o): currentCount = %o; totalCount = %o',
                            arg1.$httpStatus, arg1.$key || "", arg1.$descriptor, arg1.$etag, arg1.$updated, this.currentCount, this.totalCount);
                        } else {
                            console.log('saveChanges() response: (unknown status): currentCount = %o; totalCount = %o',
                            this.currentCount, this.totalCount);
                        }
                    }
                }
                if (this.currentCount === this.totalCount) {
                    this.grid.markClean();
                    this.grid.refresh();
                    if (typeof this.onComplete === 'function') {
                        this.onComplete.call(this.grid);
                    }
                }
            };
            var scope = { grid: this, totalCount: iSaveCount, currentCount: 0, onResponse: fnResponse, onComplete: callback || null };
            this.store.save(scope);
        },
        markClean: function () {
            if (this.dirtyDataMsgID) {
                var dirtyDataMsg = dojo.byId(this.dirtyDataMsgID);
                if (dirtyDataMsg) {
                    dojo.style(dojo.byId(this.dirtyDataMsgID), 'display', 'none');
                }
                var bindingMgr = Sage.Services.getService('ClientBindingManagerService');
                if (bindingMgr) {
                    bindingMgr.clearDirtyAjaxItem(this.id);
                }
            }
        },
        markDirty: function () {
            var node = dojo.byId(this.dirtyDataMsgID);
            if (node) {
                dojo.style(node, 'display', 'inline');
            }
            var bindingMgr = Sage.Services.getService('ClientBindingManagerService');
            if (bindingMgr) {
                bindingMgr.addDirtyAjaxItem(this.id);
            }
        },
        refresh: function () {
            if (!this.scroller) {
                return;
            }
            this._refresh();
            this.onRefresh();
        },
        onRefresh: function () { }
    });
    return editableGrid;
});
},
'Sage/MainView/ActivityManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityManager", [
    'Sage/UI/SDataMainViewConfigurationProvider',
    'Sage/UI/ListPanel',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/MainView/ActivityMgr/ActivityGroupContextService',
    'Sage/Services/ActivityService',
    'Sage/MainView/ActivityMgr/FilterConfigurationProvider',
    'dojo/i18n!./nls/ActivityManager',
    'dojo/_base/declare'
],

function (
    SDataMainViewConfigurationProvider,
    ListPanel,
    SageUtility,
    UtilityActivity,
    activityGroupContextService,
    ActivityService,
    FilterConfigurationProvider,
    nlsStrings,
    declare
) {
    //dojo.requireLocalization("Sage.MainView", "ActivityManager");
    var actvityManager = declare('Sage.MainView.ActivityManager', SDataMainViewConfigurationProvider, {

        _nlsResources: false,
        _currentTabId: false,
        _currentTabDescription: false,
        _currentUserId: false,
        _currentKeyField: '$key',
        _groupContextService: false,
        _tabNameCache: {},
        _mainViewName: 'ActivityManager',
        store: false,
        constructor: function (options) {
            this._nlsResources = nlsStrings;
            this._currentUserId = 'x';
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (!grpContextSvc || grpContextSvc.declaredClass !== 'Sage.MainView.ActivityMgr.ActivityGroupContextService') {
                Sage.Services.removeService('ClientGroupContext');
                grpContextSvc = new activityGroupContextService();
                Sage.Services.addService('ClientGroupContext', grpContextSvc);
            }

            var ctx = grpContextSvc.getContext();
            this._currentTabId = ctx.CurrentGroupID;
            this._currentTabDescription = ctx.CurrentName;

            var clientContextSvc = Sage.Services.getService('ClientContextService');
            if (clientContextSvc) {

                if (clientContextSvc.containsKey("userID")) {
                    this._currentUserId = clientContextSvc.getValue("userID");
                }
            }

            this.titlePaneConfiguration = {
                tabs: this._getTabsConfig(),
                menu: this._getMenuConfig(),
                titleFmtString: this._nlsResources.titleFmtString || '${0}'
            };

            dojo.subscribe('/group/context/changed', this, '_onCurrentGroupChanged');

        },

        _setListPanelConfig: function () {

            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (grpContextSvc) {
                //var ctx = grpContextSvc.getContext();
                //this._currentTabId = ctx.CurrentGroupID;
                //this._currentTabDescription = ctx.CurrentName;
                this.listPanelConfiguration = grpContextSvc.getCurrentListConfig();
                this.store = this.listPanelConfiguration.list.store;
                this.service = this.listPanelConfiguration.list.store.service;
            }

            return;


        },

        _getListPanelConfig: function () {

            this._setListPanelConfig();
            return this.listPanelConfiguration;
        },

        requestConfiguration: function (options) {

            //returns the list panel configuration through the success callback method...
            if (options.success) {
                options.success.call(options.scope || this, this._getListPanelConfig(), this);
            }
        },
        requestTitlePaneConfiguration: function (options) {
            if (options.success) {
                options.success.call(options.scope || this, this.titlePaneConfiguration, this);
            }
        },

        onConfigurationChange: function (obj) {
            //this._setListPanelConfig();
        },
        onTitlePaneConfigurationChange: function () {

        },

        _setUIForNewTab: function (tabId, tabDescription) {

            this._currentTabId = tabId;
            this._currentTabDescription = tabDescription;
            //set title in title pane...
            //var titlePane = dijit.byId('titlePane');
            //if (titlePane) {
            //    titlePane.set('title', this._currentTabDescription);
            //}

        },

        _onCurrentGroupChanged: function (args) {
            var context = args['current'];
            if (!context) {
                var groupContextSvc = Sage.Services.getService('ClientGroupContext');
                context = groupContextSvc.getContext();
            }

            //dijit.byId('grpMenuWithXGroup').set('label', dojo.string.substitute('For ${0} Group', [context.CurrentName])));
            if (dijit.byId('GroupTabs').selectedChildWidget.id !== context.CurrentGroupID) {
                dijit.byId('GroupTabs').selectChild(context.CurrentGroupID);
            }
        },


        _onTabSelected: function (tab) {
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            var id = tab.id || tab;

            var keyField = grpContextSvc.getKeyField(id);
            if (grpContextSvc) {
                var ctx = grpContextSvc.getContext();
                if (ctx.CurrentGroupID === id) {
                    return;
                }
                this._setUIForNewTab(id, tab.title);
                grpContextSvc.setCurrentGroup(id, tab.title, keyField);
            }
        },
        _getTabsConfig: function () {

            var tabsConfig = {
                store: false,
                selectedTabId: this._currentTabId,
                tabKeyProperty: 'key',
                tabNameProperty: 'descriptor',
                fetchParams: { },
                staticTabs: this._getStaticTabs(),
                onTabSelect: dojo.hitch(this, '_onTabSelected'),
                onTabClose: false,
                showTabContextMenus: false
            };

            return tabsConfig;
        },
        _getStaticTabs: function () {

            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            var staticTabs = grpContextSvc.getStaticTabs();
            return staticTabs;
        },

        _getMenuConfig: function () {
            return false;
        }

    });
    return actvityManager;
});


},
'Sage/UI/Alarms/ActivityAlarm':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/ActivityAlarm", [
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/form/CheckBox',
    'Sage/Utility/Activity',
    'Sage/UI/Alarms/AlarmCountDown',
    'Sage/Link',
    'Sage/UI/Controls/EntityInfoToolTip',
    'dojo/i18n',
    'dojo/i18n!./nls/ActivityAlarm',
    'dojo/_base/declare'
],
function (_Templated, _Widget, CheckBox, activityUtility, AlarmCountDown,
    link, EntityInfoToolTip, i18n, actAlarmStrings, declare) {
    var activityAlarm = declare('Sage.UI.Alarms.ActivityAlarm', [_Widget, _Templated], {
        widgetsInTemplate: true,
        userActivity: null,
        selected: false,
        key: '',
        _tooltips: [],
        widgetTemplate: new Simplate([
            '<div class="alarm-item">',
                '<table style="width:100%" dojoAttachPoint="_item" dojoAttachEvent="onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick">',
                    '<col width="50px" />',
                    '<col width="50%" />',
                    '<col width="50%" />',
                    '<col width="80px" />',
                    '<tr>',
                        '{% var imageClass = Sage.Utility.Activity.getActivityImageClass($.userActivity.Activity.Type, "medium"); %}',
                        '<td class="alarm-icon">',
                            '<div class="dijitIcon dijitMenuItemIcon Global_Images icon24x24 {%= imageClass %}" title="{%= $.cleanText($.userActivity.Activity.Description) %}"></div>',
                            '<input type="checkbox" data-dojo-type="dijit.form.CheckBox" size="30px" dojoAttachPoint="_checkbox" />',
                        '</td>',
                        '<td class="alarm-content">',
                            '{% var desc = $.userActivity.Activity.Description;if (!desc) { desc = Sage.Utility.Activity.getActivityTypeName($.userActivity.Activity.Type); } %}',
                            '<div class="alarm-description">',
                                '{% if ($.userActivity.Activity.Recurring) { %}<div class="Global_Images icon16x16 icon_recurring" title="{%= $.recurringText %}" > </div>&nbsp;&nbsp;{% } %}',
                                '{% if ($.userActivity.Status === "asUnconfirmed") { %}',
                                    '<a href="javascript:Sage.Link.confirmActivityFor(\'{%= $.userActivity.Activity.$key %}\', \'{%= $.userActivity.User.$key %}\')">{%= desc %}</a>',
                                '{% } else { %}',
                                    '<a href="javascript:Sage.Link.editActivity(\'{%= $.userActivity.Activity.$key %}\', {%= $.userActivity.Activity.Recurring %})">{%= desc %}</a>',
                                '{% } %}',
                            '</div>',
                            '<div>{%= Sage.Utility.Activity.formatActivityStartDate($.userActivity.Activity.StartDate) %}</div>',
                            '{% if (($.userActivity.Activity.LeadId) && ($.userActivity.Activity.LeadId.trim() !== "")) { %}',  //Lead...
                                '<div id="{%= $.userActivity.Activity.$key %}_lead" dojoAttachPoint="_leadnode">',
                                    '{%= $.leadText %}: <a href="lead.aspx?entityid={%= $.userActivity.Activity.LeadId %}">{%= $.userActivity.Activity.LeadName %}</a>',
                                '</div>',
                                '{% if ($.userActivity.Activity.AccountName !== "") { %}',
                                    '<div>{%= $.companyText %}: {%= $.userActivity.Activity.AccountName %}</div>',
                                '{% } %}',
                            '{% } else { %}',   // ... or Contact?    
                                '{% if ($.userActivity.Activity.ContactName !== "") { %}',
                                    '<div id="{%= $.userActivity.Activity.$key %}_con" dojoAttachPoint="_connode">',
                                        '{%= $.contactText %}: <a href="Contact.aspx?entityid={%= $.userActivity.Activity.ContactId %}">{%= $.userActivity.Activity.ContactName %}</a>',
                                     '</div>',
                                '{% } %}',
                                '{% if ($.userActivity.Activity.AccountName !== "") { %}',
                                    '<div id="{%= $.userActivity.Activity.$key %}_acc" dojoAttachPoint="_accnode">',
                                        '{%= $.accountText %}: <a href="Account.aspx?entityid={%= $.userActivity.Activity.AccountId %}">{%= $.userActivity.Activity.AccountName %}</a>',
                                    '</div>',
                                '{% } %}',
                            '{% } %}',
                        '</td><td class="alarm-content">',
                            '{% if ($.userActivity.Activity.Location) { %}',
                                '<div id="{%= $.userActivity.Activity.$key %}_Location" dojoAttachPoint="_location">',
                                    '{%= $.locationText %}: {%= $.userActivity.Activity.Location %}&nbsp;',
                                '</div>',
                            '{% } %}',
                            '{% if ($.userActivity.Activity.OpportunityName) { %}',
                                '<div id="{%= $.userActivity.Activity.$key %}_opp" dojoAttachPoint="_oppnode">',
                                    '{%= $.opportunityText %}: <a href="Opportunity.aspx?entityid={%= $.userActivity.Activity.OpportunityId %}">{%= $.userActivity.Activity.OpportunityName %}</a>',
                                '</div>',
                            '{% } %}',
                            '{% if ($.userActivity.Activity.TicketNumber) { %}',
                                '<div id="{%= $.userActivity.Activity.$key %}_tick" dojoAttachPoint="_ticknode">',
                                    '{%= $.ticketText %}: <a href="Ticket.aspx?entityid={%= $.userActivity.Activity.TicketId %}">{%= $.userActivity.Activity.TicketNumber %}</a>',
                                '</div>',
                            '{% } %}',
                        '</td>',
                        '<td class="alarm-countdownContainer">',
                            '<div data-dojo-type="Sage.UI.Alarms.AlarmCountDown" startDate="{%= $.userActivity.Activity.StartDate %}"></div>',
                        '</td>',
                    '</tr>',
                '</table>',
            '</div>'
        ]),
        constructor: function () {
            dojo.mixin(this, actAlarmStrings);
        },
        postCreate: function () {
            this.inherited(arguments);
            this._checkbox.set('checked', this.selected);
            this._setupTooltips();
        },
        _setUserActivityAttr: function (ua) {
            this.userActivity = ua;
            this.key = ua['$key'];
        },
        _setupTooltips: function () {
            if (this.userActivity.Activity.AccountName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._accnode,
                    position: ['below'],
                    entityName: 'accounts',
                    entityId: this.userActivity.Activity.AccountId
                }));
            }
            if (this.userActivity.Activity.ContactName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._connode,
                    position: ['below'],
                    entityName: 'contacts',
                    entityId: this.userActivity.Activity.ContactId
                }));
            }
            if (this.userActivity.Activity.LeadName !== '') {
                this._tooltips.push(new EntityInfoToolTip({
                    connectId: this._leadnode,
                    position: ['below'],
                    entityName: 'leads',
                    entityId: this.userActivity.Activity.LeadId
                }));
            }
        },
        //once in a while a tooltip gets stuck - but when do you call this?
        closeTooltips: function () {
            for (var i = 0; i < this._tooltips.length; i++) {
                this._tooltips[i].close();
            }
        },
        cleanText: function (str) {
            if (!str) {
                return '';
            }
            var oRegExp = new RegExp('[/:"*?\<\>|\r\n\'\"`]+', "g");
            return str.replace(oRegExp, "");
        },
        _onHover: function () {
            dojo.addClass(this.domNode, 'alarm-item-hover');
        },
        _onUnhover: function () {
            dojo.removeClass(this.domNode, 'alarm-item-hover');
        },
        _onClick: function () {
            this.selected = !this.selected;
            this._checkbox.set('checked', this.selected);
            this._setSelectedStyle();
        },
        _setSelectedAttr: function (selected) {
            this.selected = selected;
            this._checkbox.set('checked', this.selected);
            this._setSelectedStyle();
        },
        _getSelectedAttr: function () {
            return this.selected;
        },
        _setSelectedStyle: function () {
            if (this.selected) {
                dojo.addClass(this.domNode, 'alarm-item-selected');
            } else {
                dojo.removeClass(this.domNode, 'alarm-item-selected');
            }
        }
    });
    return activityAlarm;
});

},
'Sage/UI/Controls/Email':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Email", [
       'dijit/_Widget',
       'Sage/_Templated',
       'Sage/UI/Controls/TextBox',
       'dojox/validate/regexp',
       'dojo/_base/declare'
],
function (_Widget, _Templated, textBox, regexp, declare) {
    var widget = declare("Sage.UI.Controls.Email", [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        widgetTemplate: new Simplate([
            '<div class="email" slxcompositecontrol="true" id="{%= $.id %}" >',
            '<input data-dojo-type="Sage.UI.Controls.TextBox" name="{%= $.name %}" ',
            // textWithIcons allows for styling to be applied to a textbox where an icon accompanies the text inside the box.
            'data-dojo-props="textWithIcons: {%= $.buttonVisible %}"',
            'dojoAttachPoint="focusNode" type="text" style="" ',
            'hotKey="{%= $.hotKey %}" ',
             '{% if($.disabled === "disabled") { %} ',
                'disabled="disabled" ',
             '{% } %}',
            '{% if($.readonly === "readonly") { %} ',
                'readonly="readonly" ',
            '{% } %}',
            '{% if ($.disabled !== "disabled") { %} ',
            ' dojoAttachEvent="onChange:_onChange, onDblClick:sendEmail" ',
            '{% } %}',
            ' regExpGen="dojox.validate.regexp.emailAddress"  tabindex="{%= $.tabIndex %}" ',
            'value="{%= $.email %}" required="{%= $.required %}" ',
            'id="{%= $.id %}_emailText" maxlength="{%= $.maxLength %}" > ',
            '{% if ($.buttonVisible && $.disabled !== "disabled") { %}',
            '<img alt="{%= $.buttonToolTip %}" tabindex="{%= $.tabIndex %}" data-dojo-attach-event="ondijitclick: sendEmail" ',
            'style="padding-left:0;cursor: pointer; vertical-align: left;" ',
            'src="{%= $.buttonImageUrl %}" ',
            'title="{%= $.buttonToolTip %}" id="{%= $.id %}_emailButton"> ',
            '{% } %}',
            '</div>'
        ]),
        shouldPublishMarkDirty: true,
        name: '',
        autoPostBack: false,
        displayMode: '',
        _class: '',
        textboxToolTip: '',
        textboxStyle: '',
        readonly: '',
        disabled: '',
        hotKey: '',
        maxLength: 128,
        buttonVisible: true,
        buttonImageUrl: '',
        buttonToolTip: '',
        buttonStyle: '',
        required: false,
        tabIndex: 0,
        email: '',
        emailId: '',
        constructor: function (options) {
            options.id = options.emailId;
        },
        postCreate: function () {
            this.formatEmail();
            this.inherited(arguments);
        },
        formatEmail: function () {
            //TODO: replace with class
            dojo.style(this.focusNode.focusNode, 'color', '#000099');
        },
        widgetsInTemplate: true,
        _onChange: function (newValue) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            this.formatEmailChange();
        },
        formatEmailChange: function () {
            //TODO: Value formatting goes here, if applicable
            if (this.email !== this.focusNode.value) {
                this.email = this.focusNode.value;
            }
        },
        sendEmail: function () {
            var email = this.email;
            email = "mailto:" + email;
            document.location.href = email;
        }
    });

    return widget;
});

},
'Sage/UI/SummaryFormatterScope':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SummaryFormatterScope", [
        'Sage/UI/SummaryContainer',
        'Sage/Data/SummaryViewDataManager',
        'Sage/UI/Controls/SummaryAggregate',
        'dojo/_base/lang',
        'dojo/_base/declare'
],
function (summaryContainer, SummaryViewDataManager, SummaryAggregate, lang, declare) {
    var summaryFormatterScope = declare('Sage.UI.SummaryFormatterScope', null, {
        templateLocation: false,
        queryName: '',
        idField: '',
        dataManager: null,
        requestConfiguration: false,
        widgets: [],
        constructor: function (args) {
            dojo.mixin(this, args);
            this.widgets = [];
            this.preFetchResources();
            this._setupDataManager();
        },
        _setupDataManager: function () {
            this.dataManager = new SummaryViewDataManager();
            if (Sage.Services.hasService('SummaryViewDataManager')) {
                Sage.Services.removeService('SummaryViewDataManager');
            }
            Sage.Services.addService('SummaryViewDataManager', this.dataManager);
        },
        formatSummary: function (value, idx) {

            var widget,
                id = idx + '_sum_' + value;

            if (value === null) {
                return '';
            }

            if (this.dataManager == null) {
                this.dataManager = Sage.Services.getService('SummaryViewDataManager');
            }

            if (this.dataManager == null) {
                this._setupDataManager();
            }

            //widget = dijit.byId(id);
            //if (!widget) {
            //     widget = new summaryContainer({
            //         id: id,
            //         templateLocation: this.templateLocation
            //     });
            // }

            widget = dijit.byId(id);
            if (widget) {
                widget.destroy();
            }
            widget = new summaryContainer({
                id: id,
                templateLocation: this.templateLocation
            });

            this.dataManager.requestData(value, widget, this.requestConfiguration);
            this.widgets[idx] = widget;
            return this.widgets[idx];

        },
        preFetchResources: function () {
            var moduleNameParts = ['Sage'];
            var templateParts = this.templateLocation.split('/');
            for (var i = 0; i < templateParts.length - 1; i++) {
                moduleNameParts.push(templateParts[i]);
            }
            var path = 'dojo/i18n!' + moduleNameParts.join('/') + '/nls/' + templateParts[templateParts.length - 1].replace('.html', '');
            require([path],
                lang.hitch(this, function (nls) {
                    lang.mixin(this, nls);
                }));

            //Dynamic caching need to be obscured from the builder by using the dojo['cache'] calling method
            dojo['cache']('Sage', this.templateLocation);
        }
    });

    return summaryFormatterScope;
});

},
'Sage/UI/_TitlePaneConfigProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/_TitlePaneConfigProvider", [
    'dojo/_base/declare'
],
function (declare) {
    var provider = declare('Sage.UI._TitlePaneConfigProvider', null, {
        // summary:
        //      Base class that can be mixed in to other classes wanting to provide configuration
        //      to the TitleContentPane

        // titlePaneConfiguration: object
        //      The configuration object for the Sage.UI.TitleContentPane.  Do not access this property directly, use requestTitlePaneConfiguration() 
        //      and provide a callback instead.  Classes deriving from this can set this property for returning to the TitleContentPane.
        //      Example configuration object: { tabs: { }, menu: { }, titleFmtString: "My Entity: ${0}" }
        titlePaneConfiguration: { menu: { }, tabs: { }, titleFmtString: '${0}'},

        requestTitlePaneConfiguration: function(options) {
            // summary:
            //      returns the configuration for the title pane area
            //      including the tabs, group menu and optionally, a format string for creating the title.
            // options: object
            //      An object containing callback methods: 'success' and 'failure'.  The configuration object will be passed 
            //      as an argument to the success method.
            if (options.success && this.titlePaneConfiguration) {
                options.success.call(options.scope || this, this.titlePaneConfiguration, this);
            }
        }
    });
    
    return provider;
});
},
'Sage/QuickForms/Design/nls/CurrencyControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/CurrencyControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Currency"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/LanguageList':function(){
define("Sage/LanguageList", [], function() {
/*
    Language codes supported by IE: http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx

    List of codes below comma separated (for builder)
    af,ar,ar-dz,ar-jo,ar-lb,ar-ma,ar-sy,ar-tn,az,be,bg,ca,cs,da,de,de-at,de-ch,de-li,el,en,en-au,en-bz,en-ca,en-gb,en-jm,en-nz,en-tt,en-us,en-za,es,es-ar,es-bo,es-cl,es-co,es-cr,es-ec,es-gt,es-hn,es-pa,es-pe,es-pr,es-py,es-uy,es-ve,et,eu,fa,fi,fo,fr,fr-be,fr-ca,fr-ch,fr-lu,gd,he,hi,hr,hu,id,is,it,it-ch,ja,kk,ko,lt,lv,mk,ms,mt,nb,nl,nl-be,pl,pt,pt-pt,pt-br,rm,ro,ru,sk,sl,sq,sr,sv,sv-fi,th,tn,tr,ts,uk,ur,ve,vi,xh,zh,zh-cn,zh-hk,zh-sg,zh-tw,zu
*/
    return {
        root: null,
        "af":       true, // Afrikaans
        "ar":       true, // Arabic
        "ar-dz":    true, // Arabic (Algeria)
        "ar-jo":    true, // Arabic (Jordan)
        "ar-lb":    true, // Arabic (Lebanon)
        "ar-ma":    true, // Arabic (Morocco)
        "ar-sy":    true, // Arabic (Syria)
        "ar-tn":    true, // Arabic (Tunisia)
        "az":       true, // Azeri (Latin)
        "be":       true, // Belarusian
        "bg":       true, // Bulgarian
        "ca":       true, // Catalan
        "cs":       true, // Czech
        "da":       true, // Danish
        "de":       true, // German (Standard)
        "de-at":    true, // German (Austria)
        "de-ch":    true, // German (Switzerland)
        "de-li":    true, // German (Liechtenstein)
        "el":       true, // Greek
        "en":       true, // English
        "en-au":    true, // English (Australia)
        "en-bz":    true, // English (Belize)
        "en-ca":    true, // English (Canada)
        "en-gb":    true, // English (United Kingdom)
        "en-jm":    true, // English (Jamaica)
        "en-nz":    true, // English (New Zealand)
        "en-tt":    true, // English (Trinidad)
        "en-us":    false, // English (United States)
        "en-za":    true, // English (South Africa)
        "es":       true, // Spanish (Spain)
        "es-ar":    true, // Spanish (Argentina)
        "es-bo":    true, // Spanish (Bolivia)
        "es-cl":    true, // Spanish (Chile)
        "es-co":    true, // Spanish (Colombia)
        "es-cr":    true, // Spanish (Costa Rica)
        "es-ec":    true, // Spanish (Ecuador)
        "es-gt":    true, // Spanish (Guatemala)
        "es-hn":    true, // Spanish (Honduras)
        "es-pa":    true, // Spanish (Panama)
        "es-pe":    true, // Spanish (Peru)
        "es-pr":    true, // Spanish (Puerto Rico)
        "es-py":    true, // Spanish (Paraguay)
        "es-uy":    true, // Spanish (Uruguay)
        "es-ve":    true, // Spanish (Venezuela)
        "et":       true, // Estonian
        "eu":       true, // Basque
        "fa":       true, // Farsi
        "fi":       true, // Finnish
        "fo":       true, // Faeroese
        "fr":       true, // French (Standard)
        "fr-be":    true, // French (Belgium)
        "fr-ca":    true, // French (Canada)
        "fr-ch":    true, // French (Switzerland)
        "fr-lu":    true, // French (Luxembourg)
        "gd":       true, // Gaelic (Scotland)
        "he":       true, // Hebrew
        "hi":       true, // Hindi
        "hr":       true, // Croatian
        "hu":       true, // Hungarian
        "id":       true, // Indonesian
        "is":       true, // Icelandic
        "it":       true, // Italian (Standard)
        "it-ch":    true, // Italian (Switzerland)
        "ja":       true, // Japanese
        "kk":       true, // Kazakh
        "ko":       true, // Korean
        "lt":       true, // Lithuanian
        "lv":       true, // Latvian
        "mk":       true, // Macedonian (FYROM)
        "ms":       true, // Malaysian
        "mt":       true, // Maltese
        "nb":       true, // Norwegian
        "nl":       true, // Dutch (Standard)
        "nl-be":    true, // Dutch (Belgium)
        "pl":       true, // Polish
        "pt":       true, // Portuguese (Portugal)
        "pt-pt":    true, // Portuguese (Portugal)
        "pt-br":    true, // Portuguese (Brazil)
        "rm":       true, // Rhaeto-Romanic
        "ro":       true, // Romanian
        "ru":       true, // Russian
        "sk":       true, // Slovak
        "sl":       true, // Slovenian
        "sq":       true, // Albanian
        "sr":       true, // Serbian
        "sv":       true, // Swedish
        "sv-fi":    true, // Swedish (Finland)
        "th":       true, // Thai
        "tn":       true, // Tswana
        "tr":       true, // Turkish
        "ts":       true, // Tsonga
        "uk":       true, // Ukrainian
        "ur":       true, // Urdu
        "ve":       true, // Venda
        "vi":       true, // Vietnamese
        "xh":       true, // Xhosa
        "zh":       true, // Chinese
        "zh-cn":    true, // Chinese (PRC)
        "zh-hk":    true, // Chinese (Hong Kong SAR)
        "zh-sg":    true, // Chinese (Singapore)
        "zh-tw":    true, // Chinese (Taiwan)
        "zu":       true // Zulu
    };
});

},
'Sage/QuickForms/Design/NonVisibleControlContainer':function(){
define("Sage/QuickForms/Design/NonVisibleControlContainer", [
    'dojo/query',
    'dojo/topic',
    'dojo/string',
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/_base/event',
    'dojo/dom-attr',
    'dojo/dom-class',
    'dojo/NodeList-traverse',
    'dojo/NodeList-manipulate',
    'dijit/registry',
    'dijit/focus',
    'dijit/layout/_LayoutWidget',
    'Sage/_EventMapMixin',
    'Sage/_Templated',
    'dojo/i18n!./nls/NonVisibleControlContainer'
], function(
    query,
    topic,
    string,
    declare,
    array,
    lang,
    event,
    domAttr,
    domClass,
    nodeListTraverse,
    nodeListManipulate,
    registry,
    focus,
    _LayoutWidget,
    _EventMapMixin,
    _Templated,
    localization
) {
    return declare('Sage.QuickForms.Design.NonVisibleControlContainer', [_LayoutWidget, _EventMapMixin, _Templated], {
        events: {
            'click': '_onClick',
            'keydown': '_onKeyDown'
        },
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="design-hidden-container">',
            '<div class="design-hidden-container-header dijit dijitToolbar">{%: $.headerText %}</div>',
            '<div class="design-hidden-container-content" data-dojo-attach-point="containerNode"></div>',
            '<div>'
        ]),

        _designGroup: null,
        _designGroupTopics: null,
        selections: null,
        singleSelection: false,
        designGroup: 'default',

        headerText: 'Non-Visual Controls',

        _getDesignGroupAttr: function() {
            return this._designGroup;
        },
        _setDesignGroupAttr: function(value) {
            if (this._designGroupTopics)
            {
                array.forEach(this._designGroupTopics, function(topic) {
                    this.unsubscribe(topic);
                }, this);
            }

            this._designGroup = value;
            this._designGroupTopics = [
                this.subscribe(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), this._onDesignerSelected)
            ];
        },
        constructor: function() {
            this.selections = [];
            lang.mixin(this, localization);
        },
        buildRendering: function() {
            this.inherited(arguments);

            domAttr.set(this.domNode, 'tabIndex', 0);
        },
        _onKeyDown: function(evt) {
        },
        _handleSelectionFor: function(widget, append) {
            if (widget)
            {
                var selected = (array.indexOf(this.selections, widget) > -1);

                if (append && !this.singleSelection)
                {
                    if (!selected)
                    {
                        array.forEach(this.selections, function(selection) {
                            query(selection.domNode).attr('tabIndex', '-1');
                        });

                        this.selections.push(widget);

                        domAttr.set(widget.domNode, 'tabIndex', 0);

                        focus.focus(widget.domNode);

                        domClass.add(widget.domNode, 'design-hidden-item-selected');

                        this.onSelectionChanged(this.selections, true);

                        topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), widget, true, this);
                    }
                }
                else
                {
                    this._clearSelectionDom();
                    this._clearSelectionState(false);

                    this.selections = [widget];

                    domAttr.set(widget.domNode, 'tabIndex', 0);

                    focus.focus(widget.domNode);

                    domClass.add(widget.domNode, 'design-hidden-item-selected');

                    this.onSelectionChanged(this.selections);

                    topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), widget, true, this);
                }
            }
            else
            {
                if (this.singleSelection || !append)
                {
                    this._clearSelectionDom();
                    this._clearSelectionState();
                }
            }
        },
        _onClick: function(evt) {
            var node = query(evt.target).closest('.dijitLayoutContainer-child')[0],
                widget = node && registry.byNode(node),
                append = evt.shiftKey;

            this._handleSelectionFor(widget, append);
        },
        onSelectionChanged: function(selections, append) {

        },
        _clearSelectionDom: function() {
            if (this.selections.length > 0)
            {
                array.forEach(this.selections, function(selection) {
                    query(selection.domNode)
                        .attr('tabIndex', '-1')
                        .removeClass('design-hidden-item-selected');
                });
            }
        },
        _clearSelectionState: function(notify) {
            if (this.selections.length > 0)
            {
                this.selections = [];

                if (notify !== false)
                {
                    this.onSelectionChanged(this.selections);

                    topic.publish(string.substitute('/quickforms/design/${0}/designerSelected', [this._designGroup]), false, false, this);
                }
            }
        },
        _onDesignerSelected: function(designer, append, source) {
            if (designer && source !== this)
            {
                this._clearSelectionDom();
                this._clearSelectionState(false);
            }
        },
        clearSelections: function() {
            this._clearSelectionDom();
            this._clearSelectionState();
        },
        clear: function() {
            this._clearSelectionState();

            array.forEach(this.getChildren(), function(child) {
                this.removeChild(child);
            }, this);

            this.layout();
        }
    });
});
},
'url:Sage/templates/MenuItem.html':"<tr class=\"dijitReset dijitMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n        <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\n\t</td>\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"visibility: hidden\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n</tr>\n\n",
'Sage/Array':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Array", [],
function () {
    if (typeof Array.prototype.swap === 'undefined') {
        Array.prototype.swap = function (d, s) {
            if (d > this.length || s > this.length) {
                console.warn('Illegal index given');
                return;
            }
            var tmp = this[d];
            this[d] = this[s];
            this[s] = tmp;
            return this;
        };
    }

    if (typeof Array.prototype.getIndexByProp === 'undefined') {
        Array.prototype.getIndexByProp = function (str, prop) {
            for (var i = 0, len = this.length; i < len; i++) {
                if (prop && prop === 'key') {
                    if (str in this[i]) {
                        return i;
                    }
                } else if (prop && prop === 'value') {
                    for (var p in this[i]) {
                        if (this[i].hasOwnProperty(p)) {
                            if (this[i][p] === str) {
                                return i;
                            }
                        }
                    }
                }
            }
        };
    }


    if (typeof Array.prototype.placeByAttr === 'undefined') {
        Array.prototype.placeByAttr = function (obj, attr) {
            var placed = false;
            if (!this.length) {
                this.push(obj);
                return; 
            }
            for (var i = 0, len = this.length; i < len; i++) {
                if (this[i][attr] >= obj[attr]) {
                    placed = true;
                    this.splice(i, 0, obj);
                    break;
                }
            }
            if (!placed) {
                this.push(obj); 
            }
        };
    }

    if (typeof Array.prototype.removeByAttr === 'undefined') {
        Array.prototype.removeByAttr = function (attr, arg) {
            if (!this.length) {
                return; 
            }
            for (var i = 0, len = this.length; i < len; i++) {
                if (this[i][attr] === arg) {
                    this.splice(i, 1);
                    break;
                }
            }
        };
    }

    //To support IE8
    if (typeof Array.prototype.filter === 'undefined') {
        Array.prototype.filter = function (fun /*, thisp */) {
            "use strict";

            if (this == null)
                throw new TypeError();

            var t = Object(this);
            var len = t.length >>> 0;
            if (typeof fun != "function")
                throw new TypeError();

            var res = [];
            var thisp = arguments[1];
            for (var i = 0; i < len; i++) {
                if (i in t) {
                    var val = t[i]; // in case fun mutates this
                    if (fun.call(thisp, val, i, t))
                        res.push(val);
                }
            }

            return res;
        };
    }
    return Array;
});

},
'Sage/QuickForms/Design/nls/DataGridControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/DataGridControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Data Grid",
            emptyTableRowStringText: "No records match the selection criteria."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Controls/templates/Lookup.html':"<div class=\"textcontrol lookup\">\r\n    <span id=\"${id}\" class=\"lookup\">\r\n        <input id=\"${id}_LookupText\" class=\"text-with-icons\" required=\"${required}\" type=\"text\" dojoAttachPoint=\"textbox,focusNode\" />\r\n        <a href=\"#\">\r\n            <img id=\"${id}_LookupBtn\" src=\"images/icons/Find_16x16.png\" dojoAttachPoint=\"lookupButton\" alt=\"${buttonToolTip}\" title=\"${buttonToolTip}\" />\r\n        </a>\r\n        \r\n        <img id=\"${id}_btnClearResult\" src=\"images/icons/Delete_16x16.png\" dojoAttachPoint=\"clearButton\" class=\"display-none\" alt=\"${closeButtonToolTip}\" title=\"${closeButtonToolTip}\"/>\r\n    </span>\r\n</div>",
'Sage/UI/Columns/Boolean':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Boolean", [
    'dojox/grid/cells/_base',
    'dojo/i18n',
    'Sage/Utility',
    'dojo/i18n!../nls/Boolean',
    'dojo/_base/declare'
],
function (_base, i18n, Utility, nlsResource, declare) {
    var widget = declare('Sage.UI.Columns.Boolean', _base, {
        constructor: function () {
            var resource = i18n.getLocalization('Sage.UI', 'Boolean');
            dojo.mixin(this, resource);
            this.inherited(arguments);
        },
        formatter: function (val, index) {
            var truthy = {
                'T': true,
                't': true,
                'Y': true,
                'y': true,
                '1': true,
                '+': true
            };
            if (!this.formatString) return (val in truthy) ? this.yesText :
			this.noText;
            var arrVals = this.formatString.split('/');
            if (arrVals.length && arrVals.length === 2) {
                var strVal = (val in truthy) ? arrVals[0] : arrVals[1];
                if (!strVal) {
                    return (val in truthy) ? this.yesText : this.noText;
                } else { return Utility.htmlEncode(strVal); }
            }
            return (val in truthy) ? this.yesText : this.noText;
        }
    });

    return widget;
});
},
'Sage/MainView/SecurityMgr/SecurityProfile':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/SecurityMgr/SecurityProfile", [
        'dojo/i18n!./nls/SecurityProfile',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/lang',
        'dijit/Dialog',
        'dijit/_Widget',
        'Sage/_Templated',
        'dojo/_base/declare',
        'dijit/form/Form',
        'dijit/form/Select',
        'dijit/form/Textarea',
        'dijit/layout/ContentPane',
        'dojox/layout/TableContainer',
        'dojo/i18n!./nls/SecurityProfile'
],
function (i18nStrings, _DialogHelpIconMixin, dojoLang, dijitDialog, _Widget, _Templated, declare) {
    var securityProfile = declare('Sage.MainView.SecurityMgr.SecurityProfile', [_Widget, _Templated], {
        _dialog: false,
        selectedFieldIndex: 1,
        store: false,
        _isNew: false,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div>',
                '<div data-dojo-type="dijit.Dialog" id="{%= $.id %}_dlgSecurityProfile" title="{%= $.securityProfile_Caption %}" dojoAttachPoint="_dialog" dojoAttachEvent="onCancel:_close">',
                    '<div data-dojo-type="dijit.form.Form" id="{%= $.id %}_frmSecurityProfile">',
                        '<table cellspacing="20">',
                            '<tr>',
                                '<td>',
                                    '<label>{%= $.description_Text %}</label>',
                                '</td>',
                                '<td>',
                                    '<input type="text" id="secDlg_Description" dojoAttachPoint="profileDescription" name="profileDescription" required="true" dojoType="dijit.form.TextBox" />',
                                '</td>',
                            '<tr>',
                                '<td>',
                                    '<label>{%= $.profileType_Text %}</label>',
                                '</td>',
                                '<td>',
                                    '<select dojoType="dijit.form.Select" name="profileType" id="secDlg_Type">',
                                        '<option value="U">User</option>',
                                        '<option value="S">System</option>',
                                    '</select>',
                                '</td>',
                            '</tr>',
                        '</table>',
                        '<div align="right">',
                            '<div data-dojo-type="dijit.form.Button" id="{%= $.id%}_btn_OK" name="btn_OK" dojoAttachPoint="btn_OK" dojoAttachEvent="onClick:_okClick">{%= $.ok_Text %}</div>',
                            '<div data-dojo-type="dijit.form.Button" style="margin-left:5px;" id="{%= $.id%}_btn_Cancel" name="btn_Cancel" dojoAttachPoint="btn_Cancel" dojoAttachEvent="onClick:_close">{%= $.btnCancel_Caption %}</div>',
                        '</div>',
                    '</div>',
                '</div>',
            '</div>'
        ]),
        constructor: function (isNew) {
            this._isNew = isNew;
            dojo.mixin(this, i18nStrings);
        },
        show: function () {
            if (isNew) {
                var store = this.getStore();
                store.newItem({
                    onComplete: this.receiveNewProfileToEdit,
                    scope: this
                });
            }
            this._dialog.show();
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('securityprofile');
            }
        },
        getStore: function () {
            if (this.store) {
                return this.store;
            }
            var sDataSvc = Sage.Data.SDataServiceRegistry.getSDataService('system');
            this.store = new Sage.Data.SingleEntrySDataStore({
                service: sDataSvc,
                resourceKind: 'securityProfiles',
                include: [],
                select: ['profileDescription', 'defaultPermission', 'profileType']
            });
            return this.store;
        },
        receiveNewProfileToEdit: function (profile) {
            this.receiveProfileToEdit(profile, true);
        },
        receiveProfileToEdit: function (profile, isNew) {
            this._isNew = (isNew === true);
            var dlg = dijit.byId('secProfileDlg');
            if (dlg) {
                dlg.set('value', profile);
                dlg.show();
            }
        },
        _okClick: function () {
        },
        save: function (options) {
            if (this.store) {
                var dlg = dijit.byId('secProfileDlg');
                var formVals = dlg.get('value');
                for (var prop in formVals) {
                    this.store.setValue(false, prop, formVals[prop]);
                }
                if (this._isNew) {
                    this.store.saveNewEntity(false, options.success, options.failure, this);
                } else {
                    this.store.save(options);
                }
            }
        },
        saveAndClose: function () {
            this.save({
                success: function (entity) {
                    var dlg = dijit.byId('secProfileDlg');
                    dlg.hide();
                    var titlePane = dijit.byId('titlePane');
                    if (titlePane) {
                        titlePane.resetConfiguration();
                    }
                },
                failure: function (err) {
                    alert('The profile could not be saved: ' + err);
                }
            });
        },
        _close: function () {
            this._dialog.destroyRecursive();
        }
    });
    return securityProfile;
});
},
'Sage/QuickForms/Design/nls/PickListControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/PickListControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Pick List"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/CheckBoxBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/CheckBoxBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/TextBox':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/TextBox", [
    'dijit/form/TextBox',
    'dojo/_base/declare'
],
function (TextBox, declare) {
    var widget = declare('Sage.UI.TextBox', TextBox, {
        /**
        * Set the displayed text in the Textbox,
        * checking to see if watermark is specified
        */
        postCreate: function () {
            this.inherited(arguments);
            // reference to the original value
            this._val = this.get('value');
            if (this.get('value') === '' && this._val) {
                this.set('value', this._val);
            }
            this.set('class', 'txt-ss-watermark');
        },
        /**
        * Listener for the onFocus event. if watermark is true
        * it is removed here
        */
        onFocus: function () {
            this.set('value', '');
            this.set('class', 'txt-ss');
        },
        /**
        * When programatically inserting text the onFocus() event isn't fired
        * This method mimics that event so that your hydrated text isn't 
        * watermarked. Pass in a string to display
        * @param {String} val
        */
        forceFocus: function (val) {
            this.set('value', val);
            this.set('class', 'txt-ss');
        },
        /**
        * Listener for the blur event. The control
        * is left alone if text was input or reset to
        * the initial display with watermark preference if blank
        */
        onBlur: function () {
            if (this.get('value') === '') {
                this.set('class', 'txt-ss-watermark');
                this.set('value', this._val);
            }
        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/Editors/nls/ComboBoxAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/ComboBoxAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            itemGroupText: "Items",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            dataSourceText: "Data Source:",
            dataSourceTooltipText: "Source of the data for this control such as another control or an entity.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            itemsText: "Items:",
            itemsTooltipText: "Values the user can select.",
            textFieldText: "Text Field:",
            textFieldTooltipText: "The name of the data source field used to populate the visible text portion of the list items.",
            valueFieldText: "Value Field:",
            valueFieldTooltipText: "The name of the data source field used to populate the value portion of the list items.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            },
            hasItemsText: "Set",
            noItemsText: "Not Set"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/Contact/nls/ContactSearchForDuplicates':function(){
﻿define("Sage/MainView/Contact/nls/ContactSearchForDuplicates", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
           svAccount_Caption: "Account:",
           svCompany_Caption: "Company:",
           svEmail_Caption: "Email:",
           svName_Caption: "Name:",
           svTitle_Caption: "Title:",
           svType_Caption: "Type:",
           svSubType_Caption: "Sub Type:",
           svAccMgr_Caption: "Acct. Mgr.:",
           svHomePhone_Caption: "Home phone:",
           svWorkPhone_Caption: "Work phone:",
           svMobilePhone_Caption: "Mobile phone:",
           svStatus_Caption: "Status:",
           svWebAddress_Caption: "Web:",
           svEntityAccount_Caption: "Account",
           svEntityLead_Caption: "Lead",
           svEntityContact_Contact: "Contact",
           svTollFree_Caption: "Toll free:",
           svIndustry_Caption: "Industry:",
           svDivision_Caption: "Division:",
           svMainPhone_Caption: "Main phone:",
           LeadSummaryView_Title: "Summary View - Lead",
           ContactSummaryView_Title: "Summary View - Contact",
           AccountSummaryView_Title: "Summary View - Account",
           closeText: "Close",
           errorLoadingSummaryView: "An error occured loading summary view: ${0}"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/DateTimePickerBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/DateTimePickerBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            displayDateText: "Display Date:",
            displayDateTooltipText: "Display the date portion.",
            displayTimeText: "Display Time:",
            displayTimeTooltipText: "Display the time portion.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/CalendarUsersListPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/CalendarUsersListPane", [
        'Sage/Data/SDataServiceRegistry',
         'Sage/Data/WritableSDataStore',
        'Sage/Utility',
        'dojo/_base/lang',
        'dojo/_base/array',
        'dojo/i18n',
        'dojo/query',
        'dojo/_base/declare',
        'dojo/data/ItemFileWriteStore',
        'dojox/grid/enhanced/plugins/IndirectSelection',
        'dojox/grid/EnhancedGrid',
        'dojox/grid/enhanced/plugins/Pagination',
        'dojo/i18n!./nls/CalendarUsersListPane'

    ], function (sDataServiceRegistry, writableSDataStore, sUtility, dojoLang, array, i18n, dojoQuery, declare) {
        var calendarUsersListPane = declare('Sage.UI.CalendarUsersListPane', null, {
            Id: null,
            _store: null,
            _grid: null,
            _colors: {},
            _selectedUsers: {},
            _maxUserCount: 4,
            _checkedUsersCount: 0,
            _initialLoad: false,
            _storeItems: [],
            _maxUserCountReached: false,
            _userOptions: {},
            constructor: function (options) {
                this.Id = options.Id;
                this._userOptions = options.options;
                //Predefine these colors and assign to users, when selecting
                this._colors = [{
                    "usercolor": "user2",
                    "set": false
                }, {
                    "usercolor": "user3",
                    "set": false
                },
                {
                    "usercolor": "user4",
                    "set": false
                },
                {
                    "usercolor": "user5",
                    "set": false
                }];
                this._nlsResources = i18n.getLocalization("Sage.UI", "CalendarUsersListPane");
                this._initializeList();
            },
            _where: function () {
                var currentUserId = Sage.Utility.getClientContextByKey('userID');
                if (dojoLang.trim(currentUserId) === 'ADMIN') {
                    return dojo.string.substitute('(AccessId eq \'${0}\' OR AccessId eq \'${1}\' OR AccessId eq \'EVERYONE\') AND Type eq \'User\'', [currentUserId, dojoLang.trim(currentUserId)]);
                }else {
                    return dojo.string.substitute('(AccessId eq \'${0}\' OR AccessId eq \'EVERYONE\') AND Type eq \'User\'', [dojoLang.trim(currentUserId)]);
                }
               
            },
            _getSort: function () {
                var sort = [
                        { attribute: 'Name' }
                    ];
                return sort;
            },
            _getUserColor: function (userId) {
                var color = "";
                if (this._selectedUsers[userId]) {
                    color = this._selectedUsers[userId].usercolor;
                }
                return color;
            },
            _initializeList: function () {
                var headerUserName = this._nlsResources.header_user || 'User';
                var maxUsersErrorMessage = this._nlsResources.maxUsersErrorMessage || 'Sorry, you cannot view more than ${0} calendars (including your own) at one time.  Clear one of the currently-selected calendars and try again.';

                maxUsersErrorMessage = dojo.string.substitute(maxUsersErrorMessage, [this._maxUserCount]);
                var self = this;

                var onComplete = function (data, context) {
                    array.forEach(data, function (item, i) {
                        dojoLang.mixin(item, { usercolor: "", username: item['Name'], userId: item['$key'].substr(0, 12) });
                        self._storeItems.push(item);
                    });
                    //  self._storeItems = data;
                };

                var store = this._store = new Sage.Data.WritableSDataStore({
                    service: sDataServiceRegistry.getSDataService('dynamic'),
                    resourceKind: 'activityresourceviews',
                    //resourcePredicate: this.formatPredicate(entry),
                    //queryName: 'execute',
                    select: ['$key', 'Name'],
                    include: [],
                    sort: [{ attribute: 'Name'}],
                    query: { conditions: this._where() },
                    onComplete: onComplete
                });

                var structure = [
                    {
                        field: 'userId',
                        width: '20px',
                        name: ' ',
                        formatter: function (value) {
                            // var userId = value.substr(0, 12);
                            return "<div class='userStyles " + self._getUserColor(value) + "'></div>";
                        }
                    },
                    {
                        field: 'Name',
                        width: '100%',
                        name: headerUserName
                    }
                ];

                var grid = this._grid = new dojox.grid.EnhancedGrid({
                    id: 'grid',
                    store: store,
                    structure: structure,
                    layout: 'layout',
                    noDataMessage: "<span class='dojoxGridNoData'>No users</span>",
                    keepSelection: true,
                    plugins: { indirectSelection: { headerSelector: false, width: "20px", styles: "text-align: center;"} }

                },
                dojo.byId(this.Id));

                dojo.connect(grid.selection, 'onSelected', function (rowIndex) {
                    if (!self._initialLoad) {
                        if (self._checkedUsersCount < self._maxUserCount) {
                            var item = grid.getItem(rowIndex);
                            self._checkedUsersCount++;
                            var selectedItemUserId = item['$key'].substr(0, 12);
                            var selectedItemUserColor = "";

                            if (self._selectedUsers[selectedItemUserId]) {
                                //item['usercolor'] = self._selectedUsers[item["userId"]]["usercolor"];
                            } else {
                                if (selectedItemUserId === dojoLang.trim(sUtility.getClientContextByKey('userID'))) {
                                    selectedItemUserColor = "user1";
                                } else {
                                    if (!selectedItemUserColor || selectedItemUserColor == "") {
                                        for (var j = 0; j < self._colors.length; j++) {
                                            if (!self._colors[j]['set']) {
                                                selectedItemUserColor = self._colors[j]['usercolor'];

                                                self._colors[j]['set'] = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                                var userObj = {};
                                userObj["userId"] = selectedItemUserId;
                                userObj["usercolor"] = selectedItemUserColor;
                                self._selectedUsers[selectedItemUserId] = userObj;
                                var newUserObj = dojoLang.clone(userObj);

                                //Save the selected user to useroptions
                                self._saveUserOption();
                                //self._store.setValue(item, 'usercolor', userObj["usercolor"]);
                                grid.update();

                                //Refresh schduler and timeless activities list
                                dojo.publish('/sage/ui/calendarUser/selectionChanged/add', [newUserObj, null]);
                            }


                        } else {
                            self._maxUserCountReached = true;
                            grid.rowSelectCell.toggleRow(rowIndex, false);
                            Sage.UI.Dialogs.showError(maxUsersErrorMessage);
                        }
                    } else {
                        if (self._checkedUsersCount < self._maxUserCount) {
                            //  self._checkedUsersCount++;
                        }
                    }

                });
                dojo.connect(grid.selection, 'onDeselected', function (rowIndex) {
                    if (self._maxUserCountReached) {
                        self._maxUserCountReached = false;
                        return;
                    }
                    var item = grid.getItem(rowIndex);
                    var inSelected = false;
                    var selectedItemUserId = item['$key'].substr(0, 12);
                    var selectedItemUserColor = self._selectedUsers[selectedItemUserId].usercolor;
                    if (self._selectedUsers[selectedItemUserId]) {
                        inSelected = true;
                    }
                    if (inSelected) {

                        for (var j = 0; j < self._colors.length; j++) {
                            if (self._colors[j]['usercolor'] === selectedItemUserColor) {
                                self._colors[j]['set'] = false;
                                break;
                            }
                        }
                        delete self._selectedUsers[selectedItemUserId];
                        self._checkedUsersCount--;
                        //Update the useroptions value
                        self._saveUserOption();
                        grid.update();
                        var userObj = {};
                        userObj["userId"] = selectedItemUserId;
                        //Refresh schduler and timeless activities list
                        dojo.publish('/sage/ui/calendarUser/selectionChanged/remove', [userObj, this]);
                    }
                });

                dojo.connect(grid, "_onFetchComplete", function () {
                    self._initialLoad = true;
                    var usersChanged = false;
                    var calendarUsersToAccess = [];
                    var tempSelectedUsers = dojoLang.clone(self._selectedUsers);
                    var rowCount = self._grid.rowCount > self._grid.rowsPerPage ? self._grid.rowsPerPage : self._grid.rowCount;

                    for (var i = 0; i < rowCount; i++) {
                        var item = self._storeItems[i];
                        var userId = item['$key'].substr(0, 12);
                        if (self._selectedUsers[userId]) {
                            calendarUsersToAccess.push(userId);
                            if (!self._grid.selection.selected[i]) {
                                if (self._checkedUsersCount < self._maxUserCount) {
                                    self._grid.rowSelectCell.toggleRow(i, true);
                                    self._checkedUsersCount++;
                                }
                            }
                        }
                    }

                    //Validate the selected users list based on the calendar security
                    for (var j in tempSelectedUsers) {
                        var uId = dojoLang.trim(tempSelectedUsers[j]["userId"].toString());
                        var userColor = dojoLang.trim(tempSelectedUsers[j]["usercolor"].toString());
                        if (array.indexOf(calendarUsersToAccess, uId) < 0) {
                            delete self._selectedUsers[uId];
                            //Make the deleted user's color available for to assign
                            for (var k = 0; k < self._colors.length; k++) {
                                if (self._colors[k]['usercolor'] === userColor) {
                                    self._colors[k]['set'] = false;
                                    break;
                                }
                            }
                            usersChanged = true;
                        }
                    }

                    if (usersChanged) {
                        //Update the useroptions value
                        self._saveUserOption();
                    }

                    self._initialLoad = false;

                    if (self._selectedUsers) {
                        var newObj = dojoLang.clone(self._selectedUsers);
                        dojo.publish('/sage/ui/calendarUserList/loaded', [newObj, null]);
                        self._grid.update();
                    }


                });

                //Disable column sorting for color legend column
                self._grid.canSort = function (col) {
                    if (Math.abs(col) == 2) { return false; } else { return true; }
                };
                if (this._userOptions["rememberusers"]) {
                    this._loadCalendarUserListOptions();
                } else {
                    var data = {};
                    data["value"] = null;
                    this._receivedCalendarUserListOptions(data);
                }

            },
            _loadCalendarUserListOptions: function () {
                var optionsSvc = Sage.Services.getService('UserOptions');
                if (optionsSvc) {
                    optionsSvc.get('CalendarUsers', 'Calendar', this._receivedCalendarUserListOptions, null, this);
                }
            },
            _receivedCalendarUserListOptions: function (data) {
                if (data != null) {
                    if (data) {
                        var userListOption = data['value'];
                        //By Default, the current user will be added to the list with default color set to "user1"
                        var currentUserId = sUtility.getClientContextByKey('userID');
                        currentUserId = dojoLang.trim(currentUserId);
                        if (userListOption == null || userListOption == "") {
                            userListOption = currentUserId + "|" + "user1";
                        } else if (userListOption.indexOf(currentUserId) < 0) {
                            userListOption += "," + currentUserId + "|" + "user1";
                        }
                        dojo.cookie('selectedCalendarUsers', userListOption);
                        this._setSelectedUsers(userListOption);
                    }
                }
                if (this._selectedUsers) {
                    this._grid.startup();
                }
            },
            _saveUserOption: function (value) {
                var optionsSvc = Sage.Services.getService('UserOptions');
                if (optionsSvc) {
                    var userIds = "";
                    if (this._selectedUsers) {
                        for (var i in this._selectedUsers) {
                            if (userIds != "") userIds += ",";
                            userIds += dojoLang.trim(this._selectedUsers[i]["userId"].toString());
                            userIds += "|";
                            if (this._selectedUsers[i]["usercolor"])
                                userIds += this._selectedUsers[i]["usercolor"].toString();
                        }
                    }
                    optionsSvc.set('CalendarUsers', 'Calendar', userIds, null, null, this);

                }
            },
            _setSelectedUsers: function (userListOption) {
                if (userListOption != null) {
                    var userOptions = userListOption.split(",");
                    var userItem;
                    var userId, userColor;
                    for (var i = 0; i < userOptions.length; i++) {
                        userItem = userOptions[i];
                        if (userItem) {
                            userId = userItem.split("|")[0];
                            userColor = userItem.split("|")[1];

                            if (!userColor) {
                                for (var j = 0; j < this._colors.length; j++) {
                                    if (!this._colors[j]['set']) {
                                        userColor = this._colors[j]['usercolor'];
                                        this._colors[j]['set'] = true;
                                        break;
                                    }
                                }
                            } else {
                                for (var k = 0; k < this._colors.length; k++) {
                                    if (this._colors[k]['usercolor'] === userColor) {
                                        this._colors[k]['set'] = true;
                                        break;
                                    }
                                }
                            }
                            var userObj = {};
                            userObj["userId"] = userId;
                            userObj["usercolor"] = userColor;
                            this._selectedUsers[userId] = userObj;
                        }

                    }

                }
            }
        });
        return calendarUsersListPane;
    });


},
'Sage/QuickForms/Design/NumericControlDesigner':function(){
define("Sage/QuickForms/Design/NumericControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/NumericBasicPropertyEditor',
    './Editors/NumericAdvancedPropertyEditor',
    'dojo/i18n!./nls/NumericControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    NumericBasicPropertyEditor,
    NumericAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.NumericControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            NumericBasicPropertyEditor,
            NumericAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-numeric',
        helpTopicName: 'Numeric_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Numeric',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'Text');
            });
        },

        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getDecimalDigitsAttr: function() {
            return lang.getObject('DecimalDigits.DecimalDigits', false, this.entry);
        },
        _setDecimalDigitsAttr: function(value) {
            lang.setObject('DecimalDigits.DecimalDigits', value, this.entry);
        },
        _getFormatTypeAttr: function() {
            return lang.getObject('FormatType', false, this.entry);
        },
        _setFormatTypeAttr: function(value) {
            lang.setObject('FormatType', value, this.entry);
        },
        _getMaxLengthAttr: function() {
            return lang.getObject('MaxLength', false, this.entry);
        },
        _setMaxLengthAttr: function(value) {
            lang.setObject('MaxLength', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },
        _getStrictAttr: function() {
            return lang.getObject('DecimalDigits.Strict', false, this.entry);
        },
        _setStrictAttr: function(value) {
            lang.setObject('DecimalDigits.Strict', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('decimalDigits', -1);

            this.set('formatType', 'Number');
            this.set('maxLength', propertyContext['data'].length || -1);
            this.set('strict', false);
            this.set('required', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'Text',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || this.get('text') || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/TaskPane/nls/AccountingTasksTasklet':function(){
﻿define("Sage/TaskPane/nls/AccountingTasksTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        updatePricingRecords: 'You may only select one record when performing this option.'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/nls/DataGridBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/DataGridBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            dataText: "Data",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            pageSizeText: "Page Size:",
            pageSizeTooltipText: "The number of grid records to display on a single page.",
            resizableColumnsText: "Resizable Columns:",
            resizableColumnsTooltipText: "Allows user to resize columns.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/SpeedSearch':function(){
require({cache:{
'url:Sage/templates/SpeedSearch.html':"<span>\r    <!-- the textbox -->\r    <input type=\"text\" id=\"txt_ss\" />\r    <!--the image button-->\r    <button id='ss-btn-image' type=\"button\" style=\"font-size:10px\"></button>\r    <button id='ss-btn-toggle' type=\"button\" style=\"font-size:10px\"></button>\r</span>\r"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SpeedSearch", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dojo/i18n',
       'dojo/text',
       'dijit/_Widget',
       'Sage/UI/TextBox',
       'Sage/UI/ImageButton',
       'Sage/UI/ToggleButton',
       'dojo/i18n!./nls/SpeedSearch',
       'dojo/text!../templates/SpeedSearch.html',
       'dojo/_base/declare'
],
function (_TemplatedMixin, _WidgetsInTemplateMixin, i18n, text, _Widget, TextBox, ImageButton, ToggleButton, nls, template, declare) {
    //dojo.requireLocalization('Sage.UI', 'SpeedSearch');

    /**
    * @class Sage.UI.SpeedSearch
    * This class is a composite object made up of:
    * @see Sage.UI.TextBox
    * @see Sage.UI.ImageButton
    * @see Sage.UI.ToggleButton
    */
    var speedSearchWidget = declare('Sage.UI.SpeedSearch', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        templateString: template,
        standardText: 'standard',
        advancedText: 'advanced',
        speedSearchText: 'SpeedSearch',
        /**
        * Mixin the localization object for this locale
        */
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization('Sage.UI', 'SpeedSearch'));
            this.inherited(arguments);
        },
        /**
        * create instances of the cosumed UI elemets and display them
        */
        postCreate: function () {

            var that = this;
            // Are we on the SpeedSearch page?
            var re = /SpeedSearch\.aspx|speedsearch\.aspx/;
            this.isSS = re.test(window.location.pathname);
            // grab a ref to the query string
            this.QS = window.location.search;
            // use dojo's method to convert to hash if present
            if (this.QS) {
                this.queryObject = dojo.queryToObject(this.QS.substring(1, this.QS.length));
            }

            var toggleBtn = new ToggleButton({
                showLabel: true,
                checked: false,
                'class': 'quick-speedsearch-toggle',
                onClick: function () {
                    if (this.getValue() === that.standardText) {
                        this.setValue(that.advancedText);
                        if (that.isSS) { that.toggleAdv(); }
                    } else {
                        this.setValue(that.standardText);
                        if (that.isSS) { that.toggleAdv(); }
                    }
                },
                label: this.queryObject ? this.queryObject.type :
                    this.standardText
            },
            "ss-btn-toggle");

            toggleBtn.set('class', 'displaynone');
            //wen the SS page is loaded, open the Advanced div if selected
            if (toggleBtn.getValue() === this.advancedText && this.isSS) {
                this.toggleAdv();
            }

            var txtbox = new TextBox({
                watermark: true,
                value: this.speedSearchText,
                'class': 'quick-speedsearch-text',
                onKeyDown: function (event) {
                    if (event.keyCode === 13) {
                        that._goSearch(txtbox.getValue(), toggleBtn.getValue());
                    }
                }
            }, 'txt_ss');

            // if there is a query string object hydrate the searchbox
            // and force focus it
            if (this.queryObject) { txtbox.forceFocus(this.queryObject.terms); }

            var imgBtn = new ImageButton({
                imageClass: 'icon_SpeedSearch_16x16',
                'class': 'quick-speedsearch-button',
                onClick: function () {
                    that._goSearch(txtbox.getValue(), toggleBtn.getValue());
                }
            }, 'ss-btn-image');


            this.inherited(arguments);
        },
        /**
        * Utility method which appends arguments to the query string
        * and sends the user to the Speed Search.aspx page
        */
        _goSearch: function (terms, type) {
            if (terms !== this.speedSearchText) {
                window.location = "SpeedSearch.aspx?terms=" + terms +
                    "&type=" + type;
            }
        },
        toggleAdv: function () {
            ToggleAdvanced();
        }
    });

    return speedSearchWidget;
});

},
'Sage/QuickForms/Design/Editors/nls/CurrencyBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/CurrencyBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/nls/EditableGrid':function(){
﻿define("Sage/UI/nls/EditableGrid", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            unsavedDataText: '*unsaved data',
            addText: 'Add',
            deleteText: 'Delete',
            saveText: 'Save',
            cancelText: 'Cancel',
            noSelectionsText: 'There are no records selected.',
            confirmDeleteFmtTxt: 'Are you sure you want to delete these ${0} items?',
            yesText: 'Yes',
            noText: 'No',
            createItemsInvalidArrayText: 'The items parameter in Sage.UI.EditableGrid.createItems() should be an array.',
            recordCountFormatString: 'Records ${0} - ${1} of ${2}',
            noDataMessage: 'No records match the selection criteria.',
            dirtyDataMessage: 'You have unsaved data.  If you continue you will lose the changes you have made.',
            okText: 'OK'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/SecurityMgr/nls/SecurityProfile':function(){
﻿define("Sage/MainView/SecurityMgr/nls/SecurityProfile", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            securityProfile_Caption: 'Security Profile',
            btnCancel_Caption: 'Cancel',
            ok_Text: 'OK',
            description_Text: 'Description',
            profileType_Text: 'Profile Type'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Data/ProxySDataStore':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/ProxySDataStore", [
        'Sage/Data/BaseSDataStore',
        'Sage/Data/SDataServiceRegistry',
        'dojo/_base/declare'
],
function (BaseSDataStore, SDataServiceRegistry, declare) {
    var proxySDataStore = declare('Sage.Data.ProxySDataStore', BaseSDataStore, {
        constructor: function (o) {
            this.singleResource = null;
            this._request = null;
            this._hasValidService = (typeof this.service !== 'undefined');
        },
        getCollectionRequestObj: function (context) {
            if (!this._hasValidService) {
                return false;
            }
            var request = this.inherited(arguments);
            if (typeof this.getResourcePredicate === 'function') {
                var idx = (request.uri.getPathSegment(Sage.SData.Client.SDataUri.ResourcePropertyIndex)) ?
                    Sage.SData.Client.SDataUri.ResourcePropertyIndex : request.uri.pathSegments.length - 1;
                var resourceSegment = request.uri.getPathSegment(idx);
                var pred = this.getResourcePredicate.call(this);
                if (typeof pred !== 'undefined' && pred !== '') {

                    // if there aren't any spaces, and there aren't any quotes, quote it...
                    if ((pred.indexOf(' ') < 0) && ((pred.replace(/[\"\']/, "") === pred))) {
                        pred = "'" + pred + "'";
                    }
                    resourceSegment['predicate'] = pred;
                    request.uri.setPathSegment(idx, resourceSegment);
                } else {
                    if (typeof console !== 'undefined') {
                        console.warn('Proxy Data Store could not create valid URL: Missing Predicate');
                        return false;
                    }
                }
            }
            if (this.pathSegments && this.pathSegments.length > 0) {
                var nextIdx = request.uri.pathSegments.length;
                for (var i = 0; i < this.pathSegments.length; i++) {
                    request.uri.setPathSegment(nextIdx, this.evaluatePathSegment(this.pathSegments[i]));
                    nextIdx++;
                }
            }
            return request;
        },
        fetch: function (context) {
            if (context.queryOptions && context.queryOptions.singleResourceRequest) {
                return this.returnCollectionProperty(context, context.queryOptions.property);
            }
            return this.inherited(arguments);
        },
        verifyService: function () {
            if (!this.service) {
                this.service = SDataServiceRegistry.getSDataService('proxy', true);
            }
            this._hasValidService = true;
            if (typeof this.getAppId === 'function') {
                var appid = this.getAppId();
                if (typeof appid !== 'undefined' && appid !== '') {
                    this.service.setDataSet(appid);
                } else {
                    if (typeof console !== 'undefined') {
                        console.warn('Proxy Data Store could not create valid URL: Missing Proxy Mapping Id');
                        this._hasValidService = false;
                    }
                }
            }
        },
        returnCollectionProperty: function (context, propertyName) {
            if (this._entity.hasOwnProperty(propertyName) && this._entity[propertyName] != null) {
                var list = this._entity[propertyName].$resources;
                if (typeof list !== 'unknown') {
                    if (context.onBegin) {
                        context.onBegin.call(context.scope || this, list.length, context);
                    }
                    if (context.onComplete) {
                        context.onComplete.call(context.scope || this, list, context);
                    }
                }
            }
            if (context.onError) {
                context.onError.call(context.scope || this, "Invalid data url", context);
            }
        },
        evaluatePathSegment: function (segmentItem) {
            if (typeof segmentItem === 'string') {
                return { 'text': segmentItem };
            }
            if (typeof segmentItem.getPredicate === 'function') {
                return { 'text': segmentItem.text, 'predicate': segmentItem.getPredicate() };
            }
            if (typeof segmentItem.getPredicate === 'string') {
                return { 'text': segmentItem.text, 'predicate': segmentItem.getPredicate };
            }
            return segmentItem;
        },
        receiveSingleResource: function (data) {
            onGetSingleResource(data);
        },
        _getRequest: function () {
            this.verifyService();
            if (this._request === null) {
                var request = new Sage.SData.Client.SDataSingleResourceRequest(this.service);
                request.setResourceKind(this.resourceKind);
                if (typeof this.getResourcePredicate === 'function') {
                    var idx = request.uri.getPathSegment(Sage.SData.Client.SDataUri.ResourcePropertyIndex) || request.uri.pathSegments.length - 1;
                    var resourceSegment = request.uri.getPathSegment(idx);
                    var pred = this.getResourcePredicate.call(this);
                    if (typeof pred !== 'undefined' && pred !== '') {

                        // if there aren't any spaces, and there aren't any quotes, quote it...
                        if ((pred.indexOf(' ') < 0) && ((pred.replace(/[\"\']/, "") === pred))) {
                            pred = "'" + pred + "'";
                        }
                        resourceSegment['predicate'] = pred;
                        request.uri.setPathSegment(idx, resourceSegment);
                    } else {
                        if (typeof console !== 'undefined') {
                            console.warn('Proxy Data Store could not create valid URL: Missing Predicate');
                            return false;
                        }
                    }
                }
                if (this.pathSegments && this.pathSegments.length > 0) {
                    var nextIdx = request.uri.pathSegments.length;
                    for (var i = 0; i < this.pathSegments.length; i++) {
                        request.uri.setPathSegment(nextIdx, this.evaluatePathSegment(this.pathSegments[i]));
                        nextIdx++;
                    }
                }
                request.setQueryArgs({
                    'select': this.select.join(','),
                    'include': this.include.join(',')
                });
                if (this.includeContent && this.includeContent === true) {
                    request.setQueryArg({ '_includeContent': true });
                }
                this._request = request;
            }
            return this._request;
        },
        getSingleResource: function () {
            var request = this._getRequest();
            request.read({
                success: dojo.hitch(this, this.onSuccessLoad),
                failure: dojo.hitch(this, this.onFailure)
            });
        },
        onSuccessLoad: function (data) {
            if (data) {
                if (typeof console !== 'undefined') {
                    console.debug('onSuccessLoad [WITH] DATA');
                }
                this._entity = data;
                this.onGetSingleResource(data);
            }
            else {
                if (typeof console !== 'undefined') {
                    console.warn('onSuccessLoad [NO] DATA');
                }
                var empty = { $resources: [] };
                this._entity = empty;
                this.onGetSingleResource(empty);
            }
        },
        onGetSingleResource: function (data) { }
    });
    return proxySDataStore;
});
},
'Sage/Utility':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility", [
        'dojo/parser',
        'Sage/Data/SDataServiceRegistry',
        'Sage/UI/Dialogs',
        'Sage/Utility/ErrorHandler', // Circular
        'dojox/validate/regexp',
        'dojo/i18n!./Utility/nls/Utility',
        'dojo/ready',
        'dojo/string',
        'dojo/_base/array'
    ],
function (
        parser,
        SDataServiceRegistry,
        Dialogs,
        ErrorHandler,
        regexp,
        resource,
        ready,
        dString,
        array
    ) {
    Sage.namespace('Utility');
    dojo.mixin(Sage.Utility, {
        _timeZones: null,
        nameToPathCache: {},
        nlsStrings: resource,
        regexp: {
            // The invalidInput RegExp is designed to provide input validation in order to avoid the
            // "A potentially dangerous Request.Form value was detected from the client..." error.
            // The error is the result of a System.Web.HttpRequestValidationException when form fields,
            // etc., contain character sequences Microsoft considers dangerous. The error will
            // occur under the following conditions if the requestValidationMode has [not] been set to
            // ASP.NET 2.0 in Web.Config, etc.:
            //
            // 1. If the < (less than sign) is followed by a letter, ! (exclamation), / (slash), or
            //    ? (question mark) (i.e. if it looks like a tag or an HTML comment).
            // 2. If the & (ampersand) is followed by a # (pound sign) (e.g. &#169;).  
            //
            // The logic that introduced the HttpRequestValidationException began with ASP.NET 4.0 and
            // is the result of a call to System.Web.HttpRequest.ValidateString() (internal method).
            // It is considered a breaking change with ASP.NET 4.0 (see http://www.asp.net/whitepapers/aspnet4/breaking-changes).
            //
            // The invalidInput RegExp is designed to be used with the dijit.form.ValidationTextBox
            // control by setting its regExp property.
            invalidInput: '^((?!(<([!\\/?A-Za-z])|(&#))).)*$',

            // The invalidInputFmt format string is provided so that another RegExp can be combined with
            // the invalidInput RegExp. See example in joinInvalidInputRegExpWith().
            invalidInputFmt: '^((?!(<([!\\/?A-Za-z])|(&#)|(${0}))).)*$',

            // The invalidInputMatch RegExp can be used to return the matches in an invalid input string,
            // as described in the invalidInput RegExp. See example in getInvalidInputMatches().
            invalidInputMatch: '<[!\\/?A-Za-z]|&#'
        },
        // Combines the aRegExp with the invalidInput RegExp for use with the dijit.form.ValidationTextBox.
        joinInvalidInputRegExpWith: function (aRegExp) {
            if (aRegExp && dojo.isString(aRegExp) && aRegExp.length > 0) {
                return dString.substitute(this.regexp.invalidInputFmt, [aRegExp]);
            }
            return aRegExp;
        },
        // Gets all matches in the string s that match the RegExp invalidInputMatch.
        getInvalidInputMatches: function (s) {
            if (s && dojo.isString(s) && s.length > 0) {
                var matches = s.match(this.regexp.invalidInputMatch, 'g');
                if (matches && dojo.isArray(matches)) {
                    return matches;
                }
            }
            return [];
        },
        // Returns true if the string s does not contain invalidInput character sequences (or if s is null).
        // Returns false if s is not a string or if s contains invalidInput character sequences.
        // Note: It's ok to POST data that has invalid input characters, as long as they are [not] part of
        // a Request.Form POST (e.g. application/x-www-form-urlencoded). For example, if the invalid characters
        // are in JSON data that is part of an application/json POST, there is no need to call the isSafeForPosting() 
        // function against those strings.
        isSafeForPosting: function (s) {
            if (s && dojo.isString(s)) {
                if (s.length === 0) {
                    return true;
                }
                var match = s.match(this.regexp.invalidInputMatch);
                if (match === null) {
                    return true;
                }
                if (dojo.isArray(match) && match.length === 0) {
                    return true;
                }
            }
            if (!s && s === null) {
                return true;
            }
            return false;
        },
        makeSafeForPosting: function (s) {
            var matches = this.getInvalidInputMatches(s);
            if (matches && dojo.isArray(matches) && matches.length > 0) {
                array.forEach(matches, function (match) {
                    var safeValue = match;
                    if (match.length >= 2) {
                        // e.g. replace '<!' with '< !', etc.
                        // e.g. 'Hello<!World Hello</World Hello<?World' becomes 'Hello< !World Hello< /World Hello< ?World'
                        safeValue = match.substr(0, 1) + ' ' + match.substr(1);
                    }
                    if (safeValue !== match) {
                        s = s.replace(match, safeValue);
                    }
                });
            }
            return s;
        },
        nameToPath: function (name) {
            var parts, path, i, match;

            if (typeof name !== 'string') {
                return [];
            }

            if (Sage.Utility.nameToPathCache[name]) {
                return Sage.Utility.nameToPathCache[name];
            }

            parts = name.split('.');
            path = [];
            for (i = 0; i < parts.length; i++) {
                match = parts[i].match(/([a-zA-Z0-9_$]+)\[([^\]]+)\]/);
                if (match) {
                    path.push(match[1]);
                    if (/^\d+$/.test(match[2])) {
                        path.push(parseInt(match[2], 10));
                    } else {
                        path.push(match[2]);
                    }
                }
                else {
                    path.push(parts[i]);
                }
            }
            return (Sage.Utility.nameToPathCache[name] = path.reverse());
        },
        expand: function (scope, expression) {
            if (typeof expression === 'function') {
                return expression.apply(scope, Array.prototype.slice.call(arguments, 2));
            } else {
                return expression;
            }
        },
        getValue: function (o, name, defaultValue) {
            defaultValue = (typeof defaultValue !== 'undefined' && defaultValue !== null) ? defaultValue : '';
            var path = Sage.Utility.nameToPath(name).slice(0);
            var current = o;
            while (current && path.length > 0) {
                var key = path.pop();
                if (typeof current[key] !== 'undefined' && current[key] !== null) current = current[key]; else return defaultValue;
            }
            return current;
        },
        setValue: function (o, name, val) {
            var current = o;
            var path = Sage.Utility.nameToPath(name).slice(0);
            while ((typeof current !== "undefined") && path.length > 1) {
                var key = path.pop();
                if (path.length > 0) {
                    var next = path[path.length - 1];
                    current = current[key] = (typeof current[key] !== "undefined") ? current[key] : (typeof next === "number") ? [] : {};
                }
            }
            if (current != null && typeof path[0] !== "undefined")
                current[path[0]] = val;
            return o;
        },
        getPlainText: function (node) {
            // returns formatted innerText similar to IE,
            // but works for all browsers

            var normalize = function (a) {
                // clean up double line breaks and spaces
                if (!a) return "";
                return a.replace(/ +/g, " ")
                        .replace(/[\t]+/gm, "")
                        .replace(/[ ]+$/gm, "")
                        .replace(/^[ ]+/gm, "")
                        .replace(/\n+/g, "\n")
                        .replace(/\n+$/, "")
                        .replace(/^\n+/, "")
                        .replace(/\nNEWLINE\n/g, "\n\n")
                        .replace(/NEWLINE\n/g, "\n\n"); // IE
            };
            var removeWhiteSpace = function (node) {
                // getting rid of empty text nodes
                var isWhite = function (node) {
                    return !(/[^\t\n\r ]/.test(node.nodeValue));
                };
                var ws = [];
                var findWhite = function (node) {
                    for (var i = 0; i < node.childNodes.length; i++) {
                        var n = node.childNodes[i];
                        if (n.nodeType == 3 && isWhite(n)) {
                            ws.push(n);
                        } else if (n.hasChildNodes()) {
                            findWhite(n);
                        }
                    }
                };
                findWhite(node);
                for (var i = 0; i < ws.length; i++) {
                    ws[i].parentNode.removeChild(ws[i]);
                }

            };
            var sty = function (n, prop) {
                // Get the style of the node.
                // Assumptions are made here based on tagName.
                if (n.style[prop]) return n.style[prop];
                var s = n.currentStyle || n.ownerDocument.defaultView.getComputedStyle(n, null);
                if (n.tagName == "SCRIPT") return "none";
                if (!s[prop]) return "LI,P,TR".indexOf(n.tagName) > -1 ? "block" : n.style[prop];
                if (s[prop] == "block" && n.tagName == "TD") return "feaux-inline";
                return s[prop];
            };

            var blockTypeNodes = "table-row,block,list-item";
            var isBlock = function (n) {
                // diaply:block or something else
                var s = sty(n, "display") || "feaux-inline";
                if (blockTypeNodes.indexOf(s) > -1) return true;
                return false;
            }
            var recurse = function (n) {
                // Loop through all the child nodes
                // and collect the text, noting whether
                // spaces or line breaks are needed.
                if (/pre/.test(sty(n, "whiteSpace"))) {
                    t += n.innerHTML
                        .replace(/\t/g, " ")
                        .replace(/\n/g, " "); // to match IE
                    return "";
                }
                var s = sty(n, "display");
                if (s == "none") return "";
                var gap = isBlock(n) ? "\n" : " ";
                t += gap;
                for (var i = 0; i < n.childNodes.length; i++) {
                    var c = n.childNodes[i];
                    if (c.nodeType == 3) t += c.nodeValue;
                    if (c.childNodes.length) recurse(c);
                }
                t += gap;
                return t;
            }
            // Use a copy because stuff gets changed
            node = node.cloneNode(true);
            // Line breaks aren't picked up by textContent
            node.innerHTML = node.innerHTML.replace(/<br>/g, "\n");

            // Double line breaks after P tags are desired, but would get
            // stripped by the final RegExp. Using placeholder text.
            var paras = node.getElementsByTagName("p");
            for (var i = 0; i < paras.length; i++) {
                paras[i].innerHTML += "NEWLINE";
            }

            var t = "";
            removeWhiteSpace(node);

            return normalize(recurse(node));
        },
        /*
        debounce taken from underscore.js.
            
        Underscore.js 1.3.3
        (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
        Underscore is freely distributable under the MIT license.
        Portions of Underscore are inspired or borrowed from Prototype,
        Oliver Steele's Functional, and John Resig's Micro-Templating.
        For all details and documentation:
        http://documentcloud.github.com/underscore
        */
        debounce: function (func, wait, immediate) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                if (immediate && !timeout) func.apply(context, args);
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },
        /*
        * Original version of .extend from...
        * jQuery 1.2.6 - New Wave Javascript
        *
        * Copyright (c) 2008 John Resig (jquery.com)
        * Dual licensed under the MIT (MIT-LICENSE.txt)
        * and GPL (GPL-LICENSE.txt) licenses.
        *
        * $Date: 2008-05-24 14:22:17 -0400 (Sat, 24 May 2008) $
        * $Rev: 5685 $
        */
        extend: function () {
            // copy reference to target object
            var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;

            // Handle a deep copy situation
            if (target.constructor == Boolean) {
                deep = target;
                target = arguments[1] || {};
                // skip the boolean and the target
                i = 2;
            }

            // Handle case when target is a string or something (possible in deep copy)
            if (typeof target != "object" && typeof target != "function")
                target = {};

            // Single parameter extends Sage.Utilities 
            if (length == i) {
                target = this;
                --i;
            }

            for (; i < length; i++)
            // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null)
                // Extend the base object
                    for (var name in options) {
                        var src = target[name], copy = options[name];

                        // Prevent never-ending loop
                        if (target === copy)
                            continue;

                        // Recurse if we're merging object values
                        if (deep && copy && typeof copy == "object" && !copy.nodeType)
                            target[name] = Sage.Utility.extend(deep,
                        // Never move original objects, clone them
							src || (copy.length != null ? [] : {})
						, copy);

                        // Don't bring in undefined values
                        else if (copy !== undefined)
                            target[name] = copy;

                    }

            // Return the modified object
            return target;
        },
        getCurrentEntityId: function () {
            var contextservice = Sage.Services.getService('ClientEntityContext');
            var eContext = contextservice.getContext();
            return eContext.EntityId;
        },
        getClientContextByKey: function (key) {
            var res = '';
            if (Sage.Services) {
                var contextservice = Sage.Services.getService("ClientContextService");
                if ((contextservice) && (contextservice.containsKey(key))) {
                    res = contextservice.getValue(key);
                }
            }
            return res;
        },
        getVirtualDirectoryName: function () {
            // returns the name of the virtual directory from the url to the current page.
            var reg = new RegExp(window.location.host + "/([A-Za-z0-9\-_]+)/");
            var arr = reg.exec(window.location.href);
            if (arr)
                return arr[1];
            return '';
        },
        getSDataService: function (contract, keepUnique, useJson, cacheResult) {
            console.warn('Deprecated: Sage.Utility.getSDataService(). Use: Sage.Data.SDataServiceRegistry.getSDataService()');
            // returns the instance of the service for the specific contract requested.
            // For example, if the data source needs an SData service for the dynamic or system feeds,
            // the code would pass 'dynamic' or 'system' to this method.
            //the proxy datastore needs to always keep it's own unique instance of the service.
            return Sage.Data.SDataServiceRegistry.getSDataService(contract, keepUnique, useJson, cacheResult);
        },
        // BEGIN Ajax/Dojo Patch.  Notifies dojo to reparse partial postback content. 
        appLoadHandler: function (sender, args) {
            Sys.WebForms.PageRequestManager.getInstance().add_pageLoaded(Sage.Utility.pageLoaded);
            Sys.WebForms.PageRequestManager.getInstance().add_pageLoading(Sage.Utility.pageLoading);
            Sys.WebForms.PageRequestManager.getInstance().add_initializeRequest(Sage.Utility.showRequestIndicator);
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(Sage.Utility.hideRequestIndicator);
            Sys.WebForms.PageRequestManager.getInstance().add_initializeRequest(AutoLogout.resetTimer);
        },
        pageLoaded: function (sender, args) {
            var updatedPanels = args.get_panelsUpdated();
            if (typeof (updatedPanels) === "undefined") {
                return;
            }
            //call the dojo parser on the newly loaded html
            //in each panel so the new elements are instantiated
            for (var i = 0; i < updatedPanels.length; i++) {
                dojo.parser.parse(updatedPanels[i]);
            }
        },
        pageLoading: function (sender, args) {
            var updatedPanels = args.get_panelsUpdating();
            if (typeof (updatedPanels) === "undefined") {
                return;
            }
            //remove all the widgets in the outgoing panel
            //so the dojo parser doesn't throw
            //an error when it reloads them.
            for (var i = 0; i < updatedPanels.length; i++) {
                var panel = updatedPanels[i],
                widgets = dijit.findWidgets(panel);
                // can use preserveDom (true) here as the update panel load will destroy the DOM for us.
                // some DOM will be destroyed, regardless.
                dojo.forEach(widgets, function (widget) {
                    widget.destroyRecursive(true);
                });
            }
        },
        destroyWidget: function (widget) {
            var widgetId = dojo.attr(widget, 'widgetId');
            if (dijit.byId(widgetId)) {
                dijit.byId(widgetId).destroyRecursive();
            }
        },
        // END Ajax/Dojo Patch. 
        //Begin ajax request indicator handling.
        showRequestIndicator: function () {
            var elem = document.getElementById("asyncpostbackindicator");
            if (elem) { elem.style.visibility = "visible"; }
        },
        // Ajax endRequest handler
        hideRequestIndicator: function (sender, args) {
            var elem = dojo.byId("asyncpostbackindicator");
            if (elem) { elem.style.visibility = "hidden"; }
            ErrorHandler.handleEndRequestError(args);
        },
        //end ajax request indicator handling.
        // BEGIN - common numeric / currency functions
        isAllowedNavigationKey: function (charCode) {
            return (charCode == 8   // backspace
            || charCode == 9    // tab
            || charCode == 46   // delete
            || charCode == 37   // left arrow
            || charCode == 39); // right arrow
        },
        restrictDecimalDigit: function (value, places, decimalSeparator) {
            var retVal = value;
            if (typeof places === 'undefined') {
                places = Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalDigits;
            }
            // If the places param has provided a range, find the end of the range and use that
            // as the length to restrict to.
            if (places.length > 1) {
                var range = places.split(',');
                places = parseInt(range[1]);
            }
            if (typeof decimalSeparator === 'undefined') {
                decimalSeparator = Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalSeparator;
            }
            var restriction = value.indexOf(decimalSeparator) + 1 + places;
            if (places === 0) {
                restriction = restriction - 1;
            }
            //To handle negative
            if (value.indexOf(")") > 0) {
                restriction += 1;
            }
            if (value.lastIndexOf(decimalSeparator) > -1) {
                retVal = value.substr(0, restriction);
            }
            return retVal;

        },
        maximizeDecimalDigit: function (value, decimalDigits, decimalSeparator) {
            var diff;
            var retVal = value;
            if (typeof decimalDigits === 'undefined') {
                decimalDigits = Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalDigits;
            }
            if (typeof decimalSeparator === 'undefined') {
                decimalSeparator = Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalSeparator;
            }
            //If there isn't a separator but we require a decimal digit position, place the separator before adding digits.
            if (decimalDigits > 0 && value.lastIndexOf(decimalSeparator) == -1 && value.length > 0) {
                retVal = [value, decimalSeparator].join('');
            }

            var restriction = retVal.lastIndexOf(decimalSeparator) + 1 + decimalDigits;
            if (retVal.lastIndexOf(decimalSeparator) > -1) {
                diff = restriction - retVal.length;
                if (diff > 0) {
                    for (var i = 0; i < diff; i++) {
                        retVal += 0;
                    }
                }
            }
            return retVal;
        },
        restrictToNumber: function (e, /*currency, number, percent*/type) {
            var SystemFormat = Sys.CultureInfo.CurrentCulture.numberFormat;
            var code = e.charCode || e.keyCode;
            var keyChar = e.keyChar;

            if (e.keyCode && Sage.Utility.isAllowedNavigationKey(e.keyCode)) return true;
            // 0-9 Keyboard and numberpad.
            if ((code >= 48 && code <= 57 && !e.shiftKey) || (code >= 96 && code <= 105 && !e.shiftKey)) return true;
            // Negative, ".", "-"
            if (keyChar === SystemFormat.NegativeSign || code == 109 || code == 110) return true;
            //Separators
            switch (type) {
                case 'currency':
                    if (keyChar == SystemFormat.CurrencyGroupSeparator || keyChar == SystemFormat.CurrencyDecimalSeparator) return true;
                    break;
                case 'percent':
                    if (keyChar == SystemFormat.PercentGroupSeparator || keyChar == SystemFormat.PercentDecimalSeparator) return true;
                    break;
                default: //number
                    if (keyChar == SystemFormat.NumberGroupSeparator || keyChar == SystemFormat.NumberDecimalSeparator) return true;
                    break;
            }
            return false;
        },
        restrictToNumberOnKeyPress: function (e, type) {
            if (e.keyCode && Sage.Utility.isAllowedNavigationKey(e.keyCode)) return true;

            var SystemFormat = Sys.CultureInfo.CurrentCulture.numberFormat;
            var code = e.charCode || e.keyCode;
            var keyChar = String.fromCharCode(code);
            var validChar = '0123456789' + SystemFormat.NegativeSign;
            switch (type) {
                case 'currency':
                    validChar += SystemFormat.CurrencyGroupSeparator + SystemFormat.CurrencyDecimalSeparator;
                    break;
                case 'percent':
                    validChar += SystemFormat.PercentGroupSeparator + SystemFormat.PercentDecimalSeparator;
                    break;
                default: //number
                    validChar += SystemFormat.NumberGroupSeparator + SystemFormat.NumberDecimalSeparator;
                    break;
            }
            return (validChar.indexOf(keyChar) >= 0);
        },
        // END - common numeric / currency functions
        /* Sage.Utility.Convert methods...  */
        Convert: function () {
            var trueRE = /^(true|T)$/i,
                isoDate = /(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(Z|(-|\+)(\d{2}):(\d{2}))/,
                isoDateOnly = /^(\d{4})-(\d{2})-(\d{2})$/,
                jsonDate = /\/Date\((-?\d+)(?:(-|\+)(\d{2})(\d{2}))?\)\//,
                pad = function (n) { return n < 10 ? '0' + n : n; },
                unpad = function (str) { return (str[0] === '0') ? str.substring(1) : str; };
            return {
                toBoolean: function (value) {
                    return trueRE.test(value);
                },
                isDateString: function (value) {
                    if (typeof value !== 'string')
                        return false;

                    return isoDate.test(value) || isoDateOnly.test(value) || jsonDate.test(value);
                },
                dateToTimeless: function (d) {
                    var timelessDate = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), 0, 0, 5);
                    return timelessDate;
                },
                toIsoStringFromDate: function (value) {
                    // adapted from: https://developer.mozilla.org/en/JavaScript/Reference/global_objects/date
                    if ((value.getHours() === 0) && (value.getMinutes() === 0) && (value.getSeconds() === 5)) {
                        return value.getFullYear() + '-'
                        + pad(value.getMonth() + 1) + '-'
                        + pad(value.getDate()) + 'T00:00:05Z';
                    }

                    return value.getUTCFullYear() + '-'
                        + pad(value.getUTCMonth() + 1) + '-'
                        + pad(value.getUTCDate()) + 'T'
                        + pad(value.getUTCHours()) + ':'
                        + pad(value.getUTCMinutes()) + ':'
                        + pad(value.getUTCSeconds()) + 'Z';
                },
                toIsoStringFromDateNonUTC: function (value) {
                    return value.getFullYear() + '-'
                        + pad(value.getMonth() + 1) + '-'
                        + pad(value.getDate()) + 'T'
                        + pad(value.getHours()) + ':'
                        + pad(value.getMinutes()) + ':'
                        + pad(value.getSeconds()) + 'Z';
                },
                toJsonStringFromDate: function (value) {
                    return '/Date(' + value.getTime() + ')/';
                },
                toDateFromString: function (value, useOffset) {
                    if (typeof value !== 'string') {
                        return value;
                    }

                    var match,
                        utc,
                        h, m,
                        offset;

                    if ((match = jsonDate.exec(value))) {
                        utc = new Date(parseInt(match[1]));

                        if (useOffset === true) {
                            if (match[2]) {
                                h = parseInt(match[3]);
                                m = parseInt(match[4]);

                                offset = (h * 60) + m;

                                if (match[2] === '-') {
                                    offset = -1 * offset;
                                }

                                utc.setMinutes(utc.getMinutes() + offset);
                            }
                        }

                        value = utc;
                    }
                    else if ((match = isoDate.exec(value))) {
                        utc = new Date(Date.UTC(
                            parseInt(match[1]),
                            parseInt(unpad(match[2])) - 1, // zero based
                            parseInt(unpad(match[3])),
                            parseInt(unpad(match[4])),
                            parseInt(unpad(match[5])),
                            parseInt(unpad(match[6]))
                        ));

                        if (match[8] !== 'Z') {
                            h = parseInt(match[10], 10);
                            m = parseInt(match[11], 10);
                            offset = (h * 60) + m;
                            if (match[9] === '-') {
                                offset = -1 * offset;
                            }
                            utc.setMinutes(utc.getMinutes() + offset);
                        }

                        value = utc;
                    }
                    else if ((match = isoDateOnly.exec(value))) {
                        value = new Date();
                        value.setYear(parseInt(match[1]));
                        value.setMonth(parseInt(match[2], 10) - 1);
                        value.setDate(parseInt(match[3], 10));
                        value.setHours(0, 0, 0, 0);
                    }

                    return value;
                },
                toArrayFromObject: function (object) {
                    // ensure this isn't already an array first
                    if (object
                        && typeof object.length == 'undefined') {
                        var array = [];
                        array.push(object);
                        return array;
                    }
                    return object;
                }
            };
        } (),
        getModeId: function () {
            //summary:
            //Retrieves the current page mode from the Client Context Service.	Values will be: insert, list or detail
            var ctxSvc = Sage.Services.getService('ClientContextService');
            if ((ctxSvc) && (ctxSvc.containsKey('modeid'))) {
                var mode = ctxSvc.getValue('modeid');
                return mode.toLowerCase();
            }
            // if modeid isn't in the context service, it might be in the url...
            //ToDo:	 add support to look in the url:
            var u = document.location.href;
            var idx = u.indexOf('?');
            if (idx > 0) {
                var qry = u.substring(idx + 1);
                var parts = qry.split('&');
                for (var i = 0; i < parts.length; i++) {
                    pair = parts[i].split('=');
                    //alert(pair[0] + ' is ' + pair[1]);
                    if (pair.length > 1) {
                        if (pair[0].toLowerCase() === 'modeid') {
                            return pair[1];
                        }
                    }
                }
            }
            // otherwise - return "None"
            return 'None';
        },
        getPageName: function () {
            var url = document.location.href;
            var pagename = url.substring(url.lastIndexOf('/') + 1);
            return pagename;
        },
        openHelp: function (topic, subsystem) {
            var url = Sage.Link.getHelpUrl(topic, subsystem);
            var target = Sage.Link.getHelpUrlTarget();
            window.open(url, target);
        },
        fragger: function (frag, doc) {
            // frag must be a string
            if (typeof frag !== 'string') { return; }
            doc = doc || dojo.doc;
            var outer = doc.createElement('div');
            var inner = dojo._toDom(frag, doc);
            // copy the frag contents into the master
            // only the children of the frag will copy over
            outer.appendChild(inner);
            return outer;
        },
        fragToDijits: function (frag, ns) {
            // if using another dijit's addChild you will want noStart = true
            var parsed = dojo.parser.parse(frag, { noStart: ns || true });
            // parser returns an array of each dijit in document order
            return parsed;
        },
        strToDijits: function (tpl, ns) {
            // tpl must be a string
            if (typeof tpl !== 'string') { return; }
            // convert it into a parse-able document fragment
            var frag = this.toMasterFrag(tpl);
            return this.fragToDijits(frag, ns);
        },
        // perform a depth-first search of a a 'MasterFrag'
        // and execute fn on each node
        fragWalker: function walk(node, fn) {
            fn(node);
            node = node.firstChild;
            while (node) {
                walk(node, fn);
                node = node.nextSibling;
            }
        },
        // used by size, keys and values
        extract: function (obj, what) {
            var count = (what === 2), out = (count) ? 0 : [], i;
            for (i in obj) {
                if (count) {
                    out++;
                } else {
                    if (has(obj, i)) {
                        out.push((what) ? obj[i] : i);
                    }
                }
            }
            return out;
        },
        keys: function (obj) {
            return Sage.Utility.extract(obj);
        },
        size: function (obj) {
            return Sage.Utility.extract(obj, 2);
        },
        loadDetailsDialog: function (obj) {
            Sage.ClientLinkHandler.request({ request: 'ShowDialog', type: obj.entityType, smartPart: obj.smartPart, entityId: obj.entityId, dialogTitle: obj.dialogTitle,
                isCentered: obj.isCentered, dialogTop: obj.dialogTop, dialogLeft: obj.dialogLeft, dialogHeight: obj.dialogHeight, dialogWidth: obj.dialogWidth
            });
        },
        values: function (obj) {
            return Sage.Utility.extract(obj, 1);
        },
        // safeMixin still mixes in too much
        mixOwn: function (target, source) {
            for (var p in source) {
                if (source.hasOwnProperty(p)) {
                    target[p] = source[p];
                }
            }
            return target;
        },
        // extract info from item.formatString in listPanel
        getPrecision: function (str) {
            var match = str.match(/\.(\d+)/);
            if (match) {
                var precision = parseInt(match[1], 10);
            }
            return precision ? precision : 0;
        },
        htmlEncode: function (str) {
            if (typeof str != "string") { return str; }
            if (!str) { return ''; }

            return str.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(
			/</g, "&lt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
        },
        htmlDecode: function (str) {
            if (typeof str != "string") { return str; }
            return str.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(
			/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&#39;/g, "'");
        },
        getSelectionInfo: function () {
            var panel = dijit.byId('list');
            if (panel) {
                return panel.getSelectionInfo();
            }
            return false;
        },
        Timezone_populatelist: function (controlId, autoPostBack) {
            var sel, selectedKeyname;
            if (controlId === 'TimezoneList') {
                sel = dijit.byId(controlId);
                selectedKeyname = dojo.byId(controlId + '_Selected');
            }
            else {
                // Get the widget markup.
                sel = $("#" + controlId + " #TimezoneList")[0];
                // Get the widget from the markup.
                sel = dijit.getEnclosingWidget(sel);
                selectedKeyname = $("#" + controlId).find('input').filter('[@type=hidden]')[0];
            }
            if (sel && typeof sel !== 'undefined' && sel.options.length == 1) {
                sel.options.length = 0;
                var self = this;
                function addTimeZoneItems() {
                    var options = [];
                    var sSelectedKey = null;
                    dojo.forEach(self._timeZones, function (tz) {
                        var option = { label: tz.Displayname, value: tz.Keyname, selected: false };
                        options.push(option);
                        if (tz.Keyname == selectedKeyname.value) {
                            sSelectedKey = tz.Keyname;
                            option.selected = true;
                        }
                    });
                    sel.addOption(options);
                    if (sSelectedKey !== null) {
                        sel.set('value', sSelectedKey);
                    }
                    dojo.connect(sel, 'onBlur', function () {
                        selectedKeyname.value = sel.get('value');
                    });
                    dojo.connect(sel, 'onChange', function () {
                        if (autoPostBack) {
                            selectedKeyname.value = sel.get('value');
                            __doPostBack(sel.id, '');
                        }
                    });
                }
                if (this._timeZones !== null) {
                    addTimeZoneItems();
                }
                else {
                    dojo.xhrGet({
                        url: 'slxdata.ashx/slx/crm/-/timezones/p',
                        handleAs: 'json',
                        load: function (list) {
                            self._timeZones = list;
                            addTimeZoneItems();
                        },
                        error: function (error, ioargs) {
                            self.ErrorHandler.handleHttpError(error, ioargs);
                            return error;
                        }
                    });
                }
            }
            return true;
        },
        //@param coll is either an array of strings or a single string
        //@param num is the max length desired for the string(s)
        //return it/them at max length with '...'
        truncate: function (val, num) {
            var i = 0, len = val.length, res = [];
            //num needs to be an int
            if (typeof num === 'string') {
                num = parseInt(num, 10);
            }
            //we might just be truncating a string, not an array of them
            if (typeof val === 'string') {
                //don't slice and append to strings smaller than num
                return val.length > num ? val.slice(0, num) + '...' : val;
            }
            //good browsers will provide higher-order functions (fast)
            if (val.map && typeof val.map === 'function') {
                //map calls the anon func with val[i], i, and val
                return val.map(function (v, i, c) {
                    return v.length > num ? v.slice(0, num) + '...' : v;
                });
            }
            //fallback for IE
            else {
                for (i; i < len; i++) {
                    res.push(val[i].slice(0, num) + '...');
                }
                return res;
            }
        },
        //end truncate
        // General Dashboard helper functions
        Dashboard: {
            // An incremental counter used by generateString()
            counter: 1,
            /** So that dynamically generated elements can get a 
            unique number appended to their name, ie 'wgt1', 'wgt2'...
            @param str a string passed in to which a number will be appended
            */
            generateString: function (str) {
                return str + Sage.Utility.Dashboard.counter++;
            },
            // A function to return an array object
            //populated with the color items in our palette
            //@param num is the number of colors you want back (in an array)
            getColors: function (num) {

                if (!num) { return; }

                var lookupLg = ['blue 6', 'green 3', 'pink 5', 'orange 2', 'blue 4', 'green 6',
                'pink 2', 'orange 7', 'blue 3', 'green 8', 'pink 4', 'orange 3',
                'blue 7', 'green 5', 'pink 8', 'orange 6', 'blue 2', 'green 7',
                'pink 3', 'orange 8', 'blue 5', 'green 2', 'pink 6', 'orange 5',
                'blue 8', 'green 4', 'pink 7', 'orange 4'],

            lookupSm = ['green 5', 'blue 3', 'green 7', 'blue 6',
                'green 3', 'blue 7'],
            ret = [], i, j;

                //the palette for num <= 6 is different than a larger set.
                if (num <= 6) {
                    for (i = 0; i < num; i++) {
                        ret[i] = Sage.Utility.Dashboard.colorPalette[lookupSm[i]];
                    }
                }
                else {
                    for (j = 0; j < num; j++) {
                        ret[j] = Sage.Utility.Dashboard.colorPalette[lookupLg[j]];
                    }
                }
                return ret;
            },
            //looping template functions need to get a single color at a time
            //by passing in an Int
            //@param idx the index passed in by the looping function
            getColor: function (idx) {
                var lookup = ['blue 6', 'green 3', 'pink 5', 'orange 2', 'blue 4', 'green 6',
                'pink 2', 'orange 7', 'blue 3', 'green 8', 'pink 4', 'orange 3',
                'blue 7', 'green 5', 'pink 8', 'orange 6', 'blue 2', 'green 7',
                'pink 3', 'orange 8', 'blue 5', 'green 2', 'pink 6', 'orange 5',
                'blue 8', 'green 4', 'pink 7', 'orange 4'];
                return Sage.Utility.Dashboard.colorPalette[lookup[idx]];
            },
            //Sage SalesLogix colors
            colorPalette: {
                'blue 0': 'dfe8f6', //widget bg color. will not be returned in getColors()
                'blue 6': '00a1de',
                'green 3': 'c1d59f',
                'pink 5': 'a44e81',
                'orange 2': 'f8d6aa',
                'blue 4': '55c0e9',
                'green 6': '69923a',
                'pink 2': 'e2afcd',
                'orange 7': 'af6200',
                'blue 3': '80d0ef',
                'green 8': '35491d',
                'pink 4': 'c55e9b',
                'orange 3': 'f4c180',
                'blue 7': '0079a7',
                'green 5': '86a85c',
                'pink 8': '421f34',
                'orange 6': 'e98300',
                'blue 2': 'aae0f4',
                'green 7': '4f6e2c',
                'pink 3': 'd486b4',
                'orange 8': '754200',
                'blue 5': '2bb1e4',
                'green 2': 'd6e3bf',
                'pink 6': '833f67',
                'orange 5': 'ed982b',
                'blue 8': '00516f',
                'green 4': 'a4bf7d',
                'pink 7': '632f4e',
                'orange 4': 'f0ac55'
            }
        },
        isBoolean: function (value) {
            return typeof value === "boolean";
        },
        isDefined: function (value) {
            return typeof value !== "undefined";
        },
        isEmptyString: function (value) {
            return (dojo.isString(value) && value == "");
        },
        isStringWithLength: function (value) {
            return (dojo.isString(value) && value != "");
        },
        isTrue: function (value) {
            return (this.isBoolean(value)) ? (value == true) : false;
        }
    }); //end dojo.mixin

    // Ajax/Dojo Patch.  Notifies dojo to reparse partial postback content.
    ready(function () {
        Sage.Utility.appLoadHandler();
    });

    return Sage.Utility;
});

},
'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin':function(){
﻿/*globals define  */
define("Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin", [
    'dojo/_base/declare'
],
function (declare) {
    return declare('Sage.UI.SLXPreviewGrid.Filter._previewGridFilterMixin', null,
    {
        /////////////////////////////////////
        // Public API
        getQuery: function () {
            var v = this.get('value');
            if (v) {
                return "upper(" + this.field + ") like '%" + v.replace("'", "''").toUpperCase() + "%'";
            }
            return "";
        },

        reset: function () {
            this.set('value', '');
        },

        getState: function () {
            //console.log('returning filter state ' + this.field + ':  {value :' + this.get('value') + ' }');
            return { 'value': this.get('value') };
        },

        applyState: function (state) {
            //console.log('applying filter state ' + this.field + ' ' + state);
            if (state) {
                this.set('value', state['value'] || '');
            }
        }
    });
});
},
'Sage/QuickForms/Design/CheckBoxControlDesigner':function(){
define("Sage/QuickForms/Design/CheckBoxControlDesigner", [
    'dojo/dom-class',
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/CheckBoxBasicPropertyEditor',
    './Editors/CheckBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/CheckBoxControlDesigner'
], function(
    domClass,
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    CheckBoxBasicPropertyEditor,
    CheckBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.CheckBoxControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            CheckBoxBasicPropertyEditor,
            CheckBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="design-checkbox" data-dojo-attach-point="containerNode">',
                '<span class="{%= $.fieldClass %}-icon" data-dojo-attach-point="designCheckedNode"></span>',
                '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
                '<div class="{%= $.fieldClass %}-field" data-dojo-attach-point="designBindingNode"></div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-checkbox',
        helpTopicName: 'Checkbox_control',
        quickFormControlType: 'Sage.Platform.QuickForms.QFControls.QFCheckBox, Sage.Platform.QuickForms.QFControls',

        //Localization
        displayNameText: 'CheckBox',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'Checked');
            });
        },
        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getCheckedAttr: function() {
            return lang.getObject('Checked', false, this.entry);
        },
        _setCheckedAttr: function(value) {
            lang.setObject('Checked', value, this.entry);
            if (value) {
                domClass.add(this.designCheckedNode, 'design-checkbox-icon-checked');
            }
            else {
                domClass.remove(this.designCheckedNode, 'design-checkbox-icon-checked');
            }
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('checked', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'Checked',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/Data/SDataServiceRegistry':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, sessionStorage */
define("Sage/Data/SDataServiceRegistry", ['Sage/Utility', 'dojo/json'],
function (Utility, json) {
    var _services = {},
    _defaultService = false;

    Sage.namespace('Data.SDataServiceRegistry');
    Sage.Data.SDataServiceRegistry = {
        registerService: function (name, s, o) {
            o = o || {};
            var service = s instanceof Sage.SData.Client.SDataService ?
                s : new Sage.SData.Client.SDataService(s);

            _services[name] = service;

            if (o.isDefault || !_defaultService) {
                _defaultService = service;
            }
            return service;
        },
        hasService: function (name) {
            return (typeof _services[name] !== 'undefined');
        },
        getService: function (name) {
            if (typeof name === 'string' && _services[name]) {
                return _services[name];
            }
            return _defaultService;
        },
        _createCacheKey: function (request) {
            var key = request.build();
            key = key.replace(/[^a-zA-Z0-9_]/g, '');
            var ns = request.getResourceKind().text;
            key = ns + "_" + key;
            return key;
        },
        _loadSDataRequest: function (request, o) {
            /// <param name="request" type="Sage.SData.Client.SDataBaseRequest" />
            var key = this._createCacheKey(request);
            var feed = this._getFromLocalStorage(key);
            if (feed) {
                o.result = feed;
                // o.result = dojo.toJson(feed);
            }
        },
        _cacheSDataRequest: function (request, o, feed) {
            /* todo: decide how to handle PUT/POST/DELETE */
            if (/get/i.test(o.method) && typeof feed === 'object') {
                var key = this._createCacheKey(request);
                this._saveToLocalStorage(key, feed);
                // this._saveToLocalStorage(key, dojo.fromJson(feed));
            }
        },
        _saveToLocalStorage: function (key, value) {
            sessionStorage.setItem(key, json.stringify(value));
        },
        _getFromLocalStorage: function (key) {
            return json.parse(sessionStorage.getItem(key));
        },
        _removeFromLocalStorage: function (resourceKind) {
            var keysCount = sessionStorage.length;
            var keys = [];
            for (var i = 0; i < keysCount; i++) {
                var key = sessionStorage.key(i);
                if (key.indexOf(resourceKind) > -1) {
                    keys.push(key);
                }
            }
            for (var j = 0; j < keys.length; j++) {
                sessionStorage.removeItem(keys[j]);
            }
        },
        getSDataService: function (contract, keepUnique, useJson, cacheResult) {
            // Returns the instance of the service for the specific contract requested.
            // For example, if the data source needs an SData service for the dynamic or system feeds,
            // the code would pass 'dynamic' or 'system' to this method.
            // Proxy datastore needs to always keep it's own unique instance of the service.
            // cacheResult uses a service with overridden beforerequest and requestcomplete methods
            keepUnique = contract === 'proxy' ? true : keepUnique;
            contract = contract || 'dynamic';
            var svcKey = "SDataService_" + contract;
            //Create a SDataService that caches its results
            svcKey = cacheResult ? [svcKey, '_cacheResult'].join('') : svcKey;

            if (this.hasService(svcKey) && !keepUnique) {
                return this.getService(svcKey);
            }

            var bJson = true;
            if (typeof useJson === 'boolean') {
                bJson = useJson;
            }

            var svc = new Sage.SData.Client.SDataService({
                serverName: window.location.hostname,
                virtualDirectory: Sage.Utility.getVirtualDirectoryName() + '/slxdata.ashx',
                applicationName: 'slx',
                contractName: contract,
                port: window.location.port && window.location.port !== 80 ? window.location.port : false,
                protocol: /https/i.test(window.location.protocol) ? 'https' : false,
                json: bJson
            });

            if (cacheResult) {
                svc.on('beforerequest', this._loadSDataRequest, this);
                svc.on('requestcomplete', this._cacheSDataRequest, this);
            }

            if (!keepUnique) {
                this.registerService(svcKey, svc);
                //  Sage.Services.registerService(svcKey, svc);
            }
            return svc;
        }
    };
    return Sage.Data.SDataServiceRegistry;
});
/*
 *Usage:
(function() {
     var virdir = function() {
        var match = /^\/([^\/]+)\//.exec(location.pathname);               
        return match ? match[1] : '';
    }; 
    
     Sage.Data.SDataServiceRegistry.registerService('dynamic', {
           serverName: window.location.hostname,
           virtualDirectory: virdir() + '/slxdata.ashx',
           applicationName: 'slx',
           contractName: 'dynamic',
           port: window.location.port && window.location.port != 80 ? window.location.port : false,
           protocol: /https/i.test(window.location.protocol) ? 'https' : false
     }, { isDefault: true});
    
     Sage.Data.SDataServiceRegistry.registerService('system', {
           serverName: window.location.hostname,
           virtualDirectory: virdir() + '/slxdata.ashx',
           applicationName: 'slx',
           contractName: 'system',
           port: window.location.port && window.location.port != 80 ? window.location.port : false,
           protocol: /https/i.test(window.location.protocol) ? 'https' : false
     }); 
})();
 
*in code 
returns the 'dynamic' service since it's the default 
Sage.Data.SDataServiceRegistry.getService();
 
*returns the 'system' service since it was explicitly selected 
Sage.Data.SDataServiceRegistry.getService('system');
 
*returns the 'dynamic' service since it was explicitly selected 
Sage.Data.SDataServiceRegistry.getService('dynamic');
 
*in customizations, 3rd party developers could register their own services 
Sage.Data.SDataServiceRegistry.registerService('sage50', {
     serverName: 'ec2-67-202-57-59.compute-1.amazonaws.com',
     virtualDirectory: 'sage50',
     applicationName: 'accounts50',
     contractName: 'gcrm',
     port: 80,
     protocol: /https/i.test(window.location.protocol) ? 'https' : false,
     userName: 'manager',
     password: '',
     version: { major: 0, minor: 9 }
}); 
 
*and use them* 
Sage.Data.SDataServiceRegistry.getService('sage50');
 
*this is probably best used with a mixin* 
define(['Sage.Data.SDataServiceRegistry', 'dojo/_base/declare'], 
function(sDataServiceRegistry, declare) {
     var _sDataServiceAware = declare('Sage.UI._SDataServiceAware', null, {
           serviceName: false,
           getService: function() {
                sDataServiceRegistry.getService(this.serviceName)
           }
     });
     return _sDataServiceAware;
});
 
any widget that mixes in that class can specify a 'serviceName' property as 
part of their prototype, or in their constructor, or passed in via constructor 
options, or even assigned later on.  if no name is specified, it just gets the default service, if one was registered    
*/

},
'url:Sage/MainView/ActivityMgr/templates/ActivityEditor.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"activityDialog\" title=\"\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onDlgHide\">',\r\n        '<div class=\"activity-dialog\">',  //body\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"regardingContainer\">',\r\n                '<select id=\"pk_Regarding\" label=\"{%= $.regardingText %}\" id=\"{%= $.id %}_pk_Regarding\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Regarding\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\" ></select>',\r\n                '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.locationText %}\" id=\"{%= $.id %}_tb_Location\" dojoAttachPoint=\"tb_Location\" maxLength=\"255\" ></div>',\r\n            '</div>', //first tablecontainer 1 col\r\n        //Dates section for add/edit mode..................\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"dateSection_AddEdit\">',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_startDate\" dojoAttachPoint=\"dtp_startDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.startTimeText %}\"></div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_Duration\" dojoAttachPoint=\"sel_Duration\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_Timeless\" dojoAttachPoint=\"cb_Timeless\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_Timeless\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                '<div dojoType=\"dojox.layout.TableContainer\" label=\"{%= $.alarmText %}\" cols=\"2\" showLabels=\"false\" class=\"removeExtraSpace\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" id=\"{%= $.id %}_cb_Alarm\" dojoAttachPoint=\"cb_Alarm\" ></div>',\r\n                    '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" id=\"{%= $.id %}_sel_AlarmDur\" dojoAttachPoint=\"sel_AlarmDur\" valuesAreAfterStart=\"false\" ></div>',\r\n                '</div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_cb_AutoRollover\" dojoAttachPoint=\"cb_AutoRollover\"></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_AutoRollover\">{%= $.rolloverText %}</label>',\r\n                '</div>',\r\n            '</div>',\r\n        //Dates section for complete mode...................\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"dateSection_Complete\">',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_completedDate\" dojoAttachPoint=\"dtp_completedDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.completedText %}\"></div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtp_scheduledDate\" dojoAttachPoint=\"dtp_scheduledDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.scheduledText %}\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_TimelessComplete\" dojoAttachPoint=\"cb_TimelessComplete\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"{%= $.id %}_cb_TimelessComplete\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.DurationSelect\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_DurationComplete\" dojoAttachPoint=\"sel_DurationComplete\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n            '</div>',\r\n\r\n            '<div dojoType=\"dijit.layout.TabContainer\" id=\"{%= $.id %}_tc_EditActivity\"  dojoAttachPoint=\"tc_EditActivity\" class=\"tab-container\">',\r\n/*  General Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_General\" title=\"{%= $.tabNameGeneralText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_General\">',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"resultContainer\" class=\"bottom-border-section\">', \r\n                        '<select shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" label=\"{%= $.resultText %}\" id=\"{%= $.id %}_pl_Result\"  name=\"pl_Result\" dojoAttachPoint=\"pl_Result\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"4\" labelWidth=\"4\" baseClass=\"contact-lead-radios\" >',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.contactText %}\" value=\"contact\" id=\"{%= $.id %}_rdo_Contact\" dojoAttachPoint=\"rdo_Contact\" dojoAttachEvent=\"onChange:_setContactLeadVisibility\" checked=\"true\" />',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.leadText %}\" value=\"lead\" id=\"{%= $.id %}_rdo_Lead\" dojoAttachPoint=\"rdo_Lead\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"contactContainer\" baseClass=\"bottom-border-section\">',\r\n\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_ContactLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.opportunityText %}\" dojoAttachPoint=\"container_OppLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.accountText %}\" dojoAttachPoint=\"container_AccountLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.ticketText %}\" dojoAttachPoint=\"container_TicketLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"leadContainer\"  baseClass=\"bottom-border-section\" class=\"display-none\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_LeadLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<input dojoType=\"dijit.form.TextBox\" id=\"{%= $.id %}_tb_LeadCompanyName\" label=\"{%= $.companyText %}\" dojoAttachPoint=\"tb_LeadCompanyName\" readonly=\"true\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" class=\"bottom-border-section\" >',\r\n                        '<select label=\"{%= $.priorityText %}\" id=\"{%= $.id %}_pk_Priority\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Priority\" canEditText=\"true\" itemMustExist=\"false\" pickListName=\"Priorities\" sort=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.leaderText %}\" dojoAttachPoint=\"container_LeaderLup\" class=\"remove-padding lookup-container\" style=\"width: {%= 472 - $.labelWidth %}px;\"></div>',\r\n                        '<select label=\"{%= $.categoryText %}\" id=\"{%= $.id %}_pk_Category\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Category\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"&nbsp;\" class=\"dijitTextBox\" style=\"border-width:0px\">&nbsp;</div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" class=\"valigntop\" dojoAttachPoint=\"notesContainer\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_Notes\" label=\"{%= $.notesText %}\" dojoAttachPoint=\"ta_Notes\" class=\"notes-text\"></textarea>',\r\n                    '</div>',\r\n                '</div>',  // end general tab\r\n/* Availability Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Availability\" title=\"{%= $.tabNameAvailabilityText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_Availability\" dojoAttachEvent=\"onShow:_onShowAvailabilityTab\">',\r\n                    '<div dojoType=\"dijit.Toolbar\" region=\"top\" splitter=\"false\" class=\"right-tools\" >',  // list-panel-tbar                                  \r\n                        '<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"container_ResourcesLup\" class=\"remove-padding\"></div>',\r\n                    '</div>',\r\n/* Scheduler ........... */\r\n                    '<div id=\"scheduler_here\" class=\"dhx_cal_container\" style=\"width:100%;height:230px;\">',\r\n                        '<div class=\"dhx_cal_navline\">',\r\n                            '<div class=\"dhx_cal_prev_timeline_button\" style=\"right:50px;\">&nbsp;</div>',\r\n\t\t\t                '<div class=\"dhx_cal_next_timeline_button\" style=\"right:19px;\">&nbsp;</div>',\r\n//'<div class=\"dhx_cal_today_button\"></div>',\r\n\t\t\t                '<div class=\"dhx_cal_date\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"day_tab\" style=\"right:204px;\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"week_tab\" style=\"right:140px;\"></div>',\r\n                            '<div class=\"dhx_cal_tab\" name=\"timeline_tab\" style=\"right:280px;\"></div>',\r\n//'<div class=\"dhx_cal_tab\" name=\"month_tab\" style=\"right:76px;\"></div>',\r\n\t\t                '</div>',\r\n\t\t                '<div class=\"dhx_cal_header\"></div>',\r\n\t\t                '<div class=\"dhx_cal_data\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n/* Recurring Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Recurring\" title=\"{%= $.recurringText %}\" class=\"tabContent\" dojoAttachPoint=\"cp_Recurring\" dojoAttachEvent=\"onShow:_showRecurringTab\">',\r\n                    '<div shouldPublishMarkDirty=\"false\" dojoType=\"Sage.MainView.ActivityMgr.RecurringEditor\" id=\"{%= $.id %}_recEd\" labelWidth=\"{%= $.labelWidth - 20 %}\" dojoAttachPoint=\"_recurringEditor\"></div>',\r\n                '</div>',\r\n/* Attachments Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Attachments\" title=\"{%= $.tabNameAttachmentsText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_Attachments\" dojoAttachEvent=\"onShow:_showAttachmentsTab\">',\r\n                    '<div id=\"{%= $.id %}_attachmentsGridPlaceholder\" dojoAttachPoint=\"_attachmentGridPlaceholder\" style=\"width:100%;height:100%\"></div>',\r\n                '</div>',\r\n            '</div>',  //tab container\r\n/* Buttons       */\r\n        // Add/edit activity buttons\r\n            '<table class=\"button-bar\" id=\"add_edit_buttons\" dojoAttachPoint=\"add_edit_buttons\">',\r\n                '<tr>',\r\n                    '<td class=\"alignleft\">',\r\n                        '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledBy\"></div>',\r\n                    '</td><td class=\"alignright\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Complete\" name=\"btn_Complete\" dojoAttachPoint=\"btn_Complete\" dojoAttachEvent=\"onClick:_completeClick\">{%= $.completeBtnText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Delete\" name=\"btn_Delete\" dojoAttachPoint=\"btn_Delete\" dojoAttachEvent=\"onClick:_deleteClick\">{%= $.deleteText %}</div>',\r\n                        '<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n\r\n\r\n        //complete activity buttons\r\n            '<table class=\"button-bar display-none\" id=\"complete_buttons\" dojoAttachPoint=\"complete_buttons\">',\r\n                '<tr>',\r\n                    '<col width=\"50%\" /><col width=\"50%\" />',\r\n                    '<td class=\"alignleft\">',\r\n                        '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" >',\r\n                            '<select label=\"{%= $.followupText %}\" id=\"sel_Followup\" dojoType=\"dijit.form.ComboBox\" dojoAttachPoint=\"sel_Followup\">',\r\n                                '<option value=\"none\" selected=\"selected\">{%= $.noneText %}</option>',\r\n                                '<option value=\"phone\">{%= Sage.Utility.Activity.getActivityTypeName(\"atPhoneCall\") %}</option>',\r\n                                '<option value=\"meeting\">{%= Sage.Utility.Activity.getActivityTypeName(\"atAppointment\") %}</option>',\r\n                                '<option value=\"todo\">{%= Sage.Utility.Activity.getActivityTypeName(\"atToDo\") %}</option>',\r\n                            '</select>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"ck_coAttachments\" dojoAttachPoint=\"ck_coAttachments\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coAttachments\">{%= $.carryOverAttachmentsText %}</label>',\r\n                            '</div>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"ck_coNotes\" dojoAttachPoint=\"ck_coNotes\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coNotes\">{%= $.carryOverNotesText %}</label>',\r\n                            '</div>',\r\n                        '</div>',\r\n                    '</td><td class=\"alignright valignbottom\" rowspan=\"2\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_asScheduled\" name=\"btn_asScheduled\" dojoAttachPoint=\"btn_asScheduled\" dojoAttachEvent=\"onClick:_asScheduledClick\">{%= $.asScheduledText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Now\" name=\"btn_Now\" dojoAttachPoint=\"btn_Now\" dojoAttachEvent=\"onClick:_nowClick\">{%= $.nowText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_CancelComplete\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_CancelComplete\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr><tr>',\r\n                    '<td class=\"alignleft\" >',\r\n                        '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledByComp\"></div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n\r\n\r\n\r\n        //Confirmations button bar...\r\n            '<table class=\"button-bar display-none\" id=\"confirmation_edit_buttons\" dojoAttachPoint=\"confirmation_edit_buttons\">',\r\n                '<tr>',\r\n                    '<td class=\"alignleft\" style=\"width:{%= $.labelWidth %}px;\">',\r\n                        '<label for=\"{%= $.id %}_ta_confirmationResponse\" id=\"responseLabel\" dojoAttachPoint=\"responseLabel\">{%= $.responseText %}</label>',\r\n                    '</td>',\r\n                    '<td class=\"alignleft\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_confirmationResponse\" dojoAttachPoint=\"ta_confirmationResponse\" class=\"notes-text dijitTextBox\" maxLength=\"128\" ></textarea>',\r\n                    '</td><td class=\"alignright valignbottom\">',\r\n                        '<span id=\"newConfButtons\" dojoAttachPoint=\"newConfButtons\">',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_accept\" name=\"btn_accept\" dojoAttachPoint=\"btn_accept\" dojoAttachEvent=\"onClick:_acceptConfClick\">{%= $.acceptText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_decline\" name=\"btn_decline\" dojoAttachPoint=\"btn_decline\" dojoAttachEvent=\"onClick:_declineClick\">{%= $.declineText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_cancelConf\" name=\"btn_cancelConf\" dojoAttachPoint=\"btn_cancelConf\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n                        '</span>',\r\n                        '<span id=\"otherConfButtons\" dojoAttachPoint=\"otherConfButtons\" class=\"display-none\">',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_deleteConf\" name=\"btn_deleteConf\" dojoAttachPoint=\"btn_deleteConf\" dojoAttachEvent=\"onClick:_deleteConfClick\">{%= $.deleteConfText %}</div>',\r\n                            '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_closeConf\" name=\"btn_closeConf\" dojoAttachPoint=\"btn_closeConf\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.closeText %}</div>',\r\n                        '</span>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n        '</div>', //body\r\n    '</div>',  //dialog\r\n'</div>' //root node\r\n]\r\n",
'Sage/QuickForms/Design/Editors/nls/UserAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/UserAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            lookupBindingModeText: "Lookup Binding Mode:",
            lookupBindingModeTooltipText: "Indicates whether you want to bind to an entity object or to a string value.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            },
            bindingModeText: {
                Object: "Object",
                String: "String"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Controls/templates/Name.html':"<div class=\"person\" slxcompositecontrol=\"true\" id=\"{%= $.id %}\" ><input id=\"{%= $.id %}-TextBox\" value=\"{%= $.nameDesc %}\"\r\n    data-dojo-type=\"Sage.UI.Controls.TextBox\" name=\"{%= $.name %}\" required=\"{%= $.required %}\" dojoAttachPoint=\"focusNode\"  data-dojo-attach-event=\"onChange:textBoxOnChange, onDblClick: showDialog\" data-dojo-props=\"textWithIcons: {%= $.buttonVisible %}\" />\r\n    {% if ($.buttonVisible) { %}\r\n    <img alt=\"{%= $.buttonToolTip %}\"  data-dojo-attach-event=\"ondijitclick: showDialog\"  tabindex=\"{%= $.tabIndex %}\"     \r\n    style=\"padding-left:0;cursor: pointer; vertical-align: left;\" \r\n    src=\"{%= $.buttonImageUrl %}\" title=\"{%= $.buttonToolTip %}\" id=\"{%= $.id %}-Button\" />\r\n    {% } %}\r\n<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n</div>",
'Sage/UI/nls/SpeedSearch':function(){
define("Sage/UI/nls/SpeedSearch", [        'Sage/LanguageList',        'dojo/_base/lang'],function (LanguageList, lang) {    var nls = {        root: {        standardText: 'standard',        advancedText: 'advanced',        speedSearchText: 'SpeedSearch'        }    };    return lang.mixin(LanguageList, nls);});
},
'url:Sage/UI/Filters/templates/EditFilters.html':"<div>\r\n    <div class=\"filter-dialog\" data-dojo-type=\"dijit.Dialog\" data-dojo-props=\"title:'${dialogTitle}'\" data-dojo-attach-point=\"dialogNode\">\r\n        <div class=\"filter-clear-all\">\r\n            <input data-dojo-attach-point=\"checkAll\" data-dojo-type=\"dijit.form.CheckBox\" />\r\n            <label>${selectAllText}</label>\r\n        </div>\r\n        <div class=\"filter-dialog-content\" data-dojo-attach-point=\"contentNode\">\r\n            \r\n        </div>\r\n        \r\n        <div class=\"button-bar alignright\">\r\n            <button data-dojo-attach-point=\"buttonOK\" data-dojo-attach-event=\"onClick:_onOKClick\" data-dojo-type=\"dijit.form.Button\">${okText}</button>\r\n            <button data-dojo-attach-point=\"buttonCancel\" data-dojo-attach-event=\"onClick:_onCancelClick\" data-dojo-type=\"dijit.form.Button\">${cancelText}</button>\r\n        </div>\r\n    </div>\r\n</div>",
'Sage/Services/ActivityAction':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/ActivityAction", [
        'dojo/i18n',
        'Sage/UI/Dialogs',
        'dijit/_Widget',
        'dojo/_base/declare'
],
function (
   i18n,
   Dialogs,
   _Widget,
   declare
) {

    var activityAction = declare('Sage.Services.ActivityAction', [_Widget], {
        _service: false,
        _contract: 'activities',
        _resourceKind: 'service',
        _operationName: false,
        _payLoad: false,
        _selectionContext: false,
        _publishMap: false,
        _publishMapWithId: false,
        _activityId: false,
        _configuration: false,
        _args: {},
        message: 'Are you sure you want to continue?',
        description: '',
        constructor: function () {
            // this._service =  Sage.Utility.getSDataService('activities');        
        },
        execute: function (options) {
            var map = this._publishMap;
            var mapWithId = this._publishMapWithId;
            var activityId = this._activityId;

            var postUrl = String.format("slxdata.ashx/slx/crm/-/{0}/{1}/{2}", this._contract, this._resourceKind, this._operationName);
            $.ajax({
                type: "POST",
                url: postUrl,
                contentType: "application/json",
                data: dojo.toJson(this._args),
                processData: false,
                success: function (result) {
                    if (map) {
                        dojo.publish(map, [result, this]);
                    }
                    if (mapWithId) {
                        if (activityId) {
                            dojo.publish(mapWithId, [activityId, this]);
                        }
                    }
                    if (options) {
                        options.success(result, options.scope);
                    }
                },
                failure: function (request) {
                    if (options) {
                        options.failure(result, options.scope);
                    }
                }
            });
        },

        _setConfigurationAttr: function (config) {
            this._configuration = config;
        },
        _getConfigurationAttr: function () {
            return this._configuration;
        },

        _setServiceAttr: function (service) {
            this._service = service;
        },
        _getServiceAttr: function () {
            return this._service;
        },
        _setSelectionInfoAttr: function (selectionInfo) {
            this._selectionInfo = selectionInfo;
        },
        _getSelectionInfoAttr: function () {
            return this._selectionInfo;
        },
        _setOperationNameAttr: function (operationName) {
            this._operationName = operationName;
        },
        _getOperationNameAttr: function () {
            return this._operationName;
        },
        _setResourceKindAttr: function (resourceKind) {
            this._resourceKind = resourceKind;
        },
        _getResourceKindAttr: function () {
            return this._resourceKind;
        },
        _setArgsAttr: function (args) {
            this._args = args;
        },
        _getArgsAttr: function () {
            return this._args;
        },
        _setActionDescriptionAttr: function (description) {
            this.description = description;
        },
        _getActionDescriptionAttr: function () {
            return this.description;
        },

        _setActionMessageAttr: function (message) {
            this.message = message;
        },
        _getActionMessageAttr: function () {
            return this.message;
        },
        _setPublishMapAttr: function (publishMap) {
            this._publishMap = publishMap;
        },
        _setPublishMapWithIdAttr: function (publishMapWithId) {
            this._publishMapWithId = publishMapWithId;
        },
        _setActivityIdAttr: function (activityId) {
            this._activityId = activityId;
        }

    });

    return activityAction;
});

},
'Sage/UI/GroupListConfigurationProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GroupListConfigurationProvider", [
        'Sage/_ConfigurationProvider',
        'Sage/Data/GroupLayoutSingleton',
        'Sage/Services/_ServiceMixin',
        'Sage/UI/Columns/SlxLink',
        'Sage/UI/Columns/Boolean',
        'Sage/UI/Columns/DateTime',
        'Sage/UI/Columns/Numeric',
        'Sage/UI/Columns/OwnerType',
        'Sage/UI/Columns/Phone',
        'Sage/UI/Columns/UserType',
        'Sage/UI/Columns/Currency',
        'Sage/Data/SDataStore',
        'Sage/UI/SummaryFormatterScope',
        'dijit/MenuSeparator',
        'dijit/Menu',
        'Sage/UI/MenuItem',
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/i18n'
],
function (
    _ConfigurationProvider,
    GroupLayoutSingleton,
    _ServiceMixin,
    slxLinkColumn,
    booleanColumn,
    dateTimeColumn,
    numericColumn,
    ownerTypeColumn,
    phoneColumn,
    userTypeColumn,
    Currency,
    SDataStore,
    summaryFormatterScope,
    menuSeparator,
    dijitMenu,
    sageMenuItem,
    lang,
    declare,
    i18n) {
    var groupListConfigProvider = declare('Sage.UI.GroupListConfigurationProvider', [_ConfigurationProvider, _ServiceMixin], {
        serviceMap: {
            'groupContextService': 'ClientGroupContext'
        },
        service: null,
        _hasAdHocList: false,
        ROWS_PER_PAGE: 100,

        constructor: function (options) {
            this._adHocOnlyMenuItems = [];
            this._menuItems = [];
            this._subscribes.push(dojo.subscribe('/group/context/changed', this, this._onGroupContextChanged));
        },
        _onGroupContextChanged: function () {
            this.onConfigurationChange();
        },
        requestConfiguration: function (options) {
            var singleton = new GroupLayoutSingleton(),
                onSuccess = lang.hitch(this, this._onRequestConfigurationSuccess, options || {}),
                onFail = lang.hitch(this, this._onRequestConfigurationFailure, options || {}),
                group = this.getCurrentGroup();
            singleton.getGroupLayout(this.formatPredicate(group), onSuccess, onFail, group.$key);
        },
        _onRequestConfigurationSuccess: function (options, entry) {
            if (options.success) {
                options.success.call(options.scope || this, this._createConfiguration(entry), options, this);
            }
        },
        _onRequestConfigurationFailure: function (options, response) {
            if (options.failure) {
                options.failure.call(options.scope || this, response, options, this);
            }
        },
        _createConfigurationForList: function (entry) {
            // todo: fix to store layout somewhere
            var layout = entry.layout,
                select = [],
                structure = [],
                groupContextService = Sage.Services.getService("ClientGroupContext"),
                context,
                i;

            if (groupContextService) {
                context = groupContextService.getContext();
            }

            if (entry['keyField']) {
                select.push(entry['keyField']);
            }

            for (i = 0; i < layout.length; i++) {
                var item = layout[i];
                select.push(item['alias']);
                if (item['visible']) {
                    if (item['webLink']) {
                        var dataPath = item['dataPath'],
                            entity = dataPath.lastIndexOf("!") > -1 ? dataPath.substring(0, dataPath.lastIndexOf("!")).substring(dataPath.lastIndexOf(".") + 1) : dataPath.substring(0, dataPath.lastIndexOf(":")),
                            keyField = entity + 'ID';

                        //take into account the often denormalized field "ACCOUNT" that lives on several entities... (Contact, etc.)
                        if (item['alias'] === 'ACCOUNT' || item['alias'].match(/A\d+_ACCOUNT/ig)) {
                            entity = 'ACCOUNT';
                            keyField = 'ACCOUNTID';
                        }
                        if ((context) && (entity === context.CurrentTable)) {
                            entity = context.CurrentEntity;
                            keyField = context.CurrentTableKeyField;
                        }
                        select.push(keyField);

                        structure.push({
                            field: item['alias'],
                            property: item['propertyPath'],
                            name: item['caption'],
                            type: slxLinkColumn,
                            pageName: entity,
                            idField: keyField,
                            width: item['width'] + 'px'
                        });
                    }
                    else {
                        // hack section
                        if (item['alias'].match(/^email$/i)) {
                            item['format'] = 'Email';
                        }
                        if (item['fieldType'] === 'DateTime') {
                            item['format'] = 'DateTime';
                        }
                        // end hack section

                        switch (item['format']) {
                            case 'Boolean':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: booleanColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    formatString: item['formatString'],
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'DateTime':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: dateTimeColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    datePattern: item['formatString'],
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'Email':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    styles: 'text-align: ' + item['align'] + ';',
                                    formatter: function (val) {
                                        if (!val) {
                                            return '';
                                        }

                                        return dojo.string.substitute(
                                        '<a href=mailto:${0}>${0}</a>',
                                        [Sage.Utility.htmlEncode(val)]);
                                    },
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'Percent':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: numericColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    constraints: {
                                        places: Sage.Utility.getPrecision(item['formatString']),
                                        round: -1
                                    },
                                    fercent: true,
                                    formatType: 'Percent',
                                    width: item['width'] + 'px',
                                    isWholeNumberPercent: false
                                });
                                break;
                                
                            case 'Fixed':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: numericColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    constraints: {
                                        places: Sage.Utility.getPrecision(item['formatString']),
                                        round: -1
                                    },
                                    // a fake percent
                                    fercent: true,
                                    formatType: item['formatString'][
                                    item['formatString'].length - 1] === '%' ? 'Percent' : 'Number',
                                    width: item['width'] + 'px',
                                    isWholeNumberPercent: item['format'] === 'Percent' ? false : true
                                });
                                break;

                            case 'Owner':
                                var ownerName = item['alias'] + 'NAME';
                                select.push(ownerName);
                                structure.push({
                                    field: ownerName,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    name: item['caption'],
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'OwnerType':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: ownerTypeColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'Phone':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: phoneColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'PickList Item':
                                var pickName = item['alias'] + 'TEXT';
                                select.push(pickName);
                                structure.push({
                                    field: pickName,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'User':
                                var userName = item['alias'] + 'NAME';
                                select.push(userName);
                                structure.push({
                                    field: userName,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    name: item['caption'],
                                    width: item['width'] + 'px'
                                });
                                break;

                            case 'User Type':
                                structure.push({
                                    field: item['alias'],
                                    property: item['propertyPath'],
                                    name: item['caption'],
                                    type: userTypeColumn,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    width: item['width'] + 'px'
                                });
                                break;
                            case 'Currency':
                                structure.push({
                                    field: item['alias'],
                                    property: item['caption'],
                                    name: item['caption'],
                                    type: Currency,
                                    styles: 'text-align: ' + item['align'] + ';',
                                    width: item['width'] + 'px'
                                });
                                break;
                            default:
                                structure.push({
                                    field: item['alias'],
                                    property: item['caption'],
                                    name: item['caption'],
                                    styles: 'text-align: ' + item['align'] + ';',
                                    width: item['width'] + 'px'
                                });
                                break;
                        } // end switch
                    }
                } // end if(visable)
            } // end for loop

            var store = new SDataStore({
                service: this.service,
                resourceKind: 'groups',
                resourcePredicate: this.formatPredicate(entry),
                queryName: 'execute',
                select: select,
                include: [],
                count: this.ROWS_PER_PAGE
            });

            var tableAliases = {};
            for (i = 0; i < entry['tableAliases'].length; i++)
                tableAliases[entry['tableAliases'][i]['tableName'].toUpperCase()] = entry['tableAliases'][i]['alias'];

            return {
                structure: [{
                    defaultCell: { defaultValue: '' },
                    cells: [
                        structure
                    ]
                }],
                store: store,
                rowsPerPage: this.ROWS_PER_PAGE,
                layout: entry['layout'],
                tableAliases: tableAliases,
                selectedRegionContextMenuItems: this._getListContextMenuItems(),
                onSelectedRegionContextMenu: this._onListContext,
                onNavigateToDefaultItem: lang.hitch(entry, function (item /* Datestore item that was acted on */) {
                    if (item) {
                        var keyField = this['keyField'],
                            entityName = this['entityName'],
                            id = item[keyField];

                        if (id) {
                            Sage.Link.entityDetail(entityName, id);
                        }
                    }
                }),
                id: entry['$key']
            };
        },
        _getCurrentGroupID: function () {
            var groupContextService = Sage.Services.getService("ClientGroupContext"),
                context,
                results;

            if (groupContextService) {
                context = groupContextService.getContext();
                results = context.CurrentGroupID;
            }

            return results;
        },
        _onListContext: function (e) {
            var groupContextSvc = Sage.Services.getService('ClientGroupContext');
            var context = groupContextSvc.getContext();
            for (var i = 0; i < this._adHocOnlyMenuItems.length; i++) {
                this._adHocOnlyMenuItems[i].set('disabled', !context.isAdhoc);
            }
            this._ensureAdHocListMenu();
        },
        _getListContextMenuItems: function () {
            var menuItem,
                groupId = this._getCurrentGroupID();
            if (this._menuItems.length > 0) {
                return this._menuItems;
            }
            if (!Sage.UI.DataStore.ContextMenus || !Sage.UI.DataStore.ContextMenus.listContextMenu) {
                return [];
            }
            this._menuItems = [];
            this._adHocOnlyMenuItems = [];
            var menuConfig = Sage.UI.DataStore.ContextMenus.listContextMenu.items;
            var len = menuConfig.length;
            for (var i = 0; i < len; i++) {
                var mDef = menuConfig[i];
                if (mDef.displayName === '') {
                    this._menuItems.push(new menuSeparator());
                } else {
                    var href = mDef.href;
                    if (href.indexOf('javascript:') < 0) {
                        href = dojo.string.substitute("javascript:${0}()", [href]);
                    }
                    if (href.indexOf('addSelectionsToGroup') > 0) {
                        menuItem = this._createAddToAdHocMenuItem(mDef);

                        if (menuItem.arrowWrapper) {
                            dojo.style(menuItem.arrowWrapper, "visibility", "");
                        }
                    } else {
                        menuItem = new sageMenuItem({
                            id: groupId + '_' + i,
                            label: mDef.text || '...',
                            icon: mDef.img,
                            title: mDef.tooltip || '',
                            ref: href,
                            onClick: function () {
                                if (this.ref !== '') {
                                    try {
                                        window.location.href = this.ref;
                                    } catch (e) { }
                                }
                            }
                        });
                    }
                    this._menuItems.push(menuItem);
                    if (href.indexOf('removeSelectionsFromGroup') > 0) {
                        this._adHocOnlyMenuItems.push(menuItem);
                    }
                }
            }
            return this._menuItems;
        },
        _createAddToAdHocMenuItem: function (menuDef) {
            this._adHocMenu = new dijitMenu();
            this._adHocMenu.addChild(new sageMenuItem({
                label: 'loading...'
            }));
            this._adHocMenuHref = menuDef.href;
            var menuItem = new sageMenuItem({
                label: menuDef.text || '...',
                icon: menuDef.img,
                title: menuDef.tooltip || '',
                popup: this._adHocMenu
            });
            return menuItem;
        },
        _ensureAdHocListMenu: function () {
            if (this._hasAdHocList) {
                return;
            }
            this._hasAdHocList = true;
            var svc = Sage.Services.getService('ClientGroupContext');
            svc.getAdHocGroupList(function (list) {
                this._adHocMenu.destroyDescendants();
                for (var i = 0; i < list.length; i++) {
                    var grp = list[i];
                    this._adHocMenu.addChild(new sageMenuItem({
                        label: grp['$descriptor'] || grp['name'],
                        icon: '',
                        title: grp['$descriptor'] || grp['name'],
                        ref: dojo.string.substitute(this._adHocMenuHref, { 'groupId': grp['$key'] }),
                        onClick: function () {
                            if (this.ref !== '') {
                                try {
                                    window.location.href = this.ref;
                                } catch (e) { }
                            }
                        }
                    }));
                }
            }, this);
        },
        _createConfigurationForSummary: function (entry) {
            if (!this.summaryOptions) {
                return false;
            }
            var store = new SDataStore({
                service: this.service,
                resourceKind: 'groups',
                resourcePredicate: this.formatPredicate(entry),
                queryName: 'execute',
                select: [entry['keyField']],
                include: []
            }),
                structure = [
                    {
                        field: entry['keyField'],
                        formatter: 'formatSummary',
                        width: '100%',
                        name: 'Summary View',
                        canResize: function () { return false; }
                    }
                ],
                moduleNameParts = ['Sage'],
                templateLocation = this.summaryOptions['templateLocation'],
                templateParts = templateLocation && templateLocation.split('/'),
                i,
                path;

            for (i = 0; i < templateParts.length - 1; i++) {
                moduleNameParts.push(templateParts[i]);
            }
            path = 'dojo/i18n!' + moduleNameParts.join('/') + '/nls/' + templateParts[templateParts.length - 1].replace('.html', '');

            require([path],
                lang.hitch(this, function (nls) {
                    lang.mixin(this, nls);
                })
            );
            return {
                structure: structure,
                layout: entry['layout'],
                store: store,
                rowHeight: 200,
                rowsPerPage: 50,
                formatterScope: new summaryFormatterScope({
                    requestConfiguration: {
                        mashupName: this.summaryOptions['mashupName'] || 'SummaryViewQueries',
                        queryName: this.summaryOptions['queryName'] || ''
                    },
                    templateLocation: this.summaryOptions['templateLocation'] || ''
                })
            };
        },
        _createConfigurationForDetail: function (entry) {
            if (this.detailConfiguration) {
                return {
                    requestConfiguration: {
                        mashupName: this.detailConfiguration['mashupName'] || 'SummaryViewQueries',
                        queryName: this.detailConfiguration['queryName'] || ''
                    },
                    templateLocation: this.detailConfiguration['templateLocation']
                };
            }
            return false;
        },
        _createConfiguration: function (entry) {
            return {
                list: this._createConfigurationForList(entry),
                summary: this._createConfigurationForSummary(entry),
                detail: this._createConfigurationForDetail(entry)
            };
        },
        formatPredicate: function (group) {
            if (group.$key === 'LOOKUPRESULTS') {
                group.family = group.family && group.family.toUpperCase();
                group.name = 'Lookup Results';
                return dojo.string.substitute("name eq '${name}' and upper(family) eq '${family}'", group);
            }

            return "'" + group.$key + "'";
        },
        getCurrentGroup: function () {
            var service = Sage.Services.getService('ClientGroupContext'),
                context = service && service.getContext(),
                results = { name: 'My Accounts', family: 'Account', $key: '' };
            if (context) {
                results = {
                    name: context.CurrentName,
                    family: context.CurrentFamily,
                    $key: context.CurrentGroupID
                };
            }

            return results;
        }
    });
    return groupListConfigProvider;
});
},
'Sage/UI/Controls/CheckBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/CheckBox", [
       'dijit/form/CheckBox',
       'dojo/_base/declare'
],
function(checkBox, declare) {
    var widget = declare('Sage.UI.Controls.CheckBox', checkBox, {
        hotKey: '',
        //.Net control behavior
        autoPostBack: false,
        labelText: '',
        labelPlacement: '',
        // @property {boolean} - Indicates whether the implementation should publish that it has dirty data to the ClientBindingManagerService.
        // default = true
        shouldPublishMarkDirty: true,
        constructor: function() {
            this.inherited(arguments);
        },
        postCreate: function () {
            if(this.hotKey !== '') {
                this.focusNode.accessKey = this.hotKey;
            }

            this.connect(this, 'onChange', this.onChanged);

            this._insertLabel();

            this.inherited(arguments);
        },
        _insertLabel: function() {
            var position = 'before',
                labelNode = null;

            if(this.labelPlacement === 'right') {
                position = 'after';
            }

            if(this.labelPlacement !== 'none') {
                labelNode = dojo.create('label', {'for': this.id, innerHTML: this.labelText}, this.domNode, position);
                if(this.labelPlacement === 'top') {
                    // Insert a break after the label, so it appears on top of the checkbox
                    dojo.create('br', null, labelNode, 'after');
                }
            }
        },
        onChanged: function (e) {
            // If configured to do so, publishes the markDirty event, showing that there is un-saved data. 
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if (this.autoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.id, '');
                }
            }
        }
    });
    
    return widget;
});


},
'Sage/UI/TimeZoneItem':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/TimeZoneItem", [
    'dijit/MenuBar',
    'Sage/UI/MenuItem',
    'Sage/UI/PopupMenuBarItem',
    'Sage/UI/OrientableMenuBar',
    'Sage/UI/MenuBarItem',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/i18n',
    'dojo/data/ItemFileReadStore',
    'dojo/i18n!./nls/TimeZoneItem',
    'dojo/_base/declare'
],
function (MenuBar, MenuItem, PopupMenuBarItem, OrientableMenuBar, MenuBarItem, _DialogHelpIconMixin, i18n, itemFileReadStore, nlsResource, declare) {
    var TimeZoneItem = declare('Sage.UI.TimeZoneItem', MenuBar, {
        _TimeZoneDialog: new Simplate(['<div><div style="height:auto;">',
            '{%= $.setTimeZone %}<br />',
            '<select id="timeZoneItemsList" data-dojo-type="dijit.form.Select" shouldPublishMarkDirty="false" style="width:345px; margin-top:10px; margin-bottom:10px;"></select></div>',
            '<div class="button-bar alignright"><button data-dojo-type="dijit.form.Button"',
            ' type="button" id="btnTimeZoneDialogOk" title="{%= $.buttonOK %}" align="right">{%= $.buttonOK %}</button>',
            '<button data-dojo-type="dijit.form.Button"',
            ' type="button" id="btnTimeZoneDialogCancel" title="{%= $.buttonCancel %}" align="right">{%= $.buttonCancel %}</button>',
            '</div></div>']),
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.UI", "TimeZoneItem"));

            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            
            var initialLabel;
            
            initialLabel = Sage.Utility.getClientContextByKey('userTimeZone');

            this.addChild(new MenuBarItem({
                label: initialLabel,
                title: this.timeZoneText,
                id: 'btnTimeZoneMenu',
                onClick: function () {
                    dojo.xhrGet({
                        url: 'slxdata.ashx/slx/crm/-/timezones/p',
                        handleAs: 'json',
                        load: function (data) {
                            var timeZoneMenu = dijit.byId('TimeZoneMenu'),
                                btnTimeZoneMenu = dijit.byId('btnTimeZoneMenu');

                            timeZoneMenu._initializeDialog();
                            timeZoneMenu._initializeTimeZoneDataStore(data, btnTimeZoneMenu.label);
                        },
                        error: function (err) {
                        }
                    });
                }
            }));
        },
        _initializeDialog: function () {
            var timeZoneMenu = dijit.byId('TimeZoneMenu');
            var d = new dijit.Dialog({
                title: timeZoneMenu.timeZoneSettingsText,
                style: "width:auto;"
            });

            dojo.mixin(d, new _DialogHelpIconMixin());
            d.createHelpIconByTopic("Select_TimeZone");
            
            var mkup = this._TimeZoneDialog.apply({
                buttonOK: timeZoneMenu.buttonOKText,
                buttonCancel: timeZoneMenu.buttonCancelText,
                setTimeZone: timeZoneMenu.setTimeZoneText
            });

            d.set('content', mkup);
            d.show();

            var fnHide = function() {
                dojo.disconnect(_closed);
                dojo.disconnect(closeClick);
                dojo.disconnect(okClick);
                
                setTimeout((function (d) {
                    return function () {
                        d.destroyDescendants();
                        d.destroy(false);
                    };
                })(d), 1);
            };
            
            var fnDestroy = function () {
                d.hide();
            };

            var fnOkClick = function () {
                var timeZoneItemsList = dijit.byId('timeZoneItemsList'),
                    timeZoneMenu = dijit.byId('TimeZoneMenu'),
                    selectedItem = '';
                
                for(var i = 0; i < timeZoneItemsList.options.length; i++) {
                    if(timeZoneItemsList.options[i].value === timeZoneItemsList.value) {
                        selectedItem = timeZoneItemsList.options[i];
                        break;
                    }
                }
                
                if (selectedItem) {                    
                    timeZoneMenu._updateTimeZone(selectedItem, timeZoneMenu.location ? true : false);
                }
                d.hide();
            };

            var _closed = dojo.connect(d, "hide", this, fnHide);
            var closeClick = dojo.connect(dijit.byId('btnTimeZoneDialogCancel'), "onClick", this, fnDestroy);
            var okClick = dojo.connect(dijit.byId('btnTimeZoneDialogOk'), "onClick", this, fnOkClick);
        },
        _initializeTimeZoneDataStore: function (data, selectedValue) {
            var items = [];
            var selectedOffset = '';
            
            for(var i = 0; i < data.length; i++) {
                if(!data[i].Displayname || !data[i].Keyname) {
                    continue;
                }
                
                if(data[i].Displayname == selectedValue) {
                    var parsedDisplayName = data[i].Displayname.split(')');
                    selectedOffset = data[i].OffsetHours;
                    
                    break;
                }
            };
            
            dojo.forEach(data, function (item) {
                if (!item.Displayname || !item.Keyname) {
                    return;
                }
                if(item.OffsetHours == selectedOffset) {
                    items.push({
                        id: item.Keyname,
                        text: item.Displayname
                    });
                }
            });

            var storeData = {
                label: 'text',
                identifier: 'id',
                items: items
            };

            var timeZoneStore = new itemFileReadStore({
                data: storeData
            });

            var timeZoneList = dijit.byId('timeZoneItemsList');
            timeZoneList.setStore(timeZoneStore);
            timeZoneList.set('searchAttr', 'text');
            
            for(var i = 0; i < timeZoneList.options.length; i++) {
                if(timeZoneList.options[i].label === selectedValue) {
                    timeZoneList.setValue(timeZoneList.options[i].value);
                    break;
                }
            }
        },
        _updateTimeZone: function (selectedItem, isCustomerPortal) {
            var payload = {
                "$name": "setusertimezone",
                "request": {
                    "UserId": Sage.Utility.getClientContextByKey('userID'),
                    "userTimeZone": selectedItem.value,
                    "isCustomerPortal": isCustomerPortal ? 't' : ''
                }
            };
            var request = new Sage.SData.Client.SDataServiceOperationRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'))
                .setResourceKind('users')
                .setOperationName('setusertimezone');
            request.execute(payload, {
                success: function () {
                    var btnTimeZoneMenu = dijit.byId('btnTimeZoneMenu');
                    btnTimeZoneMenu.setLabel(selectedItem.label);
                },
                failure: function () {
                    console.log('Failure to Change Time Zone');
                },
                scope: this
            });
        }
    });

    return TimeZoneItem;
});

},
'Sage/MainView/ActivityMgr/HistoryEditor':function(){
require({cache:{
'url:Sage/MainView/ActivityMgr/templates/HistoryEditor.html':"﻿\r\n[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"historyDialog\" title=\"\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onDlgHide\">',\r\n        '<div class=\"activity-dialog\">',  //body\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\">',\r\n                '<select label=\"{%= $.regardingText %}\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_pk_Regarding\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Regarding\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                '<div dojoType=\"Sage.UI.Controls.TextBox\" shouldPublishMarkDirty=\"false\" label=\"{%= $.locationText %}\" id=\"{%= $.id %}_tb_Location\" dojoAttachPoint=\"tb_Location\" maxLength=\"255\" ></div>',\r\n            '</div>', //first tablecontainer 1 col\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\">',\r\n                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_CompletetdDate\" dojoAttachPoint=\"dtp_completedDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.completedDateText %}\"></div>',\r\n                '<div dojoType=\"Sage.UI.Controls.DateTimePicker\" shouldPublishMarkDirty=\"false\" id=\"{%= $.id %}_dtp_StartDate\" dojoAttachPoint=\"dtp_startDate\" displayDate=\"true\" displayTime=\"true\" label=\"{%= $.startTimeText %}\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    '<div dojoType=\"dijit.form.CheckBox\" label=\"{%= $.timeLessText %}\" id=\"{%= $.id %}_cb_Timeless\" dojoAttachPoint=\"cb_Timeless\" ></div>',\r\n                    '<label class=\"checkbox-label\" for=\"cb_Timeless\">{%= $.timeLessText %}</label>',\r\n                '</div>',\r\n                 '<div dojoType=\"Sage.UI.Controls.DurationSelect\" shouldPublishMarkDirty=\"false\" label=\"{%= $.durationText %}\" id=\"{%= $.id %}_sel_Duration\" dojoAttachPoint=\"sel_Duration\" includeDisablingCheckbox=\"false\" valuesAreAfterStart=\"true\"></div>',\r\n                '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                    \r\n                '</div>',\r\n            '</div>', //second tablecontainer 2 col\r\n\r\n            '<div dojoType=\"dijit.layout.TabContainer\" id=\"{%= $.id %}_tc_EditHistory\"  dojoAttachPoint=\"tc_EditHistory\" class=\"tab-container\">',\r\n/*  General Tab   */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_General\" title=\"{%= $.tabNameGeneralText %}\" class=\"tabContent remove-padding\" dojoAttachPoint=\"cp_General\">',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"result_Section\" class=\"bottom-border-section\">',\r\n                        '<select label=\"{%= $.resultText %}\" id=\"{%= $.id %}_tb_Result\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Result\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"></select>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"4\" labelWidth=\"4\" baseClass=\"contact-lead-radios\" >',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.contactText %}\" value=\"contact\" id=\"{%= $.id %}_rdo_Contact\" dojoAttachPoint=\"rdo_Contact\" dojoAttachEvent=\"onChange:_setContactLeadVisibility\" checked=\"true\" />',\r\n                        '<input dojoType=\"dijit.form.RadioButton\" type=\"radio\" name=\"contactOrLead\" label=\"{%= $.leadText %}\" value=\"lead\" id=\"{%= $.id %}_rdo_Lead\" dojoAttachPoint=\"rdo_Lead\" />',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"contactContainer\" baseClass=\"bottom-border-section\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_ContactLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.opportunityText %}\" dojoAttachPoint=\"container_OppLup\" class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.accountText %}\" dojoAttachPoint=\"container_AccountLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.ticketText %}\" dojoAttachPoint=\"container_TicketLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"leadContainer\"  baseClass=\"bottom-border-section\" class=\"display-none\">',\r\n                        '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.nameText %}\" dojoAttachPoint=\"container_LeadLup\"  class=\"remove-padding lookup-container\"></div>',\r\n                        '<input dojoType=\"dijit.form.TextBox\" id=\"{%= $.id %}_tb_LeadCompanyName\" label=\"{%= $.companyText %}\" dojoAttachPoint=\"tb_LeadCompanyName\" readonly=\"true\" />',\r\n                    '</div>',                       \r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"{%= $.labelWidth %}\"  class=\"bottom-border-section\">',\r\n                        '<select label=\"{%= $.categoryText %}\" id=\"{%= $.id %}_pk_Category\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Category\" canEditText=\"true\" itemMustExist=\"false\" maxLength=\"64\"  style=\"width: {%= 472 - $.labelWidth %}px;\" ></select>', \r\n                         '<div dojoType=\"dijit.layout.ContentPane\" label=\"{%= $.leaderText %}\" dojoAttachPoint=\"container_LeaderLup\" class=\"remove-padding lookup-container\" style=\"width: {%= 472 - $.labelWidth %}px;\"></div>',\r\n                         '<select label=\"{%= $.priorityText %}\" id=\"{%= $.id %}_pk_Priority\" shouldPublishMarkDirty=\"false\" dojoType=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pk_Priority\" canEditText=\"true\" itemMustExist=\"false\" pickListName=\"Priorities\" sort=\"false\" maxLength=\"64\" style=\"width: {%= 472 - $.labelWidth %}px;\"></select>',                          \r\n                    '</div>',\r\n                    '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\"  class=\"valigntop\">',\r\n                        '<textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_ta_Notes\" label=\"{%= $.notesText %}\" dojoAttachPoint=\"ta_Notes\" class=\"notes-text\" ></textarea>',\r\n                    '</div>',\r\n                '</div>',  // end general tab\r\n\r\n              /* Attachments Tab  */\r\n                '<div dojoType=\"dijit.layout.ContentPane\" id=\"{%= $.id %}_cp_Attachments\" title=\"{%= $.tabNameAttachmentsText %}\" class=\"tabContent\" dojoAttachPoint=\"cp_Attachments\" dojoAttachEvent=\"onShow:_showAttachmentsTab\">',\r\n                    '<div id=\"{%= $.id %}_attachmentsGridPlaceholder\" dojoAttachPoint=\"_attachmentGridPlaceholder\" style=\"width:100%;height:100%;\" ></div>',\r\n                '</div>',  //end attachments tab\r\n            '</div>', //end tab container\r\n            '<table class=\"button-bar\">',\r\n                '<col width=\"50%\" /><col width=\"50%\" />',\r\n                 '<tr>',\r\n                    '<td class=\"alignleft\">',\r\n                        //followUp section\r\n                        '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"{%= $.labelWidth %}\" dojoAttachPoint=\"followUp_Section\" >',\r\n                            '<select label=\"{%= $.followupText %}\" id=\"{%= $.id %}_followUpSelect\" dojoType=\"dijit.form.ComboBox\" dojoAttachPoint=\"sel_Followup\">',\r\n                                '<option value=\"none\" selected=\"selected\">{%= $.noneText %}</option>',\r\n                                '<option value=\"atPhoneCall\">{%= Sage.Utility.Activity.getActivityTypeName(\"atPhoneCall\") %}</option>',\r\n                                '<option value=\"atAppointment\">{%= Sage.Utility.Activity.getActivityTypeName(\"atAppointment\") %}</option>',\r\n                                '<option value=\"atToDo\">{%= Sage.Utility.Activity.getActivityTypeName(\"atToDo\") %}</option>',\r\n                            '</select>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_ck_coAttachments\" dojoAttachPoint=\"ck_coAttachments\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coAttachments\">{%= $.carryOverAttachmentsText %}</label>',\r\n                            '</div>',\r\n                            '<div dojoType=\"dijit.layout.ContentPane\" label=\"\" class=\"remove-padding\">',\r\n                                '<div dojoType=\"dijit.form.CheckBox\" label=\"\" id=\"{%= $.id %}_ck_coNotes\" dojoAttachPoint=\"ck_coNotes\" ></div>',\r\n                                '<label class=\"checkbox-label\" for=\"{%= $.id %}_ck_coNotes\">{%= $.carryOverNotesText %}</label>',\r\n                            '</div>',\r\n                        '</div>',//end followUp section                         \r\n                    '</td>',\r\n                    '<td class=\"alignright valignbottom\" rowspan=\"2\">',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btnDelete\" name=\"btn_Delete\" dojoAttachPoint=\"btn_Delete\" dojoAttachEvent=\"onClick:_deleteClick\">{%= $.deleteText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $. cancelText %}</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                   '<td class=\"alignleft\">',\r\n                      '<div class=\"scheduled-by-label\" dojoAttachPoint=\"lbl_ScheduledBy\"></div>',\r\n                   '</td>',                 \r\n                '</tr>',\r\n            '</table>',\r\n        '</div>', //body\r\n    '</div>',  //dialog\r\n'</div>' //root node\r\n]\r\n"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/HistoryEditor", [
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/MainView/BindingsManager',
    'Sage/Utility',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'Sage/UI/_DialogLoadingMixin',
    'Sage/UI/AttachmentList',
    'Sage/Data/SDataServiceRegistry',
    'Sage/UI/Dialogs',
    'dojo/string',
    'dojo/date/locale',
    'Sage/Utility/Activity',
    'Sage/Utility/File',
    'dojo/_base/declare',
    'dojo/i18n!./nls/HistoryEditor',
    'dojo/text!./templates/HistoryEditor.html',
    'dojo/dom-class',

    'dijit/Toolbar',
    'dijit/layout/TabContainer',
    'dijit/layout/ContentPane',
    'dijit/form/Textarea',
    'dojox/layout/TableContainer',
    'Sage/Services/UserOptions',
    'Sage/UI/Controls/SingleSelectPickList',
    'Sage/UI/Controls/DateTimePicker',
    'Sage/UI/Controls/Lookup',
    'dijit/Dialog',
    'Sage/UI/Controls/DurationSelect',
    'Sage/Services/CalendarSecurityService'
],
function (_Widget, _Templated, SingleEntrySDataStore, BindingsManager, utility, _DialogHelpIconMixin,
    dojoLang, _DialogLoadingMixin, AttachmentList, sDataServiceRegistry, SageDialogs, dstring, locale,
    activityUtility, fileUtility, declare, historyEditorStrings, template, domClass) {
    dojo.requireLocalization("Sage.MainView.ActivityMgr", "HistoryEditor");
    var historyEditor = declare('Sage.MainView.ActivityMgr.HistoryEditor', [_Widget, _Templated], {
        historyId: '',
        mode: '',
        id: '',
        activityType: '',
        _dialog: false,
        _currentUserId: null,
        _activityService: false,
        _historyData: false,
        _historyStore: false,
        _bindingMgr: false,
        //_uaBindingMgr: false,
        lup_Account: false,
        lup_Contact: false,
        lup_Opportunity: false,
        lup_Ticket: false,
        lup_Lead: false,
        lup_Leader: false,
        accountLookupConfig: {},
        contactLookupConfig: {},
        opportunityLookupConfig: {},
        ticketLookupConfig: {},
        leadLookupConfig: {},
        //resourcesLookupConfig: {},
        _isBinding: false,
        _historySaved: false,
        notnullfields: ['ContactId', 'AccountId', 'OpportunityId', 'TicketId', 'LeadId'],
        historyDefaultValues: {},
        _doingFollowup: false,

        //i18n strings...from nls/{language}/HistoryEditor.js        

        _attachmentsSaved: false,
        _attachmentList: false,
        _tempIdForAttachments: false,
        _hasAccess: true,
        eventConnections: [],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojo.mixin(this, historyEditorStrings);
            this._historyService = Sage.Data.SDataServiceRegistry.getSDataService('dynamic');
            this._setupStore();
            this._currentUserId = Sage.Utility.getClientContextByKey('userID') || '';
            dojo.subscribe('/entity/attachment/create', this, this._updateHistoryETag);
            dojo.subscribe('/entity/attachment/update', this, this._updateHistoryETag);
            dojo.subscribe('/entity/attachment/delete', this, this._updateHistoryETag);
        },
        destroy: function () {
            if (this._historyChangeConnection) {
                dojo.disconnect(this._historyChangeConnection);
                this._historyChangeConnection = false;
            }
            if (this._bindingMgr) {
                this._bindingMgr.destroy();
            }
            //if (this._uaBindingMgr) {
            //    this._uaBindingMgr.destroy();
            //}
            for (var i = 0; i < this.eventConnections.length; i++) {
                dojo.disconnect(this.eventConnections[i]);
            }
            this.lup_Account.destroy();
            this.lup_Contact.destroy();
            this.lup_Opportunity.destroy();
            this.lup_Ticket.destroy();
            this.lup_Lead.destroy();
            this.lup_Leader.destroy();
            this.eventConnections = [];
            this.inherited(arguments);
        },
        isFirstOpen: true,
        show: function (mixinProperties) {
            this._dialog.set('refocus', false);
            if (this.isFirstOpen) {
                // create lookup controls...
                this.isFirstOpen = false;
                this.connect(this._dialog, 'onHide', this._cleanOnClose);
            }

            if (!this.lup_Account) {
                // create lookup controls...
                this.createAccountLookup();
                this.createContactLookup();
                this.createOpportunityLookup();
                this.createTicketLookup();
                this.createLeadLookup();
                this.createLeaderLookup();

            }

            this.historyDefaultValues = {};
            if (this.mode === 'New') {
                this.historyDefaultValues = mixinProperties || {};
                this._loadData();
            }
            if (this.mode === 'Complete') {

            }
            if (this.mode === 'Complete') {
                domClass.add(this.btn_Delete.domNode, 'display-none');
            } else {
                domClass.remove(this.btn_Delete.domNode, 'display-none');
            }
            if ((this.activityType === "atNote") && (this.mode === 'New')) {
                dojo.addClass(this.result_Section.domNode, 'display-none');
            }
            else {
                dojo.removeClass(this.result_Section.domNode, 'display-none');
            }

            this._dialog.show();

            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
                if (!this._historyData) {
                    this._dialog.showLoading();
                }
            }
            // Create help icon
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('View_Edit_Details_of_a_History_Item');
            }
            if (this.activityType === "atNote") {
                this._dialog.set('helpTopic', 'addnote');
            }
            else {

                this._dialog.set('helpTopic', 'View_Edit_Details_of_a_History_Item');
            }
            //this._availabilityShowing = false;
            this.tc_EditHistory.selectChild(this.cp_General);
            this._doingFollowup = false;
        },
        hide: function (e) {
            this._dialog.hide(e);
            this.set('historyId', '');
        },
        onHide: function () { },
        _onDlgHide: function () {
            this.onHide();
        },
        _cleanOnClose: function () {
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            this.set('historyId', '');
        
            //Making sure the tooltips are hidden when closing the dialog
            this._hideLookupTooltip(this.lup_Account);
            this._hideLookupTooltip(this.lup_Contact);
            this._hideLookupTooltip(this.lup_Opportunity);
            this._hideLookupTooltip(this.lup_Ticket);
            this._hideLookupTooltip(this.lup_Lead);
            this._hideLookupTooltip(this.lup_Leader);
        },
        _hideLookupTooltip: function (control) {
            if(control) {
                control.hideTooltip();
            }
       },
        _showAttachmentsTab: function () {
            var self = this;
            window.setTimeout(function () {
                self._ensureAttachmentList();
            }, 100);

        },
        _ensureAttachmentList: function () {
            if (!this._attachmentList) {
                this._attachmentList = new AttachmentList({
                    workspace: '',
                    tabId: '',
                    placeHolder: this.id + '_attachmentsGridPlaceholder',
                    parentRelationshipName: 'historyId'
                });
                var self = this;
                this._attachmentList.startup(function () {
                    if (self.cp_Attachments) {
                        self.cp_Attachments.resize();
                    }
               });
            } else {
               this._attachmentList.resetEntityContext();
            }

        },
        // ... region - History data methods   .....................
        _updateHistoryETag: function (attachment) {
            //listener for attachment record changes.  
            if (this._dialog.open && this.historyId) {
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('dynamic'));
                req.setResourceKind('history');
                req.setResourceSelector('"' + this.historyId + '"');
                req.setQueryArg('precedence', '0');
                req.read({
                    success: function (history) {
                        this._historyData['$etag'] = history['$etag'];
                    },
                    scope: this
                });
            }
        },
        _setModeAttr: function (mode) {
            this.mode = mode;
            if (mode.indexOf('New') === 0) {
                this._historyData = false;
                //this._loadData();
            }
        },
        _setActivityTypeAttr: function (type) {

            switch (type) {
                case 'PhoneCall':
                case 'atPhoneCall':
                    this.activityType = 'atPhoneCall';
                    break;
                case 'Meeting':
                case 'atAppointment':
                    this.activityType = 'atAppointment';
                    break;
                case 'ToDo':
                case 'atToDo':
                    this.activityType = 'atToDo';
                    break;
                case 'PersonalActivity':
                case 'atPersonal':
                case 'Personal':
                    this.activityType = 'atPersonal';
                    break;
                case 'atNote':
                case 'Note':
                    this.activityType = 'atNote';
                    break;
                default:
                    this.activityType = 'atNote';
                    break;
            }


        },
        _setHistoryIdAttr: function (historyId) {
            if (this.historyId !== historyId) {
                this.historyId = historyId;
                this._historyData = false;
                //console.log('setting the historyid <' + historyId + '>');
                if (historyId !== '') {
                    this._loadData();
                }
            }
        },
        _getHistoryIdAttr: function () {
            return this.historyId;
        },
        _setupStore: function () {
            if (!this._historyStore) {
                this._historyStore = new SingleEntrySDataStore({
                    include: [],
                    resourceKind: 'history',
                    service: this._historyService
                });
            }
        },
        _loadData: function () {

            if (this._dialog._standby) {
                this._dialog.showLoading();
            }


            this._historyData = false;
            this._historySaved = false;
            if (this._historyStore) {
                if (this.mode !== 'New') {
                    this._historyStore.fetch({
                        predicate: '"' + this.historyId + '"',
                        onComplete: this._receivedHistory,
                        onError: this._requestFailure,
                        scope: this
                    });
                } else {
                    this._historyStore.newItem({
                        onComplete: function (data) {
                            Sage.Utility.setValue(data, 'Type', this.activityType);
                            this._receivedHistory(dojo.mixin(data, this.historyDefaultValues));
                            //this._receivedHistory(data);
                        },
                        scope: this
                    });
                }
            }

        },
        _receivedHistory: function (data) {
            this._historyData = data;
            this._tempIdForAttachments = false;

            var contextSvc = Sage.Services.getService('ClientEntityContext');
            var context = {
                "EntityId": this._historyData.$key || '',
                "EntityType": "Sage.Entity.Interfaces.IHistory",
                "Description": this._historyData.$descriptor,
                "EntityTableName": "HISTORY"
            };
            contextSvc.setTemporaryContext(context);

            this._ensureIdsNotNull();
            if (this.mode !== 'New') {
                this.activityType = data.Type;
            } else {
                this._applyUserOptionsForNewHistory();
            }
            this._setUIForActivityType(data.Type);
            this._bind();

            //decide if the delete button should show or not...
            if (((this.activityType === "atNote") && (this.mode === 'New'))
                || (data['UserId'] !== this._currentUserId && this._currentUserId.trim() !== 'ADMIN')) {
                dojo.addClass(this.btn_Delete.domNode, 'display-none');
            }
            else {
                dojo.removeClass(this.btn_Delete.domNode, 'display-none');
            }

            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
        },
        _ensureIdsNotNull: function () {
            for (var i = 0; i < this.notnullfields.length; i++) {
                if (this._historyData[this.notnullfields[i]] === null) {
                    this._historyData[this.notnullfields[i]] = '';
                }
            }
        },
        _applyUserOptionsForNewHistory: function () {
            //set start and alarm time to user options.
            var newDate = new Date();
            newDate.setSeconds(5);
            newDate.setMinutes(0);
            newDate.setHours(0);
            Sage.Utility.setValue(this._historyData, 'Timeless', true);
            Sage.Utility.setValue(this._historyData, 'StartDate', Sage.Utility.Convert.toIsoStringFromDate(newDate));

            //set default duration...
            Sage.Utility.setValue(this._historyData, 'Duration', '60');
        },

        _requestFailure: function (msg, request, opts) {
            console.warn('error requesting data %o', arguments);
        },
        _createBindings: function () {
            if (this._bindingMgr) {
                this._bindingMgr.destroy();
                this._bindingMgr = false;
            }
            this._bindingMgr = new BindingsManager({
                defaultBinding: { boundEntity: this._historyData },
                items: [
                    {
                        boundWidget: this.tb_Location,
                        entityProperty: 'Location'
                    }, {
                        boundWidget: this.pk_Regarding,
                        entityProperty: 'Description',
                        onChange: dojo.hitch(this, '_descriptionChanged')
                    }, {
                        boundWidget: this.pk_Result,
                        entityProperty: 'Result'
                    }, {
                        boundWidget: this.pk_Category,
                        entityProperty: 'Category'
                    }, {
                        boundWidget: this.pk_Priority,
                        entityProperty: 'Priority'
                    }, {
                        boundWidget: this.dtp_startDate,
                        dataType: 'date',
                        entityProperty: 'StartDate',
                        onChange: dojo.hitch(this, '_startDateChanged')
                    }, {
                        boundWidget: this.dtp_completedDate,
                        dataType: 'date',
                        entityProperty: 'CompletedDate'
                        //onChange: dojo.hitch(this, '_completedDateChanged')
                    }, {
                        boundWidget: this.sel_Duration,
                        entityProperty: 'Duration'
                    },{
                          boundWidget: this.sel_Duration,
                          entityProperty: 'StartDate',
                          widgetProperty: 'startTime',
                          dataType: 'date',
                          twoWay: false
                      }, {
                        boundWidget: this.cb_Timeless,
                        entityProperty: 'Timeless',
                        widgetProperty: 'checked',
                        onChange: dojo.hitch(this, '_timelessChange')
                    }, {
                        boundWidget: this.ta_Notes,
                        entityProperty: 'LongNotes'
                    }
                ]
            });
            //this._historyChangeConnection = dojo.connect(this._bindingMgr, 'onChange', this, 'onChange');
        },
        _bind: function () {
            if (this._historyData) {
                if (!this._bindingMgr) {
                    this._createBindings();
                } else {
                    if (!this._bindingMgr.boundEntity || (this._historyData.HistoryId !== this._bindingMgr.boundEntity.HistoryId)) {
                        this._bindingMgr.setBoundEntity(this._historyData);
                    } else {
                        this._bindingMgr.bind();
                    }
                }
                this._manualBind();
                this._setUI();
            }
        },
        _manualBind: function () {
            //because there are not relationships to several related entities, we have to manually bind to keep the denormalized data in sync...

            if (this._historyData) {
                this._isBinding = true;  //this prevents the change event handlers from overwriting values that we are going to set here...
                //for example, the account change handler removes the contact, opp, and ticket values.
                // account...
                var his = this._historyData;
                var mockAcctObj = (his.AccountId.trim() === '') ? null : {
                    '$key': his.AccountId,
                    '$descriptor': his.AccountName
                };
                this.lup_Account.set('selectedObject', mockAcctObj);
                // contact...
                var mockContact = (his.ContactId.trim() === '') ? null : {
                    '$key': his.ContactId,
                    '$descriptor': his.ContactName
                };
                this.lup_Contact.set('selectedObject', mockContact);

                // opportunity...
                var mockOpp = (his.OpportunityId.trim() === '') ? null : {
                    '$key': his.OpportutunityId,
                    '$descriptor': his.OpportunityName
                };
                this.lup_Opportunity.set('selectedObject', mockOpp);

                // ticket...
                var mockTick = (his.TicketId.trim() === '') ? null : {
                    '$key': his.TicketId,
                    '$descriptor': his.TicketNumber
                };
                this.lup_Ticket.set('selectedObject', mockTick);

                // lead...
                var mockLead = (his.LeadId.trim() === '') ? null : {
                    '$key': his.LeadId,
                    '$descriptor': his.LeadName
                };

                // Leader...
                var mockLeader = (his.UserId.trim() === '') ? null : {
                    '$key': his.UserId,
                    '$descriptor': his.UserName
                };
                this.lup_Leader.set('selectedObject', mockLeader);

                this.lup_Lead.set('selectedObject', mockLead);
                this.tb_LeadCompanyName.set('value', (his.LeadId.trim() === '') ? '' : his.AccountName);

                this._updateLookupSeedValues(his.AccountId);

                this._isBinding = false;
            }
        },

        _accountChanged: function (newAcct) {

            if (this._isBinding) { return; }

            var newId = (newAcct) ? newAcct['$key'] : '';
            var newActName = (newAcct) ? newAcct['$descriptor'] : '';

            var his = this._historyData;
            var mustSetContact = (his.ContactId === '');

            his.AccountId = newId;
            his.AccountName = newActName;
            his.ContactId = '';
            his.ContactName = '';
            his.PhoneNumber = '';
            his.OpportunityId = '';
            his.OpportunityName = '';
            his.TicketId = '';
            his.TicketNumber = '';
            his.LeadId = '';
            his.LeadName = '';

            this._isBinding = true;
            this.lup_Contact.set('selectedObject', null);
            this.lup_Opportunity.set('selectedObject', null);
            this.lup_Ticket.set('selectedObject', null);
            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            this._updateLookupSeedValues(newId);

            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            if (mustSetContact) {
                this._setContactToCurrentAccountPrimary();
            }
            this._isBinding = false;
        },
        _contactChanged: function (newContact) {
            if (this._isBinding) { return; }
            var his = this._historyData;
            if (!newContact) {
                his.ContactId = '';
                his.ContactName = '';
                his.PhoneNumber = '';
                return;
            }
            his.ContactId = newContact['$key'];
            his.ContactName = newContact['$descriptor'];
            his.PhoneNumber = Sage.Utility.getValue(newContact, 'WorkPhone');

            //remove lead
            his.LeadId = '';
            his.LeadName = '';

            //set associated account
            his.AccountId = newContact.Account['$key'];
            his.AccountName = newContact.Account.AccountName;
            //account changed, so update seed values...
            this._updateLookupSeedValues(newContact.Account['$key']);

            this._isBinding = true;
            this.lup_Account.set('selectedObject', { '$key': newContact.Account['$key'], '$descriptor': newContact.Account.AccountName });
            this.lup_Lead.set('selectedObject', null);
            this.tb_LeadCompanyName.set('value', '');
            this._isBinding = false;

        },
        _opportunityChanged: function (newOpp) {
            if (this._isBinding) { return; }
            /*
            The logic for when the opportunity changes is like this...
            - If there is already a contact and account selected, and the opportunity is associated to the same account - do nothing
            - If there is no contact or account selected for the activity - or the account is different do the following:
            - Set the account to the associated account and:
            - If ONE associated contact is marked IsPrimary = true set the contact to it.
            - if more than one associated contact is marked primary, or none are marked primary, 
            -if one of these is primary for the account and use it
            -if not, just grab the first one.
            -if there are no contacts associate with the opportunity, use the account's primary contact.
            */

            var his = this._historyData;
            if (!newOpp) {
                his.OpportunityId = '';
                his.OpportunityName = '';
                return;
            }
            his.OpportunityId = newOpp['$key'];
            his.OpportunityName = newOpp['$descriptor'];

            if (his.AccountId.trim() === '' || his.AccountId !== newOpp.Account['$key']) {

                //set the associated account...
                his.AccountId = newOpp.Account['$key'];
                his.AccountName = newOpp.Account.AccountName;
                his.LeadId = '';
                his.LeadName = '';

                this._updateLookupSeedValues(newOpp.Account['$key']);

                this._isBinding = true;
                this.lup_Account.set('selectedObject', { '$key': newOpp.Account['$key'], '$descriptor': newOpp.Account.AccountName });
                //remove contact for now, then when we find the primary, we'll set it again.
                this.lup_Contact.set('selectedObject', null);
                this.lup_Lead.set('selectedObject', null);
                this.tb_LeadCompanyName.set('value', '');
                this._isBinding = false;

                this._setContactBasedOnOpportunity();
            }
        },
        _ticketChanged: function (newTick) {
            if (this._isBinding) { return; }
            var his = this._historyData;
            if (!newTick) {
                his.TicketId = '';
                his.TicketNumber = '';
                return;
            }

            his.TicketId = newTick['$key'];
            his.TicketNumber = newTick['$descriptor'];
            //update account and contact, if there isn't an account - or if the account is different from the ticket's account
            if (his.AccountId.trim() === '' || his.AccountId !== newTick.Account['$key']) {
                his.AccountId = newTick.Account['$key'];
                his.AccountName = newTick.Account['AccountName'];
                his.LeadId = '';
                his.LeadName = '';
                this._updateLookupSeedValues();

                //Do we set it to the contact associated with the ticket - or the primary?
                // I'm going with the one on the ticket, but previous versions used the primary...
                his.ContactId = Sage.Utility.getValue(newTick, 'Contact.$key');
                his.ContactName = Sage.Utility.getValue(newTick, 'Contact.NameLF');
                his.PhoneNumber = Sage.Utility.getValue(newTick, 'Contact.WorkPhone');

                this._isBinding = true;
                this.lup_Account.set('selectedObject', { '$key': newTick.Account['$key'], '$descriptor': newTick.Account['AccountName'] });
                this.lup_Contact.set('selectedObject', { '$key': newTick.Contact['$key'], '$descriptor': newTick.Contact['NameLF'] });
                this.lup_Lead.set('selectedObject', null);
                this.tb_LeadCompanyName.set('value', '');
                this._isBinding = false;
                // In case I have to change it back to the account's primary...
                //this._setContactToCurrentAccountPrimary();
            }
        },
        _leadChanged: function (newLead) {
            if (this._isBinding) { return; }
            //console.warn('handle new lead: %o', newLead);
            var his = this._historyData;
            if (!newLead) {
                his.LeadId = '';
                his.LeadName = '';
                his.PhoneNumber = '';
                this.tb_LeadCompanyName.set('value', '');
                return;
            }

            his.LeadId = newLead['$key'];
            his.LeadName = newLead['$descriptor'];
            his.AccountName = newLead['Company'];
            his.PhoneNumber = newLead['WorkPhone'];
            this.tb_LeadCompanyName.set('value', newLead['Company']);

            //clear out the TACO and make way for Lead.
            his.ContactId = '';
            his.ContactName = ''; //this.LeadName;
            his.AccountId = '';
            his.AccountName = '';
            his.TicketId = '';
            his.TicketNumber = '';
            his.OpportunityId = '';
            his.OpportunityName = '';
            this._updateLookupSeedValues();
            this._isBinding = true;
            this.lup_Contact.set('selectedObject', null);
            this.lup_Account.set('selectedObject', null);
            this.lup_Opportunity.set('selectedObject', null);
            this.lup_Ticket.set('selectedObject', null);
            this._isBinding = false;
        },
        _leaderChanged: function (newLeader) {
            if (this._isBinding) {
                return;
            }
            this._historyData.UserId = newLeader['$key'].substr(0, 12);
            this._historyData.UserName = newLeader['$descriptor'];
        },
        _setContactBasedOnOpportunity: function () {
            //return;

            var req = new Sage.SData.Client.SDataResourceCollectionRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('opportunities');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + this._historyData.OpportunityId + '"';
            req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'IsPrimary,Contact/NameLF,Contact/IsPrimary,Contact/WorkPhone');
            req.setQueryArg('orderby', 'IsPrimary desc');
            req.read({
                success: function (data) {
                    var oppCons = data['$resources'];
                    if (oppCons.length < 1) {
                        this._setContactToCurrentAccountPrimary();
                        return;
                    }
                    var oppPri = false, accPri = false, firstCon = oppCons[0], newActCon;
                    for (var i = 0; i < oppCons.length; i++) {
                        if (oppCons[i].IsPrimary) {
                            if (!oppPri || oppCons[i].Contact.IsPrimary) {
                                oppPri = oppCons[i];
                            }
                        }
                        if (!accPri && oppCons[i].Contact.IsPrimary) {
                            accPri = oppCons[i];
                        }
                    }

                    newActCon = oppPri || accPri || firstCon;

                    if (newActCon) {
                        this._historyData.ContactId = Sage.Utility.getValue(newActCon, 'Contact.$key');
                        this._historyData.ContactName = Sage.Utility.getValue(newActCon, 'Contact.NameLF');
                        this._historyData.PhoneNumber = Sage.Utility.getValue(newActCon, 'Contact.WorkPhone');
                        this._rebindToCurrentContact();
                    }

                },
                failure: function () {
                    this._rebindToCurrentContact();
                },
                scope: this
            });
        },
        _setContactToCurrentAccountPrimary: function () {
            //look up the primary contact...
            var req = new Sage.SData.Client.SDataResourceCollectionRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic'));
            req.setResourceKind('accounts');
            var pathIdx = req.uri.pathSegments.length - 1;
            var resourceSegment = req.uri.getPathSegment(pathIdx);
            resourceSegment['predicate'] = '"' + this._historyData.AccountId + '"';
            req.uri.setPathSegment(pathIdx + 1, 'Contacts');
            req.setQueryArg('select', 'NameLF,IsPrimary,WorkPhone');
            req.setQueryArg('orderby', 'IsPrimary desc');  //rather than selecting "where IsPrimary", do it this way so we at least get something - if there is one that is primary, it will come back, otherwise, we'll just get one.
            req.setQueryArg('count', '1');  //only need one...
            req.read({
                success: function (data) {
                    var contacts = data['$resources'];
                    if (contacts.length < 1) {
                        //fall back to the one that was there...
                        this._rebindToCurrentContact();
                        return;
                    }
                    var primaryContact = contacts[0];
                    this._historyData.ContactId = Sage.Utility.getValue(primaryContact, '$key');
                    this._historyData.ContactName = Sage.Utility.getValue(primaryContact, 'NameLF');
                    this._historyData.PhoneNumber = Sage.Utility.getValue(primaryContact, 'WorkPhone');
                    this._isBinding = true;
                    this.lup_Contact.set('selectedObject', primaryContact);
                    this._isBinding = false;
                },
                failure: function () {
                    this._rebindToCurrentContact();
                },
                scope: this
            });
        },
        _rebindToCurrentContact: function () {
            this._isBinding = true;
            this.lup_Contact.set('selectedObject', { '$key': this._historyData.ContactId, '$descriptor': this._historyData.ContactName });
            this._isBinding = false;
        },
        _updateLookupSeedValues: function (newSeed) {
            var accId = newSeed || this._historyData.AccountId;
            this.contactLookupConfig.seedValue = accId;
            this.opportunityLookupConfig.seedValue = accId;
            this.ticketLookupConfig.seedValue = accId;
        },
        // ... endregion - data methods

        // ... region UI interactions   ...
        _setUI: function () {
            this._formatHeader();
            this._setDisabledByTimlessValue();
            if (this._historyData.LeadId.trim() === '') {
                this.rdo_Contact.set('checked', true);
            } else {
                this.rdo_Lead.set('checked', true);
            }
            this._setContactLeadVisibility();
            this._setScheduledByLabel();
            this._applySecurity();

        },

        _applySecurity: function () {
            if (this.mode === 'New') {
                this._setAccessToUI(true);
            } else if (this.mode === 'Complete') {
                this._setAccessToUI(true);
            } else {
                var svc = Sage.Services.getService('CalendarSecurityService');
                if (svc) {
                    var curUser = utility.getClientContextByKey('userID').trim();
                    var userId = this._historyData.UserId || curUser;
                    if (curUser !== userId) {
                        svc.hasAccess(userId, 'allowEdit', function (hasAccess) {
                            this._setAccessToUI(hasAccess);
                        },
                        this);
                    }
                    else {
                        this._setAccessToUI(true);
                    }
                }
            }
        },
        _setAccessToUI: function (hasAccess) {
            this._hasAccess = hasAccess;
            if ((this.mode === 'New') || ((this.mode === 'Complete'))) {
                this.rdo_Lead.set('disabled', !hasAccess);
                this.tb_Location.set('disabled', !hasAccess);
                this.pk_Regarding.set('disabled', !hasAccess);
                this.pk_Category.set('disabled', !hasAccess);
                this.pk_Priority.set('disabled', !hasAccess);
                this.dtp_startDate.set('disabled', !hasAccess);
                this.dtp_completedDate.set('disabled', !hasAccess);
                if (!hasAccess) {
                    this.sel_Duration.set('disabled', true);
                }
                this.cb_Timeless.set('disabled', !hasAccess);
                this.ta_Notes.set('disabled', !hasAccess);
                this.lup_Leader.set('disabled', !hasAccess);
                this.lup_Account.set('disabled', !hasAccess);
                this.lup_Contact.set('disabled', !hasAccess);
                this.lup_Lead.set('disabled', !hasAccess);
                this.lup_Ticket.set('disabled', !hasAccess);
                this.lup_Opportunity.set('disabled', !hasAccess);
                this.tb_LeadCompanyName.set('disabled', !hasAccess);
                this.btn_OK.set('disabled', !hasAccess);
            } else {
                this.rdo_Lead.set('disabled', true);
                this.tb_Location.set('disabled', !hasAccess);
                this.pk_Regarding.set('disabled', !hasAccess);
                this.pk_Category.set('disabled', !hasAccess);
                this.pk_Priority.set('disabled', true);
                this.dtp_startDate.set('disabled', true);
                this.dtp_completedDate.set('disabled', true);
                this.sel_Duration.set('disabled', true);
                this.cb_Timeless.set('disabled', true);
                this.ta_Notes.set('disabled', !hasAccess);
                this.lup_Leader.set('disabled', true);
                this.lup_Account.set('disabled', true);
                this.lup_Contact.set('disabled', true);
                this.lup_Lead.set('disabled', true);
                this.lup_Ticket.set('disabled', true);
                this.lup_Opportunity.set('disabled', true);
                this.tb_LeadCompanyName.set('disabled', true);
                this.btn_OK.set('disabled', !hasAccess);
            }
        },
        _setUIForActivityType: function (actType) {
            this.pk_Regarding.set('pickListName', Sage.Utility.Activity.getActivityPicklistName('Regarding', actType));
            this.pk_Category.set('pickListName', Sage.Utility.Activity.getActivityPicklistName('Category', actType));
            this.pk_Result.set('pickListName', Sage.Utility.Activity.getActivityPicklistName('Result', actType));

            //If the user doesn't have access to edit the Leader's calendar, we need to disable the OK button...
            var svc = Sage.Services.getService('CalendarSecurityService');
            this.btn_OK.set('disabled', false);  //enable it in case it was disabled the last time around...
            if (svc && this.mode !== 'New') {
                var curuser = utility.getClientContextByKey('userID').trim();
                var leader = this._historyData.UserId || curuser;
                //console.log('curuser: <' + curuser + '>   leader: <' + leader + '>');
                if (curuser !== leader) {
                    svc.hasAccess(leader, 'allowEdit', function (hasAccess) { this.btn_OK.set('disabled', !hasAccess); }, this);
                }
            }

        },
        _setDisabledByTimlessValue: function () {
            if (!this._historyData) {
                return;
            }
            var tless = this._historyData['Timeless'];
            this.dtp_startDate.set('displayTime', !tless);
            this.sel_Duration.set('disabled', tless || !this._hasAccess);
        },
        _timelessChange: function () {
            this._setDisabledByTimlessValue();
        },
        _descriptionChanged: function () {
            this._formatHeader();
        },

        _startDateChanged: function () {
            var newStartDate = this.dtp_startDate.get('value');
            this.sel_Duration.set('startTime', newStartDate);
        },
        _setContactLeadVisibility: function () {
            var cVisible = this.rdo_Contact.get('checked');
            dojo.removeClass((cVisible) ? this.contactContainer.domNode : this.leadContainer.domNode, 'display-none');
            dojo.addClass((cVisible) ? this.leadContainer.domNode : this.contactContainer.domNode, 'display-none');
        },
        _formatHeader: function () {
            var typeName;
            var typeImage;
            var modeText;
            var description;
            typeImage = Sage.Utility.Activity.getActivityImageClass(this._historyData['Type'] || 'atAppointment', 'small');
            typeName = Sage.Utility.Activity.getActivityTypeName(this._historyData['Type'] || 'atAppointment');
            modeText = (this.mode === 'New') ? this.insertText : '';
            description = this._historyData['Description'] || '';
            if (description !== '') {
                description = ' - ' + description;
            }
            this._dialog.set('title',
                dojo.string.substitute('<div class="Global_Images icon16x16 ${0}" > </div>&nbsp;<span class="activity-dialog-title">${1} ${2} ${3}</span>',
                    [typeImage, modeText, typeName, description]
                )
            );

        },
        _setScheduledByLabel: function () {
            // adds the note:  Scheduled by <user> on <scheduled Date>

            var createDate = Sage.Utility.Convert.toDateFromString(Sage.Utility.getValue(this._historyData, 'CreateDate'));
            if (createDate.getFullYear() < 1000) {
                createDate = new Date();
            }

            var createUser = Sage.Utility.getValue(this._historyData, 'CreateUser').trim();

            if (!createUser || utility.getClientContextByKey('userID') === createUser) {
                createUser = utility.getClientContextByKey('userPrettyName');
            } else if (createUser === 'PROCESS' || createUser === 'ADMIN') {
                createUser = 'Administrator';
            } else {
                this._getUserInfoFor(createUser, function (user) {
                    dojo.html.set(this.lbl_ScheduledBy, dstring.substitute(this.scheduledByFormatText, {
                        user: user['$descriptor'],
                        date: locale.format(createDate, { selector: 'date', fullYear: true })
                    }));
                });
                return;
            }

            var lbl = dstring.substitute(this.scheduledByFormatText, {
                user: createUser,
                date: locale.format(createDate, { selector: 'date', fullYear: true })
            });
            dojo.html.set(this.lbl_ScheduledBy, lbl);

        },
        _getUserInfoFor: function (userId, callback) {
            var request = new Sage.SData.Client.SDataSingleResourceRequest(Sage.Data.SDataServiceRegistry.getSDataService('dynamic', false, true, true)); //go ahead and cache this...
            request.setResourceKind('userInfo');
            request.setResourceSelector("'" + userId + "'");
            //using precedence of 0 we only get $descriptor which is <lastname, firstname>, 
            //...but do we want the UserName property which is <firstname lastname>???
            request.setQueryArg('precedence', '0');
            request.read({
                success: callback,
                scope: this,
                failure: function () { }
            });
        },



        // ... endregion UI interactions

        // ... region click/action handlers
        _okClick: function () {
            delete this._historyData['Notes']; //We are dong this so that the notes property does not override it self when posting back.
            delete this._historyData['UserName']; //We are dong this so that the bussiness rules will set this when posting back.
            if (this.rdo_Lead.checked) {
                delete this._historyData['ContactId']; //We are dong this so that the bussiness rules will set this when posting back.
                delete this._historyData['ContactName']; //We are dong this so that the bussiness rules will set this when posting back.
                delete this._historyData['AccountId']; //We are dong this so that the bussiness rules will set this when posting back.
                delete this._historyData['AccountName']; //We are dong this so that the bussiness rules will set this when posting back.
                delete this._historyData['LeadName']; //We are dong this so that the bussiness rules will set this when posting back.
            }
            else {
                delete this._historyData['LeadId']; //We are dong this so that the bussiness rules will set this when posting back.                
            }
            if (this.mode === 'New') {
                this._currentUserActivitySaved = true;
                this._historyStore.saveNewEntity(this._historyData, this._successfulHistorySave, this._failedHistorySave, this);
            } else {
                this._historyStore.save({
                    scope: this,
                    success: this._successfulHistorySave,
                    failure: this._failedAHistorySave
                });
            }
        },
        _successfulHistorySave: function (history) {
            this._historyData = history;
            this.historyId = history['$key'];
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            this._attachmentsSaved = true;
            if (this._attachmentList) {
                var attachments = this._attachmentList.getNewAttachments();
                if (attachments.length > 0 && this.mode === 'New') {
                    this._saveAttachments(attachments);
                    this._attachmentsSaved = false;
                }
            }

            dojo.publish('/entity/history/change', [history, this]);
            this._historySaved = true;
            this._hideIfComplete();

        },
        _failedHistorySave: function (request) {
            console.log('an error occured saving history %o', request);
            Sage.UI.Dialogs.showError(this.couldNotSaveErrorText);
        },
        _cancelClick: function () {
            if (this.mode === 'Complete') {
                this._deleteClick();
            } else {
                this.hide();
            }
        },
        _hideIfComplete: function () {

            if (this._historySaved) {
                if (this._mode !== 'New') {
                    this._doFollowup();
                }
                else {
                    this.hide();
                }
            }
        },

        _deleteClick: function () {
            if (this._historyData && this._historyStore) {
                Sage.UI.Dialogs.raiseQueryDialogExt({
                    title: this.deleteTitle,
                    query: this.deleteMessage,
                    callbackFn: function (result) {
                        if (result) {
                            this._historyStore.deleteEntity(this._historyData, this._successfulHistoryDelete, this._failedHistoryDelete, this);
                        }
                    },
                    yesText: this.okText,
                    noText: this.cancelText,
                    icon: 'questionIcon',
                    scope: this
                });
            }

        },
        _successfulHistoryDelete: function () {
            var svc = Sage.Services.getService('ClientEntityContext');
            svc.clearTemporaryContext();
            dojo.publish('/entity/history/delete', [this._historyData['$key'], this]);
            this.hide();
        },
        _failedHistoryDelete: function (request) {
            var msg = activityUtility.findFailedRequestMessage(request, this.couldNotDeleteErrorText);
            SageDialogs.showError(msg);
        },
        _saveAttachments: function (attachments) {
            this._attachmentRequests = attachments.length;
            for (var i = 0; i < attachments.length; i++) {
                var att = attachments[i];
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                req.setResourceKind('attachments');
                req.setResourceSelector('\'' + att.$key + '\'');
                att.historyId = this.historyId;
                for (var p in this._historyData) {
                    if (p.substring(p.length - 2) === 'Id' && p !== 'UserId') {
                        var attProp = p.substring(0, 1).toLowerCase() + p.substring(1);
                        att[attProp] = this._historyData[p];

                    }
                }
                req.update(att, {
                    success: this._successfulAttachmentSave,
                    failure: this._failedAttachmentSave,
                    scope: this
                });

            }
        },
        _removeAttachments: function () {
            if (!this._attachmentList) {
                return;
            }
            var attachments = this._attachmentList.getNewAttachments();
            for (var i = 0; i < attachments.length; i++) {
                var att = attachments[i];
                var req = new Sage.SData.Client.SDataSingleResourceRequest(sDataServiceRegistry.getSDataService('system'));
                req.setResourceKind('attachments');
                req.setResourceSelector('\'' + att.$key + '\'');
                req['delete'](att, {
                    success: function () { },
                    failure: function () { },
                    scope: this
                });
            }
        },
        getRelationshipsForAttachments: function () {
            var obj = {};
            for (var p in this._activityData) {
                if (p.substring(p.length - 2) === 'Id' && p !== 'UserId') {
                    var attProp = p.substring(0, 1).toLowerCase() + p.substring(1);
                    obj[attProp] = this._activityData[p];
                }
            }
            if (this.mode === 'New' && !fileUtility.supportsHTML5File && !Sage.gears) {
                this._tempIdForAttachments = this._makeTempID();
                obj['historyId'] = this._tempIdForAttachments;
            }
            return obj;
        },
        _makeTempID: function () {
            if (!this._tempIdForAttachments) {
                var uid = this._currentUserId;
                var dstr = utility.Convert.toIsoStringFromDate(this.dtp_completedDate.get('value'));
                dstr = dstr.replace(/[T:-]/g, '').substr(6, 6);
                this._tempIdForAttachments = 'NE' + uid.substr(uid.length - 4, 4) + dstr;
            }
            return this._tempIdForAttachments;
        },
        _attachmentRequests: 0,
        _successfulAttachmentSave: function (attachment) {
            this._attachmentRequests--;
            if (this._attachmentRequests < 1) {
                this._attachmentsSaved = true;
                //this._hideIfComplete();
            }
        },
        _failedAttachmentSave: function () {
            this._attachmentRequests--;
            if (this._attachmentRequests < 1) {
                this._attachmentsSaved = true;
                //this._hideIfComplete();
            }
        },




        // ... endregion
        _doFollowup: function () {
            var followUp = this.sel_Followup.get('value');
            switch (followUp) {
                case this.noneText:
                    this.hide();
                    return;
                case activityUtility.getActivityTypeName('atPhoneCall'):
                    //doing the circles because of localization...
                    followUp = 'atPhoneCall';
                    break;
                case activityUtility.getActivityTypeName('atAppointment'):
                    followUp = 'atAppointment';
                    break;
                case activityUtility.getActivityTypeName('atToDo'):
                    followUp = 'atToDo';
                    break;
            }
            var historyMixin = this._getFollowUpActivityData();
            this._doingFollowup = true;
            this.hide('followup');
            window.setTimeout(function () {
                var svc = Sage.Services.getService('ActivityService');
                if (svc) {
                    svc.scheduleActivity({ 'type': followUp, 'preConfigured': historyMixin });
                }
            }, 250);
        },
        _getFollowUpActivityData: function () {
            var his = this._historyData;
            var ret = {
                AccountId: his.AccountId,
                AccountName: his.AccountName,
                ContactId: his.ContactId,
                ContactName: his.ContactName,
                Description: his.Description,
                LeadId: his.LeadId,
                LeadName: his.LeadName,
                OpportunityId: his.OpportunityId,
                OpportunityName: his.OpportunityName,
                TicketId: his.TicketId,
                TicketNumber: his.TicketNumber

            };
            if (this.ck_coNotes.get('checked')) {
                ret['LongNotes'] = his.LongNotes;
                ret['Notes'] = his.Notes;
            }
            if (this.ck_coAttachments.get('checked')) {
                console.warn('ToDo: Implement Carry over notes to follow up activity');    //    <---<<<   <---<<<
            }
            return ret;
        },

        //region lookup configs
        createAccountLookup: function () {
            this.accountLookupConfig = {
                id: '_historyAcc',
                structure: [
                    {
                        "cells": [
                            {
                                "name": this.accountText,
                                "field": "AccountName"
                            },
                            {
                                "name": this.cityText,
                                "field": "Address.City"
                            },
                            {
                                "name": this.stateText,
                                "field": "Address.State"
                            },
                            {
                                "name": this.mainPhoneText,
                                "field": "MainPhone"
                            },
                            {
                                "name": this.typeText,
                                "field": "Type"
                            },
                            {
                                "name": this.subTypeText,
                                "field": "SubType"
                            },
                            {
                                "name": this.statusText,
                                "field": "Status"
                            },
                            {
                                "name": this.acctMgrText,
                                "field": "AccountManager.UserInfo.UserName"
                            },
                            {
                                "name": this.ownerText,
                                "field": "Owner.OwnerDescription"
                            }
                        ],
                        "defaultCell": {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "styles": "text-align: left;",
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        }
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'accounts',
                    sort: [{ attribute: 'AccountName'}]
                },
                isModal: true,
                seedProperty: '',
                seedValue: '',
                overrideSeedValueOnSearch: false,
                initializeLookup: false,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupActText,
                dialogButtonText: this.okText
            },
            this.lup_Account = new Sage.UI.Controls.Lookup({
                id: 'history_lu_account',
                allowClearingResult: true,
                config: this.accountLookupConfig,
                readonly: true,
            });
            this.eventConnections.push(dojo.connect(this.lup_Account, 'onChange', this, '_accountChanged'));
            dojo.place(this.lup_Account.domNode, this.container_AccountLup.domNode, 'only');

        },
        createContactLookup: function () {
            this.contactLookupConfig = {
                id: '_histoyContact',
                structure: [
                    { defaultCell: {
                        "sortable": true,
                        "width": "150px",
                        "editable": false,
                        "styles": "text-align: left;",
                        "propertyType": "System.String",
                        "excludeFromFilters": false,
                        "useAsResult": false,
                        "pickListName": null,
                        "defaultValue": ""
                    },
                        cells: [
                        {
                            name: this.nameText,
                            field: 'NameLF'
                        }, {
                            name: this.accountText,
                            field: 'Account.AccountName'
                        }, {
                            name: this.cityText,
                            field: 'Address.City'
                        }, {
                            name: this.stateText,
                            field: 'Address.State'
                        }, {
                            name: this.workphoneText,
                            field: 'WorkPhone'
                        }, {
                            name: this.emailText,
                            field: 'Email'
                        }
                    ]
                    }],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'contacts',
                    sort: [{ attribute: 'NameLF'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupContactText,
                dialogButtonText: this.okText
            };
            this.lup_Contact = new Sage.UI.Controls.Lookup({
                id: 'history_lu_contact',
                allowClearingResult: true,
                readonly: true,
                config: this.contactLookupConfig,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Contact, 'onChange', this, '_contactChanged'));
            dojo.place(this.lup_Contact.domNode, this.container_ContactLup.domNode, 'only');
        },
        createOpportunityLookup: function () {
            this.opportunityLookupConfig = {
                id: '_historyOpp',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "styles": "text-align: left;",
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.descriptionText,
                                field: 'Description'
                            }, {
                                name: this.acctMgrText,
                                field: 'AccountManager.UserInfo.UserName'
                            }, {
                                name: this.accountText,
                                field: 'Account.AccountName'
                            }, {
                                name: this.stageText,
                                field: 'Stage'
                            }, {
                                name: this.statusText,
                                field: 'Status'
                            }, {
                                name: this.ownerText,
                                field: 'Owner.OwnerDescription'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'opportunities',
                    sort: [{ attribute: 'Description'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupOpportunityText,
                dialogButtonText: this.okText
            };
            this.lup_Opportunity = new Sage.UI.Controls.Lookup({
                id: 'history_lu_opportunity',
                allowClearingResult: true,
                readonly: true,
                config: this.opportunityLookupConfig,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Opportunity, 'onChange', this, '_opportunityChanged'));
            dojo.place(this.lup_Opportunity.domNode, this.container_OppLup.domNode, 'only');
        },
        createTicketLookup: function () {
            this.ticketLookupConfig = {
                id: '_historyTicket',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "styles": "text-align: left;",
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.ticketNumberText,
                                field: 'TicketNumber'
                            }, {
                                name: this.accountText,
                                field: 'Account.AccountName'
                            }, {
                                name: this.nameText,
                                field: 'Contact.NameLF'
                            }, {
                                name: this.phoneText,
                                field: 'Contact.WorkPhone'
                            }, {
                                name: this.statusText,
                                field: 'StatusCode',
                                pickListName: '',
                                propertyType: 'SalesLogix.PickList'
                            }, {
                                name: this.urgencyText,
                                field: 'Urgency.Description'
                            }, {
                                name: this.areaText,
                                field: 'Area'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'tickets',
                    sort: [{ attribute: 'TicketNumber'}]
                },
                isModal: true,
                seedProperty: 'Account.Id',
                seedValue: '',
                overrideSeedValueOnSearch: true,
                initialLookup: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupTicketText,
                dialogButtonText: this.okText
            };
            this.lup_Ticket = new Sage.UI.Controls.Lookup({
                id: 'history_lu_ticket',
                allowClearingResult: true,
                readonly: true,
                config: this.ticketLookupConfig,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Ticket, 'onChange', this, '_ticketChanged'));
            dojo.place(this.lup_Ticket.domNode, this.container_TicketLup.domNode, 'only');
        },

        createLeadLookup: function () {
            this.leadLookupConfig = {
                id: '_historyLead',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                name: this.nameText,
                                field: 'LeadFullName'
                                //                            }, {
                                //                                name: this.firstNameText,
                                //                                field: 'FirstName'
                            }, {
                                name: this.companyText,
                                field: 'Company'
                            }, {
                                name: this.cityText,
                                field: 'Address.City'
                            }, {
                                name: this.stateText,
                                field: 'Address.State'
                            }, {
                                name: this.postalText,
                                field: 'Address.PostalCode'
                            }, {
                                name: this.statusText,
                                field: 'Status'
                            }, {
                                name: this.workphoneText,
                                field: 'WorkPhone'//,
                                //'styles': 'text-align: right;'
                            }, {
                                name: this.ownerText,
                                field: 'Owner.OwnerDescription'
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'leads',
                    sort: [{ attribute: 'LeadFullName'}]
                },
                isModal: true,
                initialLookup: false,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupLeadText,
                dialogButtonText: this.okText
            };
            this.lup_Lead = new Sage.UI.Controls.Lookup({
                id: 'history_lu_lead',
                allowClearingResult: true,
                readonly: true,
                config: this.leadLookupConfig,
                showEntityInfoToolTip: true
            });
            this.eventConnections.push(dojo.connect(this.lup_Lead, 'onChange', this, '_leadChanged'));
            dojo.place(this.lup_Lead.domNode, this.container_LeadLup.domNode, 'only');

        },
        createLeaderLookup: function () {
            var leaderLookupConfig = {
                id: '_historyLeader',
                structure: [
                    {
                        cells:
                            [
                                {
                                    name: this.nameText,
                                    field: 'Name',
                                    sortable: true,
                                    width: "400px",
                                    editable: false,
                                    propertyType: "System.String",
                                    excludeFromFilters: false,
                                    defaultValue: ""
                                }
                            ]
                    }
                ],
                gridOptions: {
                    contextualCondition: function () {
                        return 'AllowAdd AND (AccessId eq \'' + utility.getClientContextByKey('userID') + '\' OR AccessId eq \'EVERYONE\') AND Type eq \'User\'';
                    },
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: {
                    resourceKind: 'activityresourceviews',
                    sort: [{ attribute: 'Name'}]
                },
                isModal: true,
                preFilters: [],
                returnPrimaryKey: true,
                dialogTitle: this.lookupLeaderText,
                dialogButtonText: this.okText
            };
            this.lup_Leader = new Sage.UI.Controls.Lookup({
                id: 'history_lu_leader',
                readonly: true,
                config: leaderLookupConfig
            });
            this.eventConnections.push(dojo.connect(this.lup_Leader, 'onChange', this, '_leaderChanged'));
            dojo.place(this.lup_Leader.domNode, this.container_LeaderLup.domNode, 'only');
        },

        //end region lookup configs

        _updateLocation: function (newLocation, isAdd) {
            var location = this._historyData.Location;
            if (!location || location === '') {
                if (isAdd) {
                    location = newLocation;
                }
            } else {
                var parts = location.split('; ');
                var newParts = [];
                var exists = false;
                for (var i = 0; i < parts.length; i++) {
                    if (parts[i] === newLocation) {
                        if (isAdd) {
                            exists = true;
                        } else {
                            continue;
                        }
                    }
                    newParts.push(parts[i]);
                }
                if (!exists && isAdd) {
                    newParts.push(newLocation);
                }
                location = newParts.join('; ');
            }
            Sage.Utility.setValue(this._historyData, 'Location', location);
            this.tb_Location.set('value', location);
        },

        _formatDateForQuery: function (d) {
            return ["'", d.getUTCFullYear(), '-', d.getUTCMonth() + 1, '-', d.getUTCDate(), "'"].join('');
        }

    });
    return historyEditor;

});

},
'Sage/Data/SDataStore':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/SDataStore", [
    'dojo/_base/declare',
    'dojo/_base/lang'
],
function (declare, lang) {
    var sDataStore = declare('Sage.Data.SDataStore', null, {
        executeReadWith: 'read',
        sort: null,
        where: null,
        select: null,
        include: null,
        request: null,
        queryName: null,
        resourceKind: null,
        resourcePredicate: null,
        collection: '$resources',
        expandRecurrences: null,

        constructor: function (o) {
            lang.mixin(this, o);
            this.features = {
                'dojo.data.api.Read': true
            };
        },
        _expandExpression: function (expression) {
            /// <summary>
            ///     Expands the passed expression if it is a function.
            /// </summary>
            /// <param name="expression" type="String">
            ///     1: function - Called on this object and must return a string.
            ///     2: string - Returned directly.
            /// </param>
            if (typeof expression === 'function')
                return expression.apply(this, Array.prototype.slice.call(arguments, 1));
            else
                return expression;
        },
        _createRequest: function (options) {
            var sort = this._expandExpression(options.sort || this.sort),
                query = '',
                select = this._expandExpression(options.select || this.select),
                include = this._expandExpression(options.include || this.include),
                request = this._expandExpression(options.request || this.request);

            if (options.query) {
                if (this.where) {
                    query = this._expandExpression(this.where + ' and (' + options.query + ' )');
                }
                else {
                    query = this._expandExpression(options.query);
                }
            }
            else {
                query = this._expandExpression(this.where);
            }

            if (request) {
                request = request.clone();
            }
            else {
                var queryName = this._expandExpression(options.queryName || this.queryName),
                    resourceKind = this._expandExpression(options.resourceKind || this.resourceKind),
                    resourcePredicate = this._expandExpression(options.resourcePredicate || this.resourcePredicate);

                request = queryName
                    ? new Sage.SData.Client.SDataNamedQueryRequest(this.service).setQueryName(queryName)
                    : new Sage.SData.Client.SDataResourceCollectionRequest(this.service);

                if (resourceKind) request.setResourceKind(resourceKind);
                if (resourcePredicate) request.getUri().setCollectionPredicate(resourcePredicate);
            }

            if (select && select.length > 0)
                request.setQueryArg('select', select.join(','));

            if (include && include.length > 0)
                request.setQueryArg('include', include.join(','));

            if (query)
                request.setQueryArg('where', query);

            if (sort && sort.length > 0) {
                var order = [];
                dojo.forEach(sort, function (v) {
                    if (v.descending)
                        this.push(v.attribute + ' desc');
                    else
                        this.push(v.attribute);
                }, order);
                request.setQueryArg('orderby', order.join(','));
            }

            if (typeof options.start !== 'undefined')
                request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.StartIndex, options.start + 1);

            if (typeof options.count !== 'undefined')
                request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.Count, options.count);
  
            if (this.expandRecurrences !== null) {
                request.uri.queryArgs['_expandRecurrences'] = this.expandRecurrences;
            }

            return request;
        },
        fetch: function (options) {
            var request = this._createRequest(options),
                requestObject = lang.mixin({}, options);
            var handle = request[this.executeReadWith]({
                success: lang.hitch(this, this._onFetchSuccess, options, requestObject),
                failure: lang.hitch(this, this._onFetchFailure, options, requestObject),
                httpMethodOverride: options.queryOptions && options.queryOptions['httpMethodOverride']
            });
            requestObject['abort'] = lang.hitch(this, this._abortRequest, handle);
            return requestObject;
        },
        _abortRequest: function (handle) {
            this.service.abortRequest(handle);
        },
        _onFetchSuccess: function (options, requestObject, result) {
            if (result) {
                if (result['$resources'])
                    requestObject['feed'] = result['$resources'];
                else
                    requestObject['entry'] = result;

                var items = lang.getObject(this.collection, false, result) || [result],
                    size = result['$resources']
                        ? result['$totalResults'] || -1
                        : 1;

                if (options.onBegin) {
                    options.onBegin.call(options.scope || this, size, requestObject);
                }
                if (options.onItem) {
                    for (var i = 0; i < items.length; i++)
                        options.onItem.call(options.scope || this, items[i], requestObject);
                }
                if (options.onComplete) {
                    options.onComplete.call(options.scope || this, options.onItem ? null : items, requestObject);
                }
            }
            else {
                if (options.onError) {
                    options.onError.call(options.scope || this, 'invalid feed', options);
                }
            }
        },
        _onFetchFailure: function (options, requestObject, request, requestOptions) {
            if (options.onError)
                options.onError.call(options.scope || this, request.responseText, options);
        },
        getValue: function (item, attribute, defaultValue) {
            var value = lang.getObject(attribute, false, item);
            return typeof value === 'undefined'
                ? defaultValue
                : value;
        },
        getFeatures: function () {
            return this.features;
        }
    });
    return sDataStore;
});
},
'Sage/Data/main':function(){
define("Sage/Data/main", [
    "Sage/Data/BaseSDataStore",
    "Sage/Data/GroupLayoutSingleton",
    "Sage/Data/WritableStore", 
    "Sage/Data/ProxySDataStore",
    "Sage/Data/QBTreeStoreModel",
    "Sage/Data/SDataServiceRegistry",
    "Sage/Data/SDataStore",
    "Sage/Data/SingleEntryPropertySDataStore",
    "Sage/Data/SingleEntrySDataStore",
    "Sage/Data/SummaryViewDataManager",
    "Sage/Data/WritableSDataStore"
    ], function() {
	// module:
	//		Sage/Data/main
	// summary:
    //		The Sage/Data/main module provides loading of all Sage/Data modules.
});
},
'Sage/QuickForms/Design/Editors/nls/CurrencyAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/CurrencyAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            decimalDigitsText: "Decimal Digits:",
            decimalDigitsTooltipText: "The number of digits after the decimal to display and allow for data entry.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            displayCurrencyCodeText: "Display Exchange Rate Code:",
            displayCurrencyCodeTooltipText: "Show the three character currency code when multi-currency is enabled.",
            displayModeText: "Display Mode:",
            displayModeTooltipText: "Mode of display of control: text box, hyperlink, or plain text.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            exchangeRateTypeText: "Exchange Rate Type:",
            exchangeRateTypeTooltipText: "Type of exchange rate to show in currency fields.",
            maxLengthText: "Max Length:",
            maxLengthTooltipText: "Maximum number of characters user can enter.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            displayTypeText: {
                AsHyperlink: "As Hyperlink",
                AsControl: "As Control",
                AsText: "As Text"
            },
            exchangeTypeText: {
                BaseRate: "Base Rate",
                OpportunityRate: "Opportunity Rate (Deprecated)",
                MyRate: "My Rate",
                SalesOrderRate: "Sales Order Rate (Deprecated)",
                EntityRate: "Entity Rate"
            },
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/nls/SLXPreviewGrid':function(){
﻿define("Sage/UI/nls/SLXPreviewGrid", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            applyText: 'Apply',
            resetText: 'Reset',
            filterText: 'Filter'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Groups/GroupContextService':function(){
﻿/*globals Sage, dojo, window, define */
define("Sage/Groups/GroupContextService", [
        'Sage/Utility',
        'dojo/string',
        'Sage/Data/SDataServiceRegistry',
        'dojo/ready',
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/_base/array'
    ],
function (
        utility,
        dString,
        sDataServiceRegistry,
        ready,
        lang,
        declare,
        array
    ) {
    var groupContextService = declare('Sage.Groups.GroupContextService', null, {
        _adHocGroupList: null,
        _connects: null,
        _subscribes: null,
        _emptyContext: null,
        _currentRequestHandle: null,
        _isAdHocGroupListRetrieved: false,
        constructor: function () {
            this._connects = [];
            this._subscribes = [];
            this._adHocGroupList = [];
            this._emptyContext = {
                DefaultGroupID: null,
                CurrentGroupID: null,
                CurrentTable: null,
                CurrentName: null,
                CurrentEntity: null,
                CurrentFamily: null
            };

            this._isAdHocGroupListRetrieved = false;
            this._subscribes.push(
                dojo.subscribe(dString.substitute("/ui/filters/default/refresh"), this, this._onDefaultFilterRefresh)
            );

            ready(lang.hitch(this, function(){
                if (!this.isContextRequired()) {
                    var context = utility.getValue(window, 'Sage.Groups._groupContext'),
                        container = utility.getValue(window, 'Sage.UI.DataStore.Filters');
                    if (container) {
                        if (context['AppliedFilterInfo']) {
                            container['default'] = this.createFilterExtendedSet(context['AppliedFilterInfo']);
                        }
                    }
                }

                if (this.isContextRequired()) {
                    this.requestContext();
                }
            }));
        },
        createFilterExtendedSet: function (appliedFilterInfo) {
            var sourceDefinitionSet = appliedFilterInfo['definitionSet'] || [],
                sourceApplied = appliedFilterInfo['applied'] || [],
                resultDefinitionSet = {},
                resultApplied = {},
                sourceItem,
                resultItem,
                i,
                j,
                value;
                
            for (i = 0; i < sourceDefinitionSet.length; i++) {
                sourceItem = sourceDefinitionSet[i];
                resultItem = {
                        '$key': sourceItem['id'],
                        '$partial': true,
                        'filterName': sourceItem['filterName'],
                        'displayName': sourceItem['displayName'],
                        'propertyName': sourceItem['propertyName'],
                        'propertyDataTypeId': sourceItem['propertyDataTypeId'],
                        'details': {}
                };

                if (sourceItem['filterType'] == 'rangeFilter') {
                    resultItem['details']['rangeFilter'] = {
                        'characters': sourceItem['characters']
                    };
                }
                if (sourceItem['filterType'] == 'lookupFilter') {
                    resultItem['details']['lookupFilter'] = {};                    
                } else {
                    resultItem['details']['distinctFilter'] = {};
                }
                
                resultDefinitionSet[sourceItem['id']] = resultItem;
            }

            for (i = 0; i < sourceApplied.length; i++) {
                sourceItem = sourceApplied[i];
                resultItem = {};

                for (j = 0; j < sourceItem['rangeValues'].length; j++) {
                    value = sourceItem['rangeValues'][j];
                    resultItem[value['rangeName']] = lang.mixin({}, value);
                }
                
                for (j = 0; j < sourceItem['distinctValues'].length; j++) {
                    value = sourceItem['distinctValues'][j];
                    if (typeof value === 'string') {
                        resultItem[value] = value;
                    }
                }
                for (j = 0; j < sourceItem['lookupValues'].length; j++) {
                    lookuValue = sourceItem['lookupValues'][j];
                    resultItem['value'] = lookuValue;               
                }
                resultApplied[sourceItem['id']] = resultItem;
            }

            return {
                'definitionSet': resultDefinitionSet,
                'applied': resultApplied
            };
        },
        destroy: function () {
            array.forEach(this._connects, function (handle) {
                dojo.disconnect(handle);
            });

            this.unsubscribeConnects();

            this.uninitialize();
        },
        unsubscribeConnects: function () {
            array.forEach(this._subscribes, function (handle) {
                dojo.unsubscribe(handle);
            });
        },
        uninitialize: function () {
        },
        isContextRequired: function () {
            var results = !(Sage && Sage.Groups && Sage.Groups._groupContext);
            return results;
        },
        createCompatibleContext: function (context) {
            if(context['currentGroupId'] == 'LOOKUPRESULTS') {
                context['currentName'] = 'Lookup Results';
            }
            var compatibleContext = {
                'AppliedFilterInfo': context['appliedFilterInfo'],
                'ContainsPositionState': context['containsPositionState'],
                'CurrentDisplayName': context['currentDisplayName'],
                'CurrentEntity': context['currentEntity'],
                'CurrentEntityID': context['currentEntityId'],
                'CurrentEntityPosition': context['currentEntityPosition'],
                'CurrentFamily': context['currentFamily'],
                'CurrentGroupCount': context['currentGroupCount'],
                'CurrentGroupID': context['currentGroupId'],
                'CurrentName': context['currentName'],
                'CurrentTable': context['currentTable'],
                'CurrentTableKeyField': context['currentTableKeyField'],
                'DefaultGroupID': context['defaultGroupId'],
                'FirstEntityID': context['firstEntityId'],
                'LastEntityID': context['lastEntityId'],
                'LookupLayoutGroupName': context['lookupLayoutGroupName'],
                'NextEntityID': context['nextEntityId'],
                'PreviousEntityID': context['previousEntityId'],
                'RetrievedOn': context['retrievedOn'],
                'isAdhoc': context['isAdHoc']
            };

            if (!context['appliedFilterInfo']) {
                delete compatibleContext.AppliedFilterInfo;
            }
            
            return compatibleContext;
        },
        _onDefaultFilterRefresh: function (applied, definitionSet, filterManager) {
            var groupContext = this.getContext(),
                service = sDataServiceRegistry.getSDataService('system'),
                entry = {
                    '$name': 'applyFilterToGroup',
                    'request': {
                        'groupId': groupContext['CurrentGroupID'],
                        'filter': dojo.toJson(filterManager.createValueSet())
                    }
                };
                if((groupContext['CurrentGroupID'] === null)|| (groupContext['CurrentGroupID'] === ''))
                {
                   return;
                }
                
            var request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                .setOperationName('applyFilterToGroup');

            request.execute(entry, {});
        },
        getContext: function () {
            var context = Sage && Sage.Groups && Sage.Groups._groupContext;
            if (context) {
                return context;
            }

            if (this.isContextRequired()) {
                this.requestContext();
            }

            return this._emptyContext;
        },
        requestContext: function (onComplete) {
            if (this._currentRequestHandle) {
                return;
            }

            var service = sDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                    .setOperationName('getGroupContext');

            this._currentRequestHandle = request.execute({}, {
                success: this._onRequestContextSuccess,
                failure: this._onRequestContextFailure,
                scope: this
            });
        },
        _onRequestContextSuccess: function (entry) {
            var context = entry && entry['response'];
            if (context) this.setContext(this.createCompatibleContext(context));

            this._currentRequestHandle = null;
        },
        _onRequestContextFailure: function (response, o) {
            this._currentRequestHandle = null;
        },
        setContext: function (context) {
            var container = Sage && Sage.Groups;
            if (container && context) {
                lang.mixin(container._groupContext, context);
                this.onContextSet(container._groupContext);
            }
        },
        setCurrentGroup: function (groupId, groupName) {
            var context = this.getContext();
            if (context && (context['CurrentGroupID'] === groupId)) {
                if (groupId === 'LOOKUPRESULTS') {
                    context['currentName'] = 'Lookup Results';
                    //the conditions probably changed, so just fire onCurrentGroupChanged...
                    this.onCurrentGroupChanged({ current: context });
                }
                return;
            }

            //assume a groupID is coming in - and that it is an ID (not the name)...
            if (groupId.length === 12 || groupId === 'LOOKUPRESULTS') {
                // todo: handle if a group name and family is passed...
                var service = sDataServiceRegistry.getSDataService('system'),
                    request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                        .setOperationName('setGroupContext'),
                    entry = {
                        request: {
                            'currentGroupId': groupId,
                            'currentName': '',
                            'currentFamily': ''
                        }
                    };

                request.execute(entry, {
                    success: this._onSetContextRequestSuccess,
                    failure: this._onSetContextRequestFailure,
                    scope: this
                });
            }
        },
        _onSetContextRequestSuccess: function (entry) {
            var context = entry && entry['response'],
                compatibleContext = context && this.createCompatibleContext(context);
            if (compatibleContext) this.setContext(compatibleContext);

            this.onCurrentGroupChanged({ current: compatibleContext });
        },
        _onSetContextRequestFailure: function (response, o) {
        },
        onSuccessfulGroupChanged: function (data) {
            var previousContext = this.getContext();
            this.setContext(data);
            this.onCurrentGroupChanged({ current: data, previous: previousContext });
        },
        onCurrentGroupChanged: function (options) {
            // We need to apply the the change before publishing the applied filters Info
            //The filter panel will check and see if the group is the same before appling the filter info.
            dojo.publish('/group/context/changed', [options, this]);
            if (options['current']['AppliedFilterInfo']) {
                // We need to apply the the change before publishing the applied filters Info
                //The filter panel will check and see if the group is the same before appling the filter info.
                this.publishFiltersApplied(options['current']['AppliedFilterInfo']);
            }          
        },
        publishFiltersApplied: function (appliedFilterInfo) {
            // When the dom is ready publish that we have applied filters.
            if (appliedFilterInfo) {
                ready(lang.hitch(this, function () {
                    var extendedSet = this.createFilterExtendedSet(appliedFilterInfo),
                        container = utility.getValue(window, 'Sage.UI.DataStore.Filters');
                    container['default'] = extendedSet;
                    dojo.publish('/ui/filters/default/apply', [extendedSet['applied'], extendedSet['definitionSet'], this]);
                }));
            }
        },
        onContextSet: function (context) {
            if (context && context['AppliedFilterInfo']) {
                this.publishFiltersApplied(context['AppliedFilterInfo']);
            }
        },

        //adhoc group list...
        getAdHocGroupList: function (callback, callbackScope) {
            if (this._isAdHocGroupListRetrieved) {
                callback.call(callbackScope || this, this._adHocGroupList);
                return;
            }
            var store = new Sage.Data.BaseSDataStore({
                service: sDataServiceRegistry.getSDataService('system'),
                resourceKind: 'groups',
                include: [],
                select: ['name', 'family', 'isHidden', 'isAdHoc', 'mainTable', 'keyField', 'entityName']
            });

            Sage.Groups._groupContext.CurrentFamily = Sage.Groups._groupContext.CurrentFamily.toUpperCase();
            
            store.fetch({
                query: dojo.string.substitute("upper(family) eq '${CurrentFamily}' and isAdHoc", Sage.Groups._groupContext),
                count: 1000,
                sort: [{ attribute: 'name'}],
                start: 0,
                onComplete: function (data) {
                    this._adHocGroupList = data;
                    callback.call(callbackScope || this, this._adHocGroupList);
                    this._isAdHocGroupListRetrieved = true;
                },
                scope: this
            });
        }
    });

    Sage.Services.addService("ClientGroupContext", new groupContextService());
    return groupContextService;
});

},
'Sage/UI/Alarms/nls/UnconfirmedPane':function(){
﻿define("Sage/UI/Alarms/nls/UnconfirmedPane", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            showConfirmationsText: 'Show Confirmations',
            showCalendarText: 'Show Calendar',
            acceptText: 'Accept',
            declineText: 'Decline'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/_ActionMixin':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/_ActionMixin", [
    'dojo/NodeList-traverse',
    'dojo/_base/declare'
], function (nodeListTraverse, declare) {
    // not inheriting from dijit._Templated, but using similar functionality.
    // this is required for contentTemplate to work property.
    var _actionMixin = declare('Sage._ActionMixin', null, {
        actionsFrom: 'click',
        postCreate: function () {
            // todo: add delegation
            dojo.forEach(this.actionsFrom.split(','), function (event) {
                this.connect(this.domNode, event, this._initiateActionFromEvent);
            }, this);
        },
        _isValidElementForAction: function (el) {
            var contained = this.domNode.contains
                ? this.domNode != el && this.domNode.contains(el)
                : !!(this.domNode.compareDocumentPosition(el) && 16);

            return (this.domNode === el) || contained;
        },
        _initiateActionFromEvent: function (evt) {
            var el = dojo.query(evt.target).closest('[data-action]')[0],
                action = el && dojo.attr(el, 'data-action');

            if (action && this._isValidElementForAction(el) && this._hasAction(action, evt, el)) {
                var parameters = this._getParametersForAction(action, evt, el);

                this._invokeAction(action, parameters, evt, el);

                dojo.stopEvent(evt);
            }
        },
        _getParametersForAction: function (name, evt, el) {
            var parameters = {
                $event: evt,
                $source: el
            };

            for (var i = 0, attrLen = el.attributes.length; i < attrLen; i++) {
                var attributeName = el.attributes[i].name;
                if (/^((?=data-action)|(?!data))/.test(attributeName)) continue;

                /* transform hyphenated names to pascal case, minus the data segment, to be in line with HTML5 dataset naming conventions */
                /* see: http://dev.w3.org/html5/spec/elements.html#embedding-custom-non-visible-data */
                /* todo: remove transformation and use dataset when browser support is there */
                var parameterName = attributeName.substr('data-'.length).replace(/-(\w)(\w+)/g, function ($0, $1, $2) { return $1.toUpperCase() + $2; });

                parameters[parameterName] = dojo.attr(el, attributeName);
            }

            return parameters;
        },
        _hasAction: function (name, evt, el) {
            return (typeof this[name] === 'function');
        },
        _invokeAction: function (name, parameters, evt, el) {
            return this[name].apply(this, [parameters, evt, el]);
        }
    });
    return _actionMixin;
});

},
'Sage/Services/ClientContextService':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/ClientContextService", [
    'dojo/_base/declare'
],
function (declare) {
    var widget = declare('Sage.Services.ClientContextService', null, {
        // summary:
        //      This service provides a place to pass contextual information from the client to the server or server to client.  
        //      The service itself is quite simple; the power of this service is knowing its contents.  The following is a 
        //      list ofthings that are usually avaiable from this service:
        //      -userID : (always available) Contains the user ID of the currently logged in user.
        //      -userPrettyName : (always available) Contains the formatted name of the currently logged in user.
        //      -userDateFmtStr : (always available) Contains the date formatstring based on the language setting of the browser.
        //      -userTimeFmtStr : (always available) Contains the time formatstring based on the language setting of the browser.
        //      -ClientEntityId : (available in detail mode of entity pages) Contains the id of the entity currently being edited in the detail view.
        //      -PreviousEntityId : (available on the server during postbacks specifically for changing to a new entity) Contains the id of the entity we are moving from.  The use of this context key alerts various workitems on the server that the current postback is one in which the current entity is changing.  The context should change from the 'previous entity' to the one identified by "ClientEntityId".
        // example:
        //  |   //This is some server side code (C# - The types are fully qualified here for clarity):
        //  |   Sage.Platform.WebPortal.Services.ClientContextService contextService = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.ClientContextService>();
        //  |   if (contextService.CurrentContext.ContainsKey("Foo")) {
        //  |       contextService.CurrentContext["Foo"] = "Bar";
        //  |   } else {
        //  |       contextService.CurrentContext.Add("Foo", "Bar");
        //  |   }
        //  |   
        //  |   //Now some javascript running in the browser can have code like this to show the value of "Foo":
        //  |   var context = Sage.Services.getService("ClientContextService");
        //  |   if (context && context.containsKey("Foo")) {
        //  |       alert("Foo is: " + context.getValue("Foo"));
        //  |   }
        // example:
        //  |   //This JavaScript example gets the currently logged in user's name and shows a personalized message:
        //  |   var contextservice = Sage.Services.getService("ClientContextService");
        //  |   if (contextservice.containsKey("userPrettyName")) {
        //  |       alert("Hello, " + contextservice.getValue("userPrettyName") + " how are you today?");
        //  |   } else {
        //  |       alert("Hello, how are you today?");
        //  |   }

        contextDataFieldId: false,
        _items: [],
        _watches: [],
        constructor: function (opts) {
            dojo.mixin(this, opts);
            this.load();
        },

        //Internal Helper Methods
        _toItemLiteral: function (key, value) {
            var newItem = {};
            newItem.itemKey = key;
            newItem.itemVal = value;
            return newItem;
        },
        _indexOf: function (key) {
            for (var i = 0; i < this._items.length; i++) {
                if (this._items[i].itemKey == key) {
                    return i;
                }
            }
            return -1;
        },
        _indexOfNoCase: function (key) {
            for (var i = 0; i < this._items.length; i++) {
                if (this._items[i].itemKey.toUpperCase() == key.toUpperCase()) {
                    return i;
                }
            }
            return -1;
        },
        _throwKeyNotFound: function (key) {
            throw "Entry Not Found: " + key;
        },
        _throwDuplicateKey: function (key) {
            throw "Entry Already Exists: " + key;
        },

        //public methods...
        add: function (key, value) {
            // summary:
            //      Adds an item to the context dictionary.
            if (this._indexOf(key) === -1) {
                var lit = this._toItemLiteral(key, value);
                this._items.push(lit);
                this.save();
            }
            else
                this._throwDuplicateKey(key);
        },
        remove: function (key) {
            // summary:
            //      Removes the item from the context dictionary.
            var index = this._indexOf(key);
            if (index !== -1) {
                this._items.splice(index, 1);
                this.save();
            }
        },
        setValue: function (key, value) {
            // summary:
            //      Sets a new value to an item that already exists in the context dictionary.
            var index = this._indexOf(key);
            if (index !== -1) {
                this._items[index].itemVal = value;
                this.save();
            }
            else {
                this._throwKeyNotFound(key);
            }
        },
        getValue: function (key) {
            // summary:
            //      Gets the value of the item in the context dictionary by key.
            var index = this._indexOf(key);
            if (index !== -1) {
                return decodeURIComponent(this._items[index].itemVal);
            }
            else {
                this._throwKeyNotFound(key);
            }
        },
        getValueEx: function (key, nocase) {
            // summary:
            //      Gets the value of the item in the context dictionary by key with the ability to specify if the key should or should not be case sensitive.
            var index;
            if (nocase)
                index = this._indexOfNoCase(key);
            else
                index = this._indexOf(key);
            if (index !== -1) {
                return decodeURIComponent(this._items[index].itemVal);
            }
            else {
                this._throwKeyNotFound(key);
            }
        },
        clear: function () {
            // summary:
            //      Removes all items from the context dictionary.
            this._items = [];
            this.save();
        },
        containsKey: function (key) {
            // summary:
            //      Checks to see if an item with the given key exists in the context dictionary.
            return (this._indexOf(key) !== -1);
        },
        containsKeyEx: function (key, nocase) {
            // summary:
            //      Checks to see if an item with the given key exists in the context dictionary with the ability to specify if the key should or should not be case sensitive.
            if (nocase)
                return (this._indexOfNoCase(key) !== -1);
            else
                return (this._indexOf(key) !== -1);
        },
        getCount: function () {
            // summary:
            //      Returns the number of items currently in the context dictionary.
            return this._items.length;
        },
        hasKeys: function () {
            // summary:
            //      Indicates whether there are any items in the context dictionary.
            return this._items.length === 0;
        },
        getKeys: function () {
            // summary:
            //     Returns an array of all the keys of the items in the context dictionary.
            var keyRes = [];
            for (i = 0; i < this._items.length; i++) {
                keyRes.push(this._items[i].itemKey);
            }
            return keyRes;
        },
        valueAt: function (index) {
            // summary:
            //      Returns the value of the item in the dictionary at the given location.
            if (this._items[index]) {
                return decodeURIComponent(this._items[index].itemVal);
            }
            else {
                return null;
            }
        },
        keyAt: function (index) {
            // summary:
            //      Returns the key of the item in the dictionary at the given location.
            this.load();
            if (this._items[index])
                return this._items[index].itemKey;
            else
                return null;
        },
        getValues: function () {
            // summary:
            //      Returns an array containing the values of all the items in the context dictionary.
            var valRes = [];
            for (i = 0; i < this._items.length; i++) {
                valRes.push(decodeURIComponent(this._items[i].itemVal));
            }
            return valRes;
        },
        save: function (hours) {
            // summary:
            //      Saves the state of the current context to a hidden form field so the data is passed to the server in the form post.
            var data = document.getElementById(this.contextDataFieldId);
            if (data) {
                //alert("saving to: " + data.id);
                data.value = this.toString();
            }
            else {
                alert("can't find context data field");
            }
        },
        load: function () {
            // summary:
            //      Loads the context dictionary from the data found in the hidden form field.
            var data = document.getElementById(this.contextDataFieldId);
            if (data) {
                if (data.value) {
                    //alert("loading from: " + data.id);
                    this.fromString(data.value);
                }
            }
        },
        toString: function () {
            // summary:
            //      Returns a URL Encoded string containing ampersand separated name/value pairs of all the items in the context dictionary.
            var str = "";
            for (i = 0; i < this._items.length; i++) {
                str += this._items[i].itemKey + "=" + encodeURIComponent(this._items[i].itemVal);
                if (i !== this._items.length - 1)
                    str += "&";
            }
            return str;
        },
        fromString: function (qString) {
            // summary:
            //      Loads the context dictionary from a URL Encoded string of name/value pairs.
            this._items = [];
            if (qString != "") {
                var items = qString.split("&");
                for (i = 0; i < items.length; i++) {
                    var pair = items[i].split("=");
                    this._items.push(this._toItemLiteral(pair[0], decodeURIComponent(pair[1])));
                }
            }
            this.save();
        }
    });

    return widget;
});




},
'Sage/QuickForms/Design/TextBoxControlDesigner':function(){
define("Sage/QuickForms/Design/TextBoxControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/TextBoxBasicPropertyEditor',
    './Editors/TextBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/TextBoxControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    TextBoxBasicPropertyEditor,
    TextBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.TextBoxControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            TextBoxBasicPropertyEditor,
            TextBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-textbox',
        helpTopicName: 'Textbox_control',
        quickFormControlType: 'Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms',

        //Localization
        displayNameText: 'TextBox',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'Text');
            });
        },

        _getLinesAttr: function() {
            return lang.getObject('Lines', false, this.entry);
        },
        _setLinesAttr: function(value) {
            lang.setObject('Lines', value, this.entry);
        },
        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getMaxLengthAttr: function() {
            return lang.getObject('MaxLength', false, this.entry);
        },
        _setMaxLengthAttr: function(value) {
            lang.setObject('MaxLength', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('lines', 1);
            this.set('maxLength', parseInt(propertyContext['data'].length, 10) || -1);
            this.set('required', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'Text',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'url:Sage/UI/Controls/templates/PersonName.html':"<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n<div>\r\n        <table width=\"100%\">\r\n            <tr>\r\n                <td><label>{%= $.prefixText %}</label></td>\r\n                <td>\r\n                    <select id=\"{%= $.id %}-Prefix\" data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\" \r\n                    dojoAttachPoint=\"_valueBox\"\r\n                    pickListName=\"Name Prefix\"\r\n                    storeMode=\"text\"\r\n                    name=\"{%= $.NamePrefix %}\" \r\n                    style=\"width: 150px;display: inline-block\"\r\n                    shouldPublishMarkDirty=\"false\" />\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameFirstText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-First\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameFirst %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameMiddleText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-Middle\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameMiddle %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameLastText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-Last\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameLast %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.suffixText %}</label></td>\r\n                <td>\r\n                    <select id=\"{%= $.id %}-Suffix\" data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\"\r\n                    dojoAttachPoint=\"_valueBox\"\r\n                    pickListName=\"Name Suffix\"\r\n                    storeMode=\"text\"\r\n                    name=\"{%= $.NameSuffix %}\"\r\n                    style=\"width: 150px;display: inline-block\"\r\n                    shouldPublishMarkDirty=\"false\" />\r\n                </td>\r\n            </tr>\r\n        </table>                    \r\n        <div class=\"button-bar alignright\" style=\"clear: both\">\r\n            <button id=\"{%= $.id %}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId('{%= $.id %}')._okClicked();\">\r\n                {%= $.okText %}\r\n            </button>\r\n            <button id=\"{%= $.id %}-CancelButton\" data-dojo-type=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId('{%= $.id %}')._cancelClicked();\">\r\n                {%= $.cancelText %}\r\n            </button>\r\n        </div>\r\n</div>\r\n",
'Sage/Utility/File/DragDropWatcher':function(){
﻿/*globals Sage, dojo, define, window */
define('Sage/Utility/File/DragDropWatcher', [
    'Sage/UI/Dialogs',
    'Sage/Utility/File',
    'dojo/string',
    'dojo/i18n!./nls/DragDropWatcher'
],
function (Dialogs, FileUtil, dString, dragDropWatcherStrings) {
    Sage.namespace('Utility.File.DragDropWatcher');
    Sage.Utility.File.DragDropWatcher = {
        gearsDesktop: false,
        allowdDetailDrop: false,
        allowdListDrop: false,
        init: function (options) {
            Sage.Utility.File.DragDropWatcher.allowdDetailDrop = options.allowDetailDragDrop;
            Sage.Utility.File.DragDropWatcher.allowdListDrop = options.allowListDragDrop;
            if (Sage.gears) {
                this.desktop = Sage.gears.factory.create('beta.desktop');
                if (dojo.isIE) {
                    dojo.connect(dojo.body(), 'ondragenter', this.handleGearsDragEnter);
                    dojo.connect(dojo.body(), 'ondragover', this.handleGearsDragOver);
                    dojo.connect(dojo.body(), 'ondragleave', this.handleGearsDragLeave);
                    if (dojo.isIE < 9) {
                        dojo.connect(dojo.body(), 'ondrop', this.handleGearsFileDrop);
                    } else {
                        // Cannot use dojo.connect()
                        dojo.body().attachEvent('ondrop', this.handleGearsFileDrop);
                    }
                }
                else {
                    dojo.connect(dojo.body(), 'dragenter', this.handleGearsDragEnter);
                    dojo.connect(dojo.body(), 'dragover', this.handleGearsDragOver);
                    dojo.connect(dojo.body(), 'dragleave', this.handleGearsDragLeave);
                    dojo.connect(dojo.body(), 'drop', this.handleGearsFileDrop);
                }
            } else {
                if (FileUtil.supportsHTML5File) {
                    dojo.connect(dojo.body(), 'dragenter', this.handleDragEnter);
                    dojo.connect(dojo.body(), 'dragover', this.handleDragOver);
                    dojo.connect(dojo.body(), 'dragleave', this.handleDragLeave);
                    dojo.connect(dojo.body(), 'drop', this.handleFileDrop);
                }
                else {
                    if (dojo.isIE) {
                        dojo.connect(dojo.body(), 'ondragenter', this.handleGearsDragEnter);
                        dojo.connect(dojo.body(), 'ondragover', this.handleGearsDragOver);
                        dojo.connect(dojo.body(), 'ondragleave', this.handleGearsDragLeave);
                        if (dojo.isIE < 9) {
                            dojo.connect(dojo.body(), 'ondrop', this.handleFileDropNotSupported);
                        } else {
                            // Cannot use dojo.connect()
                            dojo.body().attachEvent('ondrop', this.handleFileDropNotSupported);
                        }
                    } else {

                        dojo.connect(dojo.body(), 'dragenter', this.handleDragEnter);
                        dojo.connect(dojo.body(), 'dragover', this.handleDragOver);
                        dojo.connect(dojo.body(), 'dragleave', this.handleDragLeave);
                        dojo.connect(dojo.body(), 'drop', this.handleFileDropNotSupported);
                    }
                }
            }
        },
        handleDragEnter: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleDragLeave: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleDragOver: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleFileDrop: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, true);
            var allow = Sage.Utility.File.DragDropWatcher._AllowDragDrop();
            if (!allow) {
                return;
            }
            var files = e.dataTransfer.files;
            if (files && files.length > 0) {
                if (FileUtil.isFileSizeAllowed(files)) {
                    Sage.Utility.File.DragDropWatcher.onFilesDropped(files, e.target);
                }
            } else {
                //maybe they came from Outlook, see if gears can help...
                if (Sage.gears) {
                    var desktop = Sage.gears.factory.create('beta.desktop');
                    var data = desktop.getDragData(e, 'application/x-gears-files');
                    files = data && data.files;
                    if (files && files.length > 0) {
                        if (FileUtil.isFileSizeAllowed(files)) {
                            Sage.Utility.File.DragDropWatcher.onFilesDropped(files, e.target);
                        }
                    }
                }
            }
        },
        finishDrag: function (e, isDrop) {
            var evt = e || window.event;
            if (!evt || typeof evt === 'undefined') {
                console.warn('The event parameter is invalid in finishDrag().');
                return;
            }
            if (typeof (this.desktop) !== 'undefined') {
                this.desktop.setDropEffect(evt, 'copy');
            }
            if (dojo.isFF) {
                if (isDrop || FileUtil.supportsHTML5File) {
                    evt.stopPropagation();
                    evt.preventDefault();
                }
            } else if (dojo.isIE || dojo.isSafari || dojo.isChrome) {
                if (!isDrop) {
                    if (typeof evt.stopPropagation === 'function') {
                        evt.stopPropagation();
                    }
                    if (typeof evt.preventDefault === 'function') {
                        evt.preventDefault();
                    }
                    else {
                        evt.returnValue = false;
                    }
                }
            }
        },
        handleGearsDragEnter: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleGearsDragLeave: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleGearsDragOver: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, false);
        },
        handleGearsFileDrop: function (e) {
            Sage.Utility.File.DragDropWatcher.finishDrag(e, true);
            var allow = Sage.Utility.File.DragDropWatcher._AllowDragDrop();
            if (!allow) {
                return;
            }
            var data = Sage.Utility.File.DragDropWatcher.desktop.getDragData(e, 'application/x-gears-files');
            var target = e.target;
            if (!target) {
                target = e.srcElement;
            }
            var files = data && data.files;
            if (files && files.length > 0) {
                if (Sage.Utility.File.isFileSizeAllowed(files)) {
                    Sage.Utility.File.DragDropWatcher.onFilesDropped(files, target);
                }
            }
        },
        onFilesDropped: function (files, dropTarget) { },
        _AllowDragDrop: function () {
            var currentViewName = Sage.Utility.getPageName();
            var currentMode = Sage.Utility.getModeId();
            if (currentMode !== 'detail') {
                var contextSvc = Sage.Services.getService('ClientEntityContext');
                if (contextSvc) {
                    var context = contextSvc.getContext();
                    if (context) {
                        if (context.EntityType === "Sage.Entity.Interfaces.IActivity") {
                            return true;
                        }
                        if (context.EntityType === "Sage.Entity.Interfaces.IHistory") {
                            return true;
                        }
                    }
                }
                currentViewName = currentViewName.substring(0, currentViewName.indexOf('.'));
                if (currentViewName === "Library") {
                    return true;
                }
                if (Sage.Utility.File.DragDropWatcher.allowdListDrop) {
                    return true;
                }
                return false;
            } else {
                if (Sage.Utility.File.DragDropWatcher.allowdDetailDrop) {
                    return true;
                }
                return false;
            }
        },
        handleFileDropNotSupported: function (e) {
            var query0 = dragDropWatcherStrings.query0 || 'The feature you are requesting requires the Sage SalesLogix Desktop <br> Integration Module.';
            var query1 = dragDropWatcherStrings.query1 || 'Find out more...';
            var query2 = dragDropWatcherStrings.query2 || 'Would you like to install this feature now?';
            var query3 = dragDropWatcherStrings.query3 || 'Note: This module can be installed at any time from the logon or options pages.';
            var url = Sage.Link.getHelpUrl('desktopintegration');
            var html = dString.substitute('<table><tr><td><span> ${0} <a href="${1}">${2}</a><br><br>${3}<br><br><font style="font-style:italic">${4}<font></span></td></tr></table>', [query0, url, query1, query2, query3]);
            var queryOptions = {
                title: 'Sage SalesLogix',
                query: html,
                callbackFn: function (result) {
                    if (result) {
                        Sage.installDesktopFeatures();
                    }
                },
                yesText: null,
                noText: null,
                icon: 'infoIcon',
                showNoButton: true
            };
            Dialogs.raiseQueryDialogExt(queryOptions);
        }
    };

    return Sage.Utility.File.DragDropWatcher;
});
},
'Sage/UI/Columns/Currency':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, sessionStorage */
define("Sage/UI/Columns/Currency", [
    'dojo/_base/declare',
    'dojo/json',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility/_LocalStorageMixin',
    'Sage/Utility',
    'dojo/_base/lang',
    'dojox/grid/cells/dijit'
],
function (declare, json, SDataServiceRegistry, _localStorageMixin, utility, lang) {
    /*
    sample config object...
    {
    width: 15,
    field:  'Price',
    name: 'Base Price',
    sortable: true,
    styles: 'text-align:right;',
    editable: false,
    type: Sage.UI.Columns.Currency,
    exchangeRateType: 'BaseRate',
    displayCurrencyCode: true,
    exchangeRate: 1,    
    displayMode: 'AsControl',
    field: 'Price',
    displayField: 'Price',
    //When in a grid, currencyCodeFieldName is required in AA.    
    currentCode: utility.getClientContextByKey('ExchangeRateCode'),  //'USD'
    }
    */
    var widget = declare("Sage.UI.Columns.Currency", dojox.grid.cells._Widget, {
        widgetClass: Sage.UI.Controls.Currency,
        exchangeRateLoaded: false,
        constructor: function (o) {
            if (this.multiCurrency && !this.exchangeRateLoaded) {
                var systemOptions = Sage.Services.getService('SystemOptions');
                if (systemOptions) {
                    systemOptions.get('BaseCurrency',
                        function (val) {
                            this.exchangeRateLoaded = true;
                            this.currentCode = val;
                            var loader = Sage.Services.getService('ExchangeRateLoader');
                            if (loader) {
                                loader.requestExchangeRate(this.getExchangeRate, this);
                            }
                        },
                        function () {
                            if (typeof console !== 'undefined') {
                                console.error('Unable to determine SystemOptions.BaseCurrency.');
                            }
                        },
                        this
                    );
                } else {
                    if (typeof console !== 'undefined') {
                        console.error('Unable to load the SystemOptions service.');
                    }
                }
            }
        },
        getExchangeRate: function (data) {
            this.exchangeRate = data.Rate;
        },
        getWidgetProps: function (inDatum) {
            var controlId = this.getControlId();
            //Set the options for the currency config object
            return dojo.mixin({}, this.widgetProps || {}, {
                id: controlId,
                value: inDatum,
                width: this.width,
                maxLength: this.maxLength,
                style: this.style,
                hotKey: this.hotKey,
                tabIndex: this.tabIndex,
                field: this.field,
                constraints: this.constraints,
                //Using name for ClientId of .net controls.  
                //TODO: Validate that this does not conflict with the column type.
                name: this.name,
                sortable: this.sortable,
                editable: this.editable,
                required: this.required,
                //type: this.type,
                displayMode: this.displayMode,
                displayCurrencyCode: this.displayCurrencyCode,
                multiCurrency: this.multiCurrency,
                currentCode: this.currentCode,
                exchangeRate: this.exchangeRate,
                currentUICulture: this.currentUICulture,
                textAlign: this.getAlignment()
            });
        },
        getAlignment: function () {
            var retVal = 'right';
            retVal = (this.cellClasses.indexOf('aligncenter') > -1) ? 'center' : retVal;
            retVal = (this.cellClasses.indexOf('alignleft') > -1) ? 'left' : retVal;
            return retVal;
        },
        formatNode: function (inNode, inDatum, inRowIndex) {
            if (!this.widgetClass) {
                return inDatum;
            }

            if (this.multiCurrency) {
                inDatum = inDatum * this.exchangeRate;
            }

            // Check to see if the instance for the selected node already exists
            // This check ensures that a unique control gets created for each cell.  
            // Normal grid controls are created one for the entire column.
            var thisCurrency = dijit.byId(this.getControlId());
            // If it doesn't, create one.
            if (!thisCurrency) {
                this.widget = this.createWidget.apply(this, arguments);
                // If it does, use the existing one.
            } else {
                this.widget = thisCurrency;
                //Check to see if the value has been changed outside of the control and update the control if it has.
                if (thisCurrency.value !== inDatum || this.widget.focusNode.value !== inDatum) {
                    this.widget.focusNode.attr('value', inDatum);
                }
                this.attachWidget.apply(this, arguments);
            }
            this.sizeWidget.apply(this, arguments);
            this.grid.views.renormalizeRow(inRowIndex);
            this.grid.scroller.rowHeightChanged(inRowIndex, true/*fix #11101*/);
            this.focus();
            return undefined;
        },
        formatter: function (inItem, inRowIndex) {
            var currentItem = this.grid.getItem(inRowIndex);
            var retVal = '';
            this.decimalDigit = (this.constraints && this.constraints.places) ? this.constraints.places : Sys.CultureInfo.CurrentCulture.numberFormat.CurrencyDecimalDigits;
            //Multi-Currency is NOT enabled
            if (!this.multiCurrency) {
                retVal = dojo.currency.format(inItem, { currency: [Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol], locale: Sys.CultureInfo.CurrentCulture.name, places: this.decimalDigit });
                retVal = retVal.replace(Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol, "");
            }
            //Multi-Currency is enabled
            else {
                //1. If the exchange rate is from the document, get it from the current record, else                
                //2. If we are in insert mode then there is no parent record to query for the rate and code.
                //Else: get it from the client context service.
                if (this.exchangeRateType == 'EntityRate' && utility.getModeId() !== 'insert') {
                    //Extract the Rate value from the object by walking the sdata relationship path.
                    var rateFieldPath = this.exchangeRateField.split('.');
                    var rateFieldValue = currentItem;
                    for (i = 0; i < rateFieldPath.length; i++) {
                        if (rateFieldValue) {
                            rateFieldValue = rateFieldValue[rateFieldPath[i]];
                        } else {
                            rateFieldValue = utility.getClientContextByKey(this.exchangeRateType);
                        }
                    }
                    //Extract the Rate Code value from the object by walking the sdata relationship path.
                    var rateCodeFieldPath = this.exchangeRateCodeField.split('.');
                    var rateCodeFieldValue = currentItem;
                    for (i = 0; i < rateCodeFieldPath.length; i++) {
                        if (rateCodeFieldValue) {
                            rateCodeFieldValue = rateCodeFieldValue[rateCodeFieldPath[i]];
                        } else {
                            rateCodeFieldValue = utility.getClientContextByKey([this.exchangeRateType, 'Code'].join(''));
                        }
                    }
                    this.exchangeRate = rateFieldValue;
                    this.currentCode = rateCodeFieldValue;
                } else if (this.exchangeRateType === 'MyRate') {
                    this.exchangeRate = utility.getClientContextByKey(this.exchangeRateType);
                    this.currentCode = utility.getClientContextByKey([this.exchangeRateType, 'Code'].join(''));
                }
                inItem = inItem * this.exchangeRate;
                retVal = dojo.currency.format(inItem, { currency: [], locale: Sys.CultureInfo.CurrentCulture.name, places: this.decimalDigit });
                retVal = [retVal, '   ', this.currentCode].join("");
            }
            if (this.abbreviationLength) {
                var abbreviationFormatter = Sage.Format.abbreviationFormatter(this.abbreviationLength);
                retVal = abbreviationFormatter(retVal);
            }
            return retVal;
        },
        styles: 'text-align: right;',
        // Get the items currently being edited and make it more available for use.
        setCurrentItems: function () {
            this.editInfo = this.grid.edit.info;
            this.item = this.grid.getItem(this.editInfo.rowIndex);
        },
        getControlId: function () {
            //summary:
            //  Generates an Id for this instance of the numbertextbox widget from the item key and cell field name
            //  Example XXXXXXX_Price
            this.setCurrentItems();
            return [this.item.$key, this.editInfo.cell.field, this.index].join("_");
        },
        getValue: function (index) {
            //  summary:
            //  Retreives the value from the widget and applies it to the grid.
            //  If there is a validation error in the cell, return the old value, else return the new value.
            //Widget in template creates a second level of focusNode.  Once clicked into the widget, the value exists
            // in the second level.
            var retVal = this.widget.focusNode.valueNode.value;
            if (this.multiCurrency) {
                retVal = retVal / this.exchangeRate;
            }
            if (this.widget.focusNode.state === "Error") {
                var item = this.grid.getItem(index);
                //If there is an error return the old value.
                retVal = this.grid.store.getValue(item, this.grid.edit.info.cell.field);
                this.widget.focusNode.focusNode.value = retVal;
            }
            else if (this.widget.focusNode.state === "Incomplete") {
                retVal = utility.maximizeDecimalDigit(this.widget.focusNode.get('displayedValue'), this.constraints.places);
                this.widget.focusNode.focusNode.value = retVal;
            }
            return retVal;
        }
    });

    var exchangeRateLoader = declare('Sage.UI.Columns.Currency.BaseExchangeRateLoader', _localStorageMixin, {
        _requests: [],
        _requestingData: false,
        _exchangeRate: false,
        _storageNamespace: 'BaseCurrencyExchangeRate',
        constructor: function () {
            this._requests = [];
            this._requestingData = false;
            this._exchangeRate = false;
        },
        requestExchangeRate: function (callback, scope) {
            if (!this._exchangeRate) {
                var data = sessionStorage.getItem(this._storageNamespace);
                if (data) {
                    this._exchangeRate = json.parse(data);
                } else {
                    this._requests.push({
                        fn: callback,
                        scope: scope || this
                    });
                    if (!this._requestingData) {
                        this._requestingData = true;
                        var request = new Sage.SData.Client.SDataSingleResourceRequest(SDataServiceRegistry.getSDataService('dynamic', false, true, true));
                        request.setResourceSelector(dojo.string.substitute("'${0}'", [scope.currentCode]));
                        request.setResourceKind('exchangeRates');
                        request.read({
                            success: lang.hitch(this, this._receiveData),
                            failure: function (response) {
                                console.warn('Error reading request');
                                console.log(response);
                                if (typeof onError === "function") {
                                    onError(response);
                                }
                            },
                            async: false
                        });
                    }
                    return;
                }
            }
            callback.call(scope || this, this._exchangeRate);
        },
        _receiveData: function (data) {
            sessionStorage.setItem(this._storageNamespace, json.stringify(data));
            this._exchangeRate = data;
            var len = this._requests.length;
            for (var i = 0; i < len; i++) {
                var clbk = this._requests.pop();
                clbk.fn.call(clbk.scope, data);
            }
        }
    });
    Sage.Services.addService('ExchangeRateLoader', new exchangeRateLoader());

    return widget;
});
},
'Sage/Groups/GroupManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Groups/GroupManager", [
        'Sage/UI/Dialogs',
        'Sage/Utility/Email',
        'dojo/string',
        'Sage/Groups/GroupContextService',
        'dojox/storage/LocalStorageProvider',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dojo/i18n',
        'dojo/i18n!./nls/GroupManager',
        'Sage/Data/SDataServiceRegistry',
        'dojo/_base/xhr',
        'dojo/topic',
        'dojo/aspect'
    ],
function (
        dialogs,
        email,
        dString,
        GroupContextService,
        LocalStorageProvider,
        array,
        lang,
        i18n,
        nls,
        sDataServiceRegistry,
        xhr,
        topic,
        aspect
    ) {
    Sage.namespace('Sage.Groups.GroupManager');
    Sage.Groups.GroupManager = {
        CurrentUserID: "",
        SortCol: -1,
        SortDir: "ASC",
        //CurrentMode : "CONTACT", //Contact
        GMUrl: "SLXGroupBuilder.aspx?method=",
        GroupXML: "",
        resources: nls,
        LOCALSTORE_NAMESPACE: 'SageGroups',
        QB_WIDTH: 840,
        QB_HEIGHT: 650,

        GetFromServer: function (url, datatype, onSuccess, onError, sync) {
            var args = {
                url: url,
                sync: sync || false,
                handleAs: datatype || 'text',
                headers: { 'Content-Type': 'application/xml' },
                preventCache: true,
                load: onSuccess,
                error: onError
            };
            return dojo.xhrGet(args);
        },

        ClearLocalStorage: function () {
            var localStore = new LocalStorageProvider();
            localStore.initialize();
            localStore.clear(Sage.Groups.GroupManager.resources.LOCALSTORE_NAMESPACE);
            window.location.reload(true);
        },

        ClearLocalStorageForGroup: function (groupId) {
            var localStore = new LocalStorageProvider();
            localStore.initialize();

            array.forEach(localStore.getNamespaces(), function (item) {
                if (item.indexOf(groupId) > -1) {
                    localStore.clear(item);
                }
            });

            sessionStorage.removeItem('GROUPLAYOUT_' + groupId);
            sessionStorage.removeItem('hidden_filters_' + groupId);
            sessionStorage.removeItem('METADATA_FILTERS_' + groupId);
            window.location.reload(true);
        },

        PostToServer: function (url, data, onSuccess, onError) {
            var args = {
                url: url,
                postData: data,
                handleAs: 'text',
                headers: { 'Content-Type': 'application/xml' },
                load: function (data) {
                    if (typeof onSuccess === 'function') {
                        onSuccess(data);
                    }
                },
                error: function (err) {
                    if (typeof onError === 'function') {
                        onError(err);
                    }
                }
            };

            return dojo.xhrPost(args);
        },

        GetCurrentGroupInfo: function () {
            var clGrpContextSvc = Sage.Services.getService("ClientGroupContext");
            if (clGrpContextSvc) {
                var clGrpContext = clGrpContextSvc.getContext();
                return { "Name": clGrpContext.CurrentName,
                    "Family": clGrpContext.CurrentFamily,
                    "Id": clGrpContext.CurrentGroupID,
                    "isAdhoc": clGrpContext.isAdhoc,
                    "Entity": clGrpContext.CurrentEntity
                };
            }
            return "";
        },

        CreateGroup: function (mode) {
            if (typeof mode === 'undefined' || mode === '') {
                mode = Sage.Groups.GroupManager.GetCurrentGroupInfo().Family;
            }
            var vURL = "QueryBuilderMain.aspx?mode=" + mode,
                width = Sage.Groups.GroupManager.QB_WIDTH,
                height = Sage.Groups.GroupManager.QB_HEIGHT;


            window.open(vURL, "GroupViewer",
                dString.substitute("resizable=yes,centerscreen=yes,width=${width},height=${height},status=no,toolbar=no,scrollbars=yes", { width: width, height: height }));
        },

        DeleteGroup: function (groupID, groupName) {
            if (typeof groupID === 'undefined' || groupID === '') {
                groupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            }
            var msg = (groupName) ? dString.substitute(Sage.Groups.GroupManager.resources.ConfirmDeleteFmtMessage, [groupName]) : Sage.Groups.GroupManager.resources.ConfirmDeleteMessage;
            dialogs.raiseQueryDialog('', msg,
                function (result) {
                    if (result === true) {
                        Sage.Groups.GroupManager.GetFromServer(Sage.Groups.GroupManager.GMUrl + 'DeleteGroup&gid=' + groupID,
                            'text',
                            function () {
                                var url = document.location.href.replace("#", "");
                                if (url.indexOf("?") > -1) {
                                    var halves = url.split("?");
                                    url = halves[0];
                                }
                                document.location = url;
                            },
                            function (req) {
                            }
                        );
                    }
                },
                Sage.Groups.GroupManager.resources.yesCaption,
                Sage.Groups.GroupManager.resources.noCaption);
        },
        EditGroup: function (strGroupID) {
            // show group editor dialog...
            var curGrpInfo = Sage.Groups.GroupManager.GetCurrentGroupInfo();
            if (typeof strGroupID === 'undefined' || strGroupID === '')
                strGroupID = curGrpInfo.Id;

            var url = dString.substitute('QueryBuilderMain.aspx?gid=${groupid}\&mode=${md}', { groupid: strGroupID, md: curGrpInfo.Family }),
                width = Sage.Groups.GroupManager.QB_WIDTH,
                height = Sage.Groups.GroupManager.QB_HEIGHT;

            window.open(url, "EditGroup",
            dString.substitute("resizable=yes,centerscreen=yes,width=${width},height=${height},status=no,toolbar=no,scrollbars=yes", { width: width, height: height }));
        },
        CopyGroup: function (strGroupID) {
            // show group editor dialog...
            var curGrpInfo = Sage.Groups.GroupManager.GetCurrentGroupInfo();
            if (typeof strGroupID === 'undefined' || strGroupID === '')
                strGroupID = curGrpInfo.Id;
            var vURL = ['QueryBuilderMain.aspx?gid=', strGroupID, '&action=copy', '&mode=', curGrpInfo.Family].join(''),
                width = Sage.Groups.GroupManager.QB_WIDTH,
                height = Sage.Groups.GroupManager.QB_HEIGHT;

            window.open(vURL, "EditGroup",
               dString.substitute("resizable=yes,centerscreen=yes,width=${width},height=${height},status=no,toolbar=no,scrollbars=yes", { width: width, height: height }));
        },

        //depricated:
        //ShowGroupInViewer...
        //Count

        ListGroupsAsSelect: function (family) {
            var sFamily = family;
            if (!dojo.isString(sFamily) || sFamily.length === 0) {
                sFamily = Sage.Groups.GroupManager.GetCurrentGroupInfo().Family;
                if (!dojo.isString(sFamily) || sFamily.length === 0) {
                    return "";
                }
            }
            var sUrl = Sage.Groups.GroupManager.GMUrl + "GetGroupList&entity=" + sFamily;
            var sResult = "";
            Sage.Groups.GroupManager.GetFromServer(
                sUrl,
                "text",
                function (data) {
                    sResult = data;
                },
                function (err) {
                    if (typeof console !== "undefined") {
                        console.error(err);
                    }
                },
                true);
            var oXmlDoc = getXMLDoc(sResult);
            if (oXmlDoc) {
                var arrGroupInfos = oXmlDoc.getElementsByTagName("GroupInfo");
                if (!arrGroupInfos) {
                    return "";
                }
                var sSelectOption = "";
                for (var i = 0; i < arrGroupInfos.length; i++) {
                    sSelectOption += "<option value = '" + arrGroupInfos[i].getElementsByTagName("GroupID")[0].firstChild.nodeValue + "'>" + arrGroupInfos[i].getElementsByTagName("DisplayName")[0].firstChild.nodeValue + "</option>";
                }
                return sSelectOption;
            }
            return "";
        },
        GetGroupId: function (name) {
            var results = '';

            // Call httpHandler synchronously
            Sage.Groups.GroupManager.GetFromServer(
                Sage.Groups.GroupManager.GMUrl + 'GetGroupId&name=' + encodeURIComponent(name),
                'text',
                function (data) {
                    results = data;
                },
                function (err) {
                    console.error(err);
                },
                true);

            return results;
        },
        HideGroup: function (strGroupID, skipReload) {
            if (typeof strGroupID === 'undefined' || strGroupID === '') {
                strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            }

            Sage.Groups.GroupManager.PostToServer(Sage.Groups.GroupManager.GMUrl + 'HideGroup&gid=' + strGroupID, '', lang.hitch(this, Sage.Groups.GroupManager._HideOrShowComplete, skipReload, strGroupID));
        },
        _HideOrShowComplete: function (skipReload, groupId) {
            var service, context, reloadFn, handle;

            if (skipReload) {
                return;
            }

            reloadFn = function () {
                if (handle && handle.remove) {
                    handle.remove();
                }

                var titlePane = dijit.byId('titlePane');
                if (titlePane) {
                    titlePane.resetConfiguration();
                }
            };

            service = Sage.Services.getService("ClientGroupContext");
            context = service && service.getContext();

            handle = aspect.after(service, 'onCurrentGroupChanged', reloadFn);

            if (!Sage.Groups.GroupManager._isDefaultGroup(groupId) && context.CurrentGroupID === groupId) {
                // User has hidden the current group they are on, and it is NOT the default group
                service.setCurrentGroup(context.DefaultGroupID);
            } else if (Sage.Groups.GroupManager._isDefaultGroup(groupId) && context.CurrentGroupID === groupId) {
                // User has hidden the group they are on, and it happens to be the default group that we would normally switch to...
                // Lookup results is good enough??
                service.setCurrentGroup('LOOKUPRESULTS');
            } else {
                // Hide a group other than current, no need to switch here, just reload the tabs
                reloadFn.call();
            }
        },
        _isDefaultGroup: function (groupId) {
            var service, context, results;

            results = false;
            service = Sage.Services.getService("ClientGroupContext");
            if (service) {
                context = service.getContext();
                if (context) {
                    results = context.DefaultGroupID === groupId;
                }
            }

            return results;
        },
        UnHideGroup: function groupmanager_(strGroupID, skipReload) {
            if (typeof strGroupID === 'undefined' || strGroupID === '') {
                strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            }

            Sage.Groups.GroupManager.GetFromServer(Sage.Groups.GroupManager.GMUrl + 'UnHideGroup&gid=' + strGroupID, '', lang.hitch(this, Sage.Groups.GroupManager._HideOrShowComplete, skipReload, strGroupID));
        },
        ShowGroups: function (strTableName) {
            if (typeof strTableName === 'undefined' || strTableName === '')
                strTableName = Sage.Groups.GroupManager.GetCurrentGroupInfo().Family;
            var vURL = 'ShowGroups.aspx?tablename=' + strTableName;
            window.open(vURL, "ShowGroups", "resizable=yes,centerscreen=yes,width=800,height=646,status=no,toolbar=no,scrollbars=yes");
        },

        CreateAdHocGroup: function (strGroups, strName, strFamily, strLayoutId) {
            //ToDo: should this be depricated or removed?...
            var vURL = [Sage.Groups.GroupManager.GMUrl, 'CreateAdHocGroup',
                '&name=', encodeURIComponent(strName),
                '&family=', strFamily,
                '&layoutid=', encodeURIComponent(strLayoutId)].join();
            return Sage.Groups.GroupManager.PostToServer(vURL, strGroups);

        },
        EditAdHocGroupAddMember: function (strGroupID, strItem) {
            //ToDo: should this be depricated or removed?...
            if (typeof strGroupID === 'undefined' || strGroupID === '')
                strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            var x = Sage.Groups.GroupManager.GetFromServer(Sage.Groups.GroupManager.GMUrl + 'EditAdHocGroupAddMember&groupid=' + strGroupID + '&entityid=' + strItem);
        },
        EditAdHocGroupDeleteMember: function (strGroupID, strItem) {
            //ToDo: should this be depricated or removed?...
            if (typeof strGroupID === 'undefined' || strGroupID === '')
                strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            var x = Sage.Groups.GroupManager.GetFromServer(Sage.Groups.GroupManager.GMUrl + 'EditAdHocGroupDeleteMember&groupid=' + strGroupID + '&entityid=' + strItem);
        },
        SetDefault: function (strGroupID, name, family) {
            Sage.Groups.GroupManager._saveGroupUserOptions(name, family, "DEFAULTGROUP");
        },
        SetLookupLayout: function (strGroupID, name, family) {
            Sage.Groups.GroupManager._saveGroupUserOptions(name, family, "LOOKUPLAYOUTGROUP");
        },
        _saveGroupUserOptions: function (name, family, optionCategory) {
            var groupInfo = Sage.Groups.GroupManager.GetCurrentGroupInfo(),
                currentName = groupInfo.Name,
                currentFamily = groupInfo.Family,
                tempName = name || currentName,
                tempFamily = family || currentyFamily;

            var svc = Sage.Services.getService("UserOptions");
            if (svc) {
                svc.set(family, optionCategory, dString.substitute("${0}:${1}", [tempFamily, tempName]));
            }
        },
        IsAdHoc: function (groupId) {
            alert('not implemented in this object yet...');
        },

        ExportGroup: function (strGroupID, strFileName) {
            try {
                require(['Sage/MailMerge/Helper', 'Sage/MailMerge/Service'], function (Helper, DesktopService) {
                    var oService = Helper.GetDesktopService();
                    if (oService) {
                        if (strGroupID === '')
                            strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
                        oService.ExportToExcel(strGroupID);
                        return;
                    }
                    throw new Error(dString.substitute("${0} ${1}", [Helper.DesktopErrors().MailMergeServiceLoad, Helper.DesktopErrors().SageGearsObjectError]));
                });
            }
            catch (err) {
                dialogs.showError(err.message);
            }
        },

        ShareGroup: function (strGroupID) {
            // show group editor dialog...
            if (typeof strGroupID === 'undefined' || strGroupID === '')
                strGroupID = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
            var vURL = 'ShareGroup.aspx?gid=' + strGroupID;
            window.open(vURL, "ShareGroup", "resizable=yes,centerscreen=yes,width=500,height=450,status=no,toolbar=no,scrollbars=yes");
        },

        GetGroupSQL: function (groupId, useAliases, parts, applyFilters) {
            var sGroupId = groupId;
            if (!dojo.isString(sGroupId) || sGroupId.length === 0) {
                sGroupId = Sage.Groups.GroupManager.GetCurrentGroupInfo().Id;
                if (!dojo.isString(sGroupId) || sGroupId.length === 0) {
                    return "";
                }
            }
            var sUrl = Sage.Groups.GroupManager.GMUrl + "GetGroupSQL&gid=" + sGroupId;
            if (typeof useAliases !== "undefined") {
                if (dojo.isString(useAliases)) {
                    if ((useAliases === "true") || (useAliases === "false")) {
                        sUrl += "&UseAliases=" + useAliases;
                    }
                }
                else {
                    if (typeof useAliases === "boolean") {
                        sUrl += "&UseAliases=" + useAliases.toString();
                    }
                }
            }
            if (dojo.isString(parts) && parts.length > 0) {
                sUrl += "&parts=" + parts;
            }

            if (typeof applyFilters !== "undefined") {
                if (dojo.isString(applyFilters)) {
                    if ((applyFilters === "true") || (applyFilters === "false")) {
                        sUrl += "&ApplyFilters=" + applyFilters;
                    }
                }
                else {
                    if (typeof applyFilters === "boolean") {
                        sUrl += "&ApplyFilters=" + applyFilters.toString();
                    }
                }
            }
            var sResult = "";
            Sage.Groups.GroupManager.GetFromServer(
                sUrl,
                "text",
                function (data) {
                    sResult = data;
                },
                function (err) {
                    if (typeof console !== "undefined") {
                        console.error(err);
                    }
                },
                true);
            return sResult;
        },

        GetGroupSQLFromXML: function (groupXml, onSuccess, onError) {
            Sage.Groups.GroupManager.PostToServer(Sage.Groups.GroupManager.GMUrl + "GetGroupSQL", groupXml, onSuccess, onError);
        },

        GetGroupSQLById: function (groupId, onSuccess, onError) {
            url = Sage.Groups.GroupManager.GMUrl + "GetGroupSQL&gid=" + groupId;
            Sage.Groups.GroupManager.GetFromServer(url, 'json', onSuccess, onError);
        },

        saveSelectionsAsNewGroup: function () {
            var selectionInfo = Sage.Utility.getSelectionInfo();
            if (!selectionInfo || selectionInfo.selectionCount === 0) {
                if (selectionInfo.recordCount < 1) {
                    dialogs.showInfo(Sage.Groups.GroupManager.resources.noRecordsInGroup, Sage.Groups.GroupManager.resources.noneSelectedTitle);
                } else {
                    var dialogbody = dString.substitute(Sage.Groups.GroupManager.resources.noneSelectedPromptFmt, [selectionInfo.recordCount]);
                    dialogs.raiseQueryDialog(
                        Sage.Groups.GroupManager.resources.noneSelectedTitle,
                        dialogbody,
                        function (result) {
                            if (result === true) {
                                Sage.Groups.GroupManager.promptForName('');
                            }
                        },
                        Sage.Groups.GroupManager.resources.yesCaption,
                        Sage.Groups.GroupManager.resources.noCaption);
                }
            } else {
                Sage.Groups.GroupManager.promptForName('');
            }
        },
        promptForName: function (addlMsg, defaultValue) {
            var selectionInfo = Sage.Utility.getSelectionInfo();
            var totalToAdd = (selectionInfo.selectionCount === 0) ? selectionInfo.recordCount : selectionInfo.selectionCount;
            var dialogBody = dString.substitute(Sage.Groups.GroupManager.resources.newGroupNamePrompt, [totalToAdd, addlMsg || '']);
            dialogs.raiseInputDialogExt({
                title: Sage.Groups.GroupManager.resources.newGroupTitle,
                query: dialogBody,
                callbackFn: function (result, name) {
                    if (result === true) {
                        if (name === '') {
                            window.setTimeout(function () { Sage.Groups.GroupManager.promptForName(Sage.Groups.GroupManager.resources.newGroupRePrompt, name); }, 100);
                        } else if (name.match(/[\/\\:\*\?"<\>|\.'\r\n]/) !== null) {
                            window.setTimeout(function () { Sage.Groups.GroupManager.promptForName(Sage.Groups.GroupManager.resources.invalidCharMsg, name); }, 100);
                        } else {
                            Sage.Groups.GroupManager.saveNewGroupPost(name);
                        }
                    }
                },
                yesText: Sage.Groups.GroupManager.resources.okCaption,
                noText: Sage.Groups.GroupManager.resources.cancelCaption,
                defaultValue: defaultValue || '',
                closable: true
            });
        },
        saveNewGroupPost: function (name, saveAll) {
            var selectionInfo = Sage.Utility.getSelectionInfo(),
                service = sDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataSingleResourceRequest(service),
                groupContext = Sage.Services.getService("ClientGroupContext").getContext(),
                family = groupContext.CurrentFamily,
                groupId = groupContext.CurrentGroupID,
                entry = {},
                copy = false;

            request.setResourceKind('groups');

            if (selectionInfo.selectionCount === 0) {
                copy = true;
            }

            entry = {
                family: family,
                name: name,
                adHocIds: selectionInfo.selectedIds
            };

            request.create(entry, {
                success: function (entry) {
                    if (copy) {
                        Sage.Groups.GroupManager.copyFromGroup(groupId, entry.$key);
                    } else {
                        Sage.Groups.GroupManager.newGroupCreated();
                    }
                },
                failure: function () {
                },
                scope: this
            });
        },
        removeSelectionsFromGroup: function () {
            var selectionInfo = Sage.Utility.getSelectionInfo();
            if (selectionInfo.selectionCount === 0) {
                if (selectionInfo.recordCount < 1) {
                    dialogs.showInfo(Sage.Groups.GroupManager.resources.noRecordsInGroup, Sage.Groups.GroupManager.resources.noneSelectedTitle);
                } else {
                    var dialogBody = dString.substitute(Sage.Groups.GroupManager.resources.noneSelectedRemovePromptFmt, [selectionInfo.recordCount]);
                    dialogs.raiseQueryDialog(Sage.Groups.GroupManager.resources.noneSelectedTitle, dialogBody,
                        function (result) {
                            if (result === true) {
                                Sage.Groups.GroupManager.removeConfirmed();
                            }
                        },
                        Sage.Groups.GroupManager.resources.yesCaption,
                        Sage.Groups.GroupManager.resources.noCaption);
                }
            } else {
                Sage.Groups.GroupManager.removeConfirmed();
            }
        },
        removeConfirmed: function () {
            var selectionInfo = Sage.Utility.getSelectionInfo(),
                groupContext = Sage.Services.getService("ClientGroupContext").getContext(),
                family = groupContext.CurrentFamily,
                name = groupContext.CurrentName,
                groupId = groupContext.CurrentGroupID;

            Sage.Groups.GroupManager.removeIds(groupId, name, family, selectionInfo.selectedIds, function () {
                Sage.Groups.GroupManager.refreshListView();
            }, function (err) {
                console.error(err);
            }, this);
        },
        removeIds: function (groupId, groupName, family, ids, onSuccess, onFailure, scope) {
            var service = sDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataServiceOperationRequest(service),
                entry,
                onSuccessWrapper,
                idsRemoved = [];

            request.setResourceKind('groups');
            if (ids && ids.length > 0) {
                request.setOperationName('removeAdHocIds');
                idsRemoved = ids;
            } else {
                request.setOperationName('removeAllAdHocIds');
                idsRemoved.push(ids);
            }

            entry = {
                '$name': 'removeAdHocIds',
                request: {
                    groupId: groupId,
                    groupName: groupName,
                    family: family,
                    adHocIds: ids
                }
            };

            onSuccessWrapper = lang.hitch(this, function () {
                topic.publish('/group/adhoc/removed', { 'groupId': groupId, 'groupName': groupName, 'family': family, 'ids': idsRemoved });
                if (onSuccess) {
                    onSuccess.call(arguments);
                }
            });

            request.execute(entry, {
                success: onSuccessWrapper,
                failure: onFailure,
                scope: scope || this
            });
        },
        addSelectionsToGroup: function (groupID) {
            //Handle addition from details view
            var entityId = Sage.Utility.getCurrentEntityId();
            if (entityId !== '') {
                Sage.Groups.GroupManager.postAddToGroup(groupID, { selectedIds: [entityId], selectionCount: 1 });
            } else {
                //Handle additions from list view
                var selectionInfo = Sage.Utility.getSelectionInfo();
                if (selectionInfo.selectionCount === 0) {
                    if (selectionInfo.recordCount < 1) {
                        dialogs.showInfo(Sage.Groups.GroupManager.resources.noRecordsInGroup, Sage.Groups.GroupManager.resources.noneSelectedTitle);
                    } else {
                        var dialogBody = dString.substitute(Sage.Groups.GroupManager.resources.noneSelectedPromptFmt, [selectionInfo.recordCount]);
                        dialogs.raiseQueryDialog(Sage.Groups.GroupManager.resources.noneSelectedTitle, dialogBody,
                            function (result) {
                                if (result === true) {
                                    Sage.Groups.GroupManager.addConfirmed(groupID);
                                }
                            },
                            Sage.Groups.GroupManager.resources.yesCaption,
                            Sage.Groups.GroupManager.resources.noCaption);
                    }
                } else {
                    Sage.Groups.GroupManager.addConfirmed(groupID);
                }
            }
        },
        copyFromGroup: function (fromGroupId, toGroupId) {
            var selectionInfo = Sage.Utility.getSelectionInfo(),
                service = sDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataServiceOperationRequest(service),
                groupContext = Sage.Services.getService("ClientGroupContext").getContext(),
                family = groupContext.CurrentFamily,
                name = groupContext.CurrentName,
                entry;

            request.setResourceKind('groups');
            request.setOperationName('addAdHocIdsFrom');

            entry = {
                '$name': 'addAdHocIdsFrom',
                request: {
                    groupId: toGroupId,
                    groupName: name,
                    family: family,
                    fromGroupId: fromGroupId
                }
            };

            request.execute(entry, {
                success: function () {
                    var ctxService = Sage.Services.getService('ClientGroupContext');
                    if (ctxService) {
                        var titlePane = dijit.byId('titlePane');
                        if (titlePane) {
                            titlePane.resetConfiguration();
                        }

                        ctxService.setCurrentGroup(toGroupId);
                    }
                },
                failure: function () {
                },
                scope: this
            });
        },
        addConfirmed: function (groupID) {
            var selectionInfo = Sage.Utility.getSelectionInfo();
            Sage.Groups.GroupManager.postAddToGroup(groupID, selectionInfo);
        },
        postAddToGroup: function (groupId, selectionInfo) {
            var service = sDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataServiceOperationRequest(service),
                groupContext = Sage.Services.getService("ClientGroupContext").getContext(),
                family = groupContext.CurrentFamily,
                fromGroupId = groupContext.CurrentGroupID,
                entry,
                operation = 'addAdHocIds';


            if (selectionInfo.selectionCount === 0) {
                Sage.Groups.GroupManager.copyFromGroup(fromGroupId, groupId);
                return;
            }

            request.setResourceKind('groups');
            request.setOperationName(operation);

            entry = {
                '$name': operation,
                request: {
                    groupId: groupId,
                    family: family,
                    adHocIds: selectionInfo.selectedIds /* adHocIds is ignored if operation is "all" */
                }
            };

            request.execute(entry, {
                success: function () {
                },
                failure: function () {
                },
                scope: this
            });
        },
        saveLookupAsGroup: function (obj, e, msg) {
            if (typeof (msg) === 'undefined') {
                msg = Sage.Groups.GroupManager.resources.groupNameText;
            }
            dialogs.raiseInputDialogExt({
                title: Sage.Groups.GroupManager.resources.saveLookupDlgTitle,
                query: msg,
                callbackFn: function (result, name) {
                    if (result === true) {
                        if (name === '') {
                            window.setTimeout(function () { Sage.Groups.GroupManager.saveLookupAsGroup(Sage.Groups.GroupManager.resources.newGroupRePrompt); }, 100);
                        } else if (name.match(/\'|\"|\/|\\|\*|\:|\?|\<|\>/) !== null) {
                            window.setTimeout(function () { Sage.Groups.GroupManager.promptForName(Sage.Groups.GroupManager.resources.invalidCharMsg); }, 100);
                        } else {
                            var postUrl = "slxdata.ashx/slx/crm/-/groups/adhoc?action=SaveLookupAsGroup&name=" + encodeURIComponent(name);
                            xhr.post({
                                url: postUrl,
                                handleAs: 'text',
                                content: {},
                                load: Sage.Groups.GroupManager.newGroupCreated,
                                error: Sage.Groups.GroupManager.handleAjaxError
                            });
                        }
                    }
                },
                yesText: Sage.Groups.GroupManager.resources.okCaption,
                noText: Sage.Groups.GroupManager.resources.cancelCaption,
                defaultValue: '',
                closable: true
            });
        },
        handleAjaxError: function (request) {
            if (typeof request != 'undefined') {
                if (request.responseXML) {
                    var nodes = request.responseXML.getElementsByTagName('sdata:message');
                    if (nodes.length > 0) {
                        dialogs.showError(nodes[0].text || nodes[0].textContent, '');
                    }
                }
                else {
                    dialogs.alert("an unidentified exception has occured");
                }
            }
        },
        newGroupCreated: function () {
            Sage.Link.toListView();
        },
        refreshListView: function () {
            var listpanel = dijit.byId('list');
            if (listpanel) {
                listpanel.refreshList();
            }
        },
        emailSelectionsFromGroup: function () {
            var subject, body, nameOrder, emailField;
            subject = "";
            body = "";
            nameOrder = 0; // 0 = FirstLast; 1 = LastFirst.
            emailField = "Email"; // Valid values are "Email" (for Contact and Lead) and "SecondaryEmail" and "Email3" for Contact.
            // Works only for Contact and Lead groups.
            email.writeEmailToGroupSelection(subject, body, nameOrder, emailField);
        }
    };
    window.groupManager = Sage.Groups.GroupManager; //for backward compatibility
    return groupManager;
});

},
'Sage/Utility/nls/Utility':function(){
﻿define("Sage/Utility/nls/Utility", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            dangerousValueWarn: 'A potentially dangerous form value was detected.  Please avoid invalid character combinations.'+
            'Example: "&lt;script&gt;&lt;/script&gt;" Also avoid invalid characters in filenames: \\ / : * ? " &lt; &gt; | '
            
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/nls/ControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/ControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: ""
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/File/AttachmentPropertiesEditForm':function(){
﻿/*globals dojo, define, Sage, Simplate  */
define("Sage/Utility/File/AttachmentPropertiesEditForm", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/string',
    'dijit/Dialog',
    'Sage/UI/_DialogLoadingMixin',
    'dojo/_base/lang',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/MainView/BindingsManager',
    'Sage/Utility/File',
    'Sage/Utility',
    'Sage/UI/Dialogs',
    'dojox/layout/TableContainer',
    'Sage/UI/Controls/DateTimePicker',
    'dijit/form/TextBox',
    'dijit/form/Button',
    'dojox/form/Uploader',
    'dojo/i18n',
    'dojo/i18n!./nls/AttachmentPropertiesEditForm',
    'dojo/_base/declare'
],
function (_Widget,
    _Templated,
    dString,
    Dialog,
    _DialogLoadingMixin,
    dojoLang,
    SingleEntrySDataStore,
    sDataServiceRegistry,
    BindingsManager,
    fileUtility,
    sageUtility,
    sageDialogs,
    TableContainer,
    DateTimePicker,
    TextBox,
    Button,
    uploader,
    i18n,
    nlsResource,
    declare) {
    var attachForm = declare('Sage.Utility.File.AttachmentPropertiesEditForm', [_Widget, _Templated], {
        attachmentId: '',
        widgetsInTemplate: true,
        attachment: false,
        _bindingMgr: false,
        _store: false,
        _tempFile: false,
        _iframe: null,
        _showing: false,
        _iframeId: 'attachmentRePostIFrame',
        _uploadUrlFmt: 'slxdata.ashx/slx/system/-/attachments(\'${0}\')/file',
        widgetTemplate: new Simplate([
            '<div>',
                '<div dojoType="dijit.Dialog" title="{%= $.editText %}" dojoAttachPoint="_dialog">',
                    '<iframe src="about:blank" style="width:0px;height:0px;border-width:0px;" name="{%= $._iframeId %}" id="{%= $._iframeId %}" dojoAttachPoint="_iframe" dojoAttachEvent="onload:_iframeLoad"></iframe>',
                    '<form method="post" enctype="multipart/form-data" action="{%= $._buildPostUrl() %}" target="{%= $._iframeId %}" dojoAttachPoint="_postForm", class="attachment-properties-form">',
                        '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="160" dojoAttachPoint="_urlContainer">',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.urlText %}" id="{%= $.id %}_tb_Url" dojoAttachPoint="tb_Url" ></div>',
                        '</div>',
                        '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="160" dojoAttachPoint="_fileNameContainer" >',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.fileText %}" id="{%= $.id %}_tb_File" dojoAttachPoint="tb_File" ></div>',
                        '</div>',
                        '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="160" >',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.descriptionText %}" name="description" id="{%= $.id %}_tb_Description" dojoAttachPoint="tb_Description" maxlength="128" ></div>',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.sizeText %}" id="{%= $.id %}_tb_size" dojoAttachPoint="tb_size" disabled="true" shouldPublishMarkDirty="false"></div>',
                            '<div dojoType="Sage.UI.Controls.DateTimePicker" label="{%= $.attachDateText %}" id="{%= $.id %}_dtp_AttachDate" dojoAttachPoint="dtp_attachDate" displayDate="true" displayTime="true" disabled="true" shouldPublishMarkDirty="false"></div>',
                            '<div dojoType="dijit.form.TextBox" label="{%= $.attachedByText %}" id="{%= $.id %}_tb_attachedBy" dojoAttachPoint="tb_attachedBy" disabled="true" shouldPublishMarkDirty="false"></div>',
                        '</div>', //form

                        '<div class="general-dialog-actions">',
                            '<input dojoType="dojox.form.Uploader" multiple="false" label="{%= $.uploadFileText %}" type="file" name="file" dojoAttachEvent="onChange:_onNewFile" dojoAttachPoint="btn_FileSelect" class="uploadButton" ></input>',
                        '</div>',
                        '<div class="general-dialog-actions">', //buttons
                            '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnOK" name="_btnOK" dojoAttachPoint="_btnOK" dojoAttachEvent="onClick:_okClick" >{%= $.okText %}</div>',
                            '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnCancel" name="_btnCancel" dojoAttachPoint="_btnCancel" dojoAttachEvent="onClick:_cancelClick">{%= $.cancelText %}</div>',
                        '</div>', //buttons
                        '<input type="hidden" name="X-HTTP-Method-Override" value="PUT" />', //in case we don't have async support
                    '</form>',
                '</div>', //dialog
            '</div>' //root node
        ]),
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization("Sage.Utility.File", "AttachmentPropertiesEditForm"));
            this.inherited(arguments);
        },
        show: function () {
            this._dialog.show();
            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
            }
            this._showing = true;
            if (!this.attachment) {
                this._dialog.showLoading();
            }
        },
        hide: function () {
            this.attachmentId = '';
            this.attachment = false;
            this._tempFile = false;
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this._dialog.hide();
            this._showing = false;
        },
        _buildPostUrl: function () {
            var urlparts = [];
            urlparts.push(/https/i.test(window.location.protocol) ? 'https' : 'http');
            urlparts.push('://');
            urlparts.push(window.location.hostname);
            if (window.location.port && window.location.port !== 80) {
                urlparts.push(':', window.location.port);
            }
            urlparts.push('/');
            urlparts.push(sageUtility.getVirtualDirectoryName());
            urlparts.push('/slxdata.ashx/slx/system/-/attachments');
            if (this.attachment) {
                urlparts.push('("' + this.attachment.$key + '")');
            }
            urlparts.push('/file');
            var url = urlparts.join('');
            return url;
        },
        _iframeLoad: function (e) {
            if (this._iframe.contentDocument && this._iframe.contentDocument.URL.indexOf('attachments') > 0) {
                dojo.publish('/entity/attachment/update', '');
                this.hide();
            }
        },
        _setAttachmentIdAttr: function (attachId) {
            this.attachmentId = attachId;
            if (this.attachmentId && this.attachmentId !== '') {
                this._loadData();
            }
        },
        _getAttachmentIdAttr: function () {
            return this.attachmentId;
        },
        _loadData: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            if (!this._store) {
                this._store = new SingleEntrySDataStore({
                    include: ['$descriptors'],
                    resourceKind: 'attachments',
                    service: sDataServiceRegistry.getSDataService('system')
                });
            }
            if (this.attachmentId !== '') {
                this._store.clearCache();
                this._store.fetch({
                    predicate: '"' + this.attachmentId + '"',
                    onComplete: this._receiveAttachment,
                    beforeRequest: function (request) {
                        request.setQueryArg('_includeFile', 'false');
                    },
                    onError: this._requestFail,
                    scope: this
                });
            } else {
                sageDialogs.showError('No attachment to edit');
            }
        },
        _receiveAttachment: function (attachment) {
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this.attachment = attachment;
            this._ensureBindings();
            this._bind();
            if (this.attachment.url) {
                dojo.removeClass(this._urlContainer.domNode, 'display-none');
                dojo.addClass(this.btn_FileSelect.domNode, 'display-none');
                dojo.addClass(this._fileNameContainer.domNode, 'display-none');
            } else {
                dojo.addClass(this._urlContainer.domNode, 'display-none');
                dojo.removeClass(this.btn_FileSelect.domNode, 'display-none');
                dojo.removeClass(this._fileNameContainer.domNode, 'display-none');
            }
        },
        _ensureBindings: function () {
            if (!this._bindingMgr) {
                this._bindingMgr = new BindingsManager({
                    defaultBinding: { boundEntity: this.attachment },
                    items: [
                        {
                            boundWidget: this.tb_File,
                            entityProperty: 'fileName'
                        }, {
                            boundWidget: this.tb_Description,
                            entityProperty: 'description'
                        }, {
                            boundWidget: this.tb_size,
                            entityProperty: 'fileSize',
                            _formatValueFromEntity: function (v) {
                                return Sage.Utility.File.formatFileSize(v);
                            },
                            twoWay: false
                        }, {
                            boundWidget: this.dtp_attachDate,
                            entityProperty: 'attachDate',
                            dataType: 'date',
                            twoWay: false
                        }, {
                            boundWidget: this.tb_Url,
                            entityProperty: 'url'
                        }, {
                            boundWidget: this.tb_attachedBy,
                            entityProperty: 'user.$descriptor',
                            twoWay: false
                        }
                    ]
                });
            }
        },
        _bind: function () {
            if (!this._bindingMgr.boundEntity || (this.attachment.$key !== this._bindingMgr.boundEntity.$key)) {
                this._bindingMgr.setBoundEntity(this.attachment);
            } else {
                this._bindingMgr.bind();
            }
        },
        _onNewFile: function () {
            var files = this.btn_FileSelect._files;
            if (files && files.length > 0) {
                this.tb_File.set('value', files[0].name);
                this._tempFile = files[0];
            } else {
                //this._tempFile = true;
            }
            this.tb_Description.focus();
        },
        _uploadNewFile: function (file) {
            if (file) {
                var url = dString.substitute(this._uploadUrlFmt, [this.attachment.$key]);
                //Only Support by HTML5
                fileUtility.uploadFileHTML5(file,
                    url,
                    false,
                    this._newFileUploaded,
                    this._requestFail,
                    this,
                    true);
            }
        },
        _newFileUploaded: function () {
            this._tempFile = false;
            dojo.publish('/entity/attachment/update', self.attachment);
            this.hide();
        },
        _okClick: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            this._saveAndHide();
        },
        _saveAndHide: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            var self = this;
            if ((!fileUtility.supportsHTML5File && !Sage.gears) && (this._tempFile)) {
                this._store._okToCache = false;
                this._postForm.action = this._buildPostUrl();
                this._postForm.submit();
                //hack alert!... IE8 does not fire the iframe onload event, so hacking...
                //which is especially stupid because IE is the reason we have to do this kind
                // of post in the first place.  ugh!
                window.setTimeout(function () {
                    if (self._showing) {
                        dojo.publish('/entity/attachment/update', '');
                        self.hide();
                    }
                }, 5000);
                return;
            }

            //pop this into another thread so change events of the currently focused control have a chance to fire
            window.setTimeout(function () {
                self._saveAttachment();
            }, 10);
        },
        _saveAttachment: function () {
            if (this._tempFile) {
                this._uploadNewFile(this._tempFile);
            }
            this._store.save({
                scope: this,
                success: function (attachmentUpdated) {
                    dojo.publish('/entity/attachment/update', attachmentUpdated);
                    this._dialog.hide();
                },
                failure: this._requestFail
            });
        },
        _cancelClick: function () {
            this.hide();
        },
        _requestFail: function (req) {
            console.warn('attachment request failed: ' + req);
            sageDialogs.showError(this.requestFailedMsg);
            this.hide();
        }
    });
    return attachForm;
});
},
'Sage/UI/Controls/nls/Address':function(){
define("Sage/UI/Controls/nls/Address", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        address1Text: 'Address 1:',
        address2Text: 'Address 2:',
        address3Text: 'Address 3:',
        cancelText: 'Cancel',
        cityText: 'City:',
        countryText: 'Country:',
        countyText: 'County:',
        descriptionText: 'Description:',
        dialogTitle: 'Address',
        isMailingText: 'Shipping:',
        isPrimaryText: 'Primary:',
        okText: 'OK',
        postalCodeText: 'Postal Code:',
        salutationText: 'Attention:',
        stateText: 'State:',
        imageEditToolTip: 'Edit',
        imageMapQuestToolTip: 'MapQuest'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/FormUsagesPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/FormUsagesPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/string',
    'dojox/grid/EnhancedGrid',
    './_PropertyEditor',
    'Sage/Services/_ServiceMixin',
    'dojo/i18n!./nls/FormUsagesPropertyEditor'
], function(
    declare,
    lang,
    string,
    EnhancedGrid,
    _PropertyEditor,
    _ServiceMixin,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.FormUsagesPropertyEditor', [EnhancedGrid, _PropertyEditor, _ServiceMixin], {
        serviceMap: {
            'dataService': { type: 'sdata', name: 'metadata' }
        },

        // Localization
        titleText: 'Usage',

        portalText: 'Portal',
        viewText: 'View',
        modesText: 'Modes',
        descriptionText: 'Description',

        // View Properties
        selectionMode: 'none',
        canSort: function(){
            return false;
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            var name = this._designer.get('name') || '';

            var store = new Sage.Data.SDataStore({
                service: this.dataService,
                resourceKind: 'formUsages',
                select: [
                    'showInMode',
                    'portalPage/portalAlias',
                    'portalPage/pagetitle',
                    'portalPage/description'
                ],
                where: string.substitute('smartPartId eq "${0}"', [name])
            });

            this.setStore(store);
            this.set('structure', [{
                field: 'portalPage.portalAlias',
                name: this.portalText,
                width: 'auto'
            },{
                field: 'portalPage.pagetitle',
                name: this.viewText,
                width: 'auto'
            },{
                field: 'showInMode',
                name: this.modesText,
                formatter: this.formatModes,
                width: 'auto'
            },{
                field: 'portalPage.description',
                name: this.descriptionText,
                width: 'auto'
            }]);
        },
        formatModes: function(modes){
            if(!modes) return '';

            return (lang.isArray(modes)) ? modes.join(', ') : modes;
        }
    });
});
},
'Sage/QuickForms/Design/Editors/GenericAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/GenericAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/GenericAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.GenericAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        controlInfoText: 'Control Info',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._visible.set('value', this._designer.get('visible'));
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('visible', value);
        }
    });
});

},
'Sage/UI/ActivityList':function(){
﻿/*globals Sage, dojo, define */
define("Sage/UI/ActivityList", [
    'dojo/_base/declare',
    'dijit/_Widget',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/Columns/DateTime',
    'Sage/UI/Columns/SlxLink',
    'Sage/UI/SLXPreviewGrid',
    'Sage/UI/SLXPreviewGrid/Grid',
    'dijit/form/FilteringSelect',
    'Sage/UI/SLXPreviewGrid/Filter/DateRange',
    'Sage/UI/SLXPreviewGrid/Filter/Text',
    'dojo/data/ItemFileReadStore',
    'dojo/string',
    'Sage/UI/SLXPreviewGrid/Filter/_previewGridFilterMixin',
    'Sage/UI/SLXPreviewGrid/Filter/Lookup',
    'Sage/Data/SDataServiceRegistry',
    'dojo/i18n!./nls/ActivityList'
],
function (declare,
    _Widget,
    utility,
    activityUtility,
    ColumnsDateTime,
    ColumnsLink,
    PreviewGrid,
    PreviewGridGrid,
    FilteringSelect,
    DateRangeFilter,
    TextFilter,
    ItemFileReadStore,
    dString,
    filterMixin,
    lookupFilter,
    sDataServiceRegistry,
    i18nStrings) {

    var activityTypeFilterWidget = declare('Sage.UI.ActivityTypeFilterWidget', [_Widget, filterMixin], {
        // summary:
        //  Filter widget for the history or activity type.   

        postCreate: function () {
            this.inherited(arguments);
            var div = document.createElement("div");
            this.domNode.appendChild(div);
            var options = [];
            dojo.forEach(["atAppointment", "atPhoneCall", "atToDo", "atPersonal"], function (item) {
                options.push({ name: activityUtility.getActivityTypeName(item), id: item });
            });
            var store = new ItemFileReadStore({
                data: { items: options, label: 'name', identifier: 'id' }
            });
            this._select = new FilteringSelect({
                store: store, required: false
            }, div);
        },

        getQuery: function () {
            var v = this._select.get('value');
            if (v) {
                return "Type eq '" + v + "'";
            }
            return "";
        },

        reset: function () {
            this._select.set('value', null);
        },
        getState: function () {
            return { 'value': this._select.get('value') };
        },
        applyState: function (state) {
            if (state) {
                this._select.set('value', state['value'] || '');
            }
        }
    });


    var activityList = declare('Sage.UI.ActivityList', [_Widget], {
        placeHolder: '',
        conditionFmt: '',
        parentRelationshipName: '',
        workspace: '',
        tabId: '',
        connections: [],
        constructor: function (options) {
            this.connections = [];
        },
        startup: function () {
            //console.dir(this);
            var toolConfig = [
                {
                    id: 'SchedulePhoneCall',
                    imageClass: 'icon_Schedule_Meeting_16x16',
                    handler: function () { Sage.Link.scheduleMeeting(); },
                    alternateText: i18nStrings.addMeetingText
                }, {
                    id: 'ScheduleMeeting',
                    imageClass: 'icon_Schedule_Call_16x16',
                    handler: function () { Sage.Link.schedulePhoneCall(); },
                    alternateText: i18nStrings.addPhoneCallText
                }, {
                    id: 'ScheduleToDo',
                    imageClass: 'icon_Schdedule_To_Do_16x16',
                    handler: function () { Sage.Link.scheduleToDo(); },
                    alternateText: i18nStrings.addToDoText
                }, {
                    id: this.id + '_Help',
                    imageClass: 'icon_Help_16x16',
                    handler: function () { utility.openHelp('activitiestab'); },
                    alternateText: i18nStrings.helpText
                }
            ];
            var columnConfig = [
            // this is used to add an id to every row, for test automation
                {
                field: '$key', editable: false, hidden: true, id: 'id',
                formatter: function (value, rowIdx, cel) {
                    var insertId = [cel.grid.id, '-row', rowIdx].join('');
                    var id = (Sage.Utility.getModeId() === 'insert') ? insertId : value;
                    var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                    return anchor;
                }
            }, {
                field: '$key',
                name: i18nStrings.completeText,
                sortable: false,
                width: '90px',
                type: activityUtility.activityCompleteCell
            }, {
                field: 'Type',
                name: i18nStrings.typeText,
                type: activityUtility.activityTypeCell,
                width: '90px',
                filterConfig: { widgetType: activityTypeFilterWidget }
            }, {
                field: 'StartDate',
                name: i18nStrings.startDateText,
                type: ColumnsDateTime,
                useFiveSecondRuleToDetermineTimeless: true,
                getTimeless: true,
                width: '100px',
                filterConfig: {
                    widgetType: DateRangeFilter,
                    label: i18nStrings.dateRangeText
                }
            }, {
                field: 'Duration',
                name: i18nStrings.durationText,
                type: activityUtility.activityDurationCell,
                width: '40px'
            }, {
                field: 'Leader',
                name: i18nStrings.leaderText,
                type: activityUtility.activityLeaderCell,
                width: '90px',
                filterConfig: {
                    widgetType: lookupFilter,
                    lookupStructure: [
                        {
                            cells: [
                                {
                                    name: i18nStrings.firstNameText || 'First Name',
                                    field: 'UserInfo.FirstName',
                                    sortable: true,
                                    width: '200px',
                                    editable: false,
                                    propertyType: 'System.string',
                                    excludeFromFilters: false,
                                    defaultValue: ''
                                },
                                {
                                    name: i18nStrings.lastNameText || 'Last Name',
                                    field: 'UserInfo.LastName',
                                    sortable: true,
                                    width: '200px',
                                    editable: false,
                                    propertyType: 'System.string',
                                    excludeFromFilters: false,
                                    defaultValue: ''
                                },
                                {
                                    name: i18nStrings.typeText || 'Type',
                                    field: 'Type',
                                    sortable: true,
                                    width: '100px',
                                    editable: false,
                                    propertyType: 'System.string',
                                    excludeFromFilters: false,
                                    defaultValue: ''
                                }
                            ]
                        }
                    ],
                    lookupGridOptions: {
                        contextualCondition: function () {
                            var where = '';
                            where = '((Type ne \'Template\') and (Type ne \'Retired\'))';
                            return where;
                        },
                        contextualShow: '',
                        selectionMode: 'single'
                    },
                    lookupStoreOptions: {
                        resourceKind: 'users',
                        sort: [{ attribute: 'UserInfo.FirstName'}]                  
                    },
                    getQuery: function () {
                        var obj = this._lup.get('selectedObject');
                        if (obj && obj['$key']) {
                            return 'Leader eq \'' + obj['$key'].substr(0, 12) + '\'';
                        }
                        return '';
                    }
                }
            }
            ];
            this._addEntitySpecificColumns(columnConfig);

            columnConfig.push({
                field: 'Description',
                name: i18nStrings.descriptionText,
                width: '200px',
                filterConfig: { widgetType: TextFilter }
            });
            columnConfig.push({
                field: 'Category',
                name: i18nStrings.categoryText,
                width: '75px'
            });


            var parentRelationshipName = this.parentRelationshipName;

            var options = {
                tools: toolConfig,
                columns: columnConfig,
                previewField: 'LongNotes',
                readOnly: true,
                rowsPerPage: 20,
                storeOptions: {
                    select: ['ContactId', 'OpportunityId', 'AccountId', 'LeadId', 'Description', 'Duration', 'Recurring', 'Type', 'Category', 'Timeless'],
                    include: ['Leader', '$descriptors'],
                    resourceKind: "activities",
                    sort: [{ attribute: 'StartDate'}],
                    service: sDataServiceRegistry.getSDataService('system')
                },
                slxContext: { workspace: this.workspace, tabId: this.tabId },
                contextualCondition: function () {
                    var fmt = '(Type eq \'atAppointment\' or Type eq \'atPhoneCall\' or Type eq \'atToDo\' or Type eq \'atPersonal\') and ${0} eq \'${1}\'';
                    return dString.substitute(fmt, [parentRelationshipName, utility.getCurrentEntityId()]);
                },
                dblClickAction: Sage.Link.editActivity
            };
            //fire this so that customizations can change these options without overriding the whole thing
            this.onBeforeCreateGrid(options);
            var grid = new PreviewGrid.Grid(options, this.placeHolder);
            grid._grid.store.beforeRequest = function (req) {
                req.setQueryArg('_expandRecurrences', 'false');
            };
            grid.startup();
            // This is not a typo.  The dijit.layout.ContentPane is not affectively determining all of it's layout information
            // on the first pass through resize.  Calling resize twice effectively renders the grid to fill it's container.
            var localTC = dijit.byId('tabContent');
            localTC.resize(); localTC.resize();

            this.connections.push(dojo.subscribe('/entity/activity/create', this, this.onActivityChanges));
            this.connections.push(dojo.subscribe('/entity/activity/change', this, this.onActivityChanges));
            this.connections.push(dojo.subscribe('/entity/activity/delete', this, this.onActivityChanges));
            dojo.connect(grid, 'destroy', this, this.destroy);
            this._grid = grid;
        },
        onActivityChanges: function (activity) {
            this._grid.refresh();
        },
        destroy: function () {
            for (var i = 0; i < this.connections.length; i++) {
                dojo.unsubscribe(this.connections.pop());
            }
            this.inherited(arguments);
        },
        _addEntitySpecificColumns: function (columnConfig) {
            var entityType = Sage.Services.getService('ClientEntityContext').getContext().EntityType;
            switch (entityType) {
                case "Sage.Entity.Interfaces.IAccount":
                case "Sage.Entity.Interfaces.IOpportunity":
                    columnConfig.push({
                        field: 'ContactName',
                        name: i18nStrings.contactText,
                        width: '100px',
                        type: ColumnsLink,
                        idField: 'ContactId',
                        pageName: 'Contact'
                    });
                    break;
                case "Sage.Entity.Interfaces.IContact":
                    columnConfig.push({
                        field: 'OpportunityName',
                        name: i18nStrings.opportunityText,
                        width: '100px',
                        type: ColumnsLink,
                        idField: 'OpportunityId',
                        pageName: 'Opportunity'
                    });
                    break;
            }
        },
        onBeforeCreateGrid: function (options) { }
    });
    return activityList;
});
},
'Sage/MainView/ActivityMgr/nls/BaseListPanelConfig':function(){
﻿define("Sage/MainView/ActivityMgr/nls/BaseListPanelConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleFmtString: '${0}'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/nls/OwnerControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/OwnerControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Owner"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/SDataLookup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/SDataLookup", [],
    function () {
        Sage.namespace('Utility.SDataLookup');
        dojo.mixin(Sage.Utility.SDataLookup, {
            setFormatType: function (opts) {
                switch (opts.propertyFormat) {
                    case 'Phone':
                        return Sage.UI.Columns.Phone;
                    default:
                        return '';
                }
            },
            childObjectFormatter: function (opts) {
                var feedItem = opts.grid.grid._by_idx[opts.rowIdx].item,
                    res,
                    i;

                if (!feedItem || !feedItem[opts.childentity] || feedItem[opts.childentity].$resources.length === 0) {
                    return dojo.string.substitute('<div style="text-indent:16px">${0}</div>', [opts.value || '&nbsp;']);
                }

                opts.value = opts.value || '&nbsp;';
                res = [];
                if (opts.includeButton) {
                    res.push(dojo.string.substitute([
                        '<input type=button id="SOPshow${1}" style="height:16px;width:14px;border:0;background:transparent;vertical-align:top" onclick="dojo.query(\'.SOProw${1}\').style({display:\'\'});dojo.query(\'#SOPshow${1}\').style({display:\'none\'});dojo.query(\'#SOPhide${1}\').style({display:\'\'})" value="+">',
                        '<input type=button id="SOPhide${1}" style="display:none;height:16px;width:14px;border:0;background:transparent;vertical-align:top" onclick="dojo.query(\'.SOProw${1}\').style({display:\'none\'});dojo.query(\'#SOPshow${1}\').style({display:\'\'});dojo.query(\'#SOPhide${1}\').style({display:\'none\'})" value="-"> '
                        ].join(''), [opts.value, opts.rowIdx]));
                }

                res.push(dojo.string.substitute('${0}<div class=SOProw${1} style="display:none">', [opts.value, opts.rowIdx]));
                for (i = 0; i < feedItem[opts.childentity].$resources.length; i++) {
                    res.push(dojo.string.substitute('<div style="text-indent:2em">${0}</div>', [feedItem[opts.childentity].$resources[i][opts.fieldName] || '&nbsp;']));
                }

                res.push("</div>");
                return res.join('');
            }
        });
    });
},
'Sage/UI/Columns/Phone':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Phone", [
    'Sage/Format',
    'Sage/UI/Controls/Phone',
    'Sage/UI/Columns/Cell',
    'dojo/_base/declare'
],
function (Format, Phone, Cell, declare) {
    var widget = declare('Sage.UI.Columns.Phone', Cell, {
        defaultValue: '',
        widgetClass: Phone,
        getWidgetProps: function (inDatum) {
            // Create a uniqueId for this widget.  Native dojox grid widgets are reused on every cell.
            // Sage EditableGrid cannot function this way.
            var controlId = this._getControlId();
            //Set the options for the currency config object
            return dojo.mixin({}, this.widgetProps || {}, {
                id: controlId,
                value: inDatum,
                width: this.width,
                maxLength: this.maxLength,
                style: this.style,
                hotKey: this.hotKey,
                tabIndex: this.tabIndex,
                field: this.field
            });
        },
        formatter: Format.phone,
        styles: 'text-align: left;',
        getValue: function (index) {
            //  summary:
            //  Retreives the value from the widget and applies it to the grid.
            //  If there is a validation error in the cell, return the old value, else return the new value.
            var retVal = this.widget.get('value');
            retVal = this.widget.unformatNumber(retVal);
            if ((typeof retVal === 'undefined') || (retVal === '')) {
                retVal = this.defaultValue;
            }
            if (this.widget && this.widget.focusNode.state === "Error") {
                return this.widget.focusNode._resetValue;
            }
            return retVal;
        }
    });

    return widget;
});
},
'Sage/MailMerge/Helper':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define(
    "Sage/MailMerge/Helper", [
        "Sage/UI/Dialogs",
        "dijit/_Widget",
        "dojo/i18n",
        "dojo/string",
        "dojo/_base/lang",
        "dojo/i18n!./nls/Helper"
    ],
// ReSharper disable InconsistentNaming
    function (Dialogs, _Widget, i18n, dString, dLang, nls) {
        // ReSharper restore InconsistentNaming
        Sage.namespace("MailMerge.Helper");
        dojo.mixin(Sage.MailMerge.Helper, {
            desktopErrorsStore: null,
            infoStore: null,
            DesktopErrors: function () {
                if (this.desktopErrorsStore != null) {
                    return this.desktopErrorsStore;
                } else {
                    var sPath = Sage.MailMerge.Loader.prototype.GetClientPath();
                    if (sPath != null) {
                        var sUrl = dString.substitute("${0}/SLXMailMergeClient.ashx?method=GetDesktopErrors", [sPath]);
                        var oDesktopErrors = this.GetMailMergeLoader().DecodeMailMergeJsonFromUrl(sUrl);
                        if (oDesktopErrors != null) {
                            this.desktopErrorsStore = oDesktopErrors;
                            return this.desktopErrorsStore;
                        }
                    }
                }
                return null;
            },
            /* This function is called by the menu items of the Write menu. */
            ExecuteWriteAction: function (writeAction, param) {
                try {
                    require(['Sage/MailMerge/Service'], function () {
                        var oService = Sage.MailMerge.Helper.GetMailMergeService();
                        if (oService) {
                            switch (writeAction) {
                                case WriteAction.waWriteAddressLabels:
                                    oService.WriteAddressLabels();
                                    break;
                                case WriteAction.waWriteEmail:
                                    oService.WriteEmail();
                                    break;
                                case WriteAction.waWriteEmailUsing:
                                    oService.WriteEmailUsing(param);
                                    break;
                                case WriteAction.waWriteEmailUsingMore:
                                    oService.WriteEmailUsingMoreTemplates();
                                    break;
                                case WriteAction.waWriteFaxUsing:
                                    oService.WriteFaxUsing(param);
                                    break;
                                case WriteAction.waWriteFaxUsingMore:
                                    oService.WriteFaxUsingMoreTemplates();
                                    break;
                                case WriteAction.waWriteLetterUsing:
                                    oService.WriteLetterUsing(param);
                                    break;
                                case WriteAction.waWriteLetterUsingMore:
                                    oService.WriteLetterUsingMoreTemplates();
                                    break;
                                case WriteAction.waWriteMailMerge:
                                    oService.WriteMailMerge();
                                    break;
                                case WriteAction.waWriteTemplates:
                                    oService.WriteTemplates(true);
                                    break;
                            }
                        }
                    });
                } catch (err) {
                    var sXtraMsg = "";
                    if (this.IsSageGearsObjectError(err)) {
                        sXtraMsg = this.DesktopErrors().SageGearsObjectError;
                    }
                    var sError = (dojo.isFunction(err.toMessage)) ? err.toMessage(sXtraMsg, this.MailMergeInfoStore().ShowJavaScriptStack) : err.message;
                    Dialogs.showError(dString.substitute(this.DesktopErrors().WriteActionError, [sError]));
                }
            },
            GetDesktopService: function(showLoadError) {
                return this.GetMailMergeService(showLoadError);
            },
            GetMailMergeLoader: function () {
                if (Sage.Services.hasService("MailMergeServiceLoader")) {
                    return Sage.Services.getService("MailMergeServiceLoader");
                }
                return null;
            },
            GetMailMergeService: function (showLoadError) {
                var bShowError = true;
                if (typeof showLoadError === "boolean") {
                    bShowError = showLoadError;
                }
                if (Sage && Sage.Services && Sage.gears && Sage.gears.factory && Sage.Services.hasService("MailMergeService")) {
                    return Sage.Services.getService("MailMergeService");
                } else {
                    if (bShowError) {
                        Dialogs.showError(dString.substitute("${0} ${1}", [this.DesktopErrors().MailMergeServiceLoad, this.DesktopErrors().SageGearsObjectError]));
                    }
                }
                return null;
            },
            IsSageGearsObjectError: function (err) {
                if (err) {
                    var sNonLocalizedError = "The specified class name cannot be mapped to a COM object"; //DNL
                    var sLocalizedError = this.DesktopErrors().SageGearsClassError;
                    if ((dojo.isIE && (err.number == -2146827287)) || (err.message.indexOf(sNonLocalizedError) != -1) || (err.message.indexOf(sLocalizedError) != -1)) {
                        return true;
                    }
                }
                return false;
            },
            MailMergeInfoStore: function () {
                if (this.infoStore != null) {
                    return this.infoStore;
                } else {
                    var sPath = Sage.MailMerge.Loader.prototype.GetClientPath();
                    if (sPath != null) {
                        var sUrl = dString.substitute("${0}/SLXMailMergeClient.ashx?method=GetInfoStore", [sPath]);
                        var oMailMergeObject = this.GetMailMergeLoader().DecodeMailMergeJsonFromUrl(sUrl);
                        if (oMailMergeObject != null) {
                            this.infoStore = oMailMergeObject;
                            return this.infoStore;
                        }
                    }
                }
                return null;
            }
        });

        dLang.mixin(Sage.MailMerge.Helper, nls);

        window.WriteAction = {
            waWriteAddressLabels: 0,
            waWriteEmail: 1,
            waWriteEmailUsing: 2,
            waWriteEmailUsingMore: 3,
            waWriteFaxUsing: 4,
            waWriteFaxUsingMore: 5,
            waWriteLetterUsing: 6,
            waWriteLetterUsingMore: 7,
            waWriteMailMerge: 8,
            waWriteTemplates: 9
        };

        return Sage.MailMerge.Helper;
    }
);


},
'Sage/TaskPane/UserTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/UserTasklet", [
    'dojo/i18n!./nls/UserTasklet',
    'Sage/TaskPane/_BaseTaskPaneTasklet',
    'Sage/TaskPane/TaskPaneContent',
    'Sage/Utility',
    'dojo/_base/declare'
],
function (i18nStrings, _BaseTaskPaneTasklet, TaskPaneContent, Utility, declare) {
    var userTasklet = declare('Sage.TaskPane.UserTasklet', [_BaseTaskPaneTasklet, TaskPaneContent], {
        addToRoleTitle: 'Add to Role',
        resetUsersTitle: 'Reset Users',
        taskItems: [],
        constructor: function () {
            dojo.mixin(this, i18nStrings);
            this.taskItems = [
                { taskId: 'AddToRole', type: "Link", displayName: this.addToRoleTitle, clientAction: 'userTaskletActions.addUsersToRole();',
                    securedAction: 'Entities/User/Add'
                },
                { taskId: 'ResetUsers', type: "Link", displayName: this.resetUsersTitle, clientAction: 'userTaskletActions.resetUsers();',
                    securedAction: 'Entities/User/Add'
                }
            ];
        },
        resetUsers: function () {
            if (Utility.getModeId() === "detail") {
                this.onResetUsersClick();
            }
            else {
                this.prepareSelectedRecords(this.resetUsersAction(this));
            }
        },
        addUsersToRole: function () {
            if (Utility.getModeId() === "detail") {
                this.onAddUserClick();
            }
            else {
                this.prepareSelectedRecords(this.actionItem(this));
            }
        },
        actionItem: function (self) {
            return function () {
                self.onAddUserClick();
            };
        },
        resetUsersAction: function (self) {
            return function () {
                self.onResetUsersClick();
            };
        },
        onAddUserClick: function () {
            var addUser = dojo.byId([this.clientId, '_tskAddUserToRole'].join(''));
            if (addUser) {
                addUser.click();
            }
        },
        onResetUsersClick: function () {
            var resetUser = dojo.byId([this.clientId, '_tskResetUsers'].join(''));
            if (resetUser) {
                resetUser.click();
            }
        }

    });
    return userTasklet;
});
},
'url:Sage/UI/Controls/templates/MultiSelectPickList.html':"<div>\r\n    <input id=\"${id}-TextBox\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"textNode\" data-dojo-attach-event=\"onBlur: _onTextBlur\" />\r\n    <div id=\"${id}-Button\" data-dojo-type=\"dijit.form.DropDownButton\" data-dojo-attach-point=\"dropDownButtonNode\">\r\n        <span></span>\r\n        <div class=\"multiSelectPickListDialog\" id=\"${id}-ToolTipDialog\" data-dojo-type=\"dijit.TooltipDialog\" data-dojo-attach-point=\"tooltipDialogNode\" data-dojo-attach-event=\"onClose: _onTooltipClose, onShow: _onTooltipShow\">\r\n            <div data-dojo-attach-point=\"tooltipContainer\" style=\"height:200px; overflow-y:auto;\">\r\n            \r\n            </div>\r\n            \r\n            <div style=\"width: 100%; text-align:right\">\r\n                <p>\r\n                    <button id=\"${id}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\">${okText}</button>\r\n                <p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
'Sage/QuickForms/Design/UrlControlDesigner':function(){
define("Sage/QuickForms/Design/UrlControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    './TextBoxControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/TextBoxBasicPropertyEditor',
    './Editors/TextBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/UrlControlDesigner'
], function(
    declare,
    array,
    lang,
    TextBoxControlDesigner,
    LayoutPropertyEditor,
    TextBoxBasicPropertyEditor,
    TextBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.UrlControlDesigner', [TextBoxControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            TextBoxBasicPropertyEditor,
            TextBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %} design-url" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="design-url-icon"></div>',
            '</div>',
            '</div>'
        ]),

        helpTopicName: 'URL_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXUrl, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Url',

        constructor: function() {
            lang.mixin(this, localization);
        }
    });
});
},
'Sage/UI/MenuBar':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/MenuBar", [
       'dijit/MenuBar',
       'Sage/UI/MenuItem',
       'Sage/UI/PopupMenuBarItem',
       'Sage/UI/PopupMenuItem',
       'dijit/Menu',
       'Sage/UI/MenuBarItem',
       'dijit/MenuSeparator',
       'dojo/_base/declare'
],
function (menubar, menuItem, popupMenuBarItem, popupMenuItem, dijitMenu, menuBarItem, menuSeparator, declare) {
    var widget = declare('Sage.UI.MenuBar', [menubar], {
        postMixInProperties: function () {
            // create a single store from all data sorces needed
            this.store = Sage.UI.DataStore.MenuBar || {};
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            var len = this.store.items ? this.store.items.length : 0;
            for (var i = 0; i < len; i++) {
                var menuConfig = this.store.items[i];
                var mid = (menuConfig.id !== '') ? menuConfig.id : this.id + '_' + i;
                var config = {
                    label: menuConfig.text || '...',
                    icon: menuConfig.img || this._blankGif,
                    id: mid,
                    title: menuConfig.tooltip || menuConfig.text || '',
                    ref: menuConfig.href || menuConfig.navurl || '',
                    imageClass: menuConfig.imageClass || ''
                };
                if (menuConfig.items && menuConfig.items.length > 0) {
                    var menu = new dijitMenu({});
                    this._addItemsToMenu(menuConfig.items, menu, mid);
                    config['popup'] = menu;
                    this.addChild(new popupMenuBarItem(config));
                } else {
                    //some don't have children, they are just buttons...
                    config['onClick'] = dojo.hitch(config, function () {
                        if (this.ref !== '') {
                            window.location.href = this.ref;
                        }
                    });
                    this.addChild(new menuBarItem(config));
                }
            }
        },
        _addItemsToMenu: function (items, menu, idContainer) {
            idContainer = idContainer || '';
            var len = items.length;
            for (var i = 0; i < len; i++) {
                var item = items[i];
                if (item.isspacer || item.text === '-') {
                    menu.addChild(new menuSeparator({}));
                } else {

                    var config = {
                        label: item.text || '...',
                        icon: item.img || this._blankGif,
                        title: item.tooltip || item.text || '',
                        ref: item.href || '',
                        imageClass: item.imageClass || ''
                    };
                    if (item.id !== '') {
                        config['id'] = idContainer + '_' + item.id;
                    }
                    if (item.href !== '') {
                        config['onClick'] = function () {
                            if (this.ref !== '') {
                                try {
                                    window.location.href = this.ref;
                                } catch (e) { }
                            };
                        }
                    }
                    if (item.submenu.length > 0) {
                        //recursively add submenus as appropriate...
                        var popup = new dijitMenu({});
                        this._addItemsToMenu(item.submenu, popup, item.id || '');
                        config['popup'] = popup;
                        menu.addChild(new popupMenuItem(config));
                    } else {
                        menu.addChild(new menuItem(config));
                    }
                }
            }
        }
    });

    return widget;
});

},
'Sage/MainView/main':function(){
define("Sage/MainView/main", [
    "Sage/MainView/ActivityManager", 
    "Sage/MainView/SecurityManager",
    "Sage/MainView/ActivityMgr/ActivityCalendar",
    "Sage/MainView/BindingsManager",
    "Sage/MainView/Contact/ContactSearchForDuplicates",
    "Sage/MainView/IntegrationContract/MatchingOptionsConfig",
    "Sage/MainView/IntegrationContract/AdvancedSearchOptions",
    "Sage/MainView/IntegrationContract/InvoiceRTDV",
    "Sage/MainView/IntegrationContract/SalesOrderRTDV",
    "Sage/MainView/IntegrationContract/CustomerPaymentsRTDV"
], function() {
	// module:
        // Sage/MainView/main
	// summary:
        // The Sage/MainView/main module provides loading of all Sage/MainView modules.
});
},
'Sage/UI/Controls/Select':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Select", [
       'dijit/form/Select',
       'dojo/_base/declare'
],
function (select, declare) {
    var widget = declare('Sage.UI.Controls.Select', [select], {
        _hClickBody: false,
        shouldPublishMarkDirty: true,
        autoPostBack: false,
        maxHeight: dojo.isIE ? 146 : 155,
        postCreate: function () {
            this.connect(this, 'onChange', this.onChanged);
            this.inherited(arguments);
        },
        destroy: function () {
            this.inherited(arguments);
        },
        onClickBody: function (e) {
            if (dojo.isIE >= 9 && this._opened) {
                this.closeDropDown();
            }
        },
        onChanged: function (newValue) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish('Sage/events/markDirty');
            }
            if (this.autoPostBack) {
                __doPostBack(this.id, '');
            }
        },
        closeDropDown: function (/*Boolean*/focus) {
            if (dojo.isIE >= 9 && this._hClickBody) {
                dojo.disconnect(this._hClickBody);
            }
            this.inherited(arguments);
        },
        openDropDown: function () {
            if (dojo.isIE >= 9) {
                // WORKAROUND: Please see http://bugs.dojotoolkit.org/ticket/14408. This issue is still [not] fixed.
                this._hClickBody = dojo.connect(document.body, 'onclick', this, this.onClickBody);
            }
            this.inherited(arguments);
        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/Editors/ComboBoxBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/ComboBoxBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/ComboBoxBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.ComboBoxBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/UI/Controls/PickList':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/PickList", [
        'dojo/topic',
        'dojo/_base/declare',
        'dijit/_Widget',
        'dijit/Tooltip',
        'Sage/Data/BaseSDataStore',
        'Sage/Utility',
        'dijit/Tooltip',
        'dojo/i18n!./nls/PickList',
        'dojo/_base/lang',
        'Sage/Utility/_LocalStorageMixin',
        'Sage/Data/SDataServiceRegistry'
],
function (topic, declare, _Widget, toolTip, baseSDataStore, util, tooltip, nls, lang, _localStorageMixin, SDataServiceRegistry) {
    //dojo.requireLocalization('Sage.UI.Controls', 'PickList');

    /**
    * @class Base class for PickList widgets.
    */
    var widget = declare('Sage.UI.Controls.PickList', [_Widget, _localStorageMixin], {

        /**
         * @property {object} dataStore The data store which implements fetch()
         */
        dataStore: null,

        /**
         * @property {object} storeOptions The data store options object. See default values in constructor.
         */
        storeOptions: null,

        /**
         * @property {string} pickListName The name of the picklist. This is passed into the storeOptions.query if it was not overridden.
         */
        pickListName: '',

        /**
         * @property {boolean} canEditText Determines if a user can edit text in the textbox.
         */
        canEditText: false,

        /**
         * @property {boolean} itemMustExist Restrict data entered to data available in the picklist.
         */
        itemMustExist: true,

        /**
         * @property {number} maxLength Max length for item entered.
         */
        maxLength: -1,

        /**
         * @property {string} storeMode Determines what dropdown value/text gets posted back to the server (ASP.NET). 
         */
        storeMode: 'text', // text, id, code

        /**
         * @property {boolean} sort Tell the data store to sort by the picklist items/text property
         */
        sort: true,

        /**
         * @property {string} displayMode Sets the display mode as control or a hyperlink.
         */
        displayMode: 'AsControl', // AsControl, AsHyperlink (do we really need this?)

        /**
         * @property {string} clientID ASP.NET control's ClientID property.
         */
        clientId: '', 

        /**
         * @property {boolean} required Set to true if a value is required.
         */
        required: false,

        /**
         * @property {string} placeInNodeId Place widget in this dom node.
         */
        placeInNodeId: '',

        /**
         * @property {boolean} autoPostBack Should the control auto postback when value changes (onBlur).
         */
        autoPostBack: false,
        
        /**
         * @property {string} Tooltip text that displays over control.
         */
        controlTooltip: '',
        
        /**
         * @property {string} Tooltip text that displays over control button.
         */
        buttonTooltip: '',
        /**
        * @property {boolean} - Indicates whether the implementation should publish that it has dirty data to the ClientBindingManagerService.
        * default = true
        */
        shouldPublishMarkDirty: true,
         /**
         * @property Render the control as a hyperlink
         */
        renderAsHyperlink: false,

        // Private props for ASP.NET
        // TODO: _textId and _codeId are now passed in via config options (textId and codeId)
        _textId: '', // Textbox user sees (or used to see)
        _codeId: '', // Value for textbox, has either text or code
        _defaultValueId: '', // Default value
        _defaultCodeId: '', // Default code
        _storageNameSpace: 'PickListData',
        // localized strings
        okText: '',
        missingPickListText: '',
        // end localized strings

        // TODO: We need a hook for onChange

        /**
         * Takes the following options object: 
         * {
         *  pickListName: 'PickListName', // Required
         *  storeOptions: {}, // Optional
         *  dataStore: {}, // Optional
         *  canEditText: false,
         *  itemMustExist: true,
         *  maxLength: -1,
         *  storeMode: 'text', // text, id, code
         *  sort: true,
         *  displayMode: 'AsControl',
         *  clientId: 'ASP.NET Control ClientID Here',
         *  required: false
         *  placeInNodeId: '',
         *  autoPostBack: false
         * }
         *
         * @constructor
         */
        constructor: function(options) {
            this.storeOptions = options.storeOptions;
            this.dataStore = options.dataStore;

            this.clientId = options.clientId || '';
            var cid = this.clientId;
            this._textId = cid + '_Text';
            this._codeId = cid + '_Code';
            this._defaultValueId = cid + '_DefaultValue';
            this._defaultCodeId = cid + '_DefaultCode';

            if (nls) {
                this.okText = nls.okText;
                this.missingPickListText = nls.missingPickListText;
            }
        },
        postCreate: function() {
            var node = dojo.byId(this.placeInNodeId);
            if(node) {
                this._setDefaultFields();
                dojo.place(this.domNode, node, 'first');
            }

            this.inherited(arguments);
        },
        uninitialize: function() {
            this.inherited(arguments);
        },
        /**
         * Sets store up using given picklist name.
         * @function
         */
        _setStore: function(pickListName) {
            this.storeOptions = {
                    include: ['items'],
                    select: [
                        'Id',
                        'name',
                        'allowMultiples',
                        'valuesMustExist',
                        'required',
                        'alphaSorted',
                        'noneEditable',
                        //Include modifyDate to ensure that local storage data stays current.
                        'modifyDate',
                        'items/text',
                        'items/code',
                        'items/number'
                    ],
                resourceKind: 'picklists',            
                //Params: contract, keepUnique, useJson, cacheResult
                service: SDataServiceRegistry.getSDataService('system', false, true, false),
                directQuery: { name: pickListName} // TODO: this will get translated into a LIKE - Fix it
            };

            this.dataStore = new baseSDataStore(this.storeOptions);
        },
        
        /**
         * Sets hidden fields to correct values if required is true. Logic pulled from old picklist control.
         * @function
         */
        _setDefaultFields: function() {
            if(this.required) {
                var text = dojo.byId(this._textId);

                if(text && text.value === '') {
                    var code = dojo.byId(this._codeId);
                    var defaultValue = dojo.byId(this._defaultValueId);
                    var defaultCode = dojo.byId(this._defaultCodeId);

                    text.value = defaultValue.value;
                    if(this.storeMode === 'text') {
                        code.value = defaultValue.value;
                    } else {
                        // storeMode will be id or code here
                        code.value = defaultCode.value;
                    }
                }
            }
        },
        
        /**
         * Creates tooltips for button (buttonNode) and control (focusNode)
         * @function
         */
        _setupTooltips: function(buttonNode, focusNode) {
            if (this.controlTooltip && this.controlTooltip !== '' && focusNode) {
                var t = new tooltip({
                    connectId: [focusNode],
                    label: this.controlTooltip,
                    position: ['below']
                });
            }

            if (this.buttonTooltip && this.buttonTooltip !== '' && buttonNode) {
                var t2 = new tooltip({
                    connectId: [buttonNode],
                    label: this.buttonTooltip,
                    position: ['below']
                });
            }
        },

        /**
        * @returns {object} SData picklist object with child items resource included. dojo.Deferred required as an argument.
        * Example: {
        *  name: 'PickList Name',
        *  allowMultiples: false,
        *  valueMustExist: true,
        *  required: true,
        *  alphaSorted: true,
        *  noneEditable: true,
        *  items: [
        *      { text: 'Arizona', code: 'AZ', number: 0 },
        *      { text: 'Michigan', code: 'MI', number: 1 }
        *  ]
        * }
        */
        getPickListData: function (deferred) {
            var list = this.getFromLocalStorage(this.pickListName, this._storageNameSpace);
            if (list) {
                deferred.callback(list);
                return;
            }

            this.dataStore.fetch({
                onComplete: lang.hitch(this, function(data) {
                    var pickListData;
                    if(data && data.length > 0) {
                        pickListData = data[0];
                        var temp = pickListData.items.$resources;

                        if(this.sort) {
                            pickListData.items.$resources = temp.sort(function(a, b) {
                                if(a.text < b.text) {
                                    return -1;
                                }

                                if(a.text > b.text) {
                                    return 1;
                                }

                                return 0;
                            });
                        }
                        
                    } else {
                        pickListData = this.missingPickListText;
                    }

                    this.saveToLocalStorage(this.pickListName, pickListData, this._storageNameSpace);
                    deferred.callback(pickListData);
                }),
                onError: function(e) {
                    deferred.errback(e);
                },
                scope: this
            });
        },

        /**
         * Sets hidden ASP.NET fields.
         * @function
         */
        setASPNETInputs: function(textValue, codeValue) {
            if(this._textId && this._codeId) {
                var text = dojo.byId(this._textId);
                var code = dojo.byId(this._codeId);

                if(text && code) {
                    text.value = textValue;

                    if(this.storeMode == 'text') {
                        code.value = textValue;
                    } else {
                        code.value = codeValue;
                    }

                    this.invokeChangeEvent();
                }
            }
        },

        /**
        * If configured to do so, publishes the markDirty event, showing that there is un-saved data. Will auto postback here if set as well.
         * @function
         */
        invokeChangeEvent: function() {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            if(this.autoPostBack) {
                __doPostBack(this.clientId, '');
            }
        },

        // Properties 

        _getCanEditTextAttr: function() {
            return this.canEditText;
        },
        _setCanEditTextAttr: function(value) {
            this.canEditText = value;
        },

        _getItemMustExistAttr: function() {
            return this.itemMustExist;
        },
        _setItemMustExistAttr: function(value) {
            this.itemMustExist = value;
        },

        _getMaxLengthAttr: function() {
            return this.maxLength;
        },
        _setMaxLengthAttr: function(value) {
            this.maxLength = value;
        },

        _getStoreModeAttr: function() {
            return this.storeMode;
        },
        _setStoreModeAttr: function(value) {
            this.storeMode = value;
        },

        _getPickListNameAttr: function() {
            return this.pickListName;
        },
        _setPickListNameAttr: function(value) {
            this.pickListName = value;
            this._setStore(value);
        },
        statics: {
        }
    });

    return widget;
});

},
'Sage/UI/nls/UserType':function(){
define("Sage/UI/nls/UserType", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            administratorText: 'Administrator',
            templateText: 'Template',
            remoteText: 'Remote',
            webOnlyText: 'Web Only',
            retiredText: 'Retired',
            concurrentText: 'Concurrent',
            webViewerText: 'Web Viewer',
            networkText: 'Network',
            addOnUserText: 'Add-on User'

        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/CopyToClipboard':function(){
require({cache:{
'url:Sage/UI/Controls/templates/CopyToClipboard.html':"<div>\r\n    <div data-dojo-type=\"dijit.Dialog\" dojoAttachPoint=\"dialogNode\">\r\n        \r\n        <span>${helpText}</span>\r\n        <div style=\"width: 550px; height: 400px;\">\r\n            <div data-dojo-type=\"dijit.layout.TabContainer\" dojoAttachPoint=\"tabNode\" style=\"width: 100%; height: 100%;\">\r\n                <div data-dojo-type=\"dijit.layout.ContentPane\" title=\"${textTab}\">\r\n                    <div dojoAttachPoint=\"contentNode\"></div>\r\n                </div>\r\n            \r\n                <div data-dojo-type=\"dijit.layout.ContentPane\" title=\"${sourceTab}\">\r\n                    <textarea dojoAttachPoint=\"textNode\" data-dojo-type=\"dijit.form.SimpleTextarea\" style=\"width: 100%; height: 95%;\"></textarea>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            \r\n        <div style=\"float:right;padding-bottom:8px;\">\r\n            <button data-dojo-type=\"dijit.form.Button\" type=\"submit\" dojoAttachEvent=\"onClick:_closeClicked\">\r\n                ${closeText}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/CopyToClipboard", [
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/_Widget',
       'dijit/Dialog',
       'dijit/layout/TabContainer',
       'dijit/layout/ContentPane',
       'dijit/form/SimpleTextarea',
       'dijit/form/Button',
       'dojo/_base/lang',
       'Sage/Format',
       'Sage/Utility',
       'Sage/Utility/Email',
       'Sage/Data/SDataServiceRegistry',
       'dojo/_base/sniff',
       'dojo/text!./templates/CopyToClipboard.html',
       'dojo/i18n!./nls/CopyToClipboard',
       'dojo/_base/declare'
],
function (
        _TemplatedMixin,
        _WidgetsInTemplateMixin,
        _Widget,
        dialog,
        tabContainer,
        contentPane,
        simpleTextArea,
        button,
        lang,
        format,
        util,
        email,
        sDataServiceRegistry,
        has,
        template,
        nlsStrings,
        declare) {
    var widget = declare('Sage.UI.Controls.CopyToClipboard', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        // Display properties
        templateString: template,
        widgetsInTemplate: true,

        textAlign: 'left',
        calendarName: 'calendar1',
        timeTextBoxName: 'timeTextBox1',

        textNode: null,
        contentNode: null,

        // localized strings
        closeText: '',
        dialogTitle: '',
        helpText: '',
        // end localize

        // mashup props
        mashupName: '',
        queryName: '',
        service: null,
        template: '',
        entity: null,
        widgetTemplate: null,
        // end mashup props
        
        id: 'copyToClipboard',
        
        constructor: function (options) {
            this.service = sDataServiceRegistry.getSDataService('mashups');
            this.inherited(arguments);
        },
        postMixInProperties: function () {
            lang.mixin(this, nlsStrings);
            this.inherited(arguments);
        },

        show: function () {
            // Don't show the dialog for IE9, that has access to clipBoardData
            if (!window.clipboardData) {
                this.dialogNode.set('title', this.dialogTitle);
                this.dialogNode.show();
            }

            this._readMashupFeed();
        },
        // Callback is optional for email functionality
        _readMashupFeed: function (callback) {
            var request = new Sage.SData.Client.SDataNamedQueryRequest(this.service),
                mashupName = this.mashupName || 'SummaryViewQueries',
                clientService = Sage.Services.getService("ClientEntityContext"),
                clientContext = clientService.getContext(),
                entityId = clientContext.EntityId,
                self = this;

            request.setApplicationName('$app');
            request.setResourceKind('mashups');
            request.uri.setCollectionPredicate("'" + this.mashupName + "'");
            request.setQueryName('execute');
            request.setQueryArg('_resultName', this.queryName);
            request.setQueryArg('_ids', "'" + entityId + "'");

            request.read({
                success: dojo.hitch(self, function (data) {
                    this._mixinTemplateLocale();
                    this.entity = data.$resources[0];
                    this._buildTemplateWidget();
                    this._setContentToCopy();

                    if (callback && (typeof callback === 'function')) {
                        callback.call(this, data);
                    }
                }),
                failure: dojo.hitch(self, function (data) {
                    this.dialogNode.hide();
                })
            });
        },
        _mixinTemplateLocale: function () {
            var moduleNameParts = ['Sage'],
                templateParts = this.template.split('/'),
                i;

            for (i = 0; i < templateParts.length - 1; i++) {
                moduleNameParts.push(templateParts[i]);
            }
            var path = 'dojo/i18n!' + moduleNameParts.join('/') + '/nls/' + templateParts[templateParts.length - 1].replace('.html', '');
            require([path],
                lang.hitch(this, function (nls) {
                    lang.mixin(this, nls);
                })
            );
        },
        _buildTemplateWidget: function () {
            var contentString = dojo['cache']('Sage', this.template),
                temp = eval(contentString);
            this.widgetTemplate = new Simplate(temp);
        },
        _setContentToCopy: function () {
            var val = this.widgetTemplate.apply(this),
                clipString;
            this.contentNode.innerHTML = val;
            this.textNode.set('value', val);

            if (window.clipboardData) {
                // IE allows us to set the clipboard data.
                try {
                    clipString = this.contentNode.innerText;

                    window.clipboardData.setData("text", clipString);
                    this.dialogNode.hide();
                } catch (e) {
                    // Ignore error and just allow user to copy manually like other browsers
                }
            }
        },
        _closeClicked: function (options) {
            this.onCloseClicked();
        },
        onCloseClicked: function () {
        },
        destroy: function () {
            var dialog = dijit.byId(this.dialogNode.id);
            if (dialog) {
                setTimeout(function () { dialog.destroyRecursive(false); }, 1);
                this.inherited(arguments);
            }
        },
        // ripped from old control
        OnEmailContentReady: function (baseControlId) {
            this._readMashupFeed(function () {
                var emailToElem = dojo.byId(baseControlId + '_to'),
                    emailTo = (emailToElem) ? emailToElem.value : '',

                    emailCCElem = dojo.byId(baseControlId + '_cc'),
                    emailCC = (emailCCElem) ? emailCCElem.value : '',

                    emailBCCElem = dojo.byId(baseControlId + '_bcc'),
                    emailBCC = (emailBCCElem) ? emailBCCElem.value : '',

                    emailSubjectElem = dojo.byId(baseControlId + '_subject'),
                    emailSubject = (emailSubjectElem) ? emailSubjectElem.value : '',

                    emailBody = util.getPlainText(this.contentNode),
                    recip = {};
                if (emailTo !== '') {
                    recip.to = emailTo;
                }

                if (emailCC !== '') {
                    recip.cc = emailCC;
                }

                if (emailBCC !== '') {
                    recip.bcc = emailBCC;
                }

                email.writeEmail(recip, emailSubject, emailBody, false);
            });

        }
    });

    return widget;
});

},
'Sage/QuickForms/Design/nls/FormDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/FormDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Form"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/UniqueToListValidationTextBox':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/UniqueToListValidationTextBox", [
    'dijit/form/ValidationTextBox',
    'dojo/_base/declare'
], function (ValidationTextBox, declare) {
    var validationTextBox = declare('Sage.UI.UniqueToListValidationTextBox', ValidationTextBox, {
        notUniqueText: 'This value already exists',
        uniqueList: "",
        _uniqueHash: {},
        isValid: function (isFocused) {
            var passedBase = this.inherited(arguments);
            var value = this.get('value');
            return (!(value in this._uniqueHash) && passedBase);
        },
        _setUniqueListAttr: function (value) {
            this.uniqueList = dojo.isString(value) ? value.split(",") : (dojo.isArray(value) ? value : [value]);
            this._uniqueHash = {};
            for (var i = 0; i < this.uniqueList.length; i++) {
                this._uniqueHash[this.uniqueList[i]] = 1;
            }
        }
    });
    return validationTextBox;
});

},
'Sage/MainView/ActivityMgr/nls/ActivityCalendar':function(){
﻿define("Sage/MainView/ActivityMgr/nls/ActivityCalendar", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            completedText : '(Completed)'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/nls/_DialogHelpIconMixin':function(){
define("Sage/UI/Controls/nls/_DialogHelpIconMixin", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            helpTooltip: 'Help'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/ControlDesignerRegistry':function(){
define("Sage/QuickForms/Design/ControlDesignerRegistry", [
    'dojo/_base/lang',
    './GenericControlDesigner',
    './HiddenControlDesigner',
    './TextBoxControlDesigner',
    './UrlControlDesigner',
    './PhoneControlDesigner',
    './EmailControlDesigner',
    './CheckBoxControlDesigner',
    './PickListControlDesigner',
    './ComboBoxControlDesigner',
    './UserControlDesigner',
    './OwnerControlDesigner',
    './DateTimePickerControlDesigner',
    './DataGridControlDesigner',
    './NumericControlDesigner',
    './DataSourceDesigner',
    './CurrencyControlDesigner',
    './EditableGridControlDesigner'
], function(
    lang,
    GenericControlDesigner,
    HiddenControlDesigner,
    TextBoxControlDesigner,
    UrlControlDesigner,
    PhoneControlDesigner,
    EmailControlDesigner,
    CheckBoxControlDesigner,
    PickListControlDesigner,
    ComboBoxControlDesigner,
    UserControlDesigner,
    OwnerControlDesigner,
    DateTimePickerControlDesigner,
    DataGridControlDesigner,
    NumericControlDesigner,
    DataSourceDesigner,
    CurrencyControlDesigner,
    EditableGridControlDesigner
) {
    var fromType = {
        'Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms': TextBoxControlDesigner,
        'Sage.Platform.QuickForms.QFControls.QFHidden, Sage.Platform.QuickForms.QFControls': HiddenControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXUrl, Sage.SalesLogix.QuickForms.QFControls': UrlControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXPhone, Sage.SalesLogix.QuickForms.QFControls': PhoneControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXEmail, Sage.SalesLogix.QuickForms.QFControls': EmailControlDesigner,
        'Sage.Platform.QuickForms.QFControls.QFCheckBox, Sage.Platform.QuickForms.QFControls': CheckBoxControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls': PickListControlDesigner,
        'Sage.Platform.QuickForms.QFControls.QFListBox, Sage.Platform.QuickForms.QFControls': ComboBoxControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXUser, Sage.SalesLogix.QuickForms.QFControls': UserControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXOwner, Sage.SalesLogix.QuickForms.QFControls': OwnerControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFDateTimePicker, Sage.SalesLogix.QuickForms.QFControls': DateTimePickerControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFDataGrid, Sage.SalesLogix.QuickForms.QFControls': DataGridControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls': NumericControlDesigner,
        'Sage.Platform.QuickForms.QFControls.QFDataSource, Sage.Platform.QuickForms.QFControls': DataSourceDesigner,
        'Sage.Platform.QuickForms.QFControls.QFHqlDataSource, Sage.Platform.QuickForms.QFControls': DataSourceDesigner,
        'Sage.Platform.QuickForms.QFControls.QFMashupDataSource, Sage.Platform.QuickForms.QFControls': DataSourceDesigner,
        'Sage.Platform.QuickForms.QFControls.QFSDataDataSource, Sage.Platform.QuickForms.QFControls': DataSourceDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls': CurrencyControlDesigner,
        'Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls': EditableGridControlDesigner
    };

    var fromDataType = {
        'ccc0f01d-7ba5-408e-8526-a3f942354b3a': TextBoxControlDesigner, /* text */
        'f4ca6023-9f5f-4e41-8571-50ba94e8f233': TextBoxControlDesigner, /* memo */
        '76c537a8-8b08-4b35-84cf-fa95c6c133b0': TextBoxControlDesigner, /* unicode text */
        'b2ed309e-ea89-4eef-8051-6244987953a4': TextBoxControlDesigner, /* unicode memo */
        '47f90249-e4c8-4564-9ae6-e1fa9904f8b8': NumericControlDesigner, /* integer */
        'f37c635c-9fbf-40d8-98d5-750a54a3cca1': NumericControlDesigner, /* number */
        'a6bf2690-3477-4a18-9849-56abf8693934': NumericControlDesigner, /* single */
        '2596d57d-89d6-4b72-9036-b18c64c5324c': NumericControlDesigner, /* decimal */
        '6b0b3d51-0728-4b67-9473-52836a81da53': NumericControlDesigner, /* short */
        '30053f5a-8d40-4db1-b185-1e4128eb26cc': TextBoxControlDesigner, /* standard id */
        '92432b4d-8206-4a96-ba7b-e4cbd374f148': CheckBoxControlDesigner, /* true/false */
        '95ca9d52-6f0b-4a96-bd40-43583f41faf8': CheckBoxControlDesigner, /* yes/no */
        '3edc7c52-e711-431d-b150-969d88ebabf4': CheckBoxControlDesigner, /* boolean */
        '1f08f2eb-87c8-443b-a7c2-a51f590923f5': DateTimePickerControlDesigner, /* date/time */
        '31e8638d-4232-4c61-8827-d94132a33887': EmailControlDesigner, /* email */
        '85f2bba5-1fb7-4ecf-941a-d98d4739c305': PhoneControlDesigner, /* phone */
        'b71918bf-fac1-4b62-9ed5-0b0294bc9900': PickListControlDesigner, /* pick list */
        '17541523-fc31-4269-ac97-df63290d0e31': OwnerControlDesigner, /* owner */
        'a3b52518-801b-44be-96bf-fdca3de84f7f': null, /* lookup */
        '517d5e69-9efa-4d0a-8e7a-1c7691f921ba': null, /* dependency lookup */
        '189a1a4e-396c-4146-95c0-93b5d9e7d160': null, /* char */
        '8edd8fce-2be5-4d3d-bedd-ea667e78a8af': null, /* enum */
        '3ca925e1-4b76-4621-a39c-a0d4cb7327d5': null, /* guid */
        '68e04249-f7e2-4b63-90be-55fbb1f4aa77': null, /* byte */
        '07370ef3-ad24-409f-86a8-ff2db5ee6d69': null, /* binary */
        '5685161e-5f0a-4a36-83fe-89e8e462e9e7': UrlControlDesigner /* url */
    };

    return lang.setObject('Sage.QuickForms.Design.ControlDesignerRegistry', {
        fromType: fromType,
        fromDataType: fromDataType,
        getDesignerFor: function(entry, fallback) {
            var name = entry && entry['$type'];
            return this.fromType[name] || ((fallback !== false) && GenericControlDesigner);
        },
        getDesignerForDataType: function(dataType, fallback) {
            return this.fromDataType[dataType] || ((fallback !== false) && TextBoxControlDesigner);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/nls/PickListAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/PickListAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            allowMultiplesText: "Allow Multiple Selections:",
            allowMultiplesTooltipText: "Allows user to select more than one item.",
            canEditTextText: "Can Edit Text:",
            canEditTextTooltipText: "Allows user to type value.",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            displayModeText: "Display Mode:",
            displayModeTooltipText: "Mode of display of control: text box, hyperlink, or plain text.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            maxLengthText: "Max Length:",
            maxLengthTooltipText: "Maximum number of characters user can enter.",
            mustExistInListText: "Item Must Exist:",
            mustExistInListTooltipText: "Requires typed value to be on list.",
            pickListNameText: "Pick List Name:",
            pickListNameTooltipText: "Name of the list of values the user can select from when entering data.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            storageModeText: "Storage Mode:",
            storageModeTooltipText: "How the value is stored: Text, Id, or Code.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            },
            displayModeTypeText: {
                AsControl: "As Control",
                AsText: "As Text",
                AsHyperlink: "As Hyperlink"
            },
            storageModeTypeText: {
                Text: "Text",
                Id: "ID",
                Code: "Code"
            },
            pickListRequestErrorText: "Unable to retrieve picklists from server."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/nls/ActivityList':function(){
﻿define("Sage/UI/nls/ActivityList", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            addMeetingText: 'Schedule Meeting',
            addPhoneCallText: 'Schedule Phone Call',
            addToDoText: 'Schedule To-Do',
            helpText: 'Help',
            completeText: 'Complete',
            typeText: 'Type',
            startDateText: 'Date/Time',
            dateRangeText: 'Date Range',
            durationText: 'Duration',
            leaderText: 'Leader',
            contactText: 'Contact',
            opportunityText: 'Opportunity',
            descriptionText: 'Regarding',
            categoryText: 'Category',
            firstNameText: 'First Name',
            lastNameText: 'Last Name'
            
       }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Dashboard/main':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/main", [
    "Sage/UI/Dashboard/BaseWidget",
    "Sage/UI/Dashboard/ChartingWidget",
    "Sage/UI/Dashboard/Dashboard",
    "Sage/UI/Dashboard/DashboardPage",
    "Sage/UI/Dashboard/DashboardTabController",
    "Sage/UI/Dashboard/DashboardWidget",
    "Sage/UI/Dashboard/DashboardWidgetCell",
    "Sage/UI/Dashboard/WidgetDefinition"
], function() {
	// module:
        // Sage/UI/main
	// summary:
        // The Sage/UI/main module provides loading of all Sage/UI modules.
});

},
'Sage/UI/Filters/EditFilterItems':function(){
require({cache:{
'url:Sage/UI/Filters/templates/EditFilterItems.html':"<div>\r\n    <div class=\"filter-items-dialog\" data-dojo-type=\"dijit.Dialog\" data-dojo-props=\"title:'${dialogTitle}'\" data-dojo-attach-point=\"dialogNode\">\r\n        <div class=\"filter-items-search\">\r\n            <label>${findItemText}</label> <input data-dojo-attach-point=\"textFind\" data-dojo-type=\"dijit.form.TextBox\" />\r\n            <span data-dojo-attach-point=\"buttonFind\" title=\"${findText}\" data-dojo-type=\"Sage.UI.ImageButton\" data-dojo-props=\"imageClass: 'icon_Find_16x16'\" data-dojo-attach-event=\"onClick:_onFindClick\"></span>&nbsp;\r\n\t\t\t<span data-dojo-attach-point=\"buttonClear\" title=\"${clearText}\" data-dojo-type=\"dijit.form.Button\" data-dojo-attach-event=\"onClick:_onClearClick\">${clearText}</span>\r\n        </div>\r\n        <div class=\"filter-clear-all\">\r\n            <input data-dojo-attach-point=\"checkAll\" data-dojo-type=\"dijit.form.CheckBox\" />\r\n            <label>${selectAllText}</label>\r\n        </div>\r\n        <div class=\"filter-items-dialog-content\" data-dojo-attach-point=\"contentNode\">\r\n        </div>\r\n        <div class=\"button-bar alignright\">\r\n            <button data-dojo-attach-point=\"buttonOK\" data-dojo-attach-event=\"onClick:_onOKClick\" data-dojo-type=\"dijit.form.Button\">${okText}</button>\r\n            <button data-dojo-attach-point=\"buttonCancel\" data-dojo-attach-event=\"onClick:_onCancelClick\" data-dojo-type=\"dijit.form.Button\">${cancelText}</button>\r\n        </div>\r\n    </div>\r\n</div>"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/EditFilterItems", [
        'dijit/_Widget',
        'dijit/_TemplatedMixin',
        'dijit/_WidgetsInTemplateMixin',
        'dijit/Dialog',
        'dijit/form/Button',
        'Sage/UI/ImageButton',
        'dijit/form/CheckBox',
        'dijit/form/TextBox',
        'dojo/_base/declare',
        'dojo/_base/array',
        'dojo/_base/lang',
        'dojo/dom-construct',
        'dijit/registry',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'Sage/Utility/Filters',
        'dojo/json',
        'dojo/parser',
        'dojo/text!./templates/EditFilterItems.html',
        'dojo/i18n!./nls/EditFilterItems'
], function (
        _Widget,
        _TemplatedMixin,
        _WidgetsInTemplateMixin,
        Dialog,
        Button,
        ImageButton,
        CheckBox,
        TextBox,
        declare,
        array,
        lang,
        domConstruct,
        registry,
        DialogHelpIconMixin,
        FiltersUtility,
        json,
        parser,
        template,
        resource
) {
    return declare('Sage.UI.Filters.EditFilterItems', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        templateString: template,
        widgetsInTemplate: true,

        id: 'editFilterItems',
        store: null,
        activeFilters: '', // preserve query for original store
        filter: null,
        checkBoxes: null,
        allItems: null, // Keep this list even after searches, etc.
        filterPanel: null,
        parent: null, // checkbox filter
        formatter: null,
        baseFilter:'',
        // i18n
        selectAllText: 'Select All',
        findItemText: 'Find Item:',
        findText: 'Find',
        clearText: 'Clear',
        dialogTitle: 'Edit Filter Items',
        okText: 'OK',
        cancelText: 'Cancel',

        count: 1000,
        loading: false,
        handles: null,
        mainHandles: null,
        safeCheck: true,

        checkBoxTemplate: new Simplate([
            '<input id="{%: $.id %}" ',
            'name="{%: $.name %}" ',
            'data-dojo-type="dijit.form.CheckBox" ',
            'data-dojo-props="label: \'{%: $.name %}\'" ',
            'class="editFilterCheckBox" />',
            '<label for="{%: $.id %}">{%: $.itemName %}</label><br />'
        ]),

        constructor: function (options) {
            this.inherited(arguments);
            this.checkBoxes = [];
            this.allItems = [];
            this.handles = [];
            this.mainHandles = []; // main controls that don't refresh

            if (resource) {
                this.selectAllText = resource.selectAllText;
                this.clearText = resource.clearText;
                this.findItemText = resource.findItemText;
                this.findText = resource.findText;
                this.dialogTitle = resource.dialogTitle;
                this.okText = resource.okText;
                this.cancelText = resource.cancelText;
            }
        },
        postCreate: function () {
            this.inherited(arguments);
            this.mainHandles.push(this.textFind.on('keyDown', lang.hitch(this, this._onFindMouseDown)));
            this.mainHandles.push(this.checkAll.on('click', lang.hitch(this, this._onCheckAllClick)));
        },
        _onCheckAllClick: function () {
            if (this.safeCheck) {
                if (this.checkAll.checked) {
                    this._onSelectAllClick();
                } else {
                    this._onClearAllClick();
                }
            }
        },
        showDialog: function () {
            this.requestData();
            lang.mixin(this.dialogNode, new DialogHelpIconMixin());
            this.dialogNode.createHelpIconByTopic('editFilterItems');
            this.dialogNode.show();
        },
        hideDialog: function () {
            this.dialogNode.hide();
        },
        _onClearAllClick: function () {
            array.forEach(this.checkBoxes, function (checkBox) {
                var label = checkBox.get('label'),
                    index = array.indexOf(this.allItems, checkBox.get('label'));

                if (index === -1) {
                    this.allItems.push(label);
                }

                checkBox.set('checked', false);
            }, this);
        },
        _onSelectAllClick: function () {
            array.forEach(this.checkBoxes, function (checkBox) {
                var label = checkBox.get('label'),
                    index = array.indexOf(this.allItems, checkBox.get('label'));
                if (index > -1) {
                    this.allItems.splice(index, 1);
                }

                checkBox.set('checked', true);

            }, this);
        },
        _onClearClick: function () {
            this.textFind.set('value', '');
            this._onFindClick();
        },
        _onCancelClick: function () {
            this.textFind.set('value', '');
            this._onFindClick();

            this.dialogNode.hide();
            this.allItems = [];
        },
        _onOKClick: function () {
            this.textFind.set('value', '');
            this._onFindClick();

            var data = this.filterPanel._configuration._hiddenFilters || {},
                key = this.filterPanel._configuration._hiddenFiltersKey,
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                prop = context.CurrentEntity + '_' + this.filter.filterName,
                items = [];

            // Create it if necessary
            if (!data[prop]) {
                data[prop] = {
                    expanded: false,
                    hidden: false
                };
            }

            data[prop].items = this.allItems;
            FiltersUtility.setHiddenFilters(key, json.stringify(data));

            if (this.parent) {
                this.parent.refresh();
            }

            this.dialogNode.hide();
            this.allItems = [];
        },
        uninitialize: function () {
            if (!this.contentNode) {
                return;
            }
            
            array.forEach(this.mainHandles, function (handle) {
                handle.remove();
            });

            this._destroyContent();
            this.checkBoxes = null;
            this.allItems = null;
            this.checkAll.destroy(false);
            this.buttonCancel.destroy(false);
            this.buttonOK.destroy(false);
            this.buttonFind.destroy(false);
            this.textFind.destroy(false);
            this.dialogNode.destroy(false);
            this.inherited(arguments);
        },
        requestData: function () {
            if (!this.loading) {
                this._destroyContent();
                this.checkBoxes = [];
                this.activeFilters = this.store.request.getQueryArg('_activeFilter');
                this.store.request.setQueryArg('_activeFilter', this.baseFilter);
            }

            this.loading = true;

            this.store.fetch({
                onError: lang.hitch(this, this._onFetchError),
                onComplete: lang.hitch(this, this._onFetchComplete),
                count: this.count
            });
        },
        _onFindMouseDown: function (event) {
            if (event.keyCode === 13) {
                this._onFindClick();
            }
        },
        _onFindClick: function () {
            if (!this.loading) {
                var searchText = this.textFind.get('value');

                if (searchText) {
                    this.store.where = 'displayName like "%' + this.textFind.get('value') + '%"';
                } else {
                    this.store.where = '';
                }

                this.requestData();
            }
        },
        _destroyContent: function () {
            if (!this.contentNode) {
                return;
            }

            array.forEach(registry.findWidgets(this.contentNode), function (widget) {
                widget.destroy(false);
            });

            array.forEach(this.handles, function (handle) {
                handle.remove();
            });

            this.handles = [];
            this.checkBoxes = [];
            this.contentNode.innerHTML = '';
        },
        _onFetchError: function () {
        },
        _onCheckClick: function (e) {
            // "this" is object with self set to editfilteritems and 
            // checkBox set to the clicked checkbox
            var self = this.self,
                checkBox = this.checkBox,
                name = checkBox && checkBox.get('label'),
                index;

            if (checkBox.checked) {
                // Checked means we want a "visible" item.
                // allItems keeps a list of NOT visible, remove.
                index = array.indexOf(self.allItems, name);
                if (index > -1) {
                    self.allItems.splice(index, 1);
                }
            } else {
                self._safeCheckAll(false);
                self.allItems.push(name);
            }
        },
        _safeCheckAll: function (checked) {
            // Don't perform a iteration over all the items,
            // if safeCheck is false
            this.safeCheck = false;
            this.checkAll.set('checked', checked);
            this.safeCheck = true;
        },
        _onFetchComplete: function (items) {
            var entry,
                itemName,
                id,
                checkBox,
                templateItems = [],
                i,
                len = items.length,
                name,
                labelValue;


            for (i = 0; i < len; i++) {
                entry = items[i];
                labelValue = entry.$descriptor;
                if (this.formatter) {
                    labelValue = this.formatter(entry.$descriptor);
                }
                itemName = labelValue + ' (' + entry.value + ')';
                id = [this.filter.filterName, i].join('_');
                name = entry.name && entry.name.trim();

                if (name) {
                    name = name.replace("'", "\\'");
                    templateItems.push(this.checkBoxTemplate.apply({
                        id: id,
                        name: name,
                        itemName: itemName
                    }));
                }
            }

            checkBox = domConstruct.toDom(templateItems.join(''));
            domConstruct.place(checkBox, this.contentNode, 'last');

            this._finishedLoading();
        },
        _finishedLoading: function () {
            // We share the store with the checkbox filter.
            // Set the active filter query arg back.
            if (this.activeFilters) {
                this.store.request.setQueryArg('_activeFilter', this.activeFilters);
            }

            this._parseCheckBoxes();
            this.setupCheckState();

            this.loading = false;
        },
        _parseCheckBoxes: function () {
            var widgets;
            parser.parse(this.contentNode);

            widgets = registry.findWidgets(this.contentNode);
            array.forEach(widgets, function (checkBox) {
                checkBox.on('click', lang.hitch({ checkBox: checkBox, self: this }, this._onCheckClick));
                this.checkBoxes.push(checkBox);
            }, this);
        },
        setupCheckState: function () {
            var data = this.filterPanel._configuration._hiddenFilters || {},
                service = Sage.Services.getService("ClientGroupContext"),
                context = service && service.getContext(),
                prop = context.CurrentEntity + '_' + this.filter.filterName,
                firstLoad = this.allItems.length === 0;

            if (data[prop]) {
                array.forEach(this.checkBoxes, function (checkBox) {
                    var dataIndex,
                        cachedIndex,
                        label = checkBox.get('label');

                    dataIndex = array.indexOf(data[prop].items, label);
                    cachedIndex = array.indexOf(this.allItems, label);

                    if (dataIndex > -1) {
                        checkBox.set('checked', false);
                        if (cachedIndex === -1 && firstLoad) {
                            this.allItems.push(label);
                        }
                    } else {
                        checkBox.set('checked', true);
                    }

                    cachedIndex = array.indexOf(this.allItems, label);

                    // These items may not be in the filter panels _hiddenFilters yet..
                    //index = array.indexOf(this.allItems, label);
                    if (cachedIndex > -1) {
                        checkBox.set('checked', false);
                    } else {
                        checkBox.set('checked', true);
                    }
                }, this);

                this._safeCheckAll(this.allItems.length === 0);
            }
        }
    });
});
},
'Sage/MainView/ActivityMgr/AllOpenListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/AllOpenListPanelConfig", [
    'Sage/MainView/ActivityMgr/BaseListPanelConfig',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/SDataSummaryFormatterScope',
    'Sage/Data/BaseSDataStore',
    'Sage/UI/Columns/DateTime',
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/declare',
    'dojo/i18n!./nls/ActivityListPanelConfig'
],

function (
    BaseListPanelConfig,
    SageUtility,
    UtilityActivity,
    SDataSummaryFormatterScope,
    BaseSDataStore,
    ColumnsDateTime,
    sDataServiceRegistry,
    declare,
    nlsResources
) {
    var allOpenListPanelConfig = declare('Sage.MainView.ActivityMgr.AllOpenListPanelConfig', [BaseListPanelConfig], {

        constructor: function () {
            this._nlsResources = nlsResources;
            this._listId = 'allOpen';
            this._resourceKind = 'activities';
            this.entityName = 'Activity';
            this._contextMenu = 'ActivityListContextMenu';
            this._scheduleContextMenu = 'ScheduleContextMenu';
            this._service = sDataServiceRegistry.getSDataService('system');
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._include = this._getInclude();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.list.selectionMode = "single";
            this.summary = this._getSummaryConfig();
            this.detail = this._getDetailConfig();
            this.toolBar = this._getToolBars();
            dojo.subscribe('/entity/activity/change', this._onListRefresh);
            dojo.subscribe('/entity/activity/delete', this._onListRefresh);
            dojo.subscribe('/entity/activity/create', this._onListRefresh);
        },
        _onListRefresh: function (event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('allopen');
        },
        _getSelect: function () {
            var select = [
                      '$key',
                      'Attachment',
                      'Timeless',
                      'Recurring',
                      'RecurIterations',
                      'Alarm',
                      'Type',
                      'StartDate',
                      'Duration',
                      'ContactName',
                      'ContactId',
                      'LeadName',
                      'LeadId',
                      'AccountName',
                      'AccountId',
                      'Description',
                      'Priority',
                      'Leader',
                      'RecurrenceState'
                     ];
            return select;
        },
        _getInclude: function () {
            var includes = ["$descriptors"];
            return includes;
        },
        _getSort: function () {
            var sort = [
               { attribute: 'StartDate', descending: true }
            ];
            return sort;
        },
        _getWhere: function () {
            var where = ''; // (this._currentUserId) ? dojo.string.substitute('(UserActivities.UserId eq "${0}") and (Type ne "atLiterature" ) ', [this._currentUserId]) : '';          
            // where = '(Type ne "atLiterature" ) and (UserActivities.Status ne "asDeclned" )';
            where = '(Type ne "atLiterature" )';
            return where;
        },

        _getStructure: function () {

            var colNameAttachment = "<div class='Global_Images icon16x16 icon_attach_to_16' title='" + this._nlsResources.colNameAttachment + "' />";  //this._nlsResources.colNameAttachment || 'Attachment';
            var colNameRecurring = "<div class='Global_Images icon16x16 icon_recurring' title='" + this._nlsResources.colNameRecurring + "' />"; // this._nlsResources.colNameRecurring || 'Recurring';
            var colNameAlarm = "<img style='width: 16px; height: 16px' src='images/icons/Alarm_16x16.gif' title='" + this._nlsResources.colNameAlarm + "' alt='" + this._nlsResources.colNameAlarm + "' />";  // this._nlsResources.colNameAlarm || 'Alarm';
            var colNameType = this._nlsResources.colNameType || 'Type';
            var colNameStartDate = this._nlsResources.colNameStartDate || 'Start Date';
            var colNameDuration = this._nlsResources.colNameDuration || 'Duration';
            var colNameAccount = this._nlsResources.colNameAccount || 'Account';
            var colNameRegarding = this._nlsResources.colNameRegarding || 'Regarding';
            var colNamePriority = this._nlsResources.colNamePriority || 'Priority';
            var colNameUserId = this._nlsResources.colNameUserId || 'Leader';
            var colNameTypeName = this._nlsResources.colNameTypeName || 'Type';
            var colNameContactName = this._nlsResources.colNameContactName || 'Name';

            var structure = [
                { field: 'Alarm', name: colNameAlarm, type: UtilityActivity.activityAlarmCell, width: '20px' },
                { field: 'Attachment', name: colNameAttachment, type: UtilityActivity.activityAttachCell, width: '20px' },
                { field: 'Recurring', name: colNameRecurring, type: UtilityActivity.activityRecurringCell, width: '20px' },
                { field: 'Type', name: colNameType, type: UtilityActivity.activityTypeCell, width: '90px' },
                { field: 'StartDate', name: colNameStartDate, type: ColumnsDateTime, timelessField: 'Timeless', width: '100px' },
                { field: 'Duration', name: colNameDuration, type: UtilityActivity.activityDurationCell, width: '40px' },
                { field: 'ContactId', name: colNameTypeName, type: UtilityActivity.activityNameTypeCell, width: '40px' },
                { field: 'ContactName', name: colNameContactName, type: UtilityActivity.activityNameCell, width: '200px' },
                { field: 'AccountName', name: colNameAccount, type: UtilityActivity.activityAccountCell, width: '200px' },
                { field: 'Description', name: colNameRegarding, width: '100px' },
                { field: 'Priority', name: colNamePriority, width: '40px' },
                { field: 'Leader', name: colNameUserId, type: UtilityActivity.activityLeaderCell, width: '200px' }
            ];

            return structure;
        },


        _getDetailConfig: function () {
            //base class is calling _getFormatterScope();
            //var formatScope = this._getFormatterScope();
            var requestConfig = this._getSummaryDetailRequestConfig();
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: requestConfig,
                templateLocation: 'MainView/ActivityMgr/Templates/AllOpenDetailSummary.html'
            };
            return detailConfig;

        },
        _getSummaryListRequestConfig: function () {

            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Attachment',
                      'Timeless',
                      'Recurring',
                      'RecurIterations',
                      'Alarm',
                      'Type',
                      'StartDate',
                      'Duration',
                      'ContactName',
                      'ContactId',
                      'LeadName',
                      'LeadId',
                      'AccountName',
                      'AccountId',
                      'Description',
                      'Priority',
                      'Leader/$descriptor',
                      'Location',
                      'TicketId',
                      'TicketNumber',
                      'OpportunityId',
                      'OpportunityName',
                      'Notes',
                      'RecurrenceState',
                      'PhoneNumber'
                 ],
                include: ['$descriptors'],
                useBatchRequest: true
            };
            return requestConfig;

        },
        _getSummaryDetailRequestConfig: function () {
            var requestConfig = {
                resourceKind: this._resourceKind,
                serviceName: 'system',
                keyField: '$key',
                select: [
                      '$key',
                      'Attachment',
                      'Timeless',
                      'Recurring',
                      'RecurIterations',
                      'Alarm',
                      'Type',
                      'StartDate',
                      'Duration',
                      'ContactName',
                      'ContactId',
                      'LeadName',
                      'LeadId',
                      'AccountName',
                      'AccountId',
                      'Description',
                      'Priority',
                      'Leader/$descriptor',
                      'Location',
                      'TicketId',
                      'TicketNumber',
                      'OpportunityId',
                      'OpportunityName',
                      'LongNotes',
                      'RecurrenceState',
                      'PhoneNumber'
                     ],
                include: ['$descriptors'],
                useBatchRequest: true
            };
            return requestConfig;

        },
        _getFormatterScope: function () {
            var requestConfig = this._getSummaryListRequestConfig();
            var formatScope = new SDataSummaryFormatterScope({
                templateLocation: 'MainView/ActivityMgr/templates/AllOpenListSummary.html',
                resetDataManager: true,
                requestConfiguration: requestConfig

            });
            return formatScope;

        },

        _getToolBars: function () {
            var toolBars = { items: [] };
            return toolBars;
        },
        getTimelessProperty: function (propertyName) {
            return "Timeless";

        }


    });

    return allOpenListPanelConfig;

});
},
'Sage/TaskPane/main':function(){
define("Sage/TaskPane/main", [
    "Sage/TaskPane/_BaseTaskPaneTasklet",
    "Sage/TaskPane/UserTasklet",
    "Sage/TaskPane/AccountingTasksTasklet",
    "Sage/TaskPane/ActivityManagerTasklet",
    "Sage/TaskPane/ActivityTaskConfigurationProvider",
    "Sage/TaskPane/ActivityTaskContents",
    "Sage/TaskPane/ActivityTaskPaneActions",
    "Sage/TaskPane/ActivityTaskPaneItem",
    "Sage/TaskPane/CommonTasksTasklet",
    "Sage/TaskPane/GroupListTasklet",
    "Sage/TaskPane/LeadTasksTasklet",
    "Sage/TaskPane/LiteratureManagementTasks",
    "Sage/TaskPane/OpportunityTasksTasklet",
    "Sage/TaskPane/SecuredActionTasklet",
    "Sage/TaskPane/TaskPaneContent",
    "Sage/TaskPane/TaskPaneItem",
    "Sage/TaskPane/SecurityManagerTasksTasklet"
    ], function() {
	// module:
	    // Sage/TaskPane/main
	// summary:
        // The Sage/TaskPane/main module provides loading of all Sage/TaskPane modules.
});
},
'Sage/QuickForms/Design/ControlDesigner':function(){
define("Sage/QuickForms/Design/ControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/_base/array',
    'require',
    'dojo/string',
    'dojo/topic',
    'dojo/dom-class',
    'dojo/query',
    'dijit/_Contained',
    './PropertyValueError',
    'dojo/NodeList-traverse',
    'dojo/i18n!./nls/ControlDesigner'

], function(
    declare,
    lang,
    array,
    require,
    string,
    topic,
    domClass,
    query,
    _Contained,
    PropertyValueError,
    nodeListTraverse,
    localization
) {
    return declare('Sage.QuickForms.Design.ControlDesigner', [_Contained], {
        /**
         * Meta-data for design.
         */
        designSupport: {
            visible: true
        },
        /**
         * True to enable design surface validation of properties.
         */
        _checked: true,
        /**
         * The bound entry (from SData) pertaining to the QuickForm control.
         */
        entry: null,
        editors: null,
        form: null,
        helpTopicName: '',

        /* default values (set to false-y to prevent base overrides from being set) */
        column: 0,
        row: 0,

        /**
         * Control Name to be shown in Control Type select
         */
        displayNameText: null,

        constructor: function() {
            lang.mixin(this, localization);
        },

        set: function(name, value) {
            var result = this.inherited(arguments);

            var names = this._getAttrNames(name),
                setter = this[names.s];

            if (lang.isFunction(setter))
            {
                topic.publish('/quickforms/design/designerModified', this, name, value, result, this);
            }

            return result;
        },
        _isOnDesignSurface: function() {
            /* todo: messy way to break circular dependency for type checking */
            var surfaceType = this._surfaceType || (this._surfaceType = require('./DesignSurface'));
            var parent = this.getParent();

            return (parent && parent.isInstanceOf(surfaceType));
        },
        /* These functions map between the control designer and the QuickForm entry */
        _getControlIdAttr: function() {
            return lang.getObject('ControlId', false, this.entry);
        },
        _setControlIdAttr: function(value) {
            lang.setObject('ControlId', value, this.entry);
        },
        _getCaptionAttr: function() {
            return lang.getObject('Caption', false, this.entry);
        },
        _setCaptionAttr: function(value) {
            lang.setObject('Caption', value, this.entry);
        },
        _getCaptionAlignmentAttr: function() {
            return lang.getObject('CaptionAlignment', false, this.entry);
        },
        _setCaptionAlignmentAttr: function(value) {
            lang.setObject('CaptionAlignment', value, this.entry);
            this.applyCaptionAlignment(value);
        },
        _getControlNameAttr: function() {
            return this.displayNameText;
        },
        _getEnabledAttr: function() {
            return lang.getObject('Enabled', false, this.entry);
        },
        _setEnabledAttr: function(value) {
            lang.setObject('Enabled', value, this.entry);
        },
        _getFormAttr: function(){
            return this.form;
        },
        _getIsReadOnlyAttr: function() {
            return lang.getObject('IsReadOnly', false, this.entry);
        },
        _setIsReadOnlyAttr: function(value) {
            lang.setObject('IsReadOnly', value, this.entry);
        },
        _getToolTipAttr: function() {
            return lang.getObject('ToolTip', false, this.entry);
        },
        _setToolTipAttr: function(value) {
            lang.setObject('ToolTip', value, this.entry);
        },
        _getVisibleAttr: function() {
            return lang.getObject('Visible', false, this.entry);
        },
        _setVisibleAttr: function(value) {
            lang.setObject('Visible', value, this.entry);
            this.applyVisibility(value);
        },
        _getRowAttr: function() {
            return lang.getObject('Row', false, this.entry);
        },
        _setRowAttr: function(value) {
            if (value === this.get('row')) {
                return;
            }

            if (this._checked && this._isOnDesignSurface())
            {
                var result = this.getParent().validateMove(this, value, this.get('column'));
                if (result) throw new PropertyValueError(result, this.get('row'));
            }

            if (this._checked && this._isOnDesignSurface())
            {
                this.getParent().moveWidget(this, value, this.get('column'));
            }
            else
            {
                lang.setObject('Row', value, this.entry);
            }
        },
        _getRowSpanAttr: function() {
            return lang.getObject('RowSpan', false, this.entry);
        },
        _setRowSpanAttr: function(value) {
            if (value === this.get('rowSpan')) return;

            if (this._checked && this._isOnDesignSurface())
            {
                var result = this.getParent().validateSize(this, value, this.get('columnSpan'));
                if (result) throw new PropertyValueError(result, this.get('rowSpan'));
            }

            lang.setObject('RowSpan', value, this.entry);

            // todo: move the designer to it's current position in order to push other designers down

            if (this._checked && this._isOnDesignSurface()) this.getParent().layout(true);
        },
        _getColumnAttr: function() {
            return lang.getObject('Column', false, this.entry);
        },
        _setColumnAttr: function(value) {
            if (value === this.get('column')) return;

            if (this._checked && this._isOnDesignSurface())
            {
                var result = this.getParent().validateMove(this, this.get('row'), value);
                if (result) throw new PropertyValueError(result, this.get('column'));
            }

            if (this._checked && this._isOnDesignSurface())
            {
                this.getParent().moveWidget(this, this.get('row'), value);
            }
            else
            {
                lang.setObject('Column', value, this.entry);
            }
        },
        _getColumnSpanAttr: function() {
            return lang.getObject('ColumnSpan', false, this.entry);
        },
        _setColumnSpanAttr: function(value) {
            if (value === this.get('columnSpan')) return;

            if (this._checked && this._isOnDesignSurface())
            {
                var result = this.getParent().validateSize(this, this.get('rowSpan'), value);
                if (result) throw new PropertyValueError(result, this.get('columnSpan'));
            }

            lang.setObject('ColumnSpan', value, this.entry);

            if (this._checked && this._isOnDesignSurface()) this.getParent().layout(true);
        },
        _getDataBindingsAttr: function() {
            return lang.getObject('DataBindings', false, this.entry);
        },
        _setDataBindingsAttr: function(value) {
            lang.setObject('DataBindings', value, this.entry);
        },
        findDataBinding: function(predicate) {
            var bindings = this.get('dataBindings');
            if (bindings)
            {
                for (var i = 0; i < bindings.length; i++)
                {
                    if (predicate && predicate(bindings[i])) return bindings[i];
                }
            }
            return null;
        },
        unchecked: function(fn) {
            this._checked = false;
            try
            {
                fn.call(this, this);
            }
            finally
            {
                this._checked = true;
            }
        },
        applyCaptionAlignment: function(alignment){
            if (!this.designCaptionNode || !this.fieldClass) return;

            alignment = alignment || this.get('captionAlignment');

            domClass.remove(this.designCaptionNode, string.substitute('${0}-left ${0}-center ${0}-right', [this.fieldClass+'-caption']));
            domClass.add(this.designCaptionNode, string.substitute('${0}-caption-${1}', [this.fieldClass, alignment]));
        },
        applyVisibility: function(visible) {
            if (!(this.containerNode)) return;

            if (typeof visible === 'undefined')
                visible = this.get('visible');

            domClass.toggle(this.containerNode, 'design-visible-false', !visible);
        },
        setupFor: function(propertyContext) {
            this.entry = {
                '$type': this.quickFormControlType, /* this is REQUIRED by the serializer (sdata side) be the first property */
                'Row': 0,
                'RowSpan': 1,
                'Column': 0,
                'ColumnSpan': 1
            };

            this.set('caption', propertyContext['displayName']);
            this.set('captionAlignment', 'left');
            this.set('controlId', this.form.createUniqueId(propertyContext['propertyName']));
            this.set('controlLabelPlacement', 'left');
            this.set('enabled', true);
            this.set('isReadOnly', false);
            this.set('toolTip', '');
            this.set('visible', true);
        }
    });
});
},
'Sage/UI/Alarms/AlarmPopup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/AlarmPopup", [
    'dijit/_TemplatedMixin',
    'dijit/_WidgetsInTemplateMixin',
    'dijit/_Widget',
    'dijit/layout/ContentPane',
    'Sage/Data/WritableSDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/Utility',
    'dojo/string',
    'Sage/UI/Alarms/AlarmPane',
    'Sage/UI/Alarms/UnconfirmedPane',
    'Sage/UI/ImageButton',
    'dojo/i18n',
    'dojo/i18n!./nls/AlarmPopup',
    'dojo/_base/declare'
],
function (_TemplatedMixin,
    _WidgetsInTemplateMixin,
    _Widget,
    contentPane,
    writableSDataStore,
    sDataServiceRegistry,
    utility,
    dstring,
    AlarmPane,
    UnconfirmedPane,
    ImageButton,
    i18n,
    popupStrings,
    declare) {
    var widget = declare('Sage.UI.Alarms.AlarmPopup', [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {
        options: {
            displayPastDueInToolbar: true,
            displayAlertsInToolbar: true,
            promptAlerts: true,
            includeAlarms: true,
            includeConfirmations: true,
            pollInterval: 1,
            defaultSnooze: '5'
        },
        _confirmCount: -1,
        _alarmCount: -1,
        _dataRequested: false,
        widgetsInTemplate: true,
        isOpen: false,
        templateString: [
            '<div class="alarm-popup">',
            '<div class="alarm-title"><span class="alarm-main-title">&nbsp;${title}</span></div>',
            '<div class="alarm-title">',
            '<span class="alarm-tab-head">&nbsp;</span>',
            '<span dojoAttachEvent="onclick:_showAlarmPane" dojoAttachPoint="_alarmBtn" class="alarm-tab alarm-tab-selected">${alarmsText}</span>',
            '<span dojoAttachEvent="click:_showUnconfirmedPane" dojoAttachPoint="_confBtn" class="alarm-tab">${unconfirmedText}</span>',
            '<span class="alarm-tab-tail">&nbsp;</span>',
            '<span class="alarm-title-tools">',
            '<span dojoType="Sage.UI.ImageButton" id="compButton" imageClass="icon_complete_activity_16x16" title="${completeText}" dojoAttachEvent="onClick:_completeClick" dojoAttachPoint="compButton"></span>',
            '<span dojoType="Sage.UI.ImageButton" id="delButton" imageClass="icon_Delete_16x16" title="${deleteText}" dojoAttachEvent="onClick:_deleteClick" dojoAttachPoint="delButton"></span>',
            '<span dojoType="Sage.UI.ImageButton" imageClass="icon_Help_16x16" title="${helpText}" dojoAttachEvent="onClick:_showHelp" ></span>',
            '</span>',
            '</div>', //title area
            '<div data-dojo-type="dijit.layout.StackContainer" dojoAttachPoint="_panelContainer" class="alarm-body" >',
            '<div data-dojo-type="dijit.layout.ContentPane" dojoAttachPoint="_alarmPane" class="alarm-pane" title="alarms" >',
            '<div data-dojo-type="Sage.UI.Alarms.AlarmPane" dojoAttachPoint="_alarms" dojoAttachEvent="onAlertChanged:_alarmchange"></div>',
            '</div>', //alarms pane
            '<div data-dojo-type="dijit.layout.ContentPane" dojoAttachPoint="_confPane" class="alarm-pane" title="Unconfirmed">',
            '<div data-dojo-type="Sage.UI.Alarms.UnconfirmedPane" dojoAttachPoint="_confirms" dojoAttachEvent="onAlertChanged:_confchange"></div>',
            '</div>', //unconfirmed pane,
            '</div>', //- StackContainer
            '</div>' //body
        ].join(''),
        constructor: function () {
            dojo.mixin(this, popupStrings);
        },
        _setOptionsAttr: function (options) {
            this.options = dojo.mixin(this.options, options);
            this._alarms.setDefaultSnooze(this.options.defaultSnooze || '5');
        },
        _getOptionsAttr: function () {
            return this.options;
        },
        drawAlerts: function () {
            this._dataRequested = true;
            if (this.options.includeAlarms) {
                if (!this.alarmStore) {
                    this.alarmStore = new writableSDataStore({
                        service: sDataServiceRegistry.getSDataService('system'),
                        resourceKind: 'useractivities',
                        include: ['Activity', 'User', '$descriptors'],
                        sort: [{ attribute: 'Activity.StartDate', descending: true}]
                    });
                    this._alarms.store = this.alarmStore;
                }
                this._fetchAlarms();
            } else {
                dojo.addClass(this._alarmBtn, 'display-none');
                this._showUnconfirmedPane();
            }
            if (this.options.includeConfirmations) {
                //new notifications...
                if (!this.confirmStore) {
                    this.confirmStore = new writableSDataStore({
                        service: sDataServiceRegistry.getSDataService('dynamic'),
                        resourceKind: 'usernotifications',
                        include: ['Activity', '$descriptors'],
                        select: ['Type', 'Notes', 'FromUserId', 'ToUserId', 'SendDate', 'Activity/AccountName', 'Activity/AccountId', 'Activity/ActivityId', 'Activity/ContactName', 'Activity/ContactId', 'Activity/Description', 'Activity/Duration', 'Activity/LeadId', 'Activity/LeadName', 'Activity/OpportunityName', 'Activity/OpportunityId', 'Activity/Recurring', 'Activity/StartDate', 'Activity/Timeless', 'Activity/Type', 'Activity/Location', 'Activity/Leader', 'Activity/TicketId', 'Activity/TicketNumber'],
                        sort: [{ attribute: 'Activity.StartDate', descending: true}]
                    });
                    this._confirms.store = this.confirmStore;
                }
                this._fetchConfirms();
            } else {
                dojo.addClass(this._confBtn, 'display-none');
                this._showAlarmPane();
            }
        },
        _fetchAlarms: function () {
            if (this.options.includeAlarms && this.alarmStore) {
                var where = dstring.substitute("(User.Id eq '${0}' and Status ne 'asDeclned') and ((Alarm eq true and AlarmTime ne null and AlarmTime lt '${1}') or (Alarm eq null and AlarmTime eq null and Activity.Alarm eq true and Activity.AlarmTime lt '${1}'))", [utility.getClientContextByKey('userID'), utility.Convert.toIsoStringFromDate(new Date())]);
                this.alarmStore.fetch({
                    query: where,
                    count: 80,
                    start: 0,
                    onComplete: this._onAlarmRequestComplete,
                    scope: this
                });
            }
        },
        _fetchConfirms: function () {
            if (this.options.includeConfirmations && this.confirmStore) {
                this.confirmStore.fetch({
                    query: dstring.substitute('ToUserId eq \'${0}\' and Type eq \'New\'', [utility.getClientContextByKey('userID')]),
                    count: 40,
                    start: 0,
                    onComplete: this._onConfirmRequestComplete,
                    scope: this
                });
            }
        },
        _onAlarmRequestComplete: function (data) {
            this._alarms._setAlertItemsAttr(data, this.isOpen);
            this._alarmCount = data.length;
            this._checkWhichVisible();
        },
        _onConfirmRequestComplete: function (data) {
            this._confirms._setAlertItemsAttr(data, this.isOpen);
            this._confirmCount = data.length;
            this._checkWhichVisible();
        },
        _checkWhichVisible: function () {
            if (this._alarmCount > 0 && this.options.includeAlarms) {
                this._showAlarmPane();
            } else if (this._alarmCount === 0 && this._confirmCount > 0 && this.options.includeConfirmations) {
                this._showUnconfirmedPane();
            }
        },
        _alarmchange: function (count) {
            dojo.html.set(this._alarmBtn, this.alarmsText + ' (' + count + ') ');
            this._alarmCount = count;
            if (count < 1) {
                this._checkWhichVisible();
            }
            this.onAlertChanged();
        },
        _confchange: function (count) {
            dojo.html.set(this._confBtn, this.unconfirmedText + ' (' + count + ') ');
            this._confirmCount = count;
            if (count < 1) {
                this._checkWhichVisible();
            }
            this.onAlertChanged();
        },
        onOpen: function () {
            this.isOpen = true;
            //because we live inside a popup, we need to call resize() on the stack container to make it show a child...
            this._panelContainer.resize();

            if (!this._dataRequested) {
                this.drawAlerts();
            } else {
                this._checkWhichVisible();
            }

            //ToDo:  try focusing on something in here and see if the popup will close when the user clicks somewhere outside it
            //  If you click in the popup, then out,  it goes away.

            //            if (this._alarms.getUnhandledAlertCount() > 0) {
            //                this._showAlarmPane();
            //            } else {
            //                this._showUnconfirmedPane();
            //            }

        },
        onClose: function () {
            this.isOpen = false;
            this._alarms.closeTooltips();
            this._confirms.closeTooltips();
        },
        startup: function () {
            this.inherited(arguments);
            dojo.subscribe('/entity/activity/delete', this, this.reloadData);
        },
        reloadData: function () {
            this._fetchAlarms();
            this._fetchConfirms();
        },
        reloadAlarms: function () {
            this._fetchAlarms();
        },
        reloadConfirms: function () {
            this._fetchConfirms();
        },
        _showAlarmPane: function () {
            this._panelContainer.selectChild(this._alarmPane);
            dojo.addClass(this._alarmBtn, 'alarm-tab-selected');
            dojo.removeClass(this._confBtn, 'alarm-tab-selected');

            dojo.removeClass(this.compButton.domNode, 'display-none');
            dojo.removeClass(this.delButton.domNode, 'display-none');

            this._alarms.onShow();
        },
        _showUnconfirmedPane: function () {
            this._panelContainer.selectChild(this._confPane);
            dojo.removeClass(this._alarmBtn, 'alarm-tab-selected');
            dojo.addClass(this._confBtn, 'alarm-tab-selected');

            dojo.addClass(this.compButton.domNode, 'display-none');
            dojo.addClass(this.delButton.domNode, 'display-none');

            this._confirms.onShow();
        },
        _completeClick: function () {
            this._alarms.completeSelected();
        },
        _deleteClick: function () {
            this._alarms.deleteSelected();
        },
        _showHelp: function () {
            utility.openHelp('alerts');
        },
        getAlertCount: function () {
            return this._alarms.getUnhandledAlertCount() + this._confirms.getUnhandledAlertCount();
        },
        onAlertChanged: function () {
        }
    });
    return widget;
});
},
'Sage/QuickForms/Design/Editors/CheckBoxBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/CheckBoxBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/CheckBoxBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.CheckBoxBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',

        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/RowBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/RowBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojox/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/RowBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.RowBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.indexTooltipText %}">',
                        '<label>{%= $.indexText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_index" data-dojo-attach-event="onChange:_onIndexChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _index: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',

        indexText: 'Index:',
        indexTooltipText: 'Number of the row or column, beginning with zero.',

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._index.set('value', this._designer.get('index'));
        },

        _onIndexChange: function(value) {
        }
    });
});
},
'Sage/UI/ListPanel':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/ListPanel", [
       "dojo/i18n",
       'dijit/layout/BorderContainer',
       'dijit/layout/StackContainer',
       'dijit/layout/ContentPane',
       'dijit/Toolbar',
       'dijit/ToolbarSeparator',
       'dojox/grid/EnhancedGrid',
       'Sage/_Templated',
       'Sage/UI/Filters/FilterManager',
       'Sage/UI/ToolBarLabel',
       'dijit/Menu',
       "dojox/grid/enhanced/plugins/Menu",
       'Sage/Utility',
       'dojox/storage/LocalStorageProvider',
       'Sage/UI/_DetailPane',
       'dijit/_Widget',
       'dojox/grid/enhanced/plugins/IndirectSelection',
       'Sage/UI/Grid/Plugins/ShowHideColumns',
       'dojo/_base/array',
       'dojo/_base/lang',
       'dojo/_base/declare',
       'dojo/i18n!./nls/ListPanel',
       'dojo/_base/sniff',
       'dojo/dom-geometry',
       'dijit/registry',
       'dojo/_base/connect',
       'dojo/ready'
],
function (i18n,
         borderContainer,
         stackContainer,
         contentPane,
         toolbar,
         toolbarSeperator,
         enhancedGrid,
         _Templated,
         FilterManager,
         toolbarLabel,
         dijitMenu,
         pluginMenu,
         util,
         LocalStorageProvider,
         _DetailPane,
         _Widget,
         IndirectSelection,
         ShowHideColumns,
         array,
         lang,
         declare,
         nlsListPanel,
         has,
         domGeo,
         registry,
         connect,
         ready) {

    var listPanel = declare('Sage.UI.ListPanel', [borderContainer, _Widget, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '{%! $.menuTemplate %}',
            '{%! $.listTemplate %}',
            '{%! $.detailTemplate %}'
        ]),
        listTemplate: new Simplate([
            '<div data-dojo-type="dijit.layout.StackContainer" region="center" splitter="true" data-dojo-attach-point="_gridContainer">',
                '<div data-dojo-type="dijit.layout.ContentPane" data-dojo-attach-point="_noConfigurationPane"></div>',
                '<div id="{%= $.id %}_listGrid" columnReordering="true" class="listGrid" data-dojo-type="{%= $.gridType %}" data-dojo-attach-point="_listGrid" plugins="{menus:{selectedRegionMenu:\'_listContextmenu\', rowMenu:\'_listContextmenu\'}, indirectSelection: {%: $._indirectSelection%}, showHideColumns: true}" dojoAttachEvent="onRowClick:_onRowClick,onRowContextMenu:_onRowContextMenu,onSelected:_onSelectedInList,onSelectionChanged:_onSelectionChanged,onResizeColumn:_onResizeColumn,onHeaderCellClick:_onHeaderCellClick,onCellClick:_onCellClick,onRowDblClick:_onRowDblClick">',
                '<div data-dojo-type="dijit.Menu" id="_listContextmenu" dojotAttachPoint="_listContextmenu" style="display:none" ></div>',
                '</div>',
                '<div id="{%= $.id %}_summaryGrid" class="summaryGrid" data-dojo-type="{%= $.gridType %}" selectionMode="none" data-dojo-attach-point="_summaryGrid" dojoAttachEvent="onRowClick:_onRowClick,onRowContextMenu:_onRowContextMenu,onSelected:_onSelectedInSummary,onSelectionChanged:_onSelectionChanged"></div>',
            '</div>'
        ]),
        menuTemplate: new Simplate([
            '<div data-dojo-type="dijit.Toolbar" region="top" splitter="false" id="{%= $.id %}_toolbar" style="{%= $.toolbarStyle %}" data-dojo-attach-point="_tbar" class="list-panel-tbar right-tools">',
                '<div data-dojo-type="Sage.UI.ToolBarLabel" label="" data-dojo-attach-point="_tbarLabel" class="list-panel-left-tools"></div>',
                '<div data-dojo-type="Sage.UI.ToolBarLabel" label="{%= $.unsavedDataText %}" data-dojo-attach-point="_unsavedDataLabel" class="display-none"></div>',
                '<div data-dojo-type="Sage.UI.ToolBarLabel" label="" data-dojo-attach-point="_filterSummary" class="filter-summary-view"></div>',
                '<div data-dojo-type="dijit.form.Button" showLabel="true" id="{%= $.id %}_detailBtn" data-dojo-attach-point="_detailButton" dojoAttachEvent="onClick:toggleDetail" class="list-panel-tool-detail">{%= $.detailText %}</div>',
                '<span data-dojo-type="dijit.ToolbarSeparator" data-dojo-attach-point="_buttonSection" class="list-panel-tool-section"></span>',
                '<div data-dojo-type="dijit.form.Button" showLabel="true" id="{%= $.id %}_listBtn" data-dojo-attach-point="_listButton" dojoAttachEvent="onClick:showList" class="list-panel-tool-list">{%= $.listText %}</div>',
                '<div data-dojo-type="dijit.form.Button" showLabel="true" id="{%= $.id %}_summaryBtn" data-dojo-attach-point="_summaryButton" dojoAttachEvent="onClick:showSummary" class="list-panel-tool-summary">{%= $.summaryText %}</div>',
                '<div data-dojo-type="Sage.UI.ImageButton" iconClass="Global_Images icon16x16 icon_refresh"  tooltip="{%: $.refreshText %}" id="refreshBtn" data-dojo-attach-point="_refreshButton" dojoAttachEvent="onClick:refreshView" class="list-panel-tool-help"></div>',
                '<div data-dojo-type="Sage.UI.ImageButton" iconClass="Global_Images icon16x16 icon_Help_16x16" tooltip="{%: $.helpText %}" id="helpBtn" data-dojo-attach-point="_helpButton" dojoAttachEvent="onClick:showHelp" class="list-panel-tool-help"></div>',
            '</div>'
        ]),
        detailTemplate: new Simplate([
            '<div data-dojo-type="{%= $.detailType %}" region="{%= $.detailRegion %}" splitter="true" style="{%= $.detailStyle %}" data-dojo-attach-point="_detailPane">',
            '</div>'
        ]),
        _filterGroup: null,
        _filterSubscriptions: null,
        _filterManager: null,
        _toolbarApplied: false,
        _configurationProvider: null,
        _configurationConnects: null,
        _contextConnects: null,
        _dataChangeWatchers: [],
        _gridContainer: null,
        _noConfigurationPane: null,
        _listGrid: null,
        _indirectSelection: '',
        _summaryGrid: null,
        _detailPane: null,
        _tbar: null,
        _tbarCustom: false,
        _tbarLabel: null,
        _buttonSection: null,
        _detailButton: null,
        _listButton: null,
        _summaryButton: null,
        _helpButton: null,
        _filterSummary: null,
        _unsavedDataLabel: null,
        _listMode: 'list',
        helpTopicName: 'listview',
        gutters: false,
        toolbarStyle: '',
        // todo: might have to fix this issue: http://bugs.dojotoolkit.org/ticket/10930 if we support editing
        gridType: 'dojox.grid.EnhancedGrid',
        initialGrid: 'list',
        filterGroup: 'default',
        detailVisible: false,
        detailOnSummary: false,
        detailRegion: 'bottom',
        detailStyle: 'height: 256px;',
        detailType: 'dijit.layout.ContentPane',
        autoConfigure: true,
        hasCheckBox: false,
        autoFitColumns: true,

        // i18n
        listText: 'List',
        summaryText: 'Summary',
        detailText: 'Detail',
        hideDetailText: 'Hide Detail',
        unsavedDataText: '*unsaved data',
        helpText: 'Help',
        refreshText: 'Refresh',
        ofText: 'of',
        // end i18n

        FILTER_UPDATE_DELAY: 1000,
        STORE_KEY_COLUMN_SIZE: '_COLUMN_UNIT_WIDTH_',
        STORE_KEY_SORT_INFO: '_GRID_SORT_PROPS_',
        STORE_KEY_LAYOUT_INFO: '_GRID_LAYOUT_PROPS_',
        STORE_KEY_TOGGLE_INFO: '_GRID_TOTTLE_PROPS_',
        STORE_KEY_STORE_QUERY: '_STORE_QUERY_',
        STORE_KEY_VIEWSTATE: 'LISTPANEL_VIEWSTATE', // Key for view state - did we leave off in list or summary view?

        constructor: function () {
            this.inherited(arguments);

            //dojo.subscribe('/group/context/changed', lang.hitch(this, this._onLViewConfigChanging));
            //dojo.subscribe('/ui/filterPanel/ready', lang.hitch(this, this._onFilterPanelReady));
            //dojo.subscribe('/ui/filterManager/ready', lang.hitch(this, this._onFilterManagerReady));


        },
        postMixInProperties: function () {
            this.inherited(arguments);
            lang.mixin(this, nlsListPanel);
            this._setupCheckBox();
            this._setupAutoFit();
        },
        postCreate: function () {
            this.inherited(arguments);

            if (this._listGrid) {
                this.connect(this._listGrid.scroller, 'scroll', this._onListScroll);
                //this.connect(this._listGrid, 'canSort', this._onListCanSort);
                this.connect(this._summaryGrid.scroller, 'scroll', this._onSummaryScroll);
                this._listGrid.canSort = function (col) {
                    var cells = this.layout.cells;
                    var cell = cells[Math.abs(col) - 1];
                    if (cell.nosort) {
                        return false;
                    }
                    return true;
                };

                this._listGrid.columnReordering = true;
                this._listGrid.selectionMode = 'extended';

                // TODO: Use same storage for cell order and visibility
                dojo.connect(this._listGrid, 'onMoveColumn', this, function (type, mapping, cols) {
                    var cells = this._listGrid.layout.cells,
                        results = [],
                        i = 0,
                        key = '';

                    for (i = 0; i < cells.length; i++) {
                        if (cells[i].field) {
                            results.push(cells[i].field);
                        }
                    }

                    key = this._getGridLayoutKey();
                    this._saveToLocalStorage(key, results);
                });

                dojo.subscribe('/sage/ui/grid/columnToggle/' + this._listGrid.id, dojo.hitch(this, function (cell) {
                    var cells = this._listGrid.layout.cells,
                        results = [],
                        i = 0,
                        key = '';
                    for (i = 0; i < cells.length; i++) {
                        results.push({ field: cells[i].field, hidden: cells[i].hidden });
                    }

                    key = this._getGridColumnToggleKey();
                    this._saveToLocalStorage(key, results);
                }));
            }

            this._gridContainer.selectChild(this._noConfigurationPane);

            if (this._detailPane.isInstanceOf(_DetailPane)) {
                this._detailPane.set('owner', this);
            }

            this._setDetailPaneVisibility(false);

            this._updateToolbarItemVisibility();
        },
        startup: function () {
            this.inherited(arguments);

            if (this.autoConfigure) {
                this.requestConfiguration();
            }
        },
        uninitialize: function () {
            this.inherited(arguments);

            if (this._filterManager) {
                this._filterManager.destroy();
            }

            if (this._configurationProvider) {
                this._configurationProvider.destroy();
            }
        },
        _setupCheckBox: function () {
            // Load the grid checkbox selector plugin "indirectSelection"
            // based on a user option.
            var service = Sage.Services.getService('UserOptions');
            this._indirectSelection = 'false';

            if (service && service.get) {
                service.get('GroupCheckboxEnabled', 'GroupGridView', lang.hitch(this, function (data) {
                    var groupCheckboxEnabled = data && data.value;
                    if (groupCheckboxEnabled === 'True' || groupCheckboxEnabled === 'T') {
                        this._indirectSelection = '{ draggable: false}';
                        this.hasCheckBox = true;
                    } else {
                        this.hasCheckBox = false;
                    }
                }), null, this, false);
            }
        },
        _setupAutoFit: function () {
            var service = Sage.Services.getService('UserOptions');
            if (service && service.get) {
                service.get('autoFitColumns', 'GroupGridView', lang.hitch(this, function (data) {
                    var val = data && data.value;
                    if (val === 'True' || val === 'T') {
                        this.autoFitColumns = true;
                    } else {
                        this.autoFitColumns = false;
                    }
                }), null, this, false);
            }
        },
        _setSortInfo: function (store) {
            var key = this._getGridSortKey(),
                sortProps = this._getFromLocalStorage(key);
            if (sortProps) {
                if (sortProps.descending) {
                    this._listGrid.sortInfo = (sortProps.cellIndex + 1) * -1;
                } else {
                    this._listGrid.sortInfo = sortProps.cellIndex + 1;
                }

                store.sort = [sortProps];
            }
        },
        _setSummarySortInfo: function (store) {
            var key = this._getGridSortKey(),
                sortProps = this._getFromLocalStorage(key);
            if (sortProps) {
                store.sort = [sortProps];
            }
        },
        _setColumnSizes: function (structure) {
            var cells = structure;

            if (structure[0].cells) {
                cells = structure[0].cells[0];
            }

            array.forEach(cells, function (item) {
                if (item && item.field) {
                    var key = this._getColumnSizeKey(item.field),
                        value = this._getFromLocalStorage(key);
                    if (value) {
                        item.width = value;
                    }
                }
            }, this);
        },
        /* {{{
        * Calculates the percentage of the grid columns against the original layout width,
        * and then applies that percentage against the grid containers parent. This will run
        * on initial load and on resize events.
        *
        }}}*/
        _doAutoFitColumns: function () {
            if (!this.autoFitColumns) {
                return;
            }

            var structure = this._listGrid.get('structure'),
                cells = structure,
                layoutWidth = 0,
                dimensions,
                realWidth,
                checkBoxOffset = 0;

            if (structure && structure[0].cells) {
                cells = structure[0].cells[0];
            }

            array.forEach(cells, function (item) {
                if (item && item.field) {
                    var key = this._getColumnSizeKey(item.field),
                        value = this._getFromLocalStorage(key);
                    if (value) {
                        item.width = value;
                    }
                    layoutWidth += parseInt(item.width, 10);
                }
            }, this);

            dimensions = domGeo.getContentBox('list'); /* dimensions of the parent container */
            realWidth = dimensions.w;

            // If check box selection is enabled, calc the offset
            if (this.hasCheckBox) {
                checkBoxOffset = 200;
            } else {
                checkBoxOffset = 155;
            }

            realWidth = realWidth - checkBoxOffset;

            array.forEach(cells, function (item) {
                var width,
                    pct,
                    newWidth;
                if (item && item.field) {
                    width = parseInt(item.width, 10);
                    pct = width / layoutWidth;
                    newWidth = Math.round(realWidth * pct);
                    item.width = newWidth + 'px';
                }
            }, this);

            this._listGrid.set('structure', structure);
        },
        _updateStructureFromLocalStore: function () {
            var key = this._getGridLayoutKey(),
                toggleKey = this._getGridColumnToggleKey(),
                structure = this._listGrid.structure,
                fields = this._getFromLocalStorage(key),
                toggleFields = this._getFromLocalStorage(toggleKey),
                cell, cells, newIndex, temp, i;

            if (fields) {
                cells = structure[0].cells[0];
                if (cells) {
                    cells.sort(function (a, b) {
                        var aIndex = array.indexOf(fields, a.field),
                            bIndex = array.indexOf(fields, b.field);

                        if (aIndex > bIndex) {
                            return 1;
                        }

                        if (aIndex < bIndex) {
                            return -1;
                        }

                        return 0;

                    });
                }

                this._listGrid.set('structure', structure);
            }

            if (toggleFields) {
                array.forEach(this._listGrid.layout.cells, lang.hitch(this, function (cell) {
                    array.forEach(toggleFields, lang.hitch(this, function (item) {
                        if (item.field === cell.field) {
                            this._listGrid.layout.setColumnVisibility(cell.index, !item.hidden);
                        }
                    }));
                }));

            }
        },
        _handleConfigurationChange: function () {
            this._listGrid.selection.clear();
            if (this._detailPane) {
                this._detailPane.clear();
            }
            this.requestConfiguration();
        },
        _setConfigurationProviderAttr: function (value) {

            if (this._configurationConnects) {
                array.forEach(this._configurationConnects, function (connection) {
                    this.disconnect(connection);
                }, this);
            }

            if (this._configurationProvider && this._configurationProvider !== value) {
                this._configurationProvider.destroy();
            }

            this._configurationProvider = value;
            this._configurationConnects = [];

            if (this._configurationProvider) {
                this._configurationConnects.push(this.connect(this._configurationProvider, 'onConfigurationChange', this._handleConfigurationChange));

                this._configurationProvider.set('owner', this);

                // only request configuration here if the widget has been fully created, otherwise
                // it will be handled by postCreate.
                if (this._created) {
                    if (this.autoConfigure) {
                        this.requestConfiguration();
                    }
                }
            }
        },
        _getConfigurationProviderAttr: function () {
            return this._configurationProvider;
        },
        _setFilterGroupAttr: function (value) {
            if (this._filterSubscriptions) {
                array.forEach(this._filterSubscriptions, function (subscription) {
                    this.unsubscribe(subscription);
                }, this);
            }

            this._filterGroup = value;
            this.set('filterManager', new FilterManager({
                filterGroup: this._filterGroup
            }));
            this._filterSubscriptions = [];
            this._filterSubscriptions.push(this.subscribe(dojo.string.substitute("/ui/filters/${0}/change", [this._filterGroup]), this._onFilterChange));

            // Delay for at least 1 second without input (matches checkbox filter)
            var lazyRefresh = util.debounce(lang.hitch(this, this._onFilterRefresh), this.FILTER_UPDATE_DELAY);
            this._filterSubscriptions.push(this.subscribe(dojo.string.substitute("/ui/filters/${0}/refresh", [this._filterGroup]), lazyRefresh));
            this._ensureApplyFilterWasPublished();
        },
        _ensureApplyFilterWasPublished: function (direct) {
            // Hack: If we missed the filters/apply event, we will force the group context service to fire it.
            var service, context;
            service = Sage.Services.getService('ClientGroupContext');
            context = service && service.getContext();
            if (context && context.AppliedFilterInfo) {
                service.publishFiltersApplied(context.AppliedFilterInfo);
            }
            if (this._filterManager && direct && service.applyFilters) {               
               service.applyFilters(this._filterManager);              
            }
        },
        _getFilterGroupAttr: function () {
            return this._filterGroup;
        },
        _setFilterManagerAttr: function (value) {
            if (this._filterManager && this._filterManager !== value) {
                this._filterManager.destroy();
            }

            this._filterManager = value;

            if (this._filterManager) {
                this._filterManager.set('owner', this);
            }
        },
        _getFilterManagerAttr: function () {
            return this._filterManager;
        },
        _onFilterChange: function () {
        },
        _onFilterRefresh: function (applied, definitionSet, manager) {
            // todo: add support for summary view
            // todo: turn this off when no filters are applied
            this._listGrid.selection.clear();
            if (this._detailPane) {
                this._detailPane.clear();
            }
            var query = manager.createQuery(),
                key = this._getStoreQueryKey();

            if (this._listMode === 'summary' && this._hasConfigurationForSummary()) {
                this._summaryGrid.queryOptions = this._summaryGrid.queryOptions || {};
                this._summaryGrid.filter(query);
            } else {

                this._listGrid.queryOptions = this._listGrid.queryOptions || {};
                this._listGrid.queryOptions.httpMethodOverride = !!query;
                this._listGrid.filter(query, true);
            }
            this._saveToLocalStorage(key, { store: this._listGrid.store, query: query });
        },
        _setConfigurationAttr: function (configuration) {
            this._applyConfiguration(configuration);
        },
        _getListAttr: function () {
            return this._listGrid;
        },
        _getSummaryAttr: function () {
            return this._summaryGrid;
        },
        _getDetailAttr: function () {
            return this._detailPane;
        },
        _applyConfigurationFailed: function (configuration) {
            // TODO: Maybe we should publish the configuration failed?
            // Group tabs depend on this firing so they can load.
            dojo.publish('/listView/applyConfiguration', this);
        },
        _applyConfiguration: function (configuration) {
            //this._onLViewConfigChanging();
            dojo.publish('/listView/applyConfiguration', this);

            var key = this._getViewStateKey(),
                state = this._getFromLocalStorage(key, this._getViewNS());

            if (state) {
                this.initialGrid = state;
            }

            this._configuration = configuration;
            this._gridContainer.selectChild(this._noConfigurationPane);


            if (this.initialGrid === 'list' && this._hasConfigurationForList()) {
                this.showList();
            }

            if (this._hasConfigurationForSummary()) {
                this._configuration.summary.active = false;
            }

            if (this.initialGrid === 'summary' && this._hasConfigurationForSummary()) {
                if (this._gridContainer.selectedChildWidget === this._noConfigurationPane) {
                    this.showSummary();
                }
            }

            this._applyToolBar();

            if (this._configuration && this._configuration.list && this._configuration.list.selectionMode && this._configuration.list.selectionMode === 'single') {
                this._listGrid.selection.setMode('single');
            } else if (this._configuration && this._configuration.list && this._configuration.list.selectionMode && this._configuration.list.selectionMode === 'none') {
                this._listGrid.selection.setMode('none');
            } else {
                this._listGrid.selection.setMode('extended');
            }
            
        },
        _applyToolBar: function () {
            var toolBarItems, i, items;

            if (this._tbarCustom) {
                toolBarItems = this._tbar.getChildren();
                for (i = 0; i < toolBarItems.length; i++) {
                    if (toolBarItems[i].custom) {
                        this._tbar.removeChild(toolBarItems[i]);
                    }
                }

                this._tbarCustom = false;
            }

            if (this._toolbarApplied && !this._configuration.updateToolBar) {
                return;
            }

            if (this._configuration && this._configuration.toolBar) {
                items = this._configuration.toolBar.items || [];
                if (items.length > 0) {
                    this._tbarCustom = true;
                }

                for (i = 0; i < items.length; i++) {
                    if (items[i].icon || items[i].imageClass) {
                        this._tbar.addChild(new Sage.UI.ImageButton(items[i]), i);
                    } else {
                        this._tbar.addChild(new dijit.form.Button(items[i]), i);
                    }
                }
            }

            this._toolbarApplied = true;
        },
        _setDetailPaneVisibility: function (value) {
            if (value) {
                if (this._hasConfigurationForDetail() && !this._isConfigurationActiveForDetail()) {
                    if (this._detailPane.isInstanceOf(_DetailPane)) {
                        this._detailPane.set('configuration', this._configuration.detail);
                    }

                    this._configuration.detail.active = true;
                }
                this._detailButton.set('label', this.hideDetailText);
                this.addChild(this._detailPane);
                //Set the first selected Record on the list grid.
                var selected = this._getSelection(0);
                if (selected) {
                    this._detailPane._onSelected(selected.rowIndex, selected, this._listGrid);
                }
                else {
                    this._detailPane.clear();
                }

            } else {
                this._detailButton.set('label', this.detailText);
                this.removeChild(this._detailPane);
            }
        },
        _getSelection: function (index) {
            var sels = this._listGrid.selection.getSelected();
            var selection = null;
            for (var i = 0; i < sels.length; i++) {
                if (index == i) {
                    selection = sels[i];
                    return selection;
                }
            }
            return selection;
        },
        _updateToolbarItemVisibility: function () {
            dojo.toggleClass(this.domNode, 'list-panel-has-summary', this._hasConfigurationForSummary());
            dojo.toggleClass(this.domNode, 'list-panel-has-detail', this._canShowDetailPane());
        },
        _canShowDetailPane: function () {
            return (this._hasConfigurationForDetail() && ((this._gridContainer.selectedChildWidget !== this._summaryGrid) || this.detailOnSummary));
        },
        _shouldShowDetailPane: function () {
            return (this._canShowDetailPane() && this.detailVisible);
        },
        _hasConfigurationForList: function () {
            return (this._configuration && this._configuration.list);
        },
        _hasConfigurationForSummary: function () {
            return (this._configuration && this._configuration.summary);
        },
        _hasConfigurationForDetail: function () {
            return (this._configuration && this._configuration.detail);
        },
        _isConfigurationActiveForList: function () {
            return (this._hasConfigurationForList() && this._configuration.list.active);
        },
        _isConfigurationActiveForSummary: function () {
            return (this._hasConfigurationForSummary() && this._configuration.summary.active);
        },
        _isConfigurationActiveForDetail: function () {
            return (this._hasConfigurationForDetail() && this._configuration.detail.active);
        },
        _onRowClick: function (e) {
            this.onRowClick(e.rowIndex, e.grid.getItem(e.rowIndex), e.grid);
        },
        _onRowContextMenu: function (e) {
            var selection = e.grid.selection,
                selected = selection.getSelected();

            if (selected.length === 0) {
                selection.select(e.rowIndex);
            }

            this.onRowContextMenu(e.rowIndex, e.grid.getItem(e.rowIndex), e.grid);
        },
        _onSelectedInList: function (index) {
            this.onSelected(index, this._listGrid.getItem(index), this._listGrid);
        },
        _onSelectedInSummary: function (index) {
            this.onSelected(index, this._summaryGrid.getItem(index), this._summaryGrid);
        },
        _onSelectionChanged: function () {
            dojo.publish('/sage/ui/list/selectionChanged', this);
            this.onSelectionChanged();
        },
        _onResizeColumn: function (columnIndex) {
            // Handle size storage
            var grid = this._listGrid,
                cell = grid.getCell(columnIndex),
                value = cell.unitWidth,
                key = this._getColumnSizeKey(cell.field);

            this._saveToLocalStorage(key, value);
            this._doAutoFitColumns();
        },
        _onHeaderCellClick: function (e) {
            // Handle sort storage
            var grid = this._listGrid,
                key = this._getGridSortKey(),
                value,
                sortProps = grid.getSortProps();

            grid.selection.clear();

            if (sortProps && sortProps.length > 0) {
                // sortProps is an array of objects:
                // { attribute: 'Cell Name', descending: true/false }
                value = sortProps[0];
                value.cellIndex = e.cell.index;

                //if cell has no sort then don't save.
                if (e.cell.nosort) { return; }

                this._saveToLocalStorage(key, value);
            }
        },
        _onRowDblClick: function (e) {
            if (this._configuration.list.onNavigateToDefaultItem) {
                if (e.rowIndex > -1) {
                    var item = e.grid._by_idx[e.rowIndex].item;
                    this._configuration.list.onNavigateToDefaultItem(item);
                }
            }
        },
        _onCellClick: function (e) {
            var i,
                inc = 1,
                selected = e.grid.selection.isSelected(e.rowIndex),
                newSelected;

            if (has("ie") > 8) {
                try {
                    var selection = document.getSelection();
                    if (selection && selection.removeAllRanges) {
                        selection.removeAllRanges();
                    }
                } catch (err) { }
            }
            // If we click the other cells, "pretend" we clicked the row select cell checkbox
            if (e.grid.rowSelectCell) {
                if (e.grid.rowSelectCell.index !== e.cell.index) {
                    if (e.shiftKey === true && e.grid.rowSelectCell.lastClickRowIdx !== e.rowIndex) {
                        // Shift is being held, select from previous click to this
                        // last 0 -> current 10 we need to increment up (set inc to positive)
                        // last 10 -> current 0 we need to increment down (set inc to negative)
                        if (e.grid.rowSelectCell.lastClickRowIdx > e.rowIndex) {
                            inc = -1;
                        }

                        for (i = e.grid.rowSelectCell.lastClickRowIdx; i !== e.rowIndex; i += inc) {
                            e.grid.rowSelectCell.toggleRow(i, true);
                        }

                        e.grid.rowSelectCell.toggleRow(e.rowIndex, true);
                    } else {
                        e.grid.rowSelectCell.toggleRow(e.rowIndex, !selected);
                        if (this._shouldShowDetailPane() && selected) {
                            newSelected = this._getSelection(0);
                            if (newSelected) {
                                this._detailPane._onSelected(newSelected.rowIndex, newSelected, e.grid);
                            }
                            else {
                                this._detailPane.clear();
                            }
                        }
                    }

                    e.grid.rowSelectCell.lastClickRowIdx = e.rowIndex;
                }
                else {
                    if (this._shouldShowDetailPane() && selected) {
                        // This is a hack since the selection from the check box is changed some where else.
                        // So we clear it to get the next selection then set it back so the event form the check box un togeles the selection correctly.
                        e.grid.rowSelectCell.toggleRow(e.rowIndex, !selected);
                        newSelected = this._getSelection(0);
                        e.grid.rowSelectCell.toggleRow(e.rowIndex, selected);
                        if (newSelected) {
                            this._detailPane._onSelected(newSelected.rowIndex, newSelected, e.grid);
                        }
                        else {
                            this._detailPane.clear();
                        }
                    }
                }
            }
        },
        _saveToLocalStorage: function (key, value, namespace) {
            var localStore;

            try {
                localStore = new LocalStorageProvider();
                localStore.initialize();

                if (!namespace) {
                    namespace = this._getGroupNS();
                }

                namespace = this._makeValidNamespace(namespace);
                localStore.put(key, value, function (status, key, message) {
                    if (status === localStore.FAILED) {
                        console.error('Failed writing key: ' + key + ' in local storage. Message: ' + message);
                    }
                }, namespace);
            } catch (err) {
                console.error(err);
            }
        },
        _getFromLocalStorage: function (key, namespace) {
            var localStore, results;

            try {
                localStore = new LocalStorageProvider();
                localStore.initialize();
                if (!namespace) {
                    namespace = this._getGroupNS();
                }

                namespace = this._makeValidNamespace(namespace);
                results = localStore.get(key, namespace); // returns null if key does not exist.
            } catch (err) {
                console.error(err);
            }

            return results;
        },
        _makeValidNamespace: function (ns) {
            // This is similar to the regex dojo uses to validate a valid namespace,
            // except we replace anything that would be invalid with a dash.
            // See: https://github.com/dojo/dojox/blob/1.7.3/storage/LocalStorageProvider.js
            return ns.replace(/[^0-9^A-Z^a-z^\-]/g, '-');
        },
        _getGroupNS: function () {
            var ns = Sage.Groups.GroupManager.LOCALSTORE_NAMESPACE + '-' + this._getGroupID();
            return ns;
        },
        _getViewNS: function () {
            var ns = Sage.Groups.GroupManager.LOCALSTORE_NAMESPACE + '-' + this._getMainViewName();
            return ns;
        },
        _getGroupID: function () {
            var service = Sage.Services.getService("ClientGroupContext"),
                results = -1,
                context = null;
            if (service) {
                context = service.getContext();
                if (context) {
                    results = context.CurrentGroupID;
                }
            }

            return results;
        },
        _getMainViewName: function () {
            if (this._configurationProvider._mainViewName) {
                return this._configurationProvider._mainViewName;
            }
            //if not defined then use the group context.
            var service = Sage.Services.getService("ClientGroupContext"),
                results = -1,
                context = null;
            if (service) {
                context = service.getContext();
                if (context) {
                    results = context.CurrentEntity;
                }
            }
            return results;
        },
        _getColumnSizeKey: function (columnName) {
            var stripped = columnName.replace(/[\.\$]/g, '_'),
                id = this._listGrid.id + '_' + this._configuration.list.id + '_' + this.STORE_KEY_COLUMN_SIZE + stripped;
            return id;
        },
        _getGridSortKey: function () {
            return this._keyGen(this.STORE_KEY_SORT_INFO);
        },
        _getGridLayoutKey: function () {
            return this._keyGen(this.STORE_KEY_LAYOUT_INFO);
        },
        _getGridColumnToggleKey: function () {
            return this._keyGen(this.STORE_KEY_TOGGLE_INFO);
        },
        _getViewStateKey: function () {
            return this.STORE_KEY_VIEWSTATE;
        },
        _getStoreQueryKey: function () {
            var id = this.STORE_KEY_STORE_QUERY + this._getGroupID();
            return id;
        },
        _keyGen: function (keyPart) {
            var id = this._listGrid.id + keyPart + this._configuration.list.id;
            return id;
        },
        _onListScroll: function () {
            this._onScroll(this._listGrid.scroller);
        },
        _onSummaryScroll: function () {
            this._onScroll(this._summaryGrid.scroller);
        },
        _onScroll: function (scroller) {
            var firstrow,
                lastrow,
                count,
                lbl;

            if (this._tbarLabel) {
                count = scroller.rowCount;
                if (count <= 0) {
                    firstrow = 0;
                    lastrow = 0;
                    count = 0;
                } else {
                    firstrow = (scroller.firstVisibleRow === 0) ? 1 : scroller.firstVisibleRow + 1;
                    lastrow = (scroller.lastVisibleRow >= scroller.rowCount) ? scroller.rowCount : scroller.lastVisibleRow + 1;
                }

                lbl = dojo.string.substitute('${0} ${1} - ${2} ${3} ${4}', [this.displayingText, firstrow, lastrow, this.ofText, count]);
                this._tbarLabel.set('label', lbl);
            }
        },
        _markDirty: function (entity) {
            // this doesn't work because dojo renders the html for the row after this event has run.
            // So, we need to override the render row and check if the entity is dirty and add the
            // class at that point.
            //				if (entity) {
            //					var idx = this._listGrid.getItemIndex(entity);
            //					if (idx && idx > -1) {
            //						var row = this._listGrid.getRowNode(idx);
            //						//row = row.firstChild;
            //						if (row) {
            //							dojo.addClass(row, 'row_unsaved_changes');
            //						}
            //					}
            //				}
            this._unsavedDataLabel.set('style', 'display:inline');
        },
        _markClean: function () {
            this._unsavedDataLabel.set('style', 'display:none');
        },
        getTotalSelectionCount: function () {
            var totalCount = 0,
                sel;

            if (this._listMode === 'list') {
                this._configuration.list.active = true; //active is getting nulled out some how?
            }


            if (!this._isConfigurationActiveForList() || !this._listGrid) {
                return [];  //selections only valid for list mode
            }

            sel = this._listGrid.selection;
            if (sel) {
                totalCount = sel.getSelectedCount();
            }

            return totalCount;
        },
        getSelectionInfo: function (includeEntity) {
            var recordCount,
                selectionCount,
                selectionKey,
                mode,
                selections,
                groupContextSvc,
                keyField,
                hasCompositeKey,
                sels,
                selectedIds = [],
                i,
                selectionInfo;

            if (this._listMode === 'list') { //active is getting nulled out some how?
                this._configuration.list.active = true;
            }

            if (!this._isConfigurationActiveForList() || !this._listGrid) {
                return [];  //selections only valid for list mode
            }

            recordCount = this._listGrid.rowCount || 0;
            selectionCount = this.getTotalSelectionCount();
            selectionKey = this.id;
            mode = 'selection';
            selections = [];
            groupContextSvc = Sage.Services.getService('ClientGroupContext');
            keyField = (groupContextSvc) ? groupContextSvc.getContext().CurrentTableKeyField || '' : '';
            if (this._configuration.hasCompositeKey) {
                hasCompositeKey = this._configuration.hasCompositeKey;
            }
            else {

                hasCompositeKey = false;
            }

            sels = this._listGrid.selection.getSelected();
            selectedIds = [];

            for (i = 0; i < sels.length; i++) {
                if (sels[i]) {
                    var selectionsObj = {
                        rn: 0, //ToDo: do we need SLXRN?  No, but removing requires modifications to Sage.SalesLogix.SelectionService, which could potentially break customizations
                        id: sels[i][keyField]
                    };
                    if (includeEntity) {
                        selectionsObj['entity'] = sels[i];
                    }
                    selections.push(selectionsObj);
                    //we still want to store the ids as an array
                    selectedIds.push(sels[i][keyField]);
                }
            }

            selectionInfo = {
                key: selectionKey,
                mode: mode,
                selectionCount: selectionCount,
                recordCount: recordCount,
                sortDirection: '', // sortDirection,  //ToDo: find these... <---<<<   <---<<<
                sortField: '', // sortField,
                keyField: keyField,
                hasCompositeKey: hasCompositeKey,
                ranges: [], // ranges, //ranges are leftover from the Ext grid - the dojo grid does not use ranges, when a large range is selected, it fetches all the data...
                selections: selections,
                selectedIds: selectedIds
            };

            return selectionInfo;
        },
        requestConfiguration: function () {
            ready(lang.hitch(this, function() {
                if (this._configurationProvider) {
                    this._configurationProvider.requestConfiguration({
                        success: lang.hitch(this, this._applyConfiguration),
                        failure: lang.hitch(this, this._applyConfigurationFailed)
                    });
                }
            }));
        },
        refreshView: function () {
            if (this._configuration.rebuildOnRefresh) {
                this.requestConfiguration();
            }
            this.refreshList();
            dojo.publish('/listView/refresh', this);
        },
        refreshList: function (listId) {
            if (this._listMode !== 'list') {
                this.refreshSummary();
                return;
            }

            if (!listId) {
                this._listGrid._refresh();
            } else {
                if (this._configuration._listId === listId) {
                    this._listGrid._refresh();
                }
            }

            if (this._listGrid && this._listGrid.selection) {
                this._listGrid.selection.clear();
            }

            if (this._detailPane) {
                this._detailPane.clear();
            }
        },
        refreshSummary: function () {
            if (this._hasConfigurationForSummary() && (this._listMode !== 'list')) {
                this._summaryGrid._refresh();
            }
        },
        showHelp: function () {
            util.openHelp(this.helpTopicName);
        },
        refreshGrid: function () {
            // Fired from refreshButton
            this._listGrid.selection.clear();
            this.refreshList();
            this.refreshSummary();
        },
        showList: function () {
            var query,
                queryOptions,
                regionChildItems,
                menuItem,
                i,
                cMenu,
                cMenuItems,
                curChildItems,
                store,
                key,
                viewStateKey,
                centerContent;

            this._listMode = 'list';

            if (!this._hasConfigurationForList()) {
                return;
            }

            viewStateKey = this._getViewStateKey();
            this._saveToLocalStorage(viewStateKey, 'list', this._getViewNS());

            this._ensureApplyFilterWasPublished(true);

            query = this._filterManager.createQuery();
            key = this._getStoreQueryKey();
            queryOptions = this._listGrid.queryOptions || {};
            queryOptions.httpMethodOverride = !!query;
            this._setSortInfo(this._configuration.list.store);

            if (this._configuration.list.rowsPerPage > 0) {
                this._listGrid.set('rowsPerPage', this._configuration.list.rowsPerPage);
            }

            //this._listGrid.setStore(this._configuration.list.store, query, queryOptions);
            //Broke this out of setStore() method so the grid would not refresh untill the structure isset for sort order,
            //and then refesh grid after structure is set.
            this._listGrid._setStore(this._configuration.list.store);
            this._listGrid._setQuery(query, queryOptions);
            //
            this._saveToLocalStorage(key, { store: this._configuration.list.store, query: query });
            if (this._listGrid.structure !== this._configuration.list.structure) {
                this._setColumnSizes(this._configuration.list.structure);
                this._listGrid.set('structure', this._configuration.list.structure);
                this._doAutoFitColumns();
                // override structure from local storage (if any)
                this._updateStructureFromLocalStore();
            }

            //Refresh grid since we are going around the setStore method and using _setStore instead.
            this._listGrid._refresh(true);

            if (!this._isConfigurationActiveForList()) {
                if (this._dataChangeWatchers.length > 0) {
                    array.forEach(this._dataChangeWatchers, dojo.disconnect);
                    this._dataChangeWatchers = [];
                }


                if (this._configuration.list.formatterScope && (this._listGrid.formatterScope !== this._configuration.list.formatterScope)) {
                    this._listGrid.set('formatterScope', this._configuration.list.formatterScope);
                }

                if (this._configuration.rebuildMenus) {
                    regionChildItems = this._listGrid.selectedRegionMenu.getChildren();
                    for (i = 0; i < regionChildItems.length; i++) {
                        menuItem = regionChildItems[i];
                        this._listGrid.selectedRegionMenu.removeChild(menuItem);
                    }
                }

                cMenuItems = this._configuration.list.selectedRegionContextMenuItems || [];
                if (cMenuItems.length > 0) {
                    curChildItems = this._listGrid.selectedRegionMenu.getChildren();
                    if (curChildItems.length !== cMenuItems.length) {
                        cMenu = this._listGrid.selectedRegionMenu;
                        for (i = 0; i < cMenuItems.length; i++) {
                            cMenu.addChild(cMenuItems[i]);
                        }

                        if (this._configuration.list.onSelectedRegionContextMenu) {
                            if (this._contextConnects) {
                                array.forEach(this._contextConnects, dojo.disconnect);
                            }
                            this._contextConnects = [];
                            this._contextConnects.push(dojo.connect(this._listGrid, 'onRowContextMenu', this._configurationProvider, this._configuration.list.onSelectedRegionContextMenu));
                        }
                    }
                }

                store = this._listGrid.store;
                if (store && store !== null) {
                    if (store.features.hasOwnProperty('dojo.data.api.Write')) {
                        this._dataChangeWatchers.push(dojo.connect(store, 'onSet', this, function (entity, attribute, oldValue, newValue) {
                            if (oldValue !== newValue) {
                                this._markDirty(entity);
                            }
                        }));

                        if (store.onDataReset) {
                            this._dataChangeWatchers.push(dojo.connect(store, 'onDataReset', this, '_markClean'));
                        }
                    }
                }

                //this._configuration.list.active = true;
            }
            this._configuration.list.active = true;
            this._gridContainer.selectChild(this._listGrid);
            this._setDetailPaneVisibility(this._shouldShowDetailPane());
            this._updateToolbarItemVisibility();

            centerContent = registry.byId('centerContent');
            //connect.connect(centerContent, 'resize', this, this._doAutoFitColumns, false);
        },
        showSummary: function () {
            var viewStateKey,
                query;
            this._listMode = 'summary';
            if (!this._hasConfigurationForSummary()) {
                return;
            }

            query = this._filterManager.createQuery();

            this._setSummarySortInfo(this._configuration.summary.store);

            this._summaryGrid.setStore(this._configuration.summary.store, query);
            this._summaryGrid.setStructure(this._configuration.summary.structure);
            // For some reason the lastVisibleRow index is 0 unless resize is called...
            dojo.connect(this._summaryGrid, '_onFetchComplete', this, lang.hitch(this, function () { this._summaryGrid.resize(); }));

            if (this._listGrid.selection) {
                this._listGrid.selection.clear();
            }


            if (!this._isConfigurationActiveForSummary()) {
                viewStateKey = this._getViewStateKey();
                this._saveToLocalStorage(viewStateKey, 'summary', this._getViewNS());

                if (this._configuration.summary.hasOwnProperty('rowHeight')) {
                    this._summaryGrid.set('rowHeight', this._configuration.summary.rowHeight);
                }

                if (this._configuration.summary.hasOwnProperty('rowsPerPage')) {
                    this._summaryGrid.set('rowsPerPage', this._configuration.summary.rowsPerPage);
                }

                if (this._configuration.summary.hasOwnProperty('formatterScope')) {
                    this._summaryGrid.set('formatterScope', this._configuration.summary.formatterScope);
                }

                this._summaryGrid.canSort = function (col) {
                    return false;
                };
                this._configuration.summary.active = true;
            }

            this._gridContainer.selectChild(this._summaryGrid);
            this._setDetailPaneVisibility(this._shouldShowDetailPane());
            this._updateToolbarItemVisibility();
        },
        toggleDetail: function () {
            if (!this._hasConfigurationForDetail()) {
                return;
            }

            this.detailVisible = !this.detailVisible;

            this._setDetailPaneVisibility(this._shouldShowDetailPane());
        },
        onRowClick: function (index, row, grid) {
        },
        onRowContextMenu: function (index, row, grid) {
        },
        onSelected: function (index, row, grid) {
        },
        onSelectionChanged: function () {
        },
        resolveProperty: function (propertyName, dataPath /* optional */) {
            var list = this._configuration && this._configuration.list,
                layout = list && list.layout,
                tableAliases = (list && list.tableAliases) || {},
                i,
                item,
                table,
                tableAlias,
                propertyPathSplit,
                propertyNameSplit,
                joinChars = ['<', '>'];


            if (layout) {
                // todo: cache this information
                for (i = 0; i < layout.length; i++) {
                    item = layout[i];

                    // Extract the property name out if in form:
                    // Account.AccountName
                    propertyPathSplit = item.propertyPath && item.propertyPath.split('.');
                    if (propertyPathSplit && propertyPathSplit.length === 2) {
                        propertyPathSplit = propertyPathSplit[1];
                    } else if (propertyPathSplit && propertyPathSplit.length === 1) {
                        propertyPathSplit = propertyPathSplit[0];
                    }

                    propertyNameSplit = propertyName && propertyName.split('.');
                    if (propertyNameSplit && propertyNameSplit.length === 2) {
                        propertyNameSplit = propertyNameSplit[1];
                    } else if (propertyNameSplit && propertyNameSplit.length === 1) {
                        propertyNameSplit = propertyNameSplit[0];
                    }

                    // The filter datapath will be inner, compare against that
                    if (item.dataPath) {
                        array.forEach(joinChars, function (c) {
                            item.dataPath = item.dataPath.replace(c, '=');
                        });
                    }

                    if (item.propertyPath === propertyName || (dataPath && item.dataPath === dataPath) || propertyPathSplit === propertyNameSplit) {
                        if (/^[a-z]\d+_/i.test(item.alias)) {
                            return item.alias;
                        }

                        table = item.dataPath && item.dataPath.split(':')[0];
                        tableAlias = table && tableAliases[table.toUpperCase()];
                        if (tableAlias) {
                            return tableAlias + '.' + item.alias;
                        }

                        return item.alias;
                    }
                }
            }

            return propertyName;
        }
    });

    return listPanel;
});

},
'Sage/Data/GroupLayoutSingleton':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define, sessionStorage */
define("Sage/Data/GroupLayoutSingleton", [
        'dojo/_base/declare',
        'dojo/_base/array',
        'dojo/_base/lang',
        'Sage/Data/SDataServiceRegistry',
        'dojo/ready',
        'dojo/json'
    ],
function (
        declare,
        array,
        lang,
        SDataServiceRegistry,
        ready,
        json
    ) {
    var m = declare('Sage.Data.GroupLayoutSingleton', null, {
        data: {},
        _fetchCache: {},
        _registeredOnSuccess: {},
        _registeredOnFailure: {},
        _baseCacheKey: 'GROUPLAYOUT_',
        constructor: function () {
        },
        /* TODO: Make this a common pattern. Change groupId to a key. Allow caller to pass
         * in a request and/or service. Something like:
         * getData : function(key, sdataRequest, onSuccess, onFailure) { }
         */
        getGroupLayout: function (groupPredicate, onSuccess, onFailure, groupId) {
            var service = SDataServiceRegistry.getSDataService('system'),
                request = new Sage.SData.Client.SDataSingleResourceRequest(service),
                regOnSuccess = this._registeredOnSuccess[groupId],
                regOnFail = this._registeredOnFailure[groupId],
                cacheKey = this._baseCacheKey + groupId,
                cacheData = null;

            if (groupId !== "LOOKUPRESULTS") {
                cacheData = sessionStorage.getItem(cacheKey);
            }

            if (cacheData) {
                this.data[groupId] = json.parse(cacheData);
            }

            if (this.data[groupId]) {
                // If we have the data already,
                // don't register the callback and just return it to the caller.
                if (typeof onSuccess === 'function') {
                    onSuccess(this.data[groupId]);
                }
                return;
            }

            if (!regOnSuccess) {
                this._registeredOnSuccess[groupId] = [];
                regOnSuccess = this._registeredOnSuccess[groupId];
            }

            if (!regOnFail) {
                this._registeredOnFailure[groupId] = [];
                regOnFail = this._registeredOnFailure[groupId];
            }

            regOnSuccess.push(onSuccess);
            regOnFail.push(onFailure);

            // Bail out if we are in the middle of a request,
            // to prevent multiple requests for this data.
            if (this._fetchCache[groupId]) {
                return;
            } else {
                this._fetchCache[groupId] = true;
            }

            request.setResourceKind('groups');
            request.setResourceSelector(groupPredicate);
            request.setQueryArg('include', 'layout,tableAliases');

            request.read({
                success: lang.hitch(this, this._onSuccess, groupId),
                failure: lang.hitch(this, this._onFailure, groupId)
            });
        },
        _onSuccess: function(groupId, data) {
            var regOnSuccess = this._registeredOnSuccess[groupId];
            if (regOnSuccess) {
                array.forEach(regOnSuccess, function (cb) {
                    if (typeof cb === 'function') {
                        cb(data);
                    }
               });
            }

            if (groupId !== 'LOOKUPRESULTS') {
                this.data[groupId] = data;
            }
            sessionStorage.setItem(this._baseCacheKey + groupId, json.stringify(data));
            this._doneFetching(groupId);
        },
        _onFailure: function (groupId, err) {
            var regOnFail = this._registeredOnFailure[groupId];
            if (regOnFail) {
                array.forEach(regOnFail, function (cb) {
                    if (typeof cb === 'function') {
                        cb(err);
                    }
                });
            }

            this._doneFetching(groupId);
        },
        _doneFetching: function (groupId) {
            this._registeredOnSuccess[groupId] = [];
            this._registeredOnFailure[groupId] = [];
            this._fetchCache[groupId] = false;
        }
    });
    return m;
});
},
'Sage/QuickForms/Design/Editors/nls/GenericAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/GenericAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            controlInfoText: "Control Info",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/DataGridBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/DataGridBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/DataGridBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.DataGridBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset style="display:none;"><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.pageSizeTooltipText %}">',
                        '<label>{%= $.pageSizeText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_pageSize" data-dojo-attach-event="onChange:_onPageSizeChange" data-dojo-props="constraints:{min:0,max:1000,places:0}"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.resizableColumnsTooltipText %}">',
                        '<label>{%= $.resizableColumnsText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_resizableColumns" data-dojo-attach-event="onChange:_onResizableColumnsChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _pageSize: null,
        _resizableColumns: null,

        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        dataText: 'Data',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        pageSizeText: 'Page Size:',
        pageSizeTooltipText: 'The number of grid records to display on a single page.',
        resizableColumnsText: 'Resizable Columns:',
        resizableColumnsTooltipText: 'Allows user to resize columns.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._pageSize.set('value', this._designer.get('pageSize'));
            this._resizableColumns.set('value', this._designer.get('resizableColumns'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            };
            this._designer.set('captionAlignment', value);
        },
        _onPageSizeChange: function(value){
            if (this.isSuspended() || !this._pageSize.isValid()) return;
            this._designer.set('pageSize', value);
        },
        _onResizableColumnsChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('resizableColumns', value);
        }
    });
});
},
'Sage/MainView/ActivityMgr/QuickCompleteEditor':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/ActivityMgr/QuickCompleteEditor", [
        'dijit/_Widget',
        'Sage/_Templated',
        'dijit/layout/ContentPane',
        'dijit/form/Textarea',
        'Sage/UI/TextBox',
        'Sage/UI/Controls/DateTimePicker',
        'dijit/form/FilteringSelect',
        'Sage/UI/SDataLookup',
        'dojox/layout/TableContainer',
        'Sage/UI/Controls/SingleSelectPickList',
        'dijit/Dialog',
        'dojo/_base/declare',
        'dojo/i18n!./nls/QuickCompleteEditor'
],

function (
    _Widget,
    _Templated,
    ContentPane,
    Textarea,
    TextBox,
    DateTimePicker,
    FilteringSelect,
    SDataLookup,
    TableContainer,
    SingleSelectPickList,
    Dialog,
    declare,
    nlsResources
) {

    //dojo.requireLocalization("Sage.MainView.ActivityMgr", "QuickCompleteEditor");
    var quickCompleteEditor = declare('Sage.MainView.ActivityMgr.QuickCompleteEditor', [_Widget, _Templated], {

        _currentUserId: null,
        _individuallyHandler: false,
        _nowHandler: false,
        _asScheduledHandler: false,
        _selectionContext: false,
        //l18n strings.
        lblcmdMessageText: '',
        lblInfoMessageText: '',
        lblResultText: 'Result:',
        lblNoteText: 'Note (append to all items):',
        btnCompleteIndividuallyText: 'Individually',
        btnAsScheduledText: 'As Scheduled',
        btnCompleteNowText: 'Now',
        btnCancelText: 'Cancel',
        btnCloseText: 'Close',
        btnHelpText: 'Help',
        resultCompletedText: 'Complete',
        titleText:'Quick Complete',
        //end l18n strings.
        widgetsInTemplate: true,
        selectionContext: null,
        widgetTemplate: new Simplate([
            '<div>',
                 '<div data-dojo-type="dijit.Dialog" id="{%= $.id%}_qucikCompleteDialog" title="Quick Complete" dojoAttachPoint="_dialog" >',
                   '<div class="quickComplete-dialog">', //body
                     '<div data-dojo-type="dijit.layout.ContentPane" id="{%= $.id%}_cp_General" title="" dojoAttachPoint="cp_General">',
                          '<div data-dojo-type="dojox.layout.TableContainer" orientation="horiz" cols="1" class="controlPropForm" labelWidth="140">',
                               '<div id="{%= $.id%}_div_actionMessage"  name="div_actionMessage" dojoAttachPoint="div_actionMessage"></div>',
                               '<br>',
                               '<select label="{%= $. lblResultText %}" id="{%= $.id%}_pk_Result" data-dojo-type="Sage.UI.Controls.SingleSelectPickList" dojoAttachPoint="pk_Result" canEditText="true" itemMustExist="false" pickListName="To Do Result Codes" ></select>',
                                '<div data-dojo-type="dijit.form.SimpleTextarea"" label="{%= $.lblNoteText %}" id="{%= $.id%}_ta_Note" name="tb_Note" dojoAttachPoint="ta_Note"></div>',
                           '</div>',
                          '<br>',
                          '<div id="{%= $.id%}_div_cmdMessage"  name="div_cmdMessage" dojoAttachPoint="div_cmdMessage" style="font-weight:bold"></div>',
                          '<br>',
                          '<div class="button-bar alignright">',
                              '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_CompleteIndividually" name="btn_CompleteIndividually" dojoAttachPoint="btn_CompleteIndividually" dojoAttachEvent="onClick:_onCompleteIndividually" style="align:left" >{%= $.btnCompleteIndividuallyText %}</div>',
                              '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_btnAsScheduled" name="btn_AsScheduled" dojoAttachPoint="btn_AsScheduled" dojoAttachEvent="onClick:_onAsScheduled">{%= $.btnAsScheduledText %}</div>',
                              '<div data-dojo-type="dijit.form.Button" id="{%= $.id%}_btn_CompleteNow" name="btn_CompleteNow" dojoAttachPoint="btn_CompleteNow" dojoAttachEvent="onClick:_onCompleteNow">{%= $.btnCompleteNowText %}</div>',
                              '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_Cancel" name="btn_Cancel" dojoAttachPoint="btn_Cancel" dojoAttachEvent="onClick:_cancelClick">{%= $. btnCancelText %}</div>',
                          '</div>',
                      '</div>',
                      '<div data-dojo-type="dijit.layout.ContentPane" id="{%= $.id%}_cp_processing" title="" dojoAttachPoint="cp_processing">',
                           '<div id="{%= $.id%}_div_processingMessage"  name="div_processingMessage" dojoAttachPoint="div_processingMessage"></div>',
                          '<div class="button-bar alignright">',
                             '<div data-dojo-type="dijit.form.Button"  id="{%= $.id%}_btn_Close" name="btn_Close" dojoAttachPoint="btn_Close" dojoAttachEvent="onClick:_cancelClick">{%= $. btnCloseText %}</div>',
                          '</div>',
                      '</div>',
                  '</div>',
                '</div>',
           '</div>'
        ]),
        constructor: function (config) {
            dojo.mixin(this, nlsResources);
            this._currentUserId = Sage.Utility.getClientContextByKey('userID') || '';
        },
        destroy: function () {
            this._dialog.destroyRecursive();
            this.destroyRecursive();
        },
        show: function () {

            if (this.selectionContext) {
                this.div_actionMessage.innerHTML = String.format('Only activities that you have permission to complete will be completed.');
                this.div_cmdMessage.innerHTML = String.format('Complete all {0} selected activities:', this.selectionContext.count);
                this._dialog.set('title', this.titleText);
            }

            //this.pk_Result.set('value', this.resultCompletedText);
            dojo.style(this.cp_processing.domNode, "display", "none");
            this._dialog.show();
        },
        hide: function () {
            // this._dialog.hide();
            this.destroy();
        },
        resize: function () {

        },
        _showProcessing: function () {
            dojo.style(this.cp_General.domNode, "display", "none");
            dojo.style(this.cp_processing.domNode, "display", "block");
            this.div_processingMessage.innerHTML = String.format(' Processing all {0} selected activities please wait...', this._selectionContext.count);
        },

        // ... region click/action handlers
        _onCompleteIndividually: function () {
            this.onCompleteIndividually();
            this._dialog.hide();
        },
        _onCompleteNow: function () {
            this._showProcessing();
            var options = {
                //scope: this,
                selectionContext: this.selectionContext,
                note: this.ta_Note.value,
                resultCode: this.pk_Result.get('value')
            };
            this.onCompleteNow(options);
            //           if(this._nowHandler){
            //              this._nowHandler(options);           
            //           }
            this._dialog.hide();
        },
        _onAsScheduled: function () {
            this._showProcessing();
            var options = {
                //scope: this,
                selectionContext: this.selectionContext,
                note: this.ta_Note.value,
                resultCode: this.pk_Result.get('value')
            };
            this.onCompleteAsScheduled(options);
            //           if(this._asScheduledHandler){
            //              this._asScheduledHandler(options);           
            //           }
            this._dialog.hide();
        },
        _cancelClick: function () {
            this.onCancel();
            this._dialog.hide();
        },
        onCompleteIndividually: function () { },
        onCompleteNow: function (args) { },
        onCompleteAsScheduled: function (args) { },
        onCancel: function () { }

        // ... endregion      

    });
    return quickCompleteEditor;
});
},
'Sage/QuickForms/Design/Editors/CurrencyBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/CurrencyBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/CurrencyBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.CurrencyBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,

        //Localization
        titleText: 'Basic',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) {
                return;
            }
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'Sage/UI/Controls/MultiSelectPickList':function(){
require({cache:{
'url:Sage/UI/Controls/templates/MultiSelectPickList.html':"<div>\r\n    <input id=\"${id}-TextBox\" data-dojo-type=\"dijit.form.TextBox\" data-dojo-attach-point=\"textNode\" data-dojo-attach-event=\"onBlur: _onTextBlur\" />\r\n    <div id=\"${id}-Button\" data-dojo-type=\"dijit.form.DropDownButton\" data-dojo-attach-point=\"dropDownButtonNode\">\r\n        <span></span>\r\n        <div class=\"multiSelectPickListDialog\" id=\"${id}-ToolTipDialog\" data-dojo-type=\"dijit.TooltipDialog\" data-dojo-attach-point=\"tooltipDialogNode\" data-dojo-attach-event=\"onClose: _onTooltipClose, onShow: _onTooltipShow\">\r\n            <div data-dojo-attach-point=\"tooltipContainer\" style=\"height:200px; overflow-y:auto;\">\r\n            \r\n            </div>\r\n            \r\n            <div style=\"width: 100%; text-align:right\">\r\n                <p>\r\n                    <button id=\"${id}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\">${okText}</button>\r\n                <p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/MultiSelectPickList", [
       'dojo/_base/array',
       'dijit/_TemplatedMixin',
       'dijit/_WidgetsInTemplateMixin',
       'dijit/_Widget',
       'dijit/form/TextBox',
       'dijit/form/DropDownButton',
       'dijit/form/CheckBox',
       'dijit/TooltipDialog',
       'dijit/form/Button',
       'Sage/UI/Controls/PickList',
       'dojo/text!./templates/MultiSelectPickList.html',
       'dojo/_base/declare'
],
function (array, _TemplatedMixin, _WidgetsInTemplateMixin, _Widget, TextBox, DropDownButton, CheckBox, TooltipDialog, Button, PickList, template, declare) {
    var widget = declare('Sage.UI.Controls.MultiSelectPickList', [PickList, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {

        /**
         * Takes the following options object: 
         * {
         *  pickListName: 'PickListName', // Required
         *  storeOptions: {}, // Optional
         *  dataStore: {}, // Optional
         *  canEditText: false,
         *  itemMustExist: true,
         *  maxLength: -1,
         *  storeMode: 'text', // text, id, code
         *  sort: true,
         *  displayMode: 'AsControl',
         *  clientID: 'ASP.NET Control ClientID Here',
         *  required: false
         * }
         *
         * @constructor
         */
        constructor: function(options) {
            if(options.clientId) {
                this.id = options.clientId + '-MultipleSelectPickList';
            }

            this.inherited(arguments);
        },
        postCreate: function() {
            this._setupTooltips(this.dropDownButtonNode.domNode, this.textNode.domNode);
            
            var def = new dojo.Deferred(),
                len;

            this.getPickListData(def);

            def.then(dojo.hitch(this, function(data) {
                if(typeof data === 'string') {
                    this.textNode.set('value', data);
                    this.dropDownButtonNode.disabled = true;
                }

                var items = [],
                    len = data && data.items && data.items.$resources && data.items.$resources.length,
                    i,
                    item,
                    existingText;
                for(i = 0; i < len; i++) {
                    item = data.items.$resources[i];
                    items.push({
                        id: item.$key,
                        code: item.code,
                        number: item.number,
                        text: item.text
                    });
                }

                this.storeData = {
                    identifier: 'id',
                    label: 'text',
                    items: items
                };

                existingText = dojo.byId(this._textId);
                if(existingText) {
                    this.lastValidValue = existingText.value;
                    this.initialValue = this.lastValidValue;
                } else {
                    if (items.length > 0) {
                        this.lastValidValue = items[0].text;
                    }
                }

                this.textNode.set('value', this.lastValidValue);
                this.initialValues = this.lastValidValue.split(',');
                this.lastValidValues = this.lastValidValue.split(',');

                this._renderFormElements(items);

            }), function(e) {
                // errback
                console.error(e);
            });

            // Adjust control according to properties set in AA

            // Disable textbox to prevent edit
            if(this.get('canEditText') === false) {
                this.textNode.disabled = true;
            }

            len = this.get('maxLength');
            if(len > 0) {
                this.textNode.set('maxLength', len);
            }

            if(this.get('itemMustExist')) {
                this.textNode.isValid = dojo.hitch(this, function(isFocused) {
                    var currentVal = this.textNode.get('value'),
                        split = currentVal.split(','),
                        valid = false;

                    //If every item in the multi-select picklist has a matching item in the store return 'true', else 'false'.
                    valid = array.every(split, function (itemText) {
                        //If the item matches at least one item in the store return 'true', else, 'false.
                        return array.some(this.storeData.items, 
                            function (item) {
                                 return item.text.trim() === itemText.trim();
                            }, 
                            this);
                    }, this);

                    if(valid) {
                        this.lastValidValue = currentVal;
                    } 

                    if(isFocused) {
                        valid = true;
                    }

                    if(!valid) {
                        // Attempt to restore last valid value.
                        if(this.lastValidValue) {
                            this.textNode.set('value', this.lastValidValue);
                            valid = true;
                        }
                    }
                    return valid;
                });
            } else {
                this.textNode.isValid = function(isFocused) { return true; };
            }

            this.inherited(arguments);
        },
        uninitialize: function() {
            this.inherited(arguments);
        },
        /**
         * Returns true if item has been entered and is displayed in the textbox.
         * @function
         */
        _isItemSelected: function(itemToCheck) {
            var currentVal = this.textNode.get('value'),
                results = false,
                split = [];

            if(currentVal) {
                split = currentVal.split(',');
                array.forEach(split, function (item, index, array) {
                    if(itemToCheck.text.trim() === item.trim()) {
                        results = true;
                    }

                }, this);
            }

            return results;
        },
        /**
         * Returns true if the store has an item with the itemText.
         * @function
         */
        _storeHasItem: function(itemText) {
            var results = false;

            results = array.some(this.storeData.items, function (item) {
                if(item.text.trim() === itemText.trim()) {
                    return true;
                }
                return false;
            }, this);

            return results;
        },

        /**
         * Renders form elements in the tooltip dialog.
         * @function
         */
        _renderFormElements: function(items) {
            var node = this.tooltipContainer;

            array.forEach(items, function (item, index, array) {
                var checkBox = new CheckBox({
                        id: this.id + '_checkBox' + index,
                        name: 'checkBox_' + item.text,
                        value: item.text,
                        checked: this._isItemSelected(item)
                    }),
                    label;

                checkBox.startup();

                dojo.place(checkBox.domNode, node, 'last');

                label = dojo.create(
                    'label',
                    {
                        'for': checkBox.id
                    },
                    checkBox.domNode,
                    'after');

                label.innerHTML = item.text;

                dojo.create('br', {}, label, 'after');

            }, this);
            
        },
        _onTextBlur: function() {
            this._updateASPNETFields();
        },
        _updateASPNETFields: function() {
            // Send the values to the hidden ASP.NET fields if we are valid, and the value actually changed.
            if(this.textNode.isValid()) {
                var val = this.textNode.get('value');
                if(val.trim() !== this.initialValue.trim()) {
                    this.setASPNETInputs(val, '');// TODO: Do we need to pass in array of id's here too?
                }
            }
        },
        _onTooltipClose: function() {
            // Update text with what was checked + custom entered data.
            var items = [];
            dojo.query('input', this.tooltipContainer).forEach(function(node) {
                var wid = dijit.byId(node.id),
                    val,
                    checked;
                if(wid) {
                    val = wid.get('value');
                    checked = wid.get('checked');
                    if(checked) {
                        items.push(val);
                    }
                }
            });

            // Add in items not in store
            array.forEach(this.itemsNotInStore, function (itemText) {
                items.push(itemText.trim());
            }, this);

            this.textNode.set('value', items.join(', '));
            this._updateASPNETFields();
        },
        _onTooltipShow: function() {
            this._refreshCheckedItems();
            this._refreshItemsNotInStore();
        },
        /**
         * Refreshes the itemsNotInStore array with what is currently in the textbox and NOT in the store.
         * @function
         */
        _refreshItemsNotInStore: function() {
            var currentVal = this.textNode.get('value'),
                itemsInText = currentVal.split(',');
            this.itemsNotInStore = [];// clear 

            array.forEach(itemsInText, function (item, index, array) {
                if(!this._storeHasItem(item.trim())) {
                    if(item.trim() !== '') {
                        this.itemsNotInStore.push(item.trim());
                    }
                }
            }, this);
        },
        /**
         * Iterates the items in the store, and sets the checked value on the checkbox as needed.
         * @function
         */
        _refreshCheckedItems: function() {
            // un-check everything 
            dojo.query('input', this.tooltipContainer).forEach(function(node) {
                var wid = dijit.byId(node.id);
                if(wid) {
                    wid.set('checked', false);
                }
            });

            array.forEach(this.storeData.items, function (item, index, array) {
                if(this._isItemSelected(item)) {
                    dojo.query('input', this.tooltipContainer).forEach(function(node) {
                        var wid = dijit.byId(node.id);
                        if(wid) {
                            if(node.value.trim() === item.text.trim()) {
                                wid.set('checked', true);
                            }
                        }
                    });
                }
            }, this);
            
        },
        // Display properties
        templateString: template,
        widgetsInTemplate: true,

        /**
         * @property {object} storeData Data fetched from SData stored here.
         */
        storeData: null,

        /**
         * @property {string} lastValidValue Last valid value entered into the control.
         */
        lastValidValue: '',

        /**
         * @property {string} lastValidValues Last valid values entered into the control. Split from comma delimited lastValidValue string.
         */
        lastValidValues: null,

        /**
         * @property {string} initialValue Initial value set to the control, if any.
         */
        initialValue: '',

        /**
         * @property {array} initialValues Initial value is a comma separated list, this array holds the split values.
         */
        initialvalues: null,

        /**
         * @property {array} itemsNotInStore Array of items that were entered but don't exist in the store.
         */
        itemsNotInStore: null
    });

    return widget;
});


},
'Sage/UI/nls/CalendarUsersListPane':function(){
﻿define("Sage/UI/nls/CalendarUsersListPane", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            header_color: 'Color',
            header_user: 'User',
            maxUsersErrorMessage: 'Sorry, you cannot view more than ${0} calendars (including your own) at one time.  Clear one of the currently-selected calendars and try again.'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/UserAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/UserAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/UserAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.UserAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.lookupBindingModeTooltipText %}">',
                        '<label>{%= $.lookupBindingModeText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_lookupBindingMode" data-dojo-attach-event="onChange:_onLookupBindingModeChange">',
                            '{% for (var mode in $.bindingModeText) { %}',
                                '<span value="{%= mode %}">{%= $.bindingModeText[mode] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _lookupBindingMode: null,
        _required: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        lookupBindingModeText: 'Lookup Binding Mode:',
        lookupBindingModeTooltipText: 'Indicates whether you want to bind to an entity object or to a string value.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',

        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },
        bindingModeText: {
            'Object': 'Object',
            'String': 'String'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._lookupBindingMode.set('value', this._designer.get('lookupBindingMode'));
            this._required.set('value', this._designer.get('required'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onLookupBindingModeChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('lookupBindingMode', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/nls/PickListBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/PickListBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/ColumnBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/ColumnBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            indexText: "Index:",
            indexTooltipText: "Number of the row or column, beginning with zero.",
            widthText: "Width:",
            widthTooltipText: "Width of this column of controls.",
            sizeTypeText: "Size Type:",
            sizeTypeTooltipText: "Method of sizing: Absolute, AutoSize, or Percent.",
            rowSizeTypeText: {
                Absolute: "Absolute",
                Percent: "Percent",
                AutoSize: "AutoSize"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Columns/ActivityAlarm':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/ActivityAlarm", [
       'dojox/grid/cells/_base',
       'Sage/Utility',
       'dojo/_base/declare'
],
function (_base, util, declare) {
    var widget = declare("Sage.UI.Columns.ActivityAlarm", _base, {
        format: function (inRowIndex, inItem) {
            var alarm = util.getValue(inItem, "Alarm");
            var html = "<div><div>";
            if (alarm) {
                html = "<img src='images/icons/Alarm_16x16.gif'/>";
            }
            return html;
        }
    });

    return widget;
});

},
'Sage/UI/Columns/DateTime':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/DateTime", [
    'dojox/grid/cells/dijit',
    'dojo/date/locale',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'dojo/_base/declare'
],
function (cellsDijit, locale, Utility, activityUtility, declare) {
    var widget = declare('Sage.UI.Columns.DateTime', dojox.grid.cells.Cell, {
        // summary:
        //  Read-only date/time display column.
        //  The following configuration properties may be included when setting up the column:
        //  * formatType (date, time, or date/time - defaults to date/time)
        timelessField: '',
        timelessText: '',
        dateOnly: false,
        utc: true,
        useFiveSecondRuleToDetermineTimeless: false,
        format: function (inRowIndex, inItem) {
            var retVal = this.formattedDate(inRowIndex, inItem);
            if (this.abbreviationLength) {
                var abbreviationFormatter = Sage.Format.abbreviationFormatter(this.abbreviationLength);
                retVal = abbreviationFormatter(retVal);
            }
            return retVal;
        },
        formattedDate: function (inRowIndex, inItem) {
            // summary:
            //	if given a date, convert it to local time and provide corresponding HTML
            if (!inItem)
                return '';
            var d = this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);
            if (!d)
                return '';
            d = convert.toDateFromString(d, true);
            if (!d || d.constructor !== Date) {
                return '';
            }
            var tless = false;
            if (this.timelessField && this.timelessField !== '') {
                tless = convert.toBoolean(Utility.getValue(inItem, this.timelessField, 'F'));
            }
            if (this.useFiveSecondRuleToDetermineTimeless) {
                tless = activityUtility.isDateFiveSecondRuleTimeless(d); 
            }
            // TODO: edit mode?    
            if (!this.dateOnly && !this.datePattern) {
                if (!tless) {
                    return dojo.date.locale.format(d, { selector: this.formatType || 'date/time', fullYear: true });
                } else {
                    var timelessDate = d;
                    if (this.utc) {
                        timelessDate = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), 0, 0, 5);
                    }
                    return dojo.date.locale.format(timelessDate, { selector: 'date', fullYear: true }) + this.timelessText;
                }
            } else if (this.datePattern) {
                // If the date pattern does not have time, treat it as date only/utc
                if (this.datePattern.indexOf('h') === -1) {
                    d = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
                }
                return d.format(this.datePattern);
            } else {
                if (this.utc) {
                    var dateOnly = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());
                    return dojo.date.locale.format(dateOnly, { selector: 'date', fullYear: true });
                    } else {
                    return dojo.date.locale.format(d, { selector: 'date', fullYear: true });
                }
            }
        }
    });

    // conversion helper is used locally, and also registered under Sage.UI.Columns.DateTime.
    // It's a bit of a kludge, ideally these functions should be shared at a utility level
    var convert = Utility.Convert;

    return widget;
    });
},
'Sage/MainView/IntegrationContract/SalesOrderRTDV':function(){
require({cache:{
'url:Sage/MainView/IntegrationContract/templates/SalesOrderRTDV.html':"﻿[\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_salesOrderDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\r\n        '<div dojoAttachPoint=\"loadingContainer\">',\r\n            '<br />',\r\n            '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n            '<br />',\r\n            '<br />',\r\n        '</div>',\r\n        '<table cellspacing=\"5\" dojoAttachPoint=\"salesOrderDetails\" border=\"0\" width=\"100%\" class=\"display-none\">',\n            '<div>',\r\n                '<tr>',\n\t\t\t        '<td>',\r\n\t\t\t             '<label for=\"SalesOrder_reference\">{%= $.lblSalesOrderCaption %}</label>',\r\n\t\t\t        '</td>',\r\n                    '<td>',\r\n                        '<input type=\"text\" id=\"{%= $.id%}_reference\" name=\"reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                    '<td>',\n                        '<label for=\"SalesOrder_status\">{%= $.lblStatusCaption %}</label>',\n                    '</td>',\n                    '<td>',\n                        '<input type=\"text\" id=\"{%= $.id%}_status\" name=\"status\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                    '<td>',\n                        '<label for=\"SalesOrder_grossTotal\">{%= $.lblGrossTotalCaption %}</label>',\r\n                    '</td>',\n                    '<td>',\n                        '<input type=\"text\" id=\"{%= $.id%}_grossTotal\" name=\"grossTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                    '</td>',\r\n                '</tr>',\r\n            '</div>',\r\n        '</table>',\r\n        '<div style=\"height:370px;width:800px\" dojoAttachPoint=\"tabContentDetails\" class=\"display-none\">',\r\n            '<div id=\"{%= $.id%}_salesOrderContainer\" dojoAttachPoint=\"salesOrderContainer\" dojoType=\"dijit.layout.TabContainer\" style=\"width:100%;height:100%;\">',\r\n                '<div id=\"{%= $.id%}_salesOrderContent\" dojoAttachPoint=\"salesOrderContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.detailsTabTitle %}\" selected=\"true\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"{%= $.id%}_divDetails\">',\r\n                        '<table cellspacing=\"5\">',\r\n                            '<col style=\"width:200px\" />',\r\n                            '<col style=\"width:200px\" />',\r\n                            '<tr>',\r\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_OrderDate\">{%= $.lblOrderDateCaption %}</label>',\r\n                                '</td>',\r\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_OrderDate\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\r\n                                '<td>',\n                                    '<label for=\"SalesOrder_TaxTotal\">{%= $.lblTaxTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_TaxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\r\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_HoldStatus\">{%= $.lblHoldStatusCaption %}</label>',\r\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_HoldStatus\" name=\"statusFlagText\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Currency\">{%= $.lblCurrencyCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Type\">{%= $.lblTypeCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Type\" name=\"type\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\r\n                                    '<label for=\"SalesOrder_CostTotal\">{%= $.lblCostTotalCaption %}</label>',\r\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_CostTotal\" name=\"costTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_PONumber\">{%= $.lblPONumberCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_PONumber\" name=\"customerReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_ProfitTotal\">{%= $.lblProfitTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_ProfitTotal\" name=\"profitTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Quotation\">{%= $.lblQuotationCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Quotation\" name=\"quotation.reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_InvoiceStatus\">{%= $.lblInvoiceStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_InvoiceStatus\" name=\"invoiceStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Contact\">{%= $.lblContactCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Contact\" name=\"buyerContact.fullName\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DeliveryDate\">{%= $.lblDeliveryDateCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DeliveryDate\" name=\"deliveryDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_PriceList\">{%= $.lblPriceListCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_PriceList\" name=\"pricelist.name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DueDate\">{%= $.lblDueDateCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DueDate\" name=\"dueDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_NetTotal\">{%= $.lblNetTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_NetTotal\" name=\"netTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_Carrier\">{%= $.lblCarrierCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_Carrier\" name=\"carrierCompany\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DiscountTotal\">{%= $.lblDiscountTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DiscountTotal\" name=\"discountTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_AllocationStatus\">{%= $.lblAllocationStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_AllocationStatus\" name=\"allocationStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                            '<tr>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_DeliveryStatus\">{%= $.lblDeliveryStatusCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_DeliveryStatus\" name=\"deliveryStatus\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                                '<td>',\n                                    '<label for=\"SalesOrder_ChargesTotal\">{%= $.lblChargesTotalCaption %}</label>',\n                                '</td>',\n                                '<td>',\n                                    '<input type=\"text\" id=\"{%= $.id%}_ChargesTotal\" name=\"chargesTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                                '</td>',\n                            '</tr>',\r\n                        '</table>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soAddressesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.addressTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"sdgrdSalesOrderAddresses\" dojoAttachPoint=\"sdgrdSalesOrderAddresses\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesOrderAddresses_Grid\" dojoAttachPoint=\"sdgrdSalesOrderAddresses_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soSalesPersonsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.salesPersonsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_SalesPersons\" dojoAttachEvent=\"onShow:initSalesPersons\">',\r\n                    '<div id=\"sdgrdSalesPersons\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesPersons_Grid\" dojoAttachPoint=\"sdgrdSalesPersons_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soLinesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.salesOrderLinesTabTitle %}\" style=\"width:100%;height:100%;\">',\r\n                    '<div id=\"sdgrdSalesOrderLines\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSalesOrderLines_Grid\" dojoAttachPoint=\"sdgrdSalesOrderLines_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soPaymentsContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.paymentsTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Payments\" dojoAttachEvent=\"onShow:initPayments\">',\r\n                    '<div id=\"sdgrdSOPayments\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSOPayments_Grid\" dojoAttachPoint=\"sdgrdSOPayments_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n                '<div id=\"{%= $.id%}_soDeliveriesContent\" dojoType=\"dijit.layout.ContentPane\" title=\"{%= $.deliveriesTabTitle %}\" style=\"width:100%;height:100%;\" dojoAttachPoint=\"cp_Deliveries\" dojoAttachEvent=\"onShow:initDeliveries\">',\r\n                    '<div id=\"sdgrdSODeliveries\" style=\"width:100%;height:100%;\">',\r\n                        '<div id=\"{%= $.id%}_sdgrdSODeliveries_Grid\" dojoAttachPoint=\"sdgrdSODeliveries_Grid\" style=\"width:100%;height:100%;\"></div>',\r\n                    '</div>',\r\n                '</div>',\r\n            '</div>',\r\n        '</div>',\r\n        '<div class=\"button-bar alignright\">',\r\n            '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_soBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/IntegrationContract/SalesOrderRTDV", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/SalesOrderRTDV',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/UI/SLXPreviewGrid',
    'Sage/Data/ProxySDataStore',
    'Sage/UI/Dialogs',
    'Sage/UI/Columns/DateTime',
    'dojo/text!./templates/SalesOrderRTDV.html',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'Sage/UI/DateTextBox',
    'dijit/Dialog',
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog'
],

function (declare, i18nStrings, _Widget, _Templated, SLXPreviewGrid, ProxySDataStore, Dialogs, SlxDateTimeColumn, template, dHelpIcon, lang) {
    var salesOrderRTDV = declare('Sage.MainView.IntegrationContract.SalesOrderRTDV', [_Widget, _Templated], {
        workspace: '',
        tabId: '',
        grid: '',
        globalSyncId: '',
        operatingCompanyId: '',
        dataStore: null,
        salesPersonsDataStore: null,
        paymentsDataStore: null,
        deliveriesDataStore: null,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        loadSalesOrders: function () {
            var self = this;
            var options = {
                readOnly: true,
                rowsPerPage: 20,
                slxContext: { workspace: this.workspace, tabId: this.tabId },
                columns: [
                    { width: 10, field: '$key', name: ' ', sortable: false, formatter: this.salesOrdersX3DetailsViewRenderer, style: 'text-align:left;', editable: false, hidden: function () { return !accountingSystemHandlesSO(); } () },
                    { width: 10, field: 'reference', name: this.grdSalesOrder_OrderNumber, sortable: true, formatter: this.salesOrdersDetailsViewRenderer, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'date', type: SlxDateTimeColumn, formatType: 'date', dateOnly: true, utc: false, name: this.grdSalesOrder_OrderDate, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'status', name: this.grdSalesOrder_Status, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'statusFlagText', name: this.grdSalesOrder_HoldStatus, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'type', name: this.grdSalesOrder_Type, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'customerReference', name: this.grdSalesOrder_PO, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'netTotal', name: this.grdSalesOrder_NetTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'discountTotal', name: this.grdSalesOrder_DiscountTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'chargesTotal', name: this.grdSalesOrder_ChargesTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdSalesOrder_TaxTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdSalesOrder_GrossTotal, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false },
                    { width: 10, field: 'currency', name: this.grdSalesOrder_Currency, defaultValue: '', sortable: true, style: 'text-align:left;', editable: false }
                ],
                storeOptions: new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    resourceKind: 'tradingAccounts',
                    getResourcePredicate: function () {
                        return dojo.string.substitute("$uuid eq '${0}'", [self.globalSyncId]);
                    },
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'salesOrders'}]
                }),
                tools: []
            };
            var salesOrdersGrid = new SLXPreviewGrid.Grid(options, this.placeHolder);
            salesOrdersGrid.startup();
            var tabContent = dijit.byId('tabContent');
            tabContent.resize(); tabContent.resize();
            this.grid = salesOrdersGrid;
        },
        salesOrdersDetailsViewRenderer: function (value) {
            return dojo.string.substitute('<a href="javascript:salesOrderRTDV.loadDetailsView();">${0}</a>', [value]);
        },
        salesOrdersX3DetailsViewRenderer: function () {
            return dojo.string.substitute('<a href="javascript:salesOrderRTDV.callX3DetailsView();">${0}</a>', [i18nStrings.grdSalesOrder_Edit]);
        },
        destroyFirst: function (id) {
            var widget = dijit.byId(id);
            if (widget) {
                widget.destroyRecursive();
            }
        },
        initSalesPersons: function () {
            if (this.salesPersonsDataStore) return;
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this.salesPersonsDataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    getResourcePredicate: function () {
                        var salesOrderId = row['$key'];
                        return dojo.string.substitute("'${0}'", [salesOrderId || '']);
                    },
                    resourceKind: 'salesOrders',
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'salesPersons'}],
                    includeContent: true
                });
                dojo.connect(this.salesPersonsDataStore, 'onGetSingleResource', this, 'loadSalesPersons');
                this.salesPersonsDataStore.getSingleResource();
            }
        },
        loadSalesPersons: function (data) {
            this.destroyFirst('sdgrdSalesPersons');
            if (data && typeof data.salesPersons === 'undefined') {
                data.salesPersons = {};
                data.salesPersons.$resources = new Array();
            }
            var salesPersons = new dojox.grid.DataGrid({
                id: 'sdgrdSalesPersons',
                store: this.salesPersonsDataStore,
                structure: [
                    { width: 10, field: 'name', name: this.grdSalesPersons_Name, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdSalesPersons_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'extension', name: this.grdSalesPersons_Extension, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'relationship', name: this.grdSalesPersons_Relationship, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {}
            });
            dojo.place(salesPersons.domNode, this.sdgrdSalesPersons_Grid, "single");
            salesPersons.startup();
        },
        loadAddresses: function (data) {
            this.destroyFirst('sdgrdSalesOrderAddresses');
            if (data && typeof data.postalAddresses === 'undefined') {
                data.postalAddresses = {};
                data.postalAddresses.$resources = new Array();
            }
            var salesOrdersAddresses = new dojox.grid.DataGrid({
                id: 'sdgrdSalesOrderAddresses',
                store: this.dataStore,
                structure: [
                    { width: 10, field: 'type', name: this.grdAddress_Name, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'address1', name: this.grdAddress_Address1, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'address2', name: this.grdAddress_Address2, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'townCity', name: this.grdAddress_City, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'stateRegion', name: this.grdAddress_State, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'zipPostCode', name: this.grdAddress_Zip, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {},
                queryOptions: { singleResourceRequest: true, property: 'postalAddresses' }
            });
            dojo.place(salesOrdersAddresses.domNode, this.sdgrdSalesOrderAddresses_Grid, "single");
            salesOrdersAddresses.startup();
        },
        loadLineItems: function (data) {
            this.destroyFirst('sdgrdSalesOrderLines');
            if (data && typeof data.salesOrderLines === 'undefined') {
                data.salesOrderLines = {};
                data.salesOrderLines.$resources = new Array();
            }
            var salesOrderLines = new dojox.grid.DataGrid({
                id: 'sdgrdSalesOrderLines',
                store: this.dataStore,
                structure: [
                    { width: 10, field: 'number', name: this.grdItems_Line, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdItems_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodity.name', name: this.grdItems_Commodity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodityVariant.reference', name: this.grdItems_CommodityVariant, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'commodityDimension.reference', name: this.grdItems_CommodityDimension, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'unitOfMeasure.name', name: this.grdItems_UnitOfMeasure, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'fulfillmentLocation.name', name: this.grdItems_Location, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'pricelist.name', name: this.grdItems_PriceList, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'quantity', name: this.grdItems_Quantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'initialPrice', name: this.grdItems_InitialPrice, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualPrice', name: this.grdItems_ActualPrice, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'netTotal', name: this.grdItems_NetTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'chargesTotal', name: this.grdItems_ChargesTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'discountTotal', name: this.grdItems_DiscountTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdItems_TaxTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdItems_GrossTotal, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {},
                queryOptions: { singleResourceRequest: true, property: 'salesOrderLines' }
            });
            dojo.place(salesOrderLines.domNode, this.sdgrdSalesOrderLines_Grid, "single");
            salesOrderLines.startup();
        },
        initPayments: function () {
            if (this.paymentsDataStore) return;
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this.paymentsDataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    getResourcePredicate: function () {
                        var salesOrderId = row['$key'];
                        return dojo.string.substitute("'${0}'", [salesOrderId || '']);
                    },
                    resourceKind: 'salesOrders',
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'receipts'}],
                    includeContent: true
                });
                dojo.connect(this.paymentsDataStore, 'onGetSingleResource', this, 'loadPayments');
                this.paymentsDataStore.getSingleResource();
            }
        },
        loadPayments: function (data) {
            this.destroyFirst('sdgrdSOPayments');
            if (data && typeof data.receipts === 'undefined') {
                data.receipts = {};
                data.receipts.$resources = new Array();
            }
            var payments = new dojox.grid.DataGrid({
                id: 'sdgrdSOPayments',
                store: this.paymentsDataStore,
                structure: [
                    { width: 10, field: 'date', type: SlxDateTimeColumn, formatType: 'date', name: this.grdPayments_Date, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'name', name: this.grdPayments_Name, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdPayments_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'status', name: this.grdPayments_Status, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'netTotal', name: this.grdPayments_NetTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'discountTotal', name: this.grdPayments_Discounts, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'chargesTotal', name: this.grdPayments_Charges, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'taxTotal', name: this.grdPayments_Tax, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdPayments_GrossTotal, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'currency', name: this.grdPayments_Currency, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'tenderType', name: this.grdPayments_TenderType, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'tenderReference', name: this.grdPayments_TenderReference, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'processDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdPayments_ProcessDate, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {}
            });
            dojo.place(payments.domNode, this.sdgrdSOPayments_Grid, "single");
            payments.startup();
        },
        initDeliveries: function () {
            if (this.deliveriesDataStore) return;
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this.deliveriesDataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    getResourcePredicate: function () {
                        var salesInvoiceId = row['$key'];
                        return dojo.string.substitute("'${0}'", [salesInvoiceId]);
                    },
                    resourceKind: 'salesOrders',
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'salesOrderDeliveries'}],
                    includeContent: true
                });
                dojo.connect(this.deliveriesDataStore, 'onGetSingleResource', this, 'loadDeliveries');
                this.deliveriesDataStore.getSingleResource();
            }
        },
        loadDeliveries: function (data) {
            this.destroyFirst('sdgrdSODeliveries');
            if (data && typeof data.salesOrderDeliveries === 'undefined') {
                data.salesOrderDeliveries = {};
                data.salesOrderDeliveries.$resources = new Array();
            }
            var deliveries = new dojox.grid.DataGrid({
                id: 'sdgrdSODeliveries',
                store: this.deliveriesDataStore,
                structure: [
                    { width: 10, field: 'reference', name: this.grdDeliveries_Number, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'type', name: this.grdDeliveries_Type, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'status', name: this.grdDeliveries_Status, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'requestedDeliveryDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_RequestedDate, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualDeliveryDate', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_ActualDate, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'actualDeliveryTime', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_ActualTime, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'requestedQuantity', name: this.grdDeliveries_RequestedQuantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'deliveredQuantity', name: this.grdDeliveries_DeliveredQuantity, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'deliveryMethod', name: this.grdDeliveries_Method, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'carrierTradingAccount.name', name: this.grdDeliveries_Carrier, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'carrierReference', name: this.grdDeliveries_CarrierReference, defaultValue: '', sortable: true, editable: false },
                    { width: 10, field: 'dateExceptionReason', type: SlxDateTimeColumn, formatType: 'date', name: this.grdDeliveries_ExceptionReason, defaultValue: '', sortable: true, editable: false }
                ],
                rowsPerPage: 200,
                query: {}
            });
            dojo.place(deliveries.domNode, this.sdgrdSODeliveries_Grid, "single");
            deliveries.startup();
        },
        loadDetailsView: function () {
            dojo.removeClass(this.loadingContainer, "display-none");
            dojo.addClass(this.salesOrderDetails, "display-none");
            dojo.addClass(this.tabContentDetails, "display-none");
            this._dialog.show();
            var self = this;
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                var salesOrderId = row['$key'];
                this.dataStore = new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    resourceKind: 'salesOrders',
                    getResourcePredicate: function () {
                        return dojo.string.substitute("'${0}'", [salesOrderId]);
                    },
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: ['*,salesOrderLines/*,postalAddresses/*,buyerContact/fullName,pricelist/name,quotation/reference,salesOrderLines/commodity/name,salesOrderLines/unitOfMeasure/name,salesOrderLines/fulfillmentLocation/name,salesOrderLines/pricelist/name,salesOrderLines/commodityVariant/reference,salesOrderLines/commodityDimension/reference,salesOrderDeliveries/carrierTradingAccount/name']
                });
                dojo.connect(this.dataStore, 'onGetSingleResource', this, 'buildGrids');
                this.dataStore.getSingleResource();
            }
        },
        callX3DetailsView: function () {
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                var salesOrderId = row['$key'];
                dojo.xhrGet({
                    url: dojo.string.substitute("slxdata.ashx/slx/crm/-/X3SalesOrder/getediterpsalesorderurl?salesOrderKey=${0}&operatingCompany=${1}&_dc=${2}",
                        [salesOrderId, this.operatingCompanyId, new Date().getTime()]),
                    cache: false,
                    preventCache: true,
                    handleAs: 'json',
                    load: lang.hitch(this, function (data, xhr) {
                        this.launchAccountingSystemView(data);
                    }),
                    error: function (request, status, error) {
                        dojo.byId([self.id, "-Loading-container"].join('')).innerHTML = i18nStrings.Error_InvalidEndpoint;
                    }
                });
            }
        },
        loadSalesOrderDetails: function (data) {
            if (data && typeof data !== 'undefined') {
                this._dialog.set('value', data);
            }
        },
        buildGrids: function (data) {
            this.loadSalesOrderDetails(data);
            this.loadAddresses(data);
            this.loadLineItems(data);
            if (this.salesOrderContainer != null) {
                this.salesOrderContainer.selectChild(this.salesOrderContent);
            }
            dojo.addClass(this.loadingContainer, "display-none");
            dojo.removeClass(this.salesOrderDetails, "display-none");
            dojo.removeClass(this.tabContentDetails, "display-none");
            this._dialog.resize();
        },
        hideDetailsDialog: function () {
            /* Destroy the grids that are loaded dynamically, so that the 
            data for one entity is not initially displayed for another entity. */
            this.destroyFirst('sdgrdSalesPersons');
            this.salesPersonsDataStore = null;
            this.destroyFirst('sdgrdSODeliveries');
            this.deliveriesDataStore = null;
            this.destroyFirst('sdgrdSOPayments');
            this.paymentsDataStore = null;
            this._dialog.hide();
        },
        destroy: function (sender, args) {
        },
        launchAccountingSystemView: function (data) {
            if (data.error != null) {
                Dialogs.showError(data.error);
            }
            else {
                try {
                    window.open(data.url);
                } catch (err) {
                    Dialogs.showError(this.errorERPRequest);
                    console.error(dojo.string.substitute(this.errorERPRequestDetails, [this.errorERPRequest, err, url]));
                }
            }
        },
        executeErpInsertView: function () {
            dojo.xhrGet({
                url: dojo.string.substitute("slxdata.ashx/slx/crm/-/X3SalesOrder/getinserterpsalesorderurl?accountId=${0}&operatingCompany=${1}&_dc=${2}",
                        [Sage.Utility.getCurrentEntityId(), this.operatingCompanyId, new Date().getTime()]),
                cache: false,
                preventCache: true,
                handleAs: 'json',
                load: lang.hitch(this, function (data, xhr) {
                    this.launchAccountingSystemView(data);
                }),
                error: function (request, status, error) {
                    dojo.byId([self.id, "-Loading-container"].join('')).innerHTML = i18nStrings.errorERPRequest;
                }
            });
        }
    });
    return salesOrderRTDV;
});
},
'Sage/MailMerge/main':function(){
define("Sage/MailMerge/main", [
    "Sage/MailMerge/Loader",
    "Sage/MailMerge/Helper",
    "Sage/MailMerge/MenuHelper"
    ], function () {
        // module:
        // Sage/MailMerge/main
        // summary:
        // The Sage/MailMerge/main module provides loading of all Sage/MailMerge modules.
});
},
'Sage/MainView/IntegrationContract/MatchingOptionsConfig':function(){
require({cache:{
'url:Sage/MainView/IntegrationContract/templates/MatchingOptionsConfig.html':"﻿[\r\n'<div>',\r\n    '<div id=\"{%= $.id %}-Context-container\">',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\">{%= $.matchingHeader %}',\r\n            '<span class=\"boldtext\">{%= $.resourceDisplayName %}</span>',\r\n        '</label>',\r\n        '<br /><br />',\r\n    '</div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontext padBottom\" style=\"padding-left:20px\">{%= $.matchingDescription %}</label>',\r\n    '</div>',\r\n    '<div>',\r\n        '<br />',\r\n        '<label class=\"slxlabel\" style=\"padding-left:20px\">{%= $.propertyText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:240px\">{%= $.operatorText %}</label>',\r\n    '</div>',\r\n    '<div id=\"{%= $.id %}-Loading-container\">',\r\n        '<br />',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n    '</div>',\r\n//conditions\r\n    '<div style=\"padding:10px;\" id=\"{%= $.id %}-Condition-container\"></div>',\r\n//buttons\r\n    '<div class=\"button-bar alignright\">',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').matchingObject.updateMatchProperties();\">',\r\n            '{%= $.okText %}',\r\n        '</button>',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').destroy();\">',\r\n            '{%= $.cancelText %}',\r\n        '</button>',\r\n    '</div>',\r\n'</div>'\r\n]"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/IntegrationContract/MatchingOptionsConfig", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/MatchingOptionsConfig',
    'dojo/_base/array',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/UI/Dialogs',
    'dojo/text!./templates/MatchingOptionsConfig.html',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'dijit/Dialog',
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog'
],
function (declare, i18nStrings, array, _Widget, _Templated, Dialogs, template) {
    var matchingOptionsConfig = declare('Sage.MainView.IntegrationContract.MatchingOptionsConfig', [_Widget, _Templated], {
        resourceKind: '',
        resourceDisplayName: '',
        id: '',
        index: 0,
        selectedFieldIndex: 0,
        matchingId: '',
        fields: [{ FieldName: '', DisplayName: ''}],
        operators: [],
        selectedFilters: [],
        hideimgurl: 'images/icons/Find_Remove_16x16.gif',
        addimgurl: 'images/icons/Find_Add_16x16.gif',
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        init: function (workSpace) {
            this.id = workSpace.Id;
        },
        conditionTemplate: new Simplate(['<div>',
            '<div id="filterCondition_{%= $.index %}" class="lookup-condition-row" style="padding-left:12px">',
                '<select dojoType="dijit.form.select" id="fieldnames_{%= $.index %}" class="lookup-fieldnames-list" style="width:160px" >',
                    '{% for (var i=0; i < $.fields.length; i++) { %}',
                        '<option value="{%= $.fields[i].FieldName %}" {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $.fields[i].DisplayName %}</option>',
                    '{% } %}',
                '</select>',
                '<select dojoType="dijit.form.select" id="operators_{%= $.index %}" class="lookup-operators-list" style="width:160px; margin-left:130px">',
                    '{% for (var i=0;i<$.operators.length;i++) { %}',
                        '<option value="{%= $.operators[i].symbol %}"  {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $.operators[i].display %}</option>',
                    '{% } %}',
                '</select>',
                '{% if ($.index == 1 ) { %}',
                    '<img id="addCondition_{%= $.index %}" src="{%= $.addimgurl %}" alt="{%= $.filter_AddCondition %}" style="cursor:pointer;padding:0px 5px;" onclick="dijit.byId(\'{%= $.matchingId %}\').matchingObject.addLookupCondition();" />',
                '{% } %}',
                '{% if ($.index > 1 ) { %}',
                    '<img src="{%= $.hideimgurl %}" alt="{%= $.filter_RemoveCondition %}" style="cursor:pointer;padding:0px 5px;" onclick="dijit.byId(\'{%= $.matchingId %}\').matchingObject.removeLookupCondition({%= $.index %});" />',
                '{% } %}',
            '</div>',
        '</div>']),
        onEditMatchConfig: function (resourceKind, resourceDisplayName) {
            this.resourceDisplayName = resourceDisplayName;
            this.resourceKind = resourceKind;
            this.showDialog();
        },
        showDialog: function () {
            this.index = 0;
            var matchDialog = new dijit.Dialog({
                title: this.matchingCaption,
                id: [this.id, '-Dialog'].join(''),
                style: ['height:', 300, 'px;width:', 600, 'px;'].join(''),
                matchingObject: this
            });
            matchDialog.attr("content", this.widgetTemplate.apply(this));
            this.connect(matchDialog, 'onCancel', this.destroyDialog);
            this.matchingId = matchDialog.id;
            matchDialog.show();
            this.getMatchProperties();
        },
        getMatchProperties: function () {
            var self = this;
            dojo.xhrGet({
                url: dojo.string.substitute("slxdata.ashx/slx/crm/-/resources/getmatchproperties?resourceKind=${0}", [self.resourceKind]),
                cache: false,
                preventCache: true,
                handleAs: 'json',
                load: function (data) {
                    self.fields = data.fields;
                    self.operators = data.operators;
                    self.selectedFilters = data.filters;
                    dojo.query(dojo.byId([self.id, "-Loading-container"].join(''))).orphan();
                    self.loadMatchingFilters();
                },
                error: function (request, status, error) {
                    dojo.byId([self.id, "-Loading-container"].join('')).innerHTML = self.error_InvalidEndpoint;
                }
            });
        },
        loadMatchingFilters: function () {
            for (var i = 0; i < this.selectedFilters.length; i++) {
                this.addLookupCondition();
                var field = dojo.byId(['fieldnames_', this.index].join(''));
                if (field != null) {
                    field.value = this.selectedFilters[i].Property;
                }
                operator = dojo.byId(['operators_', this.index].join(''));
                if (operator != null) {
                    operator.value = this.selectedFilters[i].Operator;
                    operator.symbol = this.selectedFilters[i].Operator;
                }
            }
        },
        dialogResize: function () {
            dojo.style([this.id, '-Dialog'].join(''), 'height', 'auto');
        },
        addLookupCondition: function () {
            this.index++;
            var divContainer = dojo.byId([this.id, '-Condition-container'].join(''));
            var newRow = this.conditionTemplate.apply(this);
            dojo.place(newRow, divContainer);
            this.dialogResize();
        },
        removeLookupCondition: function (idx) {
            dojo.query(dojo.byId(["filterCondition_", idx].join(''))).orphan();
        },
        updateMatchProperties: function () {
            var self = this;
            dojo.xhrPost({
                url: "slxdata.ashx/slx/crm/-/resources/updateconfiguration",
                sync: true,
                postData: self.getSelections(),
                load: function () {
                    self.destroyDialog();
                },
                error: function (request, status, error) {
                    Dialogs.showError(error);
                }
            });
        },
        getSelections: function () {
            var conditions = [];
            var filterRows = dojo.query('.lookup-condition-row');
            for (var i = 0; i < filterRows.length; i++) {
                var fieldName = dojo.query('.lookup-fieldnames-list', filterRows[i]);
                var operator = dojo.query('.lookup-operators-list', filterRows[i]);
                var condition = {
                    fieldName: fieldName[0].value,
                    operator: operator[0].value
                };
                conditions.push(condition);
            }
            return Sys.Serialization.JavaScriptSerializer.serialize(conditions);
        },
        reloadOperators: function (selectedFieldIndex, rowIndex) {
            this.selectedFieldIndex = selectedFieldIndex;
            this.index = rowIndex;
            var newRow = this.conditionTemplate.apply(this);
            //Replace old operators with new ones at the same index point.
            dojo.place(newRow, ['filterCondition_', rowIndex].join(''), 'replace');
        },
        destroyDialog: function () {
            //remove all existing conditions
            var rows = dojo.query('.lookup-condition-row');
            if (rows != null) {
                array.forEach(rows, "dojo.query(item).orphan();");
            }
            var matchingDialog = dijit.byId([this.id, '-Dialog'].join(''));
            if (matchingDialog) {
                matchingDialog.destroy();
            }
        }
    });
    return matchingOptionsConfig;
});
},
'Sage/Utility/UserOptions':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/UserOptions", [
        'Sage/Utility'
    ],
    function (sageUtility) {
        Sage.namespace('Utility.UserOptions');
        return Sage.Utility.UserOptions = {
            getConvertedOptionValue: function (optionName, value) {
                value = value.toLowerCase();
                var retValue = value;
                
                switch (optionName.toUpperCase()) {
                    case "DEFAULTCALENDARVIEW":
                        var monthRE = /^(month|2)$/i;
                        var weekRE = /^(week|1)$/i;
                        var workweekRE = /^(workweek|3)$/i;
                        var dayRE = /^(day|0)$/i;

                        if (monthRE.test(value)) retValue = "month";
                        else if (weekRE.test(value)) retValue = "week";
                        else if (workweekRE.test(value)) retValue = "workweek";
                        else if (dayRE.test(value)) retValue = "day";
                        else retValue = "day";
                        break;
                    case "WORKWEEKSUN":
                    case "WORKWEEKMON":
                    case "WORKWEEKTUE":
                    case "WORKWEEKWED":
                    case "WORKWEEKTHU":
                    case "WORKWEEKFRI":
                    case "WORKWEEKSAT":
                    case "REMEMBERUSERS":
                    case "SHOWONOPPORTUNITIES":
                    case "SHOWONREGARDING":
                    case "SHOWONPHONENUMBER":
                    case "SHOWONTIME":
                        var trueRE = /^(true|yes|T|1)$/i;
                        retValue = trueRE.test(value); // = sageUtility.Convert.toBoolean(value);
                        break;
                    case "LOADHISTORYONSTART":
                        var trueRE1 = /^(true|yes|T|Y|0)$/i;
                        retValue = trueRE1.test(value); // = sageUtility.Convert.toBoolean(value);
                        break;
                    case 'DAYSTARTTIME':
                        retValue = this.getHourPart(value);
                        if (retValue > 24) retValue = 9;
                        break;
                    case 'DAYENDTIME':
                        retValue = this.getHourPart(value);
                        if (retValue > 24) retValue = 17;
                        break;
                    case "NUMEVENTS":
                    case "DEFAULTINTERVAL":
                        retValue = parseInt(value);
                        break;
                    default:
                        retValue = value;
                }
                return retValue;
            },
            getHourPart: function (value) {
                var dt = value.split(" ");
                var t, h;
                if (dt.length > 1 && value.indexOf("-") > 0) {
                    t = dt[1];
                    if (t) {
                        h = t.split(":")[0];
                    }
                } else {
                    h = value.split(":")[0];
                }
                if (value.indexOf('pm') > 0 || value.indexOf('PM') > 0) {
                    h = parseInt(h) + 12;
                }
                return parseInt(h, 10);
            },
            getDay: function (value) {
                var retValue = value;
                if (value.length > 1) {
                    var daysArr = [];
                    daysArr["SUNDAY"] = 0;
                    daysArr["MONDAY"] = 1;
                    daysArr["TUESDAY"] = 2;
                    daysArr["WEDNESDAY"] = 3;
                    daysArr["THURSDAY"] = 4;
                    daysArr["FRIDAY"] = 5;
                    daysArr["SATURDAY"] = 6;
                    retValue = daysArr[value.toUpperCase()];
                }
                if (!retValue) retValue = 1;
                return retValue;

            },
            arraySort: function (a, b) {
                return a - b;
            }

        };
    });
},
'Sage/MailMerge/Loader':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
/*  ------------------------------------------------------------------------                 
Sage SalesLogix Desktop Integration
Sage.MailMerge.Loader 
Copyright(c) 2010-2011, Sage Software                  
   
This service class is used to set up mail merge and to load the mail
merge service on demand.
------------------------------------------------------------------------ */

define("Sage/MailMerge/Loader", [
        "Sage/Utility/ErrorHandler",
        "Sage/MailMerge/Helper",
        "Sage/MailMerge/MenuHelper",
        "Sage/UI/Dialogs",
        "dijit/_Widget",
        "dojo/i18n",
        "dojo/string",
        "dojox/json/ref",
        "dojo/_base/lang",
        "dojo/i18n!./nls/Loader",
        "dojo/_base/declare"
    ],
// ReSharper disable InconsistentNaming
    function(ErrorHandler, Helper, MenuHelper, Dialogs, _Widget, i18n, dString, ref, dLang, nls, declare) {
        // ReSharper restore InconsistentNaming
        var oMailMergeLoader = declare("Sage.MailMerge.Loader", [_Widget], {
            constructor: function () {
                this.inherited(arguments);
            },
            postMixInProperties: function () {
                dLang.mixin(this, nls);
                this.inherited(arguments);
            },
            DecodeMailMergeJsonFromUrl: function (url) {
                var oMailMergeObject = null;
                dojo.xhrGet({
                    url: url,
                    preventCache: true,
                    handleAs: "text",
                    sync: true,
                    load: function (data) {
                        if (data && dojo.isString(data) && data !== "") {
                            var sJsonResponse = data.replace(/":null/gi, "\":\"\"");
                            oMailMergeObject = ref.fromJson(sJsonResponse);
                        }
                    },
                    error: function (error, ioargs) {
                        ErrorHandler.handleHttpError(error, ioargs);
                    }
                });
                return oMailMergeObject;
            },
            GetClientPath: function () {
                var sLocation = String(window.location);
                var iIndex = sLocation.lastIndexOf("/");
                if (iIndex != -1) {
                    return sLocation.substring(0, iIndex);
                }
                return null;
            }
        });

        /* Maintain backward compatability. */
        window.ExecuteWriteAction = function (writeAction, param) {
            Helper.ExecuteWriteAction(writeAction, param);
        };

        /* Maintain backward compatability. */
        window.GetMailMergeService = function (showLoadError) {
            if (typeof console !== "undefined") {
                console.warn("Use Sage.MailMerge.Helper.GetMailMergeService() instead of window.GetMailMergeService(). Note: window.GetMailMergeService() will be deprecated.");
            }
            return Helper.GetMailMergeService(showLoadError);
        };

        window.GetDesktopService = function (showLoadError) {
            return Helper.GetMailMergeService(showLoadError);
        };

        if (!Sage.Services.hasService("MailMergeServiceLoader")) {
            Sage.Services.addService("MailMergeServiceLoader", new Sage.MailMerge.Loader());
        }

        var bRemoveMenu = true;
        var oMenuHelper = new MenuHelper();
        var isWindows = (navigator.userAgent.indexOf("Win") != -1);
        if (isWindows && Sage && Sage.Services) {
            if (!Sage.gears) {
                if (typeof initGears === "function") {
                    initGears();
                }
            }
            if (Sage.gears && Sage.gears.factory) {
                dojo.addOnLoad(function () {
                    oMenuHelper.attachWriteMenuPopulator();
                });
                bRemoveMenu = false;
            }
        }

        if (bRemoveMenu) {
            try {
                if (!Sage.gears) {
                    if (window.console) {
                        console.debug("Sage.gears was [not] found."); /*DNL*/
                    }
                }
                if (Sage.gears && !Sage.gears.factory) {
                    if (window.console) {
                        console.debug("Sage.gears.factory was [not] found."); /*DNL*/
                    }
                }
            } catch (e) {
            }
            dojo.addOnLoad(function () {
                oMenuHelper.removeWriteMenu();
            });
        }

        return oMailMergeLoader;
    }
);
},
'url:Sage/UI/Controls/templates/PickListAsText.html':"<div>\r\n    <span id=\"${id}-Span\" data-dojo-attach-point=\"textSpan\"></span>\r\n</div>\r\n",
'Sage/UI/Columns/main':function(){
define("Sage/UI/Columns/main", [
    "Sage/UI/Columns/ActivityAlarm",
    "Sage/UI/Columns/UserType",
    "Sage/UI/Columns/ActivityType",
    "Sage/UI/Columns/Boolean",
    "Sage/UI/Columns/Cell",
    "Sage/UI/Columns/CheckBox",
    "Sage/UI/Columns/Currency",
    "Sage/UI/Columns/DataType",
    "Sage/UI/Columns/DateTime",
    "Sage/UI/Columns/Dnd",
    "Sage/UI/Columns/DndCell",
    "Sage/UI/Columns/Email",
    "Sage/UI/Columns/Lookup",
    "Sage/UI/Columns/Numeric",
    "Sage/UI/Columns/OwnerType",
    "Sage/UI/Columns/Phone",
    "Sage/UI/Columns/PickList",
    "Sage/UI/Columns/RadioGroup",
    "Sage/UI/Columns/SlxEdit",
    "Sage/UI/Columns/SlxLink",
    //"Sage/UI/Columns/SlxUser",
    "Sage/UI/Columns/TextBox"
    ], function() {
	// module:
        // Sage/UI/Columns
	// summary:
        // The Sage/UI/Columns module;Sage/UI/Columns provides loading of all Columns modules.
});
},
'Sage/UI/Controls/Name':function(){
require({cache:{
'url:Sage/UI/Controls/templates/Name.html':"<div class=\"person\" slxcompositecontrol=\"true\" id=\"{%= $.id %}\" ><input id=\"{%= $.id %}-TextBox\" value=\"{%= $.nameDesc %}\"\r\n    data-dojo-type=\"Sage.UI.Controls.TextBox\" name=\"{%= $.name %}\" required=\"{%= $.required %}\" dojoAttachPoint=\"focusNode\"  data-dojo-attach-event=\"onChange:textBoxOnChange, onDblClick: showDialog\" data-dojo-props=\"textWithIcons: {%= $.buttonVisible %}\" />\r\n    {% if ($.buttonVisible) { %}\r\n    <img alt=\"{%= $.buttonToolTip %}\"  data-dojo-attach-event=\"ondijitclick: showDialog\"  tabindex=\"{%= $.tabIndex %}\"     \r\n    style=\"padding-left:0;cursor: pointer; vertical-align: left;\" \r\n    src=\"{%= $.buttonImageUrl %}\" title=\"{%= $.buttonToolTip %}\" id=\"{%= $.id %}-Button\" />\r\n    {% } %}\r\n<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n</div>",
'url:Sage/UI/Controls/templates/PersonName.html':"<!--\r\nSimplate template\r\nhttps://github.com/mmorton/simplate\r\nhttps://github.com/mmorton/simplate/blob/master/demo/index.html\r\nBasic formatting example: {%= $.id %}\r\n-->\r\n<div>\r\n        <table width=\"100%\">\r\n            <tr>\r\n                <td><label>{%= $.prefixText %}</label></td>\r\n                <td>\r\n                    <select id=\"{%= $.id %}-Prefix\" data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\" \r\n                    dojoAttachPoint=\"_valueBox\"\r\n                    pickListName=\"Name Prefix\"\r\n                    storeMode=\"text\"\r\n                    name=\"{%= $.NamePrefix %}\" \r\n                    style=\"width: 150px;display: inline-block\"\r\n                    shouldPublishMarkDirty=\"false\" />\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameFirstText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-First\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameFirst %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameMiddleText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-Middle\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameMiddle %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.nameLastText %}</label></td>\r\n                <td>\r\n                    <input id=\"{%= $.id %}-Last\" data-dojo-type=\"Sage.UI.Controls.TextBox\"\r\n                    style=\"width:inherit;\"\r\n                    textAlign=\"{%= $.textAlign %}\"\r\n                    name=\"{%= $.NameLast %}\" type=\"text\" data-dojo-attach-point=\"focusNode\"\r\n                    shouldPublishMarkDirty=\"false\">\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td><label>{%= $.suffixText %}</label></td>\r\n                <td>\r\n                    <select id=\"{%= $.id %}-Suffix\" data-dojo-type=\"Sage.UI.Controls.DropDownSelectPickList\"\r\n                    dojoAttachPoint=\"_valueBox\"\r\n                    pickListName=\"Name Suffix\"\r\n                    storeMode=\"text\"\r\n                    name=\"{%= $.NameSuffix %}\"\r\n                    style=\"width: 150px;display: inline-block\"\r\n                    shouldPublishMarkDirty=\"false\" />\r\n                </td>\r\n            </tr>\r\n        </table>                    \r\n        <div class=\"button-bar alignright\" style=\"clear: both\">\r\n            <button id=\"{%= $.id %}-OKButton\" data-dojo-type=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId('{%= $.id %}')._okClicked();\">\r\n                {%= $.okText %}\r\n            </button>\r\n            <button id=\"{%= $.id %}-CancelButton\" data-dojo-type=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId('{%= $.id %}')._cancelClicked();\">\r\n                {%= $.cancelText %}\r\n            </button>\r\n        </div>\r\n</div>\r\n"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Name", [
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/i18n',
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/UI/Controls/TextBox',
        'Sage/UI/Controls/PickList',
        'Sage/UI/Controls/DropDownSelectPickList',
        'dijit/Dialog',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/i18n!./nls/Name',
        'dojo/text!./templates/Name.html',
        'dojo/text!./templates/PersonName.html'
],
// ReSharper disable InconsistentNaming
function (
    lang,
    declare, 
    i18n,
    _Widget,
    _Templated,
    textBox, 
    pickList,
    dropDownSelectPickList,
    dialog,
    _DialogHelpIconMixin,
    nlsBundle,
    nameTemplate,
    personNameTemplate
 ) {
// ReSharper restore InconsistentNaming
    //dojo.requireLocalization('Sage.UI.Controls', 'Name');

    /**
    * @class Class for name control TextBox with edit dialog.
    */
    var widget = declare('Sage.UI.Controls.Name', [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        widgetTemplate: new Simplate(nameTemplate.split('\r')),
        dialogContent: new Simplate(personNameTemplate.split('\r')),
        templateOverridePath: 'templates/PersonName-Override.html', //i.e. 'templates/PersonName-Override.html'
        widgetsInTemplate: true,
        clientId: '',
        nameDesc: '',
        buttonImageUrl: '',
        buttonToolTip: '',
        buttonVisible: true,
        tabIndex: 0,
        //Name data object
        //name: {},
        //TODO: Move up into Name object once sdata name object structure is determined.
        prefix: '',
        first: '',
        middle: '',
        last: '',
        suffix: '',
        //PickList Data
        'Name Prefix': {},
        'Name Suffix': {},
        'LastName Prefix': {},
        //.net bound controls
        name: '',
        prefixClientId: '',
        nameFirstClientId: '',
        nameMiddleClientId: '',
        nameLastClientid: '',
        suffixClientId: '',
        required: false,
        //.net properties
        autoPostBack: false,
        constructor: function (options) {
            options.id = options.clientId;
            this.resources = i18n.getLocalization('Sage.UI.Controls', 'Name');

            if (options.templateOverridePath && options.templateOverridePath.length > 0) {
                try {
                    //Dynamic caching need to be obscured from the builder by using the dojo['cache'] calling method
                    this.dialogContent = new Simplate(dojo['cache']('Sage.UI.Controls', options.templateOverridePath).split('\r'));
                }
                catch (e) {
                    // No overriding templates exists.
                    console.log('Could not load template:' + e.description);
                }
            }
            // this.inherited(arguments);
        },
        postCreate: function () {
                this.getDotNetData();
                if (!this['Name Prefix'].data || !this['Name Suffix'].data || !this['LastName Prefix'].data) {
                    this.loadPickLists();
            }
            this.inherited(arguments);
        },
        loadPickLists: function () {
            var prefixDef = new dojo.Deferred();
            var suffixDef = new dojo.Deferred();
            var lastPreDef = new dojo.Deferred();

            var pickListConfig = {
                pickListName: 'Name Prefix', // Required
                // storeOptions: {}, // Optional
                // dataStore: {}, // Optional
                canEditText: false,
                itemMustExist: true,
                maxLength: -1,
                storeMode: 'text', // text, id, code
                sort: true,
                displayMode: 'AsControl',
                // clientId: 'ASP.NET Control ClientID Here',
                required: false,
                //placeInNodeId: '',
                autoPostBack: false
            };

            var prefixPickList = new pickList(pickListConfig);
            prefixPickList.getPickListData(prefixDef);
            prefixDef.then(dojo.hitch(this, this.storePickListData), function (e) {
                console.error(e); // errback
            });

            pickListConfig.pickListName = 'Name Suffix';
            var suffixPickList = new pickList(pickListConfig);
            suffixPickList.getPickListData(suffixDef);
            suffixDef.then(dojo.hitch(this, this.storePickListData), function (e) {
                console.error(e); // errback
            });

            pickListConfig.pickListName = 'LastName Prefix';
            var lastNamePrefixPickList = new pickList(pickListConfig);
            lastNamePrefixPickList.getPickListData(lastPreDef);
            lastPreDef.then(dojo.hitch(this, this.storePickListData), function (e) {
                console.error(e); // errback
            });

        },
        storePickListData: function (data) {
            this[data.name].data = data;
        },
        showDialog: function () {
            this.editDialog = dijit.byId([this.id, '-Dialog'].join(''));
            if (!this.editDialog) {
                this.editDialog = new dialog({
                    title: this.resources.dialogTitle,
                    id: [this.id, '-Dialog'].join('')
                    //                style: ['height:', dHeight, 'px;width:', dWidth, 'px;'].join('')
                });

                this.editDialog.set("content", this.dialogContent.apply({ id: this.id,
                    prefixText: this.resources.prefixText,
                    nameFirstText: this.resources.nameFirstText,
                    nameMiddleText: this.resources.nameMiddleText,
                    nameLastText: this.resources.nameLastText,
                    suffixText: this.resources.suffixText,
                    cancelText: this.resources.cancelText,
                    okText: this.resources.okText
                }));

            }
            this.setEditFields();
            // mixin help icon
            lang.mixin(this.editDialog, new _DialogHelpIconMixin());
            this.editDialog.createHelpIconByTopic('editname');
            this.editDialog.show();
            if (this.modality === 'modeless') {
                dojo.destroy([this.id, '-Dialog_underlay'].join(''));
            }
        },
        textBoxOnChange: function (value) {
            if (value !== this.formatName()) {
            this.parseName(value);
            this.setDotNetData();
            dojo.publish("Sage/events/markDirty");
            }
        },
        parseName: function (value) {
            var parseText = value.split(' ');
            var i, item;

            //See if the first value is a prefix and shift it.        
            for (i = 0; i < this['Name Prefix'].data.items.$resources.length; i++) {
                item = this['Name Prefix'].data.items.$resources[i];
                if (item.text.toUpperCase() === parseText[0].toUpperCase()) {
                    this.prefix = parseText[0];
                    // Remove the prefix after it has been evaluated and 
                    parseText.shift();
                    break;
                }
            }

            //See if the last value is a suffix and pop it.
            for (i = 0; i < this['Name Suffix'].data.items.$resources.length; i++) {
                item = this['Name Suffix'].data.items.$resources[i];
                if (item.text.toUpperCase() === parseText[parseText.length - 1].toUpperCase()) {
                    this.suffix = parseText[parseText.length - 1];
                    // Remove the suffix after it has been evaluated.
                    parseText.pop();
                    break;
                }
            }

            //If two values left check if first is 
            if (parseText.length > 0) {
                this.last = parseText[parseText.length - 1];
                parseText.pop();
            }

            //If the last item matches a LastName Prefix, append it to the last name
            if (parseText.length > 0) {
                for (i = 0; i < this['LastName Prefix'].data.items.$resources.length; i++) {
                    item = this['LastName Prefix'].data.items.$resources[i];
                    if (item.text.toUpperCase() === parseText[parseText.length - 1].toUpperCase()) {
                        this.last = [parseText[parseText.length - 1], this.last].join(' ');
                        // Remove the suffix after it has been evaluated.
                        parseText.pop();
                        break;
                    }
                }
            }

            //If there are items remaining
            if (parseText.length === 2) {
                this.first = parseText[0];
                this.middle = parseText[1];
            }

            if (parseText.length === 1) {
                this.first = parseText[0];
            }

        },
        getEditFields: function () {
            this.updateNameObj();
                this.setDotNetData();
            dojo.publish("Sage/events/markDirty");
        },
        updateNameObj: function () {
            if (dijit.byId([this.id, '-Prefix'].join(''))) {
                this.prefix = dijit.byId([this.id, '-Prefix'].join('')).comboBox.get('value');
            }
            if (dijit.byId([this.id, '-First'].join(''))) {
                this.first = dijit.byId([this.id, '-First'].join('')).get('value');
            }
            if (dijit.byId([this.id, '-Middle'].join(''))) {
                this.middle = dijit.byId([this.id, '-Middle'].join('')).get('value');
            }
            if (dijit.byId([this.id, '-Last'].join(''))) {
                this.last = dijit.byId([this.id, '-Last'].join('')).get('value');
            }
            if (dijit.byId([this.id, '-Suffix'].join(''))) {
                this.suffix = dijit.byId([this.id, '-Suffix'].join('')).comboBox.get('value');
            }
        },
        getDotNetData: function () {
            //summary:
            //We have a connected .net control to post values to.
            if (this.prefixClientId !== '') {
                this.prefix = dojo.byId(this.prefixClientId).value;
            }
            if (this.nameFirstClientId !== '') {
                this.first = dojo.byId(this.nameFirstClientId).value;
            }
            if (this.nameMiddleClientId !== '') {
                this.middle = dojo.byId(this.nameMiddleClientId).value;
            }
            if (this.nameLastClientid !== '') {
                this.last = dojo.byId(this.nameLastClientid).value;
            }
            if (this.suffixClientId !== '') {
                this.suffix = dojo.byId(this.suffixClientId).value;
            }
        },
        setDotNetData: function () {
            dojo.byId(this.prefixClientId).value = this.prefix;
            dojo.byId(this.nameFirstClientId).value = this.first;
            dojo.byId(this.nameMiddleClientId).value = this.middle;
            dojo.byId(this.nameLastClientid).value = this.last;
            dojo.byId(this.suffixClientId).value = this.suffix;
        },
        setEditFields: function () {
            if (dijit.byId([this.id, '-Prefix'].join(''))) {
                dijit.byId([this.id, '-Prefix'].join('')).comboBox.set('value', this.prefix);
            }
            if (dijit.byId([this.id, '-First'].join(''))) {
                dijit.byId([this.id, '-First'].join('')).set('value', this.first);
                dijit.byId([this.id, '-First'].join('')).set('style', 'width:100%');
            }
            if (dijit.byId([this.id, '-Middle'].join(''))) {
                dijit.byId([this.id, '-Middle'].join('')).set('value', this.middle);
                dijit.byId([this.id, '-Middle'].join('')).set('style', 'width:100%');
            }
            if (dijit.byId([this.id, '-Last'].join(''))) {
                dijit.byId([this.id, '-Last'].join('')).set('value', this.last);
                dijit.byId([this.id, '-Last'].join('')).set('style', 'width:100%');
            }
            if (dijit.byId([this.id, '-Suffix'].join(''))) {
                dijit.byId([this.id, '-Suffix'].join('')).comboBox.set('value', this.suffix);
            }
        },
        _okClicked: function () {
            this.getEditFields();
            if (this.focusNode.value !== this.formatName()) {        
                this.focusNode.set('value', this.formatName());
                dojo.publish("Sage/events/markDirty");
            }
        },
        _cancelClicked: function () {
            this.editDialog.hide();
        },
        formatName: function () {
            var name = ((this.prefix == "") ? "" : this.prefix + ' ');
            name += ((this.first == "") ? "" : this.first + ' ');
            name += ((this.middle == "") ? "" : this.middle + ' ');
            name += ((this.last == "") ? "" : this.last + ' ');
            name += ((this.suffix == "") ? "" : this.suffix);
            name = name.trim();
            return name;
        }

    });

    return widget;
});


},
'url:Sage/MainView/IntegrationContract/templates/MatchingOptionsConfig.html':"﻿[\r\n'<div>',\r\n    '<div id=\"{%= $.id %}-Context-container\">',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\">{%= $.matchingHeader %}',\r\n            '<span class=\"boldtext\">{%= $.resourceDisplayName %}</span>',\r\n        '</label>',\r\n        '<br /><br />',\r\n    '</div>',\r\n    '<div>',\r\n        '<label class=\"wizardsectiontext padBottom\" style=\"padding-left:20px\">{%= $.matchingDescription %}</label>',\r\n    '</div>',\r\n    '<div>',\r\n        '<br />',\r\n        '<label class=\"slxlabel\" style=\"padding-left:20px\">{%= $.propertyText %}</label>',\r\n        '<label class=\"slxlabel\" style=\"padding-left:240px\">{%= $.operatorText %}</label>',\r\n    '</div>',\r\n    '<div id=\"{%= $.id %}-Loading-container\">',\r\n        '<br />',\r\n        '<label class=\"wizardsectiontitle boldText padBottom\" style=\"padding-left:20px\">{%= $.loadingText %}</label>',\r\n    '</div>',\r\n//conditions\r\n    '<div style=\"padding:10px;\" id=\"{%= $.id %}-Condition-container\"></div>',\r\n//buttons\r\n    '<div class=\"button-bar alignright\">',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"submit\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').matchingObject.updateMatchProperties();\">',\r\n            '{%= $.okText %}',\r\n        '</button>',\r\n        '<button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"dijit.byId(\\'{%= $.id %}-Dialog\\').destroy();\">',\r\n            '{%= $.cancelText %}',\r\n        '</button>',\r\n    '</div>',\r\n'</div>'\r\n]",
'Sage/MainView/IntegrationContract/nls/MatchingOptionsConfig':function(){
﻿define("Sage/MainView/IntegrationContract/nls/MatchingOptionsConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            matchingCaption: "Edit Match Criteria",
            matchingHeader: "Match Criteria for ",
            matchingDescription: "Add or remove operators to define the match criteria for all users who link Sage SalesLogix records with an accounting system. This criteria determines the results returned when searching for matching records between accounting systems.",
            propertyText: "Property",
            operatorText: "Operator",
            loadingText: "Loading...",
            filter_AddCondition: "Add Condition",
            filter_RemoveCondition: "Remove Condition",
            error_InvalidEndpoint: "Please specify a valid endpoint before continuing.",
            okText: "OK",
            cancelText: "Cancel"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/Editors/nls/FormBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/FormBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            generalText: "General",
            activeControlText: "Active Control:",
            activeControlTooltipText: "The control the user\\'s cursor starts on.",
            descriptionText: "Description:",
            descriptionTooltipText: "Optional description of the purpose of the form.",
            nameText: "Name:",
            nameTooltipText: "Form identifier used by the system."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/TaskPane/GroupListTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/GroupListTasklet", [
    'dojox/grid/DataGrid',
    'Sage/Data/SDataStore',
    'Sage/Data/SDataServiceRegistry',
    'dojo/string',
    'Sage/Groups/GroupContextService',
    'dojo/_base/declare',
    'dijit/_Widget',
    'dojo/_base/lang',
    'Sage/UI/Filters/FilterManager',
    'dojo/_base/array',
    'Sage/Utility/_LocalStorageMixin',
    'dojo/topic'
],
function (DataGrid,
        SDataStore,
        sDataServiceRegistry,
        dString,
        GroupContextService,
        declare,
        _Widget,
        lang,
        FilterManager,
        array,
        _LocalStorageMixin,
        topic) {
    var groupListTasklet = declare('Sage.Groups.GroupListTasklet', [_Widget, _LocalStorageMixin], {

        _contextSetHandle: null,
        _groupChangedHandle: null,
        gridLoadedHandler: null,
        gridOnSelectedHandle: null,
        groupContextService: null,
        context: null,

        grid: null,
        store: null,
        query: '',
        service: null,
        id: 'GroupListTasklet',
        keyAlias: '',
        columnDisplayName: '',
        allowOnSelectToFire: true, // flag so we can skip the _onSelected event if needed

        STORE_KEY_STORE_QUERY: '_STORE_QUERY_', // + groupId

        subscribesTo: {
            groupLookupSuccess: "/group/lookup/success",
            adhocGroupRemoved: "/group/adhoc/removed",
            groupNavFirst: "/group/nav/first",
            groupNavPrevious: "/group/nav/previous",
            groupNavNext: "/group/nav/next",
            groupNavLast: "/group/nav/last"
        },

        constructor: function (options) {
            //summary:
            //      Clientside script to instantiate the detail view's grouplist.  Should only be called by
            //      SmartParts\TaskPane\GroupList\GroupListTasklet.ascx
            //options: object
            //      options for this list, needs a keyAlias, columnDisplayName, id
            //returns:
            //      constructs the list
            this.inherited(arguments);
            lang.mixin(this, options);

            this.groupContextService = Sage.Services.getService("ClientGroupContext");
            this.context = this.groupContextService.getContext();

            if (this.context.CurrentFamily === null) {
                this._contextSetHandle = dojo.connect(this.groupContextService, 'onContextSet', this, '_createList');
            } else {
                this._createList();
            }

            // Events
            this._groupChangedHandle = dojo.connect(this.groupContextService, 'onCurrentGroupChanged', this, '_groupChanged');

            topic.subscribe(this.subscribesTo.groupLookupSuccess, lang.hitch(this, this._onLookupSuccess));
            topic.subscribe(this.subscribesTo.groupNavFirst, lang.hitch(this, this._onGroupNavFirst));
            topic.subscribe(this.subscribesTo.groupNavPrevious, lang.hitch(this, this._onGroupNavPrevious));
            topic.subscribe(this.subscribesTo.groupNavNext, lang.hitch(this, this._onGroupNavNext));
            topic.subscribe(this.subscribesTo.groupNavLast, lang.hitch(this, this._onGroupNavLast));

            topic.subscribe(this.subscribesTo.adhocGroupRemoved, lang.hitch(this, this._onRecordRemoved));
        },
        _onLookupSuccess: function (args) {
            /* args object:
            {
                conditions: 'conditions string'
            }
            */

            Sage.Link.toListView();
        },
        _onGroupNavFirst: function (args) {
            /* args object:
            {
                count: 10,
                fromEntityId: 'EntityId',
                position: 1,
                toEntityId: 'EntityId'
            }
            */

            this.selectGridRow(0);
        },
        _onGroupNavLast: function (args) {
            /* args object:
            {
                count: 10,
                fromEntityId: 'EntityId',
                position: 1,
                toEntityId: 'EntityId'
            }
            */

            this.selectGridRow(args.count - 1);
        },
        _onGroupNavPrevious: function (args) {
            /* args object:
            {
                count: 10,
                fromEntityId: 'EntityId',
                position: 1,
                toEntityId: 'EntityId'
            }
            */

            // grid is 0 based, groups are 1 based
            var position = args.position - 1;
            this.selectGridRow(position - 1);
        },
        _onGroupNavNext: function (args) {
            /* args object:
            {
                count: 10,
                fromEntityId: 'EntityId',
                position: 1,
                toEntityId: 'EntityId'
            }
            */

            // grid is 0 based, groups are 1 based
            var position = args.position - 1;
            this.selectGridRow(position + 1);
        },
        _onRecordRemoved: function (args) {
            /* args object:
            {
                family: 'ACCOUNT',
                groupId: 'somegroupId',
                groupName: 'Some Group',
                ids: [1, 2] // List of ids removed. In our case this should always have a length of 1 in detail mode
            }
            */
            var index,
                newIndex;

            index = this.grid.selection.selectedIndex;
            if (index === 0) {
                newIndex = index + 1;
            } else {
                newIndex = index - 1;
            }

            this.selectGridRow(newIndex);
            this._onSelected(newIndex);

            // If we were on the first row, stay there, otherwise jump back one
            this._onRecordRemovedRefresh(index === 0 ? index : newIndex);
        },
        _onRecordRemovedRefresh: function (index) {
            if (this.grid) {
                this.gridRefreshedHandler = dojo.connect(this.grid, '_onFetchComplete', this, function () {
                    this.selectGridRow(index);
                });

                try {
                    this.grid.setStore(this.get('store'));
                } catch (err) { }
            }
        },
        _groupChanged: function () {
            if (this.grid) {
                this.gridLoadedHandler = dojo.connect(this.grid, '_onFetchComplete', this, '_groupChangedAndLoaded');

                try {
                    this.grid.setStore(this.get('store'));
                } catch (err) { }
            }
        },
        _groupChangedAndLoaded: function () {
            this.selectGridRow(0);
            this._onSelected(0);
            if (this.gridLoadedHandler) {
                dojo.disconnect(this.gridLoadedHandler);
            }
        },
        _getStoreQueryKey: function () {
            var id = this.STORE_KEY_STORE_QUERY + this._getGroupID();
            return id;
        },
        _getGroupNS: function () {
            var ns = Sage.Groups.GroupManager.LOCALSTORE_NAMESPACE + '-' + this._getGroupID();
            return ns;
        },
        _getGroupID: function () {
            this.context = this.groupContextService.getContext();
            var results = -1;
            if (this.context) {
                results = this.context.CurrentGroupID;
            }

            return results;
        },
        _getStoreAttr: function () {
            this.context = this.groupContextService.getContext();
            this.context.CurrentFamily = this.context.CurrentFamily.toUpperCase();
            var resourcePredicate = "'" + this.context.CurrentGroupID + "'";

            if (this.context['CurrentGroupID'] === 'LOOKUPRESULTS') {
                // If this is a non-English site, the query will fail to pull from 'Lookup Results' group
                this.context['CurrentName'] = 'Lookup Results';
            }

            var temp = this.getFromLocalStorage(this._getStoreQueryKey(), this._getGroupNS()),
                defaults = {
                    resourceKind: 'groups',
                    service: this.service,
                    queryName: 'execute',
                    resourcePredicate: resourcePredicate,
                    select: [this.keyAlias, this.columnDisplayName]
                };

            if (temp && temp.store && temp.query) {
                // Mixing in will give a type error in the grid
                defaults.select = temp.store.select;
                defaults.resourcePredicate = temp.store.resourcePredicate;
                this.query = temp.query;
                if (this.query) {
                    defaults.where = this.query;
                }
            }

            this.store = new SDataStore(defaults);
            return this.store;
        },
        refreshGrid: function () {
            // Refresh the grid and fire onSelected to navigate as well.
            // Fires on group change, or initial loading.
            this.context = this.groupContextService.getContext();
            var position = this.context.CurrentEntityPosition - 1;

            this.selectGridRow(position);

            if (this.gridRefreshedHandler) {
                dojo.disconnect(this.gridRefreshedHandler);
            }
        },
        selectGridRow: function (position) {
            this.allowOnSelectToFire = false;
            if (this.grid.rowCount > 0) {
                this.grid.scrollToRow(position);
                this.grid.selection.clear();
                this.grid.selection.select(position);
                this.grid.onSelected(position);
            } else {
                Sage.Link.toListView();
            }
            this.allowOnSelectToFire = true;
        },
        uninitialize: function () {
            try {
                if (this.grid && this.grid.destroy) {
                    this.grid.destroy();
                }
                if (this.gridOnSelectedHandle) {
                    this.gridOnSelectedHandle.remove();
                }
            } catch (err) {
            }

            this.inherited(arguments);
        },
        _createList: function () {
            var self = this,
                gridId = this.id + "_grid",
                grid;

            this.service = sDataServiceRegistry.getSDataService('system');

            if (this.grid) {
                this.grid.setStore(this.get('store'));
                grid = this.grid;
            } else {
                grid = new DataGrid({
                    store: this.get('store'),
                    id: gridId,
                    structure: [{
                        field: "_item",
                        headerClasses: "displaynone",
                        width: '100%',
                        formatter: function (item) {
                            return (item && item.hasOwnProperty(self.columnDisplayName) ? item[self.columnDisplayName] : dojo.string.substitute("(${0})", [item[self.keyAlias]]));
                        }
                    }, {
                        field: this.keyAlias,
                        hidden: true,
                        headerClasses: "displaynone",
                        width: '0px'
                    }],
                    showTitle: false,
                    autoWidth: false,
                    rowSelector: false,
                    selectionMode: 'single',
                    width: '100%',
                    height: '230px'
                });

                dojo.byId(this.id + '_node').appendChild(grid.domNode);
                this.gridRefreshedHandler = dojo.connect(grid, '_onFetchComplete', this, 'refreshGrid');
                grid.startup();
                this.grid = grid;
            }

            this.gridOnSelectedHandle = this.grid.on('selected', lang.hitch(this, this._onSelected));
        },
        _onSelected: function (index) {
            if (!this.allowOnSelectToFire) {
                /* selectGridRow sets this to false, so we can select the row without navigating to the entity */
                return;
            }

            var cec,
                preventity,
                selected,
                nav;

            if (Sage.Services.hasService("ClientEntityContext")) {
                cec = Sage.Services.getService("ClientEntityContext");
                preventity = cec.getContext().EntityId;
                selected = this.grid.selection.getFirstSelected();
                if (selected) {
                    cec.navigateSLXGroupEntity(selected[this.keyAlias], preventity, index + 1);
                }
            }
        }
    });

    return groupListTasklet;
});

},
'Sage/Layout/MainContentDetailsPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Layout/MainContentDetailsPane", [
        'dojo/_base/declare',
        'dojo/dom-style',
        'Sage/Layout/ContentPane'
],
function (declare, domStyle, ContentPane) {
    var mainPane = declare('Sage.Layout.MainContentDetailsPane', [ContentPane], {
        postCreate: function () {
            this.inherited(arguments);
            // Maintain a unique storage id for each MainView.  Splitter should be positioned by view.
            var clientEntityContextSvc = Sage.Services.getService('ClientEntityContext');
            if (clientEntityContextSvc) {
                var eContext = clientEntityContextSvc.getContext();
                this.storageId = [eContext.EntityType.replace(/\./g, "_"), "_", this.id].join('');
            }
            this.connect(this, 'startup', this.noContentResize);
        },
        mainPaneChildrenExist: true,
        tabPaneChildrenExist: true,
        noContentResize: function () {
            var dim = { h: this.domNode.scrollHeight, w: this.domNode.scrollWidth },
                self = this;
            var adjustSplitter = function () {
                // Minimize the empty pane and hide(do not destroy!) the splitter.
                self.resize(dim);
                domStyle.set(self._splitterWidget.domNode, 'display', 'none');
            };
            //The Tab Pane does not contain any SmartParts.
            if (!this.tabPaneChildrenExist) {
                var centerContent = dijit.byId('centerContent');
                dim = { h: centerContent.domNode.scrollHeight, w: this.domNode.scrollWidth };
                adjustSplitter();
            }
            //The Main Content Details Pane does not contain any SmartParts.  Minimize it and hide(don't destroy) the splitter.
            if (!this.mainPaneChildrenExist) {
                dim = { h: 1, w: this.domNode.scrollWidth };
                adjustSplitter();
            }
        },
        startup: function () {
            var viewport = dijit.byId("Viewport");
            //Check inside Main Content and Tabs to see if there are any SmartPart nodes.
            // Count all the child elements in the _inner div of the MainContent content div .
            // Then make sure that they are not QuickForm generated, i.e. '.formtable'
            var mainContent = dojo.query('[id$=_inner]',
                dojo.query('.mainContentContent')[0])[0];

            // mainContent doesn't always exist (for instance, User Options pages)
            if (mainContent) {
                this.mainPaneChildrenExist = (mainContent.children.length > 1 || dojo.query('#MainContent .formtable').length > 0 || mainContent.id === 'GeneralExceptioncontents_inner');
            }
            else {
                this.mainPaneChildrenExist = false;
            }
            
            this.tabPaneChildrenExist = (dijit.byId('tabContent').domNode.children.length > 0);
            // Set splitter to false to keep events from being connected in inherited startup.
            if (!this.tabPaneChildrenExist || !this.mainPaneChildrenExist) {
                this.set('splitter', false);
            }
            
            if(this.splitter) {
                var otherToggles = dojo.query('[class$=SecondaryToggle]');
                if(otherToggles) {
                    for(var i = 0; i < otherToggles.length; i++) {
                        dojo.style(otherToggles[i], 'display', 'none');
                    }
                }
            }
            
            if(viewport) {
                // this was originally only called if a splitter wasn't present,
                // but some pages (Lead Detail) cause the splitter to appear
                // way farther down the page than it should
                viewport.resize();
            }
            
            this.inherited(arguments);
        }
    });


    return mainPane;
});
},
'Sage/Utility/ErrorHandler':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Utility/ErrorHandler", [
        'Sage/Utility',
        'Sage/UI/Dialogs',
        'dojo/io-query',
        'dojo/string',
        'dojo/_base/array'
    ],
//TODO: Localization
// ReSharper disable InconsistentNaming
    function (Utility, Dialogs, ioQuery, dString, array) {
        // ReSharper restore InconsistentNaming
        Sage.namespace('Utility.ErrorHandler');
        dojo.mixin(Sage.Utility.ErrorHandler, {
            _debugEndRequest: false, // Set to true for development only.
            _configuration: {
                isDebug: false /* See base.master for isDebug setting. */,
                preemption: {
                    enabled: true,
                    allowAuthRedirect: true,
                    handledStatusCodes: "577,578,579,580,581,582",
                    showPreemptedErrorMsg: false,
                    showInternalServerErrorMsg: false,
                    showUnhandledMessagingServiceExceptionMsg: true
                },
                authenticationRedirectUrl: null,
                showExtendedValidationException: false,
                showExtendedRoleAccessDeniedException: false
            },
            _fmtSlxErrorId: function (slxErrorId) {
                if (Sage.Utility.isStringWithLength(slxErrorId)) {
                    if (this._configuration.isDebug) {
                        return dString.substitute("\r\n\r\nSalesLogix Error Id: <a href=\"SLXErrorLookupService.asmx/GetEventLogError?slxErrorId=${0}\" target=\"_blank\">${0}</a>",
                            [slxErrorId]);
                    } else {
                        return dString.substitute("\r\n\r\nSalesLogix Error Id: ${0}", [slxErrorId]);
                    }
                }
                return "";
            },
            _fmtStackTrace: function (stackTrace) {
                if (this._configuration.isDebug && Sage.Utility.isStringWithLength(stackTrace)) {
                    var stack = Sage.Utility.htmlEncode(stackTrace).replace(/(\r\n)/g, "&#13;&#10;").trim();
                    return dString.substitute("\r\n\r\nStack trace:\r\n<textarea id=\"StackTrace\" cols=\"20\" name=\"StackTrace\" readonly=\"readonly\" rows=\"1\" style=\"width: 100%; height: 200px; font-family: 'Courier New', Courier, monospace; font-size: small; background-color: #F2F2F2; color: #444444; 1px: ; opacity: 0.8; -moz-box-sizing: border-box; box-sizing: border-box;\" unselectable=\"off\" wrap=\"off\">${0}</textarea>", [stack]);
                }
                return "";
            },
            _mixinConfig: function () {
                if (window.errorHandlerConfig && typeof window.errorHandlerConfig === "object") {
                    dojo.mixin(this._configuration, window.errorHandlerConfig);
                }
            },
            _preemptError: function (xhr, o) {
                try {
                    var oHttpInfo = this.getHttpStatusInfo(xhr, o);
                    if (this._configuration.isDebug && typeof console !== "undefined") {
                        console.debug("Sage.Utility.ErrorHandler._preemptError: xhr=%o; o=%o; oHttpInfo=%o", xhr, o, oHttpInfo);
                    }
                    if (!(oHttpInfo && typeof oHttpInfo === "object" && oHttpInfo.hasOwnProperty("sdataError"))) {
                        return false;
                    }
                    var fnGetHeaderValue = function (response, header) {
                        if (response && typeof response === "object" && typeof xhr.getResponseHeader !== "undefined" && header && dojo.isString(header)) {
                            var sUrl = response.getResponseHeader(header);
                            if (sUrl && Sage.Utility.isStringWithLength(sUrl)) {
                                return sUrl;
                            }
                        }
                        return null;
                    };
                    var fnGetExceptionRedirect = function (response) {
                        return fnGetHeaderValue(response, "Sage-SalesLogix-Exception-Redirect");
                    };
                    var fnGetSalesLogixErrorId = function (response) {
                        return fnGetHeaderValue(response, "Sage-SalesLogix-Error-Id");
                    };
                    var fnRedirect = function (url) {
                        if (typeof console !== "undefined") {
                            console.debug("Redirecting to %o", url);
                        }
                        window.location = url;
                    };
                    var sRedirect;

                    // First, check to see if we have an SData Diagnoses that was sent via the UnhandledMessagingServiceException handler.
                    if ((this.isSDataExceptionDiagnoses(oHttpInfo.sdataError.applicationCode) && (oHttpInfo.status == 500) &&
                        this._configuration.preemption.showUnhandledMessagingServiceExceptionMsg)) {
                        this.showStatusInfoError(oHttpInfo);
                        return true;
                    }

                    switch (oHttpInfo.status) {
                        case 401:
                            // 401: Unauthorized
                            if (typeof console !== "undefined") {
                                console.error("Unauthorized (401): %o", oHttpInfo.url);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 403:
                            // 403: Forbidden (used in many HttpHanders when IAuthenticationProvider::IsAuthenticated returns false). 
                            // NOTE: Only redirect if the HTTP response was coming from the current client.
                            if (typeof console !== "undefined") {
                                console.error("Forbidden (403): %o", oHttpInfo.url);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 404:
                            // 404: Not Found 
                            if (typeof console !== "undefined") {
                                console.error("Not Found (404): %o", oHttpInfo.url);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 408:
                            // 408: Request Timeout (this type of error is not handled anywhere else).
                            if (typeof console !== "undefined") {
                                console.error("Request Timeout: %o", oHttpInfo.url);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 500:
                            if (typeof console !== "undefined") {
                                console.error("Internal Server Error (500) - HTTP Info: %o", oHttpInfo);
                            }
                            if ((this.isSDataExceptionDiagnoses(oHttpInfo.sdataError.applicationCode) &&
                            this._configuration.preemption.showUnhandledMessagingServiceExceptionMsg) ||
                                this._configuration.preemption.showInternalServerErrorMsg) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 575:
                            // AuthTokenNullException
                            if (typeof console !== "undefined") {
                                console.error("AuthTokenNullException (575) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this._configuration.preemption.allowAuthRedirect) {
                                sRedirect = fnGetExceptionRedirect(xhr);
                                if (sRedirect !== null) {
                                    fnRedirect(sRedirect);
                                    return true;
                                }
                            }
                            return false;
                        case 576:
                            // BaseException (i.e. Exception.GetBaseException())                    
                            if (typeof console !== "undefined") {
                                console.error("BaseException (576) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this._configuration.preemption.showPreemptedErrorMsg) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 577:
                            // RoleAccessDeniedException
                            if (typeof console !== "undefined") {
                                console.error("RoleAccessDeniedException (577) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 578:
                            // ValidationException
                            if (typeof console !== "undefined") {
                                console.error("ValidationException (578) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 579:
                            // UserObservableException
                            if (typeof console !== "undefined") {
                                console.error("UserObservableException (579) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 580:
                            // HttpRequestValidationException
                            if (typeof console !== "undefined") {
                                console.error("HttpRequestValidationException (580) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 581:
                            // StringOrBinaryDataWouldBeTruncatedException (OleDbException)
                            if (typeof console !== "undefined") {
                                console.error("StringOrBinaryDataWouldBeTruncatedException (581) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        case 582:
                            // AccessException
                            if (typeof console !== "undefined") {
                                console.error("AccessException (582) - SalesLogix Error Id: %o; HTTP Info: %o", fnGetSalesLogixErrorId(xhr), oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                        default:
                            if (typeof console !== "undefined") {
                                console.debug("%o (%o) - HTTP Info: %o", oHttpInfo.statusText, oHttpInfo.status, oHttpInfo);
                            }
                            if (this.isConfiguredToHandle(oHttpInfo.status)) {
                                this.showStatusInfoError(oHttpInfo);
                                return true;
                            }
                            return false;
                    }
                } catch (e) {
                    if (typeof console !== "undefined") {
                        console.warn("Error in _preemptError(): %o", e);
                    }
                    return false;
                }
            },
            init: function () {
                this._mixinConfig();
                if (this._configuration.preemption.enabled) {

                    if (typeof console !== 'undefined') {
                        console.debug('init preemption');
                    }

                    // Note: Native calls to XMLHttpRequest cannot be preempted (e.g. new XMLHttpRequest()).
                    // You can add a call to ErrorHelper.handleHttpError() in the error handler of the XMLHttpRequest object.
                    // The recommendation is to use either Sage.SData.Client.* or the dojo.xhr* methods.

                    // Handle dojo XMLHTTPRequest errors
                    if (window.dojoConfig && window.dojoConfig.ioPublish && typeof window.dojoConfig.ioPublish === "boolean" && window.dojoConfig.ioPublish === true) {
                        dojo.subscribe("/dojo/io/error", function (dfd, response) {
                            if (dfd && typeof dfd === "object" && typeof dfd.ioArgs === "object") {
                                if ((Sage.Utility.ErrorHandler._hasErrorHandler(dfd.ioArgs.url) == false) || (dfd.ioArgs.xhr.status === 575)) {
                                    Sage.Utility.ErrorHandler._preemptError(dfd.ioArgs.xhr, { url: dfd.ioArgs.url });
                                }
                            }
                            return response;
                        });
                    } else {
                        (function () {
                            var oldRequest = dojo.xhr;
                            // ReSharper disable UnusedParameter
                            dojo.xhr = function (/*String*/method, /*dojo.__XhrArgs*/args, /*Boolean?*/hasBody) {
                                // ReSharper restore UnusedParameter
                                return oldRequest.apply(dojo, arguments).addErrback(function (err) {
                                    if (err && typeof err === "object" && (err instanceof Error) && typeof err.xhr === "object") {
                                        var sUrl = (args && args.url) ? args.url || "" : "";
                                        if ((Sage.Utility.ErrorHandler._hasErrorHandler(sUrl) == false) || (err.xhr.status === 575)) {
                                            Sage.Utility.ErrorHandler._preemptError(err.xhr, { url: sUrl });
                                        }
                                    }
                                    return err;
                                });
                            };
                        })();
                    }

                    // Handle Sage.SData.Client.Ajax XMLHTTPRequest errors
                    (function () {
                        var oldRequest = Sage.SData.Client.Ajax.request;
                        Sage.SData.Client.Ajax.request = function (o) {
                            dojo.mixin(o, {
                                // The .__failure property stores the original .failure callback, if any.
                                __failure: null,
                                // The .__failureHandler function defines the callback that is called for any AJAX failure. If the original
                                // request included a .failure callback the original .failure callback is called unless there was an
                                // unhandled server-side exception (i.e. 5xx) redirected to here from App_Code\Global.cs that requires
                                // either a redirection to Login.aspx or other special error handling.
                                __failureHandler: function (response, opt) {
                                    if (opt.__failure && typeof opt.__failure === "function") {
                                        try {
                                            opt.__failure.call(opt.scope || this, response, opt);
                                        } catch (e) {
                                            if (typeof console !== "undefined") {
                                                console.error("There was an error calling the original failure() handler: %o", e);
                                            }
                                        }
                                    }
                                    var sUrl = opt.url;
                                    if ((Sage.Utility.ErrorHandler._hasErrorHandler(sUrl) == false) || (response.status === 575)) {
                                        Sage.Utility.ErrorHandler._preemptError(response, opt);
                                    }
                                    return response;
                                }
                            });
                            if (typeof o.failure === "function") {
                                o.__failure = o.failure;
                            }
                            o.failure = o.__failureHandler;
                            return oldRequest.apply(this, arguments);
                        };
                    })();

                    // Handle $ajax XMLHTTPRequest errors
                    // Note: See also dojo.jq (jQuery compatibility layer) and its ajaxError handling.
                    if (typeof $ === 'function') {
                        $(function () {
                            // http://api.jquery.com/ajaxError/
                            // ReSharper disable UnusedParameter
                            jQuery(this).ajaxError(function (event, jqXhr, ajaxSettings, thrownError) {
                                // ReSharper restore UnusedParameter
                                var sUrl = (typeof ajaxSettings === "object") ? (ajaxSettings.url || "") : "";
                                var options = { url: sUrl };
                                if ((Sage.Utility.ErrorHandler._hasErrorHandler(sUrl) == false) || (jqXhr.status === 575)) {
                                    Sage.Utility.ErrorHandler._preemptError(jqXhr, options);
                                }
                            });
                        });
                    }
                }
            },
            _getInternalHttpStatus: function (statusInfo) {
                if (statusInfo && typeof statusInfo === "object" && statusInfo.hasOwnProperty("status") && (isNaN(statusInfo.status) == false)) {
                    if (typeof statusInfo.sdataError === "object" &&
                        this.isSDataExceptionDiagnoses(statusInfo.sdataError.applicationCode) &&
                            typeof statusInfo.sdataError.appInfo === "object" && typeof statusInfo.sdataError.appInfo.exceptionKind === "string") {

                        switch (statusInfo.sdataError.appInfo.exceptionKind) {
                            case "AuthTokenNullException":
                                return 575;
                            case "BaseException":
                                if (Number(statusInfo.status) == 500) {
                                    return 576;
                                }
                                else {
                                    return Number(statusInfo.status);
                                }
                            case "RoleAccessDeniedException":
                                return 577;
                            case "ValidationException":
                                return 578;
                            case "UserObservableException":
                                return 579;
                            case "HttpRequestValidationException":
                                return 580;
                            case "StringOrBinaryDataWouldBeTruncatedException":
                                return 581;
                            case "AccessException":
                                return 582;
                            default:
                                return Number(statusInfo.status);
                        }
                    } else {
                        return Number(statusInfo.status);
                    }
                }
                return -1;
            },
            _getStatusInfoOptions: function (opt) {
                var options = {
                    "message": "",
                    "url": ""
                };
                if (opt && dojo.isObject(opt)) {
                    dojo.mixin(options, opt);
                }
                return options;
            },
            _handleAsDojoXhrHttpError: function (error, ioargs, opt) {
                var options = this._getStatusInfoOptions(opt);
                var sError = "";
                if (error && dojo.isObject(error)) {
                    sError = error.message || "";
                }
                if (sError != "" && options.message != "")
                    options.message = options.message + " " + sError;
                else
                    options.message = sError;
                var xhr = (ioargs && dojo.isObject(ioargs) && ioargs.xhr && dojo.isObject(ioargs.xhr)) ? ioargs.xhr : null;
                if (options.url == "" && xhr != null && dojo.isString(ioargs.url))
                    options.url = ioargs.url;
                this._handleAsHttpError(xhr, null, options);
            },
            _handleAsHttpError: function (xhr, sdata, options) {
                var oStatusInfo = this.getHttpStatusInfo(xhr, sdata);
                if (oStatusInfo != null)
                    this.showStatusInfoError(oStatusInfo, options);
                else {
                    var sMessage = (options && dojo.isObject(options) && Sage.Utility.isStringWithLength(options.message)) ? options.message : "There was an unknown error in response to an HTTP request.";
                    Dialogs.showError(sMessage);
                }
            },
            _hasErrorHandler: function (url) {
                var hasErrorHandler = 'HASERRORHANDLER'; //DNL
                if (url && dojo.isString(url) && url.toUpperCase().indexOf(hasErrorHandler) != -1) {
                    var query = url.substring(url.indexOf('?') + 1, url.length);
                    if (query != '') {
                        var queryObject = ioQuery.queryToObject(query.toUpperCase());
                        if (queryObject && dojo.isObject(queryObject)) {
                            return queryObject[hasErrorHandler] === 'TRUE';
                        }
                    }
                }
                return false;
            },
            handleEndRequestError: function (args) {
                // IMPORTANT: This method is called from the callback Sage.Utility.hideRequestIndicator which is
                //            setup via Sys.WebForms.PageRequestManager.getInstance().add_endRequest(). The args
                //            may or may [not] represent an error.

                if (this._debugEndRequest && typeof console !== 'undefined') {
                    console.debug('handleEndRequestError: args=%o', args);
                }

                if (args && typeof args === 'object' && typeof args.get_error === 'function' && args.get_error() !== null) {

                    try {

                        function cleanMessage(msg) {
                            if (msg && dojo.isString(msg)) {
                                // See C:\Program Files (x86)\Microsoft ASP.NET\ASP.NET 2.0 AJAX Extensions\v1.0.61025
                                // \MicrosoftAjaxLibrary\System.Web.Extensions\1.0.61025.0\MicrosoftAjaxWebForms.debug.js
                                return msg
                                    .replace('Sys.WebForms.PageRequestManagerServerErrorException: ', '')
                                    .replace('Sys.WebForms.PageRequestManagerParserErrorException: ', '')
                                    .replace('Sys.WebForms.PageRequestManagerTimeoutException: ', '');
                            }
                            return msg;
                        }

                        switch (args.get_error().name) {
                            case 'Sys.WebForms.PageRequestManagerTimeoutException':
                            case 'Sys.WebForms.PageRequestManagerParserErrorException':
                                Dialogs.showError(cleanMessage(args.get_error().message));
                                args.set_errorHandled(true);
                                return;
                        }

                        var message = cleanMessage(args.get_error().message);
                        var httpStatusCode = args.get_error().httpStatusCode;
                        if (message === '${AjaxLoginRedirect}' || message === '${LoginRedirect}' || httpStatusCode == 401 || httpStatusCode == 575) {
                            if (this._configuration.preemption.allowAuthRedirect) {
                                var redirectUrl = this._configuration.authenticationRedirectUrl || 'Login.aspx';
                                if (typeof console !== 'undefined') {
                                    console.debug('handleEndRequestError: ' + message + ' - Redirecting to ' + redirectUrl);
                                }
                                args.set_errorHandled(true);
                                window.location = redirectUrl;
                                return;
                            }
                        }

                        // Handle Sys.WebForms.PageRequestManagerServerErrorException
                        var hasResponse = args.get_response() !== null;
                        // Is it possible there can be a timeout event if the get_error().name is not
                        // Sys.WebForms.PageRequestManagerTimeoutException?
                        var timedout = hasResponse ? args.get_response().get_timedOut() : false;
                        var aborted = hasResponse ? args.get_response().get_aborted() : false;
                        var statusCode = hasResponse ? args.get_response().get_statusCode() : -1;
                        var responseAvaiable = hasResponse ? args.get_response().get_responseAvailable() : false;

                        if (this._debugEndRequest && typeof console !== 'undefined') {
                            console.debug('hasResponse: %o', hasResponse);
                            console.debug('statusCode: %o', statusCode);
                            console.debug('responseAvaiable: %o', responseAvaiable);
                            console.debug('name: %o', args.get_error().name);
                            console.debug('timedout: %o', timedout);
                            console.debug('aborted: %o', aborted);
                        }

                        // HTTP request was interrupted or aborted
                        if (statusCode == 0 || aborted) {
                            args.set_errorHandled(true);
                            return;
                        }

                        var hasXhr = responseAvaiable ?
                            (args.get_response().hasOwnProperty('_xmlHttpRequest') && args.get_response()._xmlHttpRequest !== null)
                            : false;

                        if (this._debugEndRequest && typeof console !== 'undefined') {
                            console.debug('hasXhr: %o', hasXhr);
                        }

                        if (hasXhr || timedout) {

                            var xhr = args.get_response()._xmlHttpRequest;
                            if (this._debugEndRequest && typeof console !== 'undefined') {
                                console.debug('xhr: %o', xhr);
                            }

                            if (statusCode == 200 || timedout) {
                                // NOTE: If the statusCode is 200 it means the Exception was handled by the
                                //       ScriptManager.AsyncPostBackError error handler. The AsyncPostBackError
                                //       handler does not appear to handle the System.Web.HttpRequestValidationException
                                //       exception type, so that type bubbles to the server and then we'll get the
                                //       SalesLogix JSON Error Response with a statusCode of 580. The reason for this 
                                //       appears to be that the HttpRequestValidationException is raised in the
                                //       HttpRequest object, which means the AsyncPostBackError error handler is 
                                //       never reached; however, EndRequest is still called, but with the XHR that
                                //       contains the SalesLogix JSON Error Response and statusCode.
                                if (this._debugEndRequest && typeof console !== 'undefined') {
                                    console.debug('message [1]: %o', cleanMessage(args.get_error().message));
                                }
                                Dialogs.showError(cleanMessage(args.get_error().message));
                                args.set_errorHandled(true);
                                return;
                            }

                            // Is the ErrorHandler configured to handle the statusCode?
                            // Note: isConfiguredToHandle() also takes into consideration whether or not preemption is enabled.
                            var canBeHandled = this.isConfiguredToHandle(statusCode, xhr);

                            if (this._debugEndRequest && typeof console !== 'undefined') {
                                console.debug('canBeHandled: %o', canBeHandled);
                            }

                            // Handle HTTP responses other than those with a statusCode of 200 (e.g. 580).

                            // If preemption is enabled and the status code is set up to be handled by preemption, then call
                            // _preemptError(); otherwise, call handleHttpError().               
                            if (canBeHandled) {
                                if (this._debugEndRequest && typeof console !== 'undefined') {
                                    console.debug('calling this._preemptError(xhr)');
                                }
                                this._preemptError(xhr);
                            } else {
                                if (this._debugEndRequest && typeof console !== 'undefined') {
                                    console.debug('this.handleHttpError(xhr)');
                                }
                                this.handleHttpError(xhr);
                            }
                            args.set_errorHandled(true);
                            return;
                        }

                        if (this._debugEndRequest && typeof console !== 'undefined') {
                            console.debug('message [2]: %o', cleanMessage(args.get_error().message));
                        }

                        // Failsafe
                        Dialogs.showError(cleanMessage(args.get_error().message));
                        args.set_errorHandled(true);

                    } catch (e) {
                        if (typeof console !== 'undefined') {
                            console.error('There was an error in handleEndRequestError(): %o', e);
                        }
                    }
                } else {
                    if (this._debugEndRequest && typeof console !== 'undefined') {
                        console.debug('No error in handleEndRequestError to handle');
                    }
                }
            },
            handleHttpError: function (arg1, arg2, options) {
                var bFirstArgIsXhr = (arg1 && dojo.isObject(arg1) && typeof arg1.getResponseHeader !== "undefined");
                if (bFirstArgIsXhr)
                    this._handleAsHttpError(arg1, arg2, options);
                else
                    this._handleAsDojoXhrHttpError(arg1, arg2, options);
            },
            getInterceptedError: function (responseText, isJson) {
                if (!Sage.Utility.isStringWithLength(responseText)) {
                    return null;
                }
                if (Sage.Utility.isTrue(isJson)) {
                    var obj = dojo.fromJson(responseText);
                    if (obj && typeof obj === "object") {
                        return obj;
                    }
                } else {
                    return { "text": responseText };
                }
                return null;
            },
            getSDataDiagnosis: function (responseText, isXml) {
                if (!Sage.Utility.isStringWithLength(responseText)) {
                    return null;
                }
                var obj;
                if (Sage.Utility.isTrue(isXml)) {
                    var xml = new XML.ObjTree();
                    obj = xml.parseXML(responseText);
                    if (obj && typeof obj === "object" && obj.hasOwnProperty("sdata:diagnoses")) {
                        obj = obj["sdata:diagnoses"]["sdata:diagnosis"];
                        if (!obj || typeof obj !== "object") {
                            return null;
                        }
                        var fnGetProp = function (prop) {
                            var value = obj.hasOwnProperty(prop) ? obj[prop] : "";
                            // "value" could be an object with a property named -xsi:nil which represents an empty nullable string.
                            // Make sure we have a string.
                            if (value && dojo.isString(value)) {
                                if (prop === "stackTrace") {
                                    if (!this._configuration.isDebug) {
                                        return "";
                                    }
                                }
                                return value;
                            }
                            return "";
                        };
                        return {
                            "severity": fnGetProp("sdata:severity"),
                            "sdataCode": fnGetProp("sdata:sdataCode"),
                            "applicationCode": fnGetProp("sdata:applicationCode"),
                            "message": fnGetProp("sdata:message"),
                            "stackTrace": fnGetProp("sdata:stackTrace"),
                            "payloadPath": fnGetProp("sdata:payloadPath")
                        };
                    }
                } else {
                    obj = dojo.fromJson(responseText);
                    if (obj && dojo.isArray(obj) && obj.length > 0 && typeof obj[0] === "object" && obj[0].hasOwnProperty("sdataCode")) {
                        return obj[0];
                    }
                }
                return null;
            },
            getHttpStatusInfo: function (xhr, sdata) {
                var bIsXhr = (xhr && dojo.isObject(xhr) && typeof xhr.getResponseHeader !== "undefined");
                if (!bIsXhr) {
                    return null;
                }
                var iStatus = this.safeGetPropValue(xhr, "status", -1);
                var sStatusText = this.safeGetPropValue(xhr, "statusText", "Unknown HTTP status. Possible timeout.");
                var oStatusInfo = {
                    "message": dString.substitute("HTTP status: ${0} (${1}).", [sStatusText, iStatus]),
                    "status": iStatus,
                    "statusText": sStatusText,
                    "url": (sdata && dojo.isObject(sdata) && dojo.isString(sdata.url)) ? sdata.url : "",
                    "sdataError": {}
                };
                if (xhr.readyState !== 4) {
                    return oStatusInfo;
                }
                var sContentType = xhr.getResponseHeader("Content-Type");
                if (dojo.isString(sContentType)) {
                    var self = this;
                    switch (iStatus) {
                        case 576:
                            // Exception.GetBaseException()
                        case 577:
                            // RoleAccessDeniedException
                        case 578:
                            // ValidationException
                        case 579:
                            // UserObservableException
                        case 580:
                            // HttpRequestValidationException
                        case 581:
                            // StringOrBinaryDataWouldBeTruncatedException (OleDbException)
                        case 582:
                            // AccessException
                            var oErrorInfo;
                            var fnGetErrorInfo = function (isJson) {
                                var sResponseText = self.safeGetPropValue(xhr, "responseText", "");
                                return self.getInterceptedError(sResponseText, isJson);
                            };
                            if (sContentType.indexOf("application/json") !== -1) {
                                oErrorInfo = fnGetErrorInfo(true);
                            } else if (sContentType.indexOf("text/plain") !== -1) {
                                oErrorInfo = fnGetErrorInfo(false);
                                if (oErrorInfo && typeof oErrorInfo === "object" && oErrorInfo.hasOwnProperty("text")) {
                                    if (iStatus === 576) {
                                        oStatusInfo.message += "\r\n\r\n" + oErrorInfo.text;
                                    } else {
                                        oStatusInfo.message = oErrorInfo.text;
                                    }
                                    return oStatusInfo;
                                }
                            } else {
                                return oStatusInfo;
                            }
                            if (oErrorInfo && typeof oErrorInfo === "object" && oErrorInfo.hasOwnProperty("slxErrorId")) {
                                oStatusInfo.errorInfo = oErrorInfo;
                            }
                            break;
                        default:
                            var oDiagnosis;
                            var fnGetDiagnosis = function (isXml) {
                                var sResponseText = self.safeGetPropValue(xhr, "responseText", "");
                                return self.getSDataDiagnosis(sResponseText, isXml);
                            };
                            if (sContentType.indexOf("application/json") !== -1) {
                                oDiagnosis = fnGetDiagnosis(false);
                            } else if (sContentType.indexOf("application/xml") !== -1) {
                                oDiagnosis = fnGetDiagnosis(true);
                            } else {
                                return oStatusInfo;
                            }
                            if (oDiagnosis && typeof oDiagnosis === "object" && oDiagnosis.hasOwnProperty("sdataCode")) {
                                var sdataError = {
                                    "severity": "",
                                    "sdataCode": "",
                                    "applicationCode": "",
                                    "message": "",
                                    "stackTrace": "",
                                    "payloadPath": "",
                                    fmtError: function () {
                                        var arrProp = [];
                                        for (var prop in this) {
                                            // "message" and "stackTrace" are handled separately, so exclude them.
                                            if (prop == "message" || prop == "stackTrace" || prop == "fmtError")
                                                continue;
                                            var value = this[prop];
                                            if (dojo.isString(value) && value != "")
                                                arrProp.push(dString.substitute("${0}=${1}", [prop.toString(), value]));
                                        }
                                        return (arrProp.length > 0) ? arrProp.join("; ") : "";
                                    }
                                };

                                oStatusInfo.sdataError = sdataError;
                                dojo.mixin(oStatusInfo.sdataError, oDiagnosis);

                                if (oStatusInfo.sdataError.applicationCode && this.isSDataExceptionDiagnoses(oStatusInfo.sdataError.applicationCode)) {
                                    var fnGetInfo = function () {
                                        var obj = {};
                                        var arrAppData = oStatusInfo.sdataError.applicationCode.split("; ");
                                        array.forEach(arrAppData, function (item) {
                                            if (item && dojo.isString(item) && item.indexOf("=") !== -1) {
                                                var arrItem = item.split("=");
                                                var name = arrItem[0].trim();
                                                var value = arrItem[1].trim();
                                                obj[name] = value;
                                            }
                                        });
                                        return obj;
                                    };
                                    oStatusInfo.sdataError.appInfo = fnGetInfo();
                                    if (oStatusInfo.sdataError.appInfo.hasOwnProperty("code") && oStatusInfo.sdataError.appInfo.source) {
                                        oStatusInfo.sdataError.applicationCode = oStatusInfo.sdataError.appInfo.code + "|" +
                                        oStatusInfo.sdataError.appInfo.source;
                                    } else {
                                        oStatusInfo.sdataError.applicationCode = oStatusInfo.sdataError.appInfo.source;
                                    }
                                    if (oStatusInfo.sdataError.appInfo.source) {
                                        delete oStatusInfo.sdataError.appInfo.source;
                                    }
                                }

                                var sSeverity = "UNKNOWN";
                                if (Sage.Utility.isStringWithLength(oStatusInfo.sdataError.severity)) {
                                    sSeverity = oStatusInfo.sdataError.severity.toUpperCase();
                                }
                                var oDescriptionMap = {
                                    "INFO": "Informational message",
                                    "WARNING": "Warning message",
                                    "TRANSIENT": "Transient error",
                                    "ERROR": "Operation failed",
                                    "FATAL": "Severe error",
                                    "UNKNOWN": "Unknown"
                                };
                                var sDescription = oDescriptionMap[sSeverity] || oDescriptionMap["UNKNOWN"];
                                var sMessage = oStatusInfo.sdataError.message;
                                if (dojo.isString(sMessage)) {
                                    if (sMessage.trim().match("." + "$") != ".") {
                                        sMessage += ".";
                                    }
                                }
                                if (this._configuration.isDebug) {
                                    oStatusInfo.message = dString.substitute(
                                    "The following SData diagnosis occurred: Description=${0}. Message=${1} HTTP status: ${2} (${3}).",
                                    [sDescription, sMessage, oStatusInfo.statusText, oStatusInfo.status]);
                                } else {
                                    var internalStatus = this._getInternalHttpStatus(oStatusInfo);
                                    var showHttpStatus = true;
                                    switch (internalStatus) {
                                        // RoleAccessDeniedException                                                                                      
                                        case 577:
                                            if (!this._configuration.showExtendedRoleAccessDeniedException) {
                                                showHttpStatus = false;
                                            }
                                            break;
                                        // ValidationException                                                                                      
                                        case 578:
                                            if (!this._configuration.showExtendedValidationException) {
                                                showHttpStatus = false;
                                            }
                                            break;
                                        // AccessException                                                                                     
                                        case 582:
                                            showHttpStatus = false;
                                            break;
                                    }
                                    if (showHttpStatus) {
                                        oStatusInfo.message = dString.substitute("${0} HTTP status: ${1} (${2}).",
                                        [sMessage, oStatusInfo.statusText, oStatusInfo.status]);
                                    } else {
                                        oStatusInfo.message = sMessage;
                                    }
                                }
                            }
                            break;
                    }
                }
                return oStatusInfo;
            },
            isConfiguredToHandle: function (statusCode, xhr) {
                var result = false;
                if (this._configuration.preemption.enabled == false) return false;
                if (statusCode && isNaN(statusCode) == false) {
                    switch (Number(statusCode)) {
                        case 500:
                            if (this._configuration.preemption.showInternalServerErrorMsg) {
                                return true;
                            }
                            if (this._configuration.preemption.showUnhandledMessagingServiceExceptionMsg) {
                                var statusInfo = this.getHttpStatusInfo(xhr);
                                if (!(statusInfo && typeof statusInfo === "object" && statusInfo.hasOwnProperty("sdataError"))) {
                                    return false;
                                }
                                return this.isSDataExceptionDiagnoses(statusInfo.sdataError.applicationCode);
                            }
                            break;
                        case 575:
                            return this._configuration.preemption.allowAuthRedirect;
                        case 576:
                            return this._configuration.preemption.showPreemptedErrorMsg;
                        default:
                            if (this._configuration.preemption.handledStatusCodes != '') {
                                var arrStatusCodes = this._configuration.preemption.handledStatusCodes.split(',');
                                array.some(arrStatusCodes, function (sc) {
                                    if (sc == statusCode) {
                                        result = true;
                                        return true;
                                    } else {
                                        return false;
                                    }
                                });
                            }
                            break;
                    }
                }
                return result;
            },
            isSDataExceptionDiagnoses: function (applicationCode) {
                if (applicationCode && typeof applicationCode === "string" && applicationCode.indexOf("SDataExceptionDiagnoses") != -1) {
                    return true;
                }
                return false;
            },
            preemptError: function (xhr, o) {
                this._preemptError(xhr, o);
            },
            safeGetPropValue: function (obj, prop, defaultValue) {
                /* This function was created to address an issue where reading from a valid XmlHttpRequest object
                * raises an exception if the XmlHttpRequest object represents an HTTP session that has timed out
                * or when the xhr.readyState is != 4. Some of the problematic properties include xhr.status,
                * xhr.statusText, xhr.getResponseHeader() and xhr.responseText. Not all browsers have the same behavior.
                * http://msdn.microsoft.com/en-us/library/windows/desktop/ms753800(v=vs.85).aspx
                * 'In MSXML 3.0 and later, reading the status property after loading has commenced but has not
                * yet completed (for example, at the LOADED or INTERACTIVE state) returns the following error:
                * "The data necessary to complete this operation is not yet available."' */
                try {
                    return obj[prop];
                } catch (e) {
                    return defaultValue;
                }
            },
            showStatusInfoError: function (statusInfo, opt) {
                var options = this._getStatusInfoOptions(opt);
                var sMessage = options.message;

                var sPlainTextStackTrace = "";
                var sStackTraceWithTextArea = "";

                var sPlainSlxErrorIdMsg = "";
                var sSlxErrorIdMsgWithLink = "";

                // The internalStatus should [not] be used for display purposes. The Sage.Integration.Server sends
                // an HTTP status of 500 for all of its errors. The _getInternalHttpStatus() function translates
                // the statusInfo.sdataError.appInfo.exceptionKind into the exception kind that should be handled (e.g. 576, 577, etc.).
                var internalStatus = this._getInternalHttpStatus(statusInfo);

                if ((internalStatus == 575) && this._configuration.preemption.allowAuthRedirect) {
                    window.location = this._configuration.authenticationRedirectUrl || 'Login.aspx';
                    return;
                }

                if (statusInfo && dojo.isObject(statusInfo) && dojo.isString(statusInfo.message)) {

                    sMessage += (sMessage == "") ? statusInfo.message : " " + statusInfo.message;

                    switch (internalStatus) {
                        case 575:
                            // AuthTokenNullException
                        case 576:
                            // BaseException
                        case 577:
                            // RoleAccessDeniedException
                        case 578:
                            // ValidationException
                        case 579:
                            // UserObservableException
                        case 580:
                            // HttpRequestValidationException
                        case 581:
                            // StringOrBinaryDataWouldBeTruncatedException (OleDbException)
                        case 582:
                            // AccessException
                            sMessage = Sage.Utility.htmlEncode(statusInfo.message);
                            if (typeof statusInfo.errorInfo === "object") {
                                sMessage = Sage.Utility.htmlEncode(statusInfo.errorInfo.message);
                            }
                            switch (internalStatus) {
                                case 577:
                                    if (!this._configuration.showExtendedRoleAccessDeniedException) {
                                        Dialogs.showError(sMessage);
                                        return;
                                    }
                                    break;
                                case 578:
                                    if (!this._configuration.showExtendedValidationException) {
                                        Dialogs.showError(sMessage);
                                        return;
                                    }
                                case 579:
                                    break;
                                case 576:
                                case 580:
                                case 581:
                                    if (statusInfo.status != 500) {
                                        sMessage += dString.substitute(" HTTP status: ${info.statusText} (${info.status}).", { info: statusInfo });
                                    }
                                    break;
                                case 582:
                                    Dialogs.showError(sMessage);
                                    return;
                            }
                            break;
                    }

                    if (typeof statusInfo.sdataError === "object" && typeof statusInfo.sdataError.appInfo === "object") {
                        sPlainSlxErrorIdMsg = dString.substitute("\r\n\r\nSalesLogix Error Id: ${0}", [statusInfo.sdataError.appInfo.slxErrorId]);
                        sSlxErrorIdMsgWithLink = this._fmtSlxErrorId(statusInfo.sdataError.appInfo.slxErrorId);
                        sMessage += sSlxErrorIdMsgWithLink;
                    }
                    if (typeof statusInfo.errorInfo === "undefined") {
                        var sUrl = null;
                        if (Sage.Utility.isStringWithLength(statusInfo.url)) {
                            if (sMessage.indexOf(decodeURIComponent(statusInfo.url)) == -1) {
                                sUrl = decodeURIComponent(statusInfo.url);
                            }
                        } else if (Sage.Utility.isStringWithLength(options.url)) {
                            if (sMessage.indexOf(decodeURIComponent(options.url)) == -1) {
                                sUrl = decodeURIComponent(options.url);
                            }
                        }
                        if (sUrl !== null) {
                            sMessage += dString.substitute("\r\n\r\nURL: ${0}", [sUrl]);
                        }
                    }
                    if (this._configuration.isDebug) {
                        // Are we dealing with an SData error object?
                        if (typeof statusInfo.sdataError === "object") {
                            if (dojo.isFunction(statusInfo.sdataError.fmtError)) {
                                sMessage += dString.substitute("\r\n\r\nExtended SData diagnosis information: ${0}.", [statusInfo.sdataError.fmtError()]);
                            }
                            if (typeof statusInfo.sdataError.appInfo === "object") {
                                sMessage += dString.substitute("\r\n\r\nException type: ${info.exceptionType}\r\n\r\nSource: ${info.exceptionSource}",
                                    { info: statusInfo.sdataError.appInfo });
                            }
                            if (statusInfo.sdataError.stackTrace) {
                                sPlainTextStackTrace = statusInfo.sdataError.stackTrace;
                                sStackTraceWithTextArea = this._fmtStackTrace(statusInfo.sdataError.stackTrace);
                                sMessage += sStackTraceWithTextArea;
                            }
                        }
                    }
                    var mail = { subject: "SalesLogix Exception Details" };
                    // Are we dealing with an ErrorInfo object?
                    if (typeof statusInfo.errorInfo === "object") {
                        sPlainSlxErrorIdMsg = dString.substitute("\r\n\r\nSalesLogix Error Id: ${0}", [statusInfo.errorInfo.slxErrorId]);
                        sSlxErrorIdMsgWithLink = this._fmtSlxErrorId(statusInfo.errorInfo.slxErrorId);
                        sMessage += sSlxErrorIdMsgWithLink;
                        sMessage += dString.substitute("\r\n\r\nURL: ${info.request.url}", { info: statusInfo.errorInfo });
                        if (this._configuration.isDebug) {
                            if (statusInfo.errorInfo.stackTrace) {
                                sPlainTextStackTrace = statusInfo.errorInfo.stackTrace;
                                sStackTraceWithTextArea = this._fmtStackTrace(statusInfo.errorInfo.stackTrace);
                                statusInfo.errorInfo.__stackTrace = sStackTraceWithTextArea;
                                sMessage += dString.substitute("\r\n\r\nException type: ${info.type}\r\n\r\nSource: ${info.source}${info.__stackTrace}\r\n\r\nTarget site: ${info.targetSite}", { info: statusInfo.errorInfo });
                            }
                        }
                        mail.subject = dString.substitute("SalesLogix Exception Details (SalesLogix Error Id: ${0})", [statusInfo.errorInfo.slxErrorId]);
                    }
                    mail.subject = encodeURIComponent(mail.subject);
                    if (sPlainTextStackTrace != "") {
                        sPlainTextStackTrace = dString.substitute("\r\n\r\nStack trace:\r\n${0}", [sPlainTextStackTrace]);
                    }
                    mail.message = encodeURIComponent(Sage.Utility.htmlDecode(sMessage
                            .replace(sStackTraceWithTextArea, sPlainTextStackTrace)
                            .replace(sSlxErrorIdMsgWithLink, sPlainSlxErrorIdMsg)));
                    mail.linkCaption = "Mail details of this exception to your administrator";
                    sMessage += dString.substitute("\r\n\r\n<a href=\"mailto:?subject=${info.subject}&amp;body=${info.message}\">${info.linkCaption}</a>", { info: mail });
                }
                if (sMessage == "") {
                    sMessage = "There was an unknown error.";
                }
                sMessage = sMessage.replace(/(\r\n)/g, "<br />");
                Dialogs.showError(sMessage);
            }
        });

        Sage.Utility.ErrorHandler.init();

        return Sage.Utility.ErrorHandler;
    }
);

},
'Sage/UI/GroupsTitlePaneConfigProvider':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GroupsTitlePaneConfigProvider", [
        'Sage/UI/_TitlePaneConfigProvider',
        'Sage/Data/BaseSDataStore',
        'Sage/UI/GroupMenuFmtScope',
        'Sage/UI/GridMenuItem',
        'Sage/Groups/GroupManager',
        'Sage/Utility',
        'dojo/_base/array',
        'dojo/_base/declare',
        'dojo/_base/lang',
        'dojo/string',
        'Sage/Groups/GroupLookup',
        'Sage/UI/SearchMenuItem',
        'Sage/UI/ImageButton',
        'dojo/i18n!./nls/GroupsTitlePaneConfigProvider',
        'dijit/popup'
],
function (
        _TitlePaneConfigProvider,
        BaseSDataStore,
        GroupMenuFmtScope,
        GridMenuItem,
        GroupManager,
        Utility,
        array,
        declare,
        lang,
        string,
        GroupLookup,
        SearchMenuItem,
        ImageButton,
        resource,
        pm) {
    var provider = declare('Sage.UI.GroupsTitlePaneConfigProvider', _TitlePaneConfigProvider, {
        // summary:
        //      Implementation of Sage.UI._TitlePaneConfigProvider for use on SLX group based main views.
        //strings...
        searchText: 'Lookup',
        lookupResultsText: resource.lookupResultsText,
        //end strings...
        store: false,
        _requestOptions: false,
        _grpContextHandle: false,
        config: false,
        requestTitlePaneConfiguration: function (options) {
            var service,
                gSvc,
                context,
                menuConfig,
                lookupButton,
                tabConfig;

            // summary:
            //      Builds the config object for the title pane including the group tabs and group menu.
            if (this._isInsertMode()) {
                if (options.success) {
                    this.config = {
                        menu: false,
                        tabs: false
                    };
                    options.success.call(options.scope || this, this.config, this);
                }
                return;
            }

            service = Sage.Data.SDataServiceRegistry.getSDataService('system');
            this.store = new BaseSDataStore({
                service: service,
                resourceKind: 'groups',
                include: [],
                sort: [{ attribute: 'displayName', descending: false}]
            });

            gSvc = Sage.Services.getService('ClientGroupContext');
            context = gSvc.getContext();
            if (context.notGroupBased) {
                return;
            }

            if (!context.CurrentFamily) {
                this._requestOptions = options;
                this._grpContextHandle = dojo.connect(gSvc, 'onContextSet', this, '_groupContextSetCallback');
                return;
            }

            menuConfig = this._getMenuConfig();
            lookupButton = dijit.byId('GroupLookupButton');
            if (lookupButton) {
                lookupButton.destroy(true);
            }

            tabConfig = this._getTabConfig();

            this.config = {
                menu: menuConfig,
                tabs: tabConfig
            };

            if (options.success) {
                options.success.call(options.scope || this, this.config, this);
            }
        },
        _isInsertMode: function () {
            var mode = Sage.Utility.getModeId();
            return (mode && (mode.toLowerCase() === 'insert'));
        },
        _groupContextSetCallback: function (context) {
            if (this._grpContextHandle) {
                dojo.disconnect(this._grpContextHandle);
                this._grpContextHandle = false;
            } else {
                return;
            }
            this.config = {
                menu: this._getMenuConfig(),
                tabs: this._getTabConfig()
            };
            if (this._requestOptions.success) {
                this._requestOptions.success.call(this._requestOptions.scope || this, this.config, this);
            }
        },
        _getTabConfig: function () {
            var gSvc = Sage.Services.getService('ClientGroupContext'),
                context = gSvc && gSvc.getContext();
            return {
                store: this.store,
                selectedTabId: context.CurrentGroupID,
                tabKeyProperty: '$key',
                tabNameProperty: '$descriptor', // group display name
                tabGroupNameProperty: 'name', // group name
                tabHiddenProperty: 'isHidden',
                showTabContextMenus: true,
                fetchParams: {
                    query: string.substitute("upper(family) eq '${0}'", [context.CurrentFamily.toUpperCase()]),
                    count: 1000,
                    start: 0,
                    sort: [{ attribute: 'displayName'}]
                },
                lookupButton: new ImageButton({
                    id: 'GroupLookupButton',
                    label: '',
                    imageClass: 'icon_Find_16x16',
                    title: resource.lookupText,
                    onClick: function () {
                        var ctxService = Sage.Services.getService('ClientGroupContext'),
                            lupSvc;
                        if (ctxService) {
                            //show the lookup window...
                            lupSvc = Sage.Services.getService('GroupLookupManager');
                            if (lupSvc) {
                                lupSvc.showLookup();
                            }
                        }
                    }
                }),
                staticTabs: [
                    { '$key': 'LOOKUPRESULTS', '$descriptor': this.lookupResultsText, closable: false, contextMenuItems: this._getTabContextMenuItems() }
                ],
                onTabSelect: function (child, suppressReload) {
                    var id,
                        ctxService;

                    if (suppressReload) {
                        return;
                    }

                    id = (typeof child === "string") ? child : child.id;
                    ctxService = Sage.Services.getService('ClientGroupContext');

                    if (ctxService) {
                        if (id !== 'DOLOOKUP') {
                            ctxService.setCurrentGroup(id);
                        }
                    }
                },
                onTabClose: function (tab) {
                    Sage.Groups.GroupManager.HideGroup(tab.id);
                },
                onTabClick: function (e) {
                    // If the user is in detail mode and clicks the current group tab,
                    // send them back to the list mode. If they click a different group tab,
                    // they stay in detail mode. If they are in list mode already, do nothing.
                    var mode = Utility.getModeId(),
                        ctxService = Sage.Services.getService('ClientGroupContext'),
                        tabs = dijit.byId("GroupTabs"),
                        selectedId = '',
                        currentGroupId = '',
                        context = null,
                        target = e.target,
                        title = '';

                    if (mode !== 'detail') {
                        return;
                    }

                    array.forEach(tabs.getChildren(), function (item) {
                        if (item.selected) {
                            selectedId = item.id;
                            title = item.title;
                        }
                    });

                    if (ctxService) {
                        context = ctxService.getContext();
                        if (selectedId !== 'DOLOOKUP' && context) {
                            currentGroupId = context.CurrentGroupID;
                        }
                    }

                    if (selectedId === currentGroupId && target && target.innerHTML === title) {
                        Sage.Link.toListView();
                    }
                }
            };
        },
        _getTabContextMenuItems: function () {
            var items;
            if (Sage.UI.DataStore.ContextMenus && Sage.UI.DataStore.ContextMenus.GroupLookupTabContextMenu) {
                items = Sage.UI.DataStore.ContextMenus.GroupLookupTabContextMenu.items;
            }
            return items;
        },
        _getMenuConfig: function () {
            var groupContextSvc = Sage.Services.getService('ClientGroupContext'),
                context = groupContextSvc.getContext(),
                groupName = context.CurrentName || '';
            return {
                id: 'mnuGroupMenu',
                cls: '',
                img: 'images/icons/Groups_16x16.gif',
                imageClass: 'icon_Groups_16x16',
                text: resource.groupText,
                tooltip: resource.groupButtonTooltip,
                addGroupTooltip: resource.addGroupButtonTooltip,
                width: '350px',
                items: [
                    {
                        cls: '',
                        id: 'sep2',
                        text: '-',
                        img: '',
                        tooltip: '',
                        href: '',
                        isSeparator: true
                    }, {
                        fn: this._getGroupMenuSearch,
                        scope: this
                    }, {
                        //pass as a function so it gets called when it is time to create it...
                        fn: this._getGroupMenuGrid,
                        scope: this
                    }]
            };
        },
        _getGroupMenuGrid: function () {
            var that = this,
                fmtScope = new GroupMenuFmtScope({ store: this.store }),
                query = {},
                context = false,
                svc = Sage.Services.getService('ClientGroupContext'),
                key = 'GroupMenuShowHidden',
                checkState = sessionStorage.getItem(key),
                hidden = checkState !== 'true';

            if (svc) {
                context = svc.getContext();
                if (context.CurrentEntity) {
                    query = string.substitute('upper(family) eq \'${0}\'', [context.CurrentFamily.toUpperCase()]);
                }
            }
            return new GridMenuItem({
                gridOptions: {
                    id: 'groupsGridInMenu',
                    store: that.store,
                    rowsPerPage: 40,
                    structure: [
                        { name: '&nbsp;', field: '$key', formatter: 'fmtSelectedCol', width: '20px' },
                        {
                            name: resource.groupColumnText,
                            field: 'displayName',
                            width: hidden ? '260px' : '205px'
                        },
                        {
                            name: resource.visibleColumnText,
                            field: 'isHidden',
                            formatter: 'fmtHideCol',
                            width: '55px',
                            hidden: hidden
                        }
                    ],
                    loadingMessage: 'Loading...',
                    noDataMessage: 'No records returned',
                    selectionMode: 'single',
                    query: query,
                    height: '400px',
                    width: '275px',
                    formatterScope: fmtScope,
                    _onCellClick: function (e) {
                        // Change groups when the group name cell is clicked.
                        // Refresh the grid and cancel the bubble (so the menu does not close).
                        var record,
                            ctxService,
                            gridParent = e.grid.getParent(),
                            menu = gridParent && gridParent.getParent(),
                            fetchHandle,
                            groupChangeHandle,
                            isGroupChanging = false, // Do not reset tab config if changed groups
                            context;

                        if (!this.menuClosedHandle) {
                            this.menuClosedHandle = menu.on('close', lang.hitch(this, function () {
                                var titlePane = dijit.byId('titlePane');
                                if (titlePane && !isGroupChanging) {
                                    titlePane.resetConfiguration();
                                }
                                this.menuClosedHandle.remove();
                                this.menuClosedHandle = null;
                            }));
                        }

                        if (e.cell.index === 1) {
                            record = e.grid.getItem(e.rowIndex);
                            ctxService = Sage.Services.getService('ClientGroupContext');
                            if (ctxService) {
                                context = ctxService.getContext();

                                if (context && context.CurrentGroupID === record.$key) {
                                    pm.close(menu);
                                } else {
                                    groupChangeHandle = dojo.connect(ctxService, 'onCurrentGroupChanged', e.grid, function () {
                                        this._refresh();
                                        isGroupChanging = true;
                                        dojo.disconnect(groupChangeHandle);
                                    });

                                    ctxService.setCurrentGroup(record.$key);

                                    fetchHandle = dojo.connect(e.grid, '_onFetchComplete', menu, function () {
                                        dojo.disconnect(fetchHandle);
                                        pm.close(this);
                                    });
                                }

                            }

                        } else {
                            e.stopPropagation();
                        }
                    }
                },
                width: '300px',
                height: '400px'
            });
        },
        _getGroupMenuSearch: function () {
            return new SearchMenuItem({});
        }
    });

    return provider;
});

},
'Sage/MainView/ActivityMgr/nls/OccurrenceOrSeriesQueryDlg':function(){
﻿define("Sage/MainView/ActivityMgr/nls/OccurrenceOrSeriesQueryDlg", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleFmt: '${type} - ${description}',
            actDateText: 'Activity Date:',
            contactText: 'Contact:',
            accountText: 'Account:',
            opportunityText: 'Opportunity:',
            editAllText: 'Edit all Occurrences',
            editOneText: 'Edit this Occurrence',
            completeAllText: 'Complete all Occurrences',
            completeOneText: 'Complete this Occurrence',
            deleteAllText: 'Delete all Occurrences',
            deleteOneText: 'Delete this Occurrence',
            continueText: 'Continue',
            failedToLoadMsg: 'Could not load activity'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Columns/Email':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Columns/Email", [
    'Sage/UI/Controls/Email',
    'Sage/UI/Columns/Cell',
    'dojo/_base/declare'
],
function (Email, Cell, declare) {
    var widget = declare('Sage.UI.Columns.Email', Cell, {
        icon: '',
        defaultValue: '',
        widgetClass: Email,
        getWidgetProps: function (inDatum) {
            // Create a uniqueId for this widget.  Native dojox grid widgets are reused on every cell.
            // Sage EditableGrid cannot function this way.
            var controlId = this._getControlId();
            //Set the options for the currency config object
            return dojo.mixin({}, this.widgetProps || {}, {
                emailId: controlId,
                email: inDatum,
                width: this.width,
                maxLength: this.maxLength,
                style: this.style,
                hotKey: this.hotKey,
                tabIndex: this.tabIndex,
                field: this.field
            });
        },
        getValue: function (index) {
            //  summary:
            //  Retreives the value from the widget and applies it to the grid.
            //  If there is a validation error in the cell, return the old value, else return the new value.
            var retVal = this.widget.focusNode.value;
            if ((typeof retVal === 'undefined') || (retVal === '')) {
                retVal = this.defaultValue;
            }
            if (this.widget && this.widget.focusNode.state === "Error") {
                return this.widget.focusNode._resetValue;
            }
            return retVal;
        },
        formatter: function (val, index) {
            if (!val) return '';
            var dispstr = val; ;
            if (this.icon && this.icon !== '') {
                dispstr = (this.icon === true || this.icon === 'true')
                    ? '<img src="images/icons/Send_Write_email_16x16.png" />'
                    : '<img src="' + this.icon + '" />';
            }
            return dojo.string.substitute('<a href="mailto:${0}">${1}</a>', [val, dispstr]);
        },
        markupFactory: function (node, cell) {
            dojox.grid.cells.Cell.markupFactory(node, cell);
            if (dojo.hasAttr(node, 'icon')) {
                cell['icon'] = dojo.trim(dojo.attr(node, 'icon') || '');
            }
        }
    });

    return widget;
});
},
'Sage/Groups/GroupLookup':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Groups/GroupLookup", [
        'dijit/_Widget',
        'Sage/_Templated',
        'dijit/Dialog',
        'Sage/UI/ConditionManager',
        'Sage/Data/SDataServiceRegistry',
        'Sage/Groups/GroupContextService',
        'dojo/_base/lang',
        'dojo/_base/declare',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/array',
        'dojo/topic',
        'dojo/aspect',
        'Sage/Data/GroupLayoutSingleton'
    ],
function (
        _Widget,
        _Templated,
        Dialog,
        ConditionManager,
        sDataServiceRegistry,
        GroupContextService,
        lang,
        declare,
        _DialogHelpIconMixin,
        array,
        topic,
        aspect,
        GroupLayoutSingleton
    ) {
    var lookupDialog = declare('Sage.Groups.GroupLookupDialog', [_Widget, _Templated], {
        widgetsInTemplate: true,
        conditionMgr: false,
        title: '',
        widgetTemplate: new Simplate([
            '<div>',
                '<div data-dojo-type="dijit.Dialog" id="groupLookupDialog" title="&nbsp;" dojoAttachPoint="dlg" >',
                '</div>',
            '</div>'
        ]),
        constructor: function (o) {
        },
        show: function () {
            if (this.conditionMgr) {
                var userOptions = Sage.Services.getService('UserOptions');
                if (userOptions){
                    userOptions.get('defaultLookupCondition', 'DefaultLookupCondition', lang.hitch(this, function(option){
                        this.conditionMgr.setFirstConditionValue('', option.value, '');
                    }));
                }
                
                // mixin help icon
                lang.mixin(this.dlg, new _DialogHelpIconMixin());
                this.dlg.createHelpIconByTopic('lookup');
                
                this.dlg.show();
            }
        },
        hide: function () {
            this.dlg.hide();
        },
        _setConditionMgrAttr: function (conditionMgr) {
            this.conditionMgr = conditionMgr;
            dojo.place(this.conditionMgr.domNode, this.dlg.containerNode, 'only');
        },
        _setTitleAttr: function (title) {
            this.title = title;
            this.dlg.set('title', title);
        }
    });

    var groupLookup = declare('Sage.Groups.GroupLookup', null, {
        conditions: [],
        _layouts: {},
        _currentLayoutFamily: false,
        service: false,
        _dlgWindow: false,
        _conditionMgr: false,
        _doSearchConnection: false,
        _onSearchNavTo: false,
        id: 'GroupLookup',
        constructor: function () {
            this.isInitialized = false;
        },
        //public API
        //show the lookup dialog
        showLookup: function (opts) {
            if (typeof opts === 'undefined') {
                var cSvc = Sage.Services.getService("ClientGroupContext");
                this._currentLayoutFamily = cSvc.getContext().CurrentFamily;
                opts = { family: this._currentLayoutFamily };
            }
            this._onSearchNavTo = (opts.returnTo) ? opts.returnTo : false;
            if (!this._layouts.hasOwnProperty(opts.family)) {
                this._currentLayoutFamily = opts.family;
                //get the layout for this family...
                this._requestLayout({
                    family: opts.family,
                    success: this._showInitializedLookup
                });
                return;
            }
            
            if (this._currentLayoutFamily !== opts.family) {
                this._currentLayoutFamily = opts.family;
            }
            
            this._resetConditionManager();
            this._showInitializedLookup();
        },
        _showInitializedLookup: function () {
            var svc = Sage.Services.getService('ClientEntityContext'),
                context = svc && svc.getContext(),
                displayName = context && context.DisplayName,
                tableNameFromContext = context && context.EntityTableName,
                tableNameFromLayout = this._layouts[this._currentLayoutFamily]['mainTable'],
                entityName = this._layouts[this._currentLayoutFamily]['entityName'];
                
            if (!this._dlgWindow) {
                this._dlgWindow = new lookupDialog({ conditionMgr: this._conditionMgr });
            }
            if (!this._dlgWindow.conditionMgr) {
                this._dlgWindow.set('conditionMgr', this._conditionMgr);
            }

            if (tableNameFromContext !== tableNameFromLayout) {
                displayName = entityName;
            }
            
            this._dlgWindow.set('title', displayName);
            this._dlgWindow.show();
        },
        //connected to the Search button click handler for lookup dialog
        doLookup: function (args) {
            this._ensureService();
            this._dlgWindow.hide();
            var request = new Sage.SData.Client.SDataServiceOperationRequest(this.service);
            request.setOperationName('setGroupLookupConditions');
            request.execute({
                request: {
                    family: this._currentLayoutFamily,
                    conditions: this.getConditionsString(),
                    includeConditionsFrom: ''  // can put another group ID here to include conditions from that group...
                }
            }, {
                success: function (response) {
                    var navTo = this._onSearchNavTo + "?modeid=list&gid=LOOKUPRESULTS",
                        path = document.location.toString().toLowerCase(),
                        comp = this._onSearchNavTo && this._onSearchNavTo.toLowerCase();
                    
                    var grpCtxService = Sage.Services.getService('ClientGroupContext');
                    var context = grpCtxService.getContext();
                    if (context.CurrentFamily === this._currentLayoutFamily) {
                        aspect.after(grpCtxService, 'onCurrentGroupChanged', lang.hitch(this, function() {
                            topic.publish("/group/lookup/success", { 'conditions': this.getConditionsString() });
                        }));

                        grpCtxService.setCurrentGroup('LOOKUPRESULTS');
                    }

                    if (this._onSearchNavTo) {
                        if (path.indexOf(comp) === -1) {
                            document.location = navTo;
                            return;
                        }
                    }
                },
                scope: this
            });
        },
        // do we need this?
        resetLookup: function (data) {

        },
        //returns json string of the "conditions"
        getConditionsString: function () {
            return this._conditionMgr.getConditionsJSON();
        },
        _ensureService: function () {
            if (!this.service) {
                this.service = sDataServiceRegistry.getSDataService('system');
            }
        },
        //'private' internal helper methods
        _requestLayout: function (options) {
            this._ensureService();
            if (!options.family) {
                var grpContextSvc = Sage.Services.getService('ClientGroupContext');
                options[family] = grpContextSvc.getContext().CurrentFamily || 'ACCOUNT';
            }
            var predicate = dojo.string.substitute('name eq \'Lookup Results\' and upper(family) eq \'${0}\'', [options.family.toUpperCase()]),
                onSuccess = lang.hitch(this, this._onReadSuccess, options),
                singleton = new GroupLayoutSingleton();
            singleton.getGroupLayout(predicate, onSuccess, null, 'LOOKUPRESULTS'); 
        },
        _onReadSuccess: function (options, data) {
            this._layouts[options.family] = data;
            this._currentLayoutFamily = options.family;
            this._resetConditionManager();

            if (typeof options.success === 'function') {
                options.success.call(options.scope || this, data);
            }
        },
        _resetConditionManager: function () {
            if (!this._currentLayoutFamily) {
                return;
            }
            
            if (this._conditionMgr) {
                this._conditionMgr.destroy(false);
                this._conditionMgr = null;
            }
            
            var fields = array.filter(this._layouts[this._currentLayoutFamily]['layout'], function (field) {
                return field.caption && field.caption !== '' && field.visible;
            });
            
            // The format field is used by the condition manager to determine the type.
            // If it is set to None, attempt to use the fieldType property instead.
            // Unfortunately we can't switch to fieldType for User/DateTime, etc.
            fields = array.map(fields, function(field) {
                if (field.format && field.format === 'None') {
                    field.format = field.fieldType;
                }
                
                return field;
            });
            
            this._conditionMgr = new ConditionManager({
                fields: fields,
                fieldNameProperty: 'alias',
                fieldDisplayNameProperty: 'caption', // 'displayName',
                fieldTypeProperty: 'format',
                id: this.id + '-ConditionManager'
            });
            
            if (this._dlgWindow) {
                this._dlgWindow.set('conditionMgr', this._conditionMgr);
            }
            
            this._doSearchConnection = dojo.connect(this._conditionMgr, "onDoSearch", this, "doLookup");
        },
        destroy: function () {
            if (this._doSearchConnection) {
                dojo.disconnect(this._doSearchConnection);
                this._doSearchConnection = false;
            }
            this.inherited(arguments);
        }
    });

    Sage.Services.addService('GroupLookupManager', new Sage.Groups.GroupLookup());
    return groupLookup;
});
},
'Sage/UI/Alarms/AlarmPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Alarms/AlarmPane", [
    'dijit/form/Button',
    'dijit/form/FilteringSelect',
    'dojo/date',
    'Sage/Utility',
    'Sage/UI/Alarms/AlertPane',
    'Sage/UI/Alarms/ActivityAlarm',
    'dojo/i18n',
    'dojo/i18n!./nls/AlarmPane',
    'dojo/_base/declare',
    'dojo/topic'
],
function (button, FilteringSelect, dojoDate, utility, AlertPane, ActivityAlarm, i18n, alarmPaneStrings, declare, topic) {
    var alarmPane = declare('Sage.UI.Alarms.AlarmPane', AlertPane, {
        defaultSnooze: '5',
        _snoozeButton: false,
        templateString: [
        '<div>',
            '<div class="alarm-items-contents" dojoAttachPoint="_alertContents"></div>',
            '<div class="alarm-snoozebar" dojoAttachPoint="_snoozebar">',
                '<table>',
                    '<tr>',
                        '<td colspan="2" class="dismissActions">',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_dismissSelected">${dismissText}</button>',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_dismissAll">${dismissAllText}</button>',
                        '</td>',
                        '<td colspan="2" class="calendar-link">',
                            '<a href="calendar.aspx" title="${showCalendarText}">${showCalendarText}</a>',
                        '</td>',
                    '</tr><tr>',
                        '<td class="snoozeText">${snoozeByText}</td>',
                        '<td colspan="2" class="snoozeBy">',
                            '<select name="selectSnoozeBy" dojoAttachPoint="_selSnoozeBy" data-dojo-type="dijit.form.FilteringSelect">',
                                '<option value="5" {% if ($.defaultSnooze == 5) { %} selected="selected" {% } %}>${fiveMinText}</option>',
                                '<option value="10" {% if ($.defaultSnooze == 10) { %} selected="selected" {% } %}>${tenMinText}</option>',
                                '<option value="15" {% if ($.defaultSnooze == 15) { %} selected="selected" {% } %}>${fifteenMinText}</option>',
                                '<option value="30" {% if ($.defaultSnooze == 30) { %} selected="selected" {% } %}>${thirtyMinText}</option>',
                                '<option value="60" {% if ($.defaultSnooze == 60) { %} selected="selected" {% } %}>${oneHourText}</option>',
                                '<option value="120" {% if ($.defaultSnooze == 120) { %} selected="selected" {% } %}>${twoHourText}</option>',
                                '<option value="240" {% if ($.defaultSnooze == 240) { %} selected="selected" {% } %}>${fourHourText}</option>',
                                '<option value="480" {% if ($.defaultSnooze == 480) { %} selected="selected" {% } %}>${eightHourText}</option>',
                                '<option value="1440" {% if ($.defaultSnooze == 1440) { %} selected="selected" {% } %}>${oneDayText}</option>',
                                '<option value="2880" {% if ($.defaultSnooze == 2880) { %} selected="selected" {% } %}>${twoDayText}</option>',
                                '<option value="4320" {% if ($.defaultSnooze == 4320) { %} selected="selected" {% } %}>${threeDayText}</option>',
                                '<option value="10080" {% if ($.defaultSnooze == 10080) { %} selected="selected" {% } %}>${oneWeekText}</option>',
                                '<option value="20160" {% if ($.defaultSnooze == 20160) { %} selected="selected" {% } %}>${twoWeekText}</option>',
                            '</select>',
                        '</td>',
                        '<td class="snoozeActions">',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_snooze" dojoAttachPoint="_snoozeButton">${snoozeText}</button>',
                            '<button data-dojo-type="dijit.form.Button" type="button" dojoAttachEvent="onClick:_snoozeAll">${snoozeAllText}</button>',
                        '</td>',
                    '</tr>',
                '</table>',
            '</div>', // snoozebar
        '</div>'].join(''),
        constructor: function () {
            dojo.mixin(this, alarmPaneStrings);
        },
        _durByText: false,
        _textByDur: false,
        onShow: function () {
            this._snoozeButton.focus();
        },
        setDefaultSnooze: function (snooze) {
            this.defaultSnooze = snooze;
            this._setSnoozeSelect(snooze);
        },
        _addAlert: function (item) {
            if (this._alarmRinging(item)) {
                var alarmWid = new ActivityAlarm({ userActivity: item, selected: this.selectedAlerts.hasOwnProperty(item['$key']) });
                this.alertWidgets.push(alarmWid);
                dojo.place(alarmWid.domNode, this._alertContents);
            }
        },
        _alarmRinging: function (userActivity) {
            var n = new Date();
            var alarmTime;
            var alarm;
            if ((userActivity.Alarm == null) && (userActivity.AlarmTime == null)) {
                alarmTime = utility.Convert.toDateFromString(userActivity.Activity.AlarmTime);
                alarm = userActivity.Activity.Alarm;
                userActivity.Alarm = alarm;
                userActivity.AlarmTime = userActivity.Activity.AlarmTime;
            } else {
                alarmTime = utility.Convert.toDateFromString(userActivity.AlarmTime);
                alarm = userActivity.Alarm;
            }
            return (alarm && (dojoDate.compare(alarmTime, n) < 1));
        },
        _snooze: function () {
            for (var i = 0; i < this.alertWidgets.length; i++) {
                var wid = this.alertWidgets[i];
                if (wid.selected) {
                    this._snoozeItem(wid.userActivity);
                }
            }
            this.store.save(this);
        },
        _snoozeAll: function () {
            for (var i = 0; i < this.alertWidgets.length; i++) {
                this._snoozeItem(this.alertWidgets[i].userActivity);
            }
            this.store.save(this);
        },
        _setSnoozeSelect: function (snooze) {
            if (!this._textByDur) {
                this._textByDur = {
                    '5': this.fiveMinText,
                    '10': this.tenMinText,
                    '15': this.fifteenMinText,
                    '30': this.thirtyMinText,
                    '60': this.oneHourText,
                    '120': this.twoHourText,
                    '240': this.fourHourText,
                    '480': this.eightHourText,
                    '1440': this.oneDayText,
                    '2880': this.twoDayText,
                    '4320': this.threeDayText,
                    '10080': this.oneWeekText,
                    '20160': this.twoWeekText
                };
            }
            this._selSnoozeBy.set('displayedValue', this._textByDur[snooze]);
            this._selSnoozeBy.set('value', snooze);
        },
        _snoozeItem: function (userActivity) {
            var selval = this._selSnoozeBy.get('value');
            var dur = parseInt(selval);
            var dateNow = new Date();
            var newAlarm = dojoDate.add(dateNow, 'minute', dur);
            //this.store.setValue(userActivity, 'Alarm', true);
            this.store.setValue(userActivity, 'AlarmTime', utility.Convert.toIsoStringFromDate(newAlarm));
        },
        _dismissAll: function () {
            for (var i = 0; i < this.alertWidgets.length; i++) {
                this._dismissItem(this.alertWidgets[i].userActivity);
            }
            this.store.save(this);
        },
        _dismissSelected: function () {
            for (var i = 0; i < this.alertWidgets.length; i++) {
                var wid = this.alertWidgets[i];
                if (wid.selected) {
                    this._dismissItem(wid.userActivity);
                }
            }
            this.store.save(this);
        },
        _dismissItem: function (userActivity) {
            this.store.setValue(userActivity, 'Alarm', false);
        },
        deleteSelected: function () {
            var selectionContext = this._makeSelectionContext(false);
            if (selectionContext) {
                var svc = Sage.Services.getService('ActivityService');
                if (selectionContext.count === 1) {
                    var activity = selectionContext.selectionInfo.selections[0].entity;
                    svc.deleteActivity(activity['$key'], activity.Recurring);
                } else {
                    svc.deleteActivitiesInSelectionContext(selectionContext, this._reloadAlarms, this);
                }
                //this._alertChanged(this.alertWidgets.length - selectionContext.count);
            }
        },
        _reloadAlarms: function (result) {
            var alarmPopup = dijit.byId('alarmPopup');
            alarmPopup.reloadAlarms();
        },
        completeSelected: function () {
            var selectionContext = this._makeSelectionContext(false);
            if (selectionContext) {
                var svc = Sage.Services.getService('ActivityService');
                var self = this;
                var handle = topic.subscribe("/entity/activity/bulkComplete", function (result) {
                    self._reloadAlarms();
                    handle.remove();
                });
                if (selectionContext.count === 1) {
                    var activity = selectionContext.selectionInfo.selections[0].entity;
                    //if we want to show the series or single occurrence dialog do this:
                    svc.completeActivity(activity['$key'], activity.Recurring);
                    //to skip it do this:
                    //svc.completeActivityOccurrence(activity['$key'], activity['StartDate']);
                } else {
                    svc.completeActivitiesInSelectionContext(selectionContext);
                }
                //this._alertChanged(this.alertWidgets.length - selectionContext.count);
            }
        },
        _makeSelectionContext: function (removeWidget) {
            var ids = [], sels = [];
            var len = this.alertWidgets.length - 1;
            for (var i = len; i > -1; i--) {
                var wid = this.alertWidgets[i];
                if (wid.selected) {
                    var id = wid.userActivity.Activity['$key'];
                    ids.push(id);
                    sels.push({ rn: 0, id: id, entity: wid.userActivity.Activity });
                    if (removeWidget) {
                        this.alertWidgets.splice(i, 1);
                        wid.destroy();
                    }
                }
            }
            if (ids.length > 0) {
                return {
                    count: ids.length,
                    id: null,
                    mode: 'select',
                    name: 'activities',
                    selectionInfo: {
                        key: 'alert',
                        keyField: '$key',
                        mode: 'selection',
                        ranges: [],
                        recordCount: ids.length,
                        selectedIds: ids,
                        selectionCount: 2,
                        selections: sels,
                        sortDirection: '',
                        sortField: ''
                    }
                };
            }
            return false;
        },
        onComplete: function () {
            //this gets fired by the datastore when items have been saved.
            // it happens after any snooze or dismiss
            //we need to see if the alarm should still be in the list...

            var len = this.alertWidgets.length - 1;
            for (var i = len; i > -1; i--) {
                var wid = this.alertWidgets[i];
                if (!this._alarmRinging(wid.userActivity)) {
                    this.alertWidgets.splice(i, 1);
                    wid.destroy();
                }
            }
            this._alertChanged(this.alertWidgets.length);
        },
        getUnhandledAlertCount: function () {
            var ringing = 0;
            for (var i = 0; i < this.alertItems.length; i++) {
                if (this._alarmRinging(this.alertItems[i])) {
                    ringing++;
                }
            }
            return ringing;
        }
    });
    return alarmPane;
});
},
'Sage/MainView/ActivityMgr/SnoozeButton':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */

define("Sage/MainView/ActivityMgr/SnoozeButton", [
        'dijit/_Widget',
        'Sage/_Templated',
        'dojo/_base/declare'
],

function(
   _Widget,
   _Templated,
   declare
){
   var snoozeButton = declare('Sage.MainView.ActivityMgr.SnoozeButton',  [_Widget, _Templated], {
        widgetsInTemplate: true,
        _started: false,
        widgetTemplate: new Simplate([
            '<span class="alarm-button">', // 
                '<button data-dojo-type="dijit.form.ComboButton" data-dojo-attach-point="_snoozeButton" data-dojo-attach-event="onClick:_cboClick" class="" >',
                    '<div data-dojo-type="Sage.MainView.ActivityMgr.SnoozeOptions" data-dojo-attach-point="_snoozeOptions"></div>',
                '</button>',
            '</span>'
        ]),
        startup: function() {
           
            if (this._started) {
                return;
            }
            this.inherited(arguments);
            
            //dojo.addClass(this.domNode, 'displaynone');
            this._started = true;
        },
        _cboClick: function() {
           
             this._snoozeButton.openDropDown();
        },
        
        destroy:function(){
            
            this._snoozeButton.destroyRecursive();
        }
        
    });

    return snoozeButton;     
    
});
},
'Sage/QuickForms/Design/Editors/LayoutPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/LayoutPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/LayoutPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.LayoutPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.positionText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.rowTooltipText %}">',
                        '<label>{%= $.rowText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_row" data-dojo-attach-event="onChange:_onRowChange" required="true" data-dojo-props="constraints:{min:0,max:100,places:0}"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.columnTooltipText %}">',
                        '<label>{%= $.columnText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_column" data-dojo-attach-event="onChange:_onColumnChange" required="true" data-dojo-props="constraints:{min:0,max:100,places:0}"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.sizeText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.rowSpanTooltipText %}">',
                        '<label>{%= $.rowSpanText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_rowSpan" data-dojo-attach-event="onChange:_onRowSpanChange" required="true" data-dojo-props="constraints:{min:1,max:100,places:0}"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.columnSpanTooltipText %}">',
                        '<label>{%= $.columnSpanText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_columnSpan" data-dojo-attach-event="onChange:_onColumnSpanChange" required="true" data-dojo-props="constraints:{min:1,max:100,places:0}"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _row: null,
        _column: null,
        _rowSpan: null,
        _columnSpan: null,

        titleText: 'Layout',

        positionText: 'Position',
        sizeText: 'Size',

        rowText: 'Row:',
        rowTooltipText: 'Row number of the control.',
        columnText: 'Column:',
        columnTooltipText: 'Column number of the control.',
        rowSpanText: 'Row Span:',
        rowSpanTooltipText: 'Number of cells the control occupies vertically.',
        columnSpanText: 'Column Span:',
        columnSpanTooltipText: 'Number of cells the control occupies horizontally.',

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);

            this._row.set('value', this._designer.get('row'));
            this._column.set('value', this._designer.get('column'));
            this._rowSpan.set('value', this._designer.get('rowSpan'));
            this._columnSpan.set('value', this._designer.get('columnSpan'));
        },
        _onRowChange: function(value) {
            if (this.isSuspended() || !this._row.isValid()) return;

            try
            {
                this._designer.set('row', parseInt(value) || 0);
            }
            catch (e)
            {
                this._row.setValue(e.value);

                if (console) {
                    console.error(e.message, e);
                }
            }
        },
        _onColumnChange: function(value) {
            if (this.isSuspended() || !this._column.isValid()) return;

            try
            {
                this._designer.set('column', parseInt(value) || 0);
            }
            catch (e)
            {
                this._column.setValue(e.value);

                if (console) {
                    console.error(e.message);
                }
            }
        },
        _onRowSpanChange: function(value) {
            if (this.isSuspended() || !this._rowSpan.isValid()) return;

            try
            {
                this._designer.set('rowSpan', parseInt(value) || 1);
            }
            catch (e)
            {
                this._rowSpan.setValue(e.value);

                if (console) {
                    console.error(e.message);
                }
            }
        },
        _onColumnSpanChange: function(value) {
            if (this.isSuspended() || !this._columnSpan.isValid()) return;

            try
            {
                this._designer.set('columnSpan', parseInt(value) || 1);
            }
            catch (e)
            {
                this._columnSpan.setValue(e.value);

                if (console) {
                    console.error(e.message);
                }
            }
        }
    });
});
},
'Sage/MainView/IntegrationContract/CustomerPaymentsRTDV':function(){
require({cache:{
'url:Sage/MainView/IntegrationContract/templates/CustomerPaymentsRTDV.html':"﻿[\n'<div>',\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_customerPaymentsDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\n        '<table cellspacing=\"5\">',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_reference\">{%= $.lblReferenceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_reference\" name=\"reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_date\">{%= $.lblDateCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_date\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_processDate\">{%= $.lblProcessDateCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_processDate\" name=\"processDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_name\">{%= $.lblNameCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_name\" name=\"name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_type\">{%= $.lblTypeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_type\" name=\"type\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_status\">{%= $.lblStatusCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_status\" name=\"status\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_currency\">{%= $.lblCurrencyCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_tenderType\">{%= $.lblTenderTypeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_tenderType\" name=\"tenderType\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_tenderReference\">{%= $.lblTenderReferenceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_tenderReference\" name=\"tenderReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_discountTotal\">{%= $.lblDiscountsCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_discountTotal\" name=\"discountTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_netTotal\">{%= $.lblNetTotalCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_netTotal\" name=\"netTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_taxTotal\">{%= $.lblTaxesCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_taxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_chargesTotal\">{%= $.lblChargesCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_chargesTotal\" name=\"chargesTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_taxCode\">{%= $.lblTaxCodeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_taxCode\" name=\"taxCode\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_grossTotal\">{%= $.lblGrossTotalCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_grossTotal\" name=\"grossTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_source\">{%= $.lblSourceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_source\" name=\"source\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n        '</table>',\r\n        '<div class=\"button-bar alignright\">',\r\n            '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_paymentBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n        '</div>',\n    '</div>',\n'</div>'\n]"}});
﻿/*globals dojo, define, Sage, dijit, Simplate, $ */
define("Sage/MainView/IntegrationContract/CustomerPaymentsRTDV", [
    'dojo/_base/declare',
    'dojo/i18n!./nls/CustomerPaymentsRTDV',
    'dijit/_Widget',
    'Sage/_Templated',
    'Sage/UI/SLXPreviewGrid',
    'Sage/Data/ProxySDataStore',
    'Sage/UI/Dialogs',
    'Sage/UI/Columns/DateTime',
    'dojo/text!./templates/CustomerPaymentsRTDV.html',
    'Sage/UI/DateTextBox',
    'Sage/UI/Controls/_DialogHelpIconMixin',
    'dojo/_base/lang',
    'dijit/Dialog',
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog'
],

function (declare, i18nStrings, _Widget, _Templated, SLXPreviewGrid, ProxySDataStore, Dialogs, SlxDateTimeColumn, template) {
    var customerPaymentsRTDV = declare('Sage.MainView.IntegrationContract.CustomerPaymentsRTDV', [_Widget, _Templated], {
        workspace: '',
        tabId: '',
        grid: '',
        globalSyncId: '',
        operatingCompanyId: '',
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function () {
            dojo.mixin(this, i18nStrings);
        },
        loadCustomerPayments: function () {
            var self = this;
            var options = {
                readOnly: true,
                rowsPerPage: 20,
                slxContext: { workspace: this.workspace, tabId: this.tabId },
                columns: [
                    { width: 10, field: 'reference', name: this.grdPayments_Reference, sortable: true, formatter: this.customerPaymentsDetailsViewRenderer, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'date', type: SlxDateTimeColumn, formatType: 'date', dateOnly: true, utc: false, name: this.grdPayments_Date, sortable: true, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'type', name: this.grdPayments_Type, sortable: true, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'status', name: this.grdPayments_Status, sortable: true, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'grossTotal', name: this.grdPayments_GrossTotal, sortable: true, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'currency', name: this.grdPayments_Currency, sortable: true, style: 'text-align:left;width:auto;', editable: false },
                    { width: 10, field: 'processDate', type: SlxDateTimeColumn, formatType: 'date', dateOnly: true, utc: false, editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'discountTotal', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'chargesTotal', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'source', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'taxTotal', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'name', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'tenderType', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'tenderReference', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'netTotal', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'grossTotal', editable: false, hidden: function () { return true; } },
                    { width: 10, field: 'taxCode', editable: false, hidden: function () { return true; } }
                ],
                storeOptions: new ProxySDataStore({
                    service: Sage.Data.SDataServiceRegistry.getSDataService('proxy', true, false),
                    resourceKind: 'tradingAccounts',
                    getResourcePredicate: function () {
                        return dojo.string.substitute("$uuid eq '${0}'", [self.globalSyncId]);
                    },
                    getAppId: function () {
                        return self.operatingCompanyId;
                    },
                    include: [],
                    select: [],
                    pathSegments: [{ 'text': 'receipts'}]
                }),
                tools: []
            };
            var paymentsGrid = new SLXPreviewGrid.Grid(options, this.placeHolder);
            paymentsGrid.startup();
            var tabContent = dijit.byId('tabContent');
            tabContent.resize(); tabContent.resize();
            this.grid = paymentsGrid;
        },
        customerPaymentsDetailsViewRenderer: function (value) {
            return dojo.string.substitute('<a href="javascript:customerPaymentsRTDV.loadDetailsView();">${0}</a>', [value]);
        },
        loadDetailsView: function () {
            var row = this.grid._grid.selection.getSelected()[0];
            if (row) {
                this._dialog.set('value', row);
                this._dialog.show();
            }
        },
        hideDetailsDialog: function () {
            this._dialog.hide();
        }
    });
    return customerPaymentsRTDV;
});
},
'Sage/Utility/File/nls/Attachment':function(){
﻿define("Sage/Utility/File/nls/Attachment", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        percentComplete: 'Uploading, please wait...'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Utility/main':function(){
define("Sage/Utility/main", [
    "Sage/Utility/Activity",
    "Sage/Utility/Dashboard",
    "Sage/Utility/Groups",
    "Sage/Utility/_LocalStorageMixin",
    "Sage/Utility/SDataLookup",
    "Sage/Utility/Email",
    "Sage/Utility/ErrorHandler",
    "Sage/Utility/File",
    "Sage/Utility/File/DragDropWatcher",
    "Sage/Utility/File/DefaultDropHandler",
    "Sage/Utility/UserOptions",
    "Sage/Utility/Validate",
    "Sage/Utility/PickList"
], function() {
	// module:
	    // Sage/Utility/main
	// summary:
    // The Sage/Utility/main module provides loading of all Sage/Utility modules.
});
},
'Sage/QuickForms/Design/nls/GenericControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/GenericControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Unknown"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/NavBar':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/NavBar", [
        'dijit/layout/AccordionContainer',
        'Sage/UI/NavBarPane',
        'Sage/Layout/_SplitterEnhancedMixin',
        'dojo/_base/declare'
],
// ReSharper disable InconsistentNaming
function (AccordionContainer, NavBarPane, _SplitterEnhancedMixin, declare) {
    // ReSharper restore InconsistentNaming
    var navBar = declare('Sage.UI.NavBar', [AccordionContainer, _SplitterEnhancedMixin], {
        persist: true,
        postCreate: function () {
            this.inherited(arguments);
            var items = Sage.UI.DataStore.NavBar && Sage.UI.DataStore.NavBar.items;
            if (items) this._processNavCollection(items);
        },

        _processNavCollection: function (items) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];

                this.addChild(new NavBarPane({
                    title: item.text,
                    items: item.items
                }));
            }
        },
        startup: function () {
            this.inherited(arguments);
            this.domNode.style.overflow = "hidden";
        }
    });

    return navBar;
});
},
'Sage/QuickForms/Design/nls/PropertyEditorContainer':function(){
﻿define("Sage/QuickForms/Design/nls/PropertyEditorContainer", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            specificTitleFormatText: "${0} Properties (${1})",
            genericTitleFormatText: "${0} Properties"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MailMerge/nls/Helper':function(){
﻿define("Sage/MailMerge/nls/Helper", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            destkopErrorsError: "The call to DesktopErrors() failed.",
            mailMergeInfoStoreError: "The call to MailMergeInfoStore() failed."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/Opportunity/UpdateOpportunities':function(){
require({cache:{
'url:Sage/MainView/Opportunity/templates/UpdateOpportunities.html':"﻿[\r\n'<div>',\r\n    '<div data-dojo-type=\"dijit.Dialog\" title=\"{%= $.updateMultipleOpps_Caption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onCancel:_close\">',\r\n        '<div data-dojo-type=\"dijit.form.Form\" id=\"{%= $.id %}_frmUpdateMultipleOpps\">',\r\n            '<table cellspacing=\"20\">',\r\n                '<tr>',\r\n                    '<td>',\r\n                        '<label>{%= $.update_Property_Caption %}</label>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<select title=\"{%= $.update_Property_Caption %}\" labelWidth=\"20\" name=\"{%= $.id %}_PropertyName\" dojoAttachPoint=\"propertyNameSelect\" dojoAttachEvent=\"onChange:_propertyChanged\" data-dojo-type=\"dijit.form.Select\" style=\"width:150px\">',\r\n                            '{% for (var i=0; i < $._updateableProperties.length;i++) { %}',\r\n                                '<option value=\"{%= $._updateableProperties[i].propertyName %}\" {% if ($.selectedFieldIndex == i ) { %} selected {% } %} >{%= $._updateableProperties[i].propertyDisplayName %}</option>',\r\n                            '{% } %}',\r\n                        '</select>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div id=\"divUpdateOppsTolbl\" dojoAttachPoint=\"divUpdateOppsTolbl\" class=\"display-none\">',\r\n                            '<label>{%= $.update_To_Caption %}</label>',\r\n                        '</div>',\r\n                    '</td>',\r\n                    '<td>',\r\n                        '<div dojoAttachPoint=\"divAcctMgrContainer\">',\r\n                            '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.update_To_Caption %}\" id=\"{%= $.id %}_luAccountMgr\" dojoAttachPoint=\"accountMgr_Container\" allowClearingResult=\"false\" class=\"removePadding\"></div>',\r\n                        '</div>',\r\n                        '<div dojoAttachPoint=\"divCloseProbContainer\" class=\"display-none\">',\r\n                            '<select id=\"{%= $.id %}_pkl_CloseProbability\" PickListName=\"Opportunity Probability\" label=\"{%= $.update_To_Caption %}\" id=\"{%= $.id %}_pkl_CloseProbability\" data-dojo-type=\"Sage.UI.Controls.SingleSelectPickList\" dojoAttachPoint=\"pkl_CloseProbability\" canEditText=\"false\" itemMustExist=\"true\"></select>',\r\n                        '</div>',\r\n                        '<div data-dojo-type=\"dojox.layout.TableContainer\" dojoAttachPoint=\"divForecastContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"2\" baseClass=\"display-none\">',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"addToForecast\" label=\"{%= $.addToForecast_Yes %}\" value=\"yesForecast\" id=\"{%= $.id %}_rdgYesForecast\" dojoAttachPoint=\"rdoYesForecast\" checked=\"true\" />',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"addToForecast\" label=\"{%= $.addToForecast_No %}\" value=\"noForecast\" id=\"{%= $.id %}_rdgNoForecast\" />',\r\n                        '</div>',\r\n                        '<div data-dojo-type=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"2\" labelWidth=\"2\" dojoAttachPoint=\"divEstCloseContainer\" baseClass=\"display-none\">',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"estimatedClose\" id=\"{%= $.id %}_rdgEstClose\" checked=\"true\" label=\"{%= $.estimatedClose_To %}\" value=\"estimatedClose\" dojoAttachPoint=\"rdoEstClose\" dojoAttachEvent=\"onChange:estimatedCloseDateChange\" />',\r\n                            '<input data-dojo-type=\"dijit.form.RadioButton\" type=\"radio\" name=\"estimatedClose\" value=\"move\" id=\"{%= $.id %}_rdgEstMove\" label=\"{%= $.estimatedClose_MoveOut %}\" />',\r\n                        '</div>',\r\n                        '<div dojoAttachPoint=\"divCommentsContainer\" class=\"display-none\">',\r\n                            '<textarea data-dojo-type=\"dijit.form.SimpleTextarea\" id=\"{%= $.id %}_txtComments\" dojoAttachPoint=\"txtComments\" style=\"font-size: 85%\"></textarea>',\r\n                        '</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n                '<tr>',\r\n                    '<td></td>',\r\n                    '<td></td>',\r\n                    '<td></td>',\r\n                    '<td>',\r\n                        '<div id=\"divEstCloseDateContainer\" class=\"display-none\" dojoAttachPoint=\"divEstCloseDateContainer\">',\r\n                            '<div data-dojo-type=\"Sage.UI.Controls.DateTimePicker\" id=\"{%= $.id %}_dtpEstCloseDate\" displayDate=\"true\" displayTime=\"false\" dojoAttachPoint=\"dtpEstCloseDate\"></div>',\r\n                        '</div>',\r\n                        '<div id=\"divMoveEstimatedCloseContainer\" class=\"display-none\" dojoAttachPoint=\"divMoveEstimatedCloseContainer\">',\r\n                            '<select data-dojo-type=\"dijit.form.Select\" name=\"moveEstCloseDate\" id=\"{%= $.id %}_moveEstCloseDateList\" dojoAttachPoint=\"moveEstCloseDateList\">',\r\n                                '<option value=\"Forward\">{%= $.moveEstCloseDate_Forward %}</option>',\r\n                                '<option value=\"Backward\">{%= $.moveEstCloseDate_Backward %}</option>',\r\n                            '</select>',\r\n                            '<div data-dojo-type=\"dijit.form.TextBox\" labelWidth=\"20\" dojoAttachPoint=\"daysToMove\"></div>&nbsp',\r\n                            '<label>{%= $.estimatedClose_Days %}</label>',\r\n                        '</div>',\r\n                    '</td>',\r\n                '</tr>',\r\n            '</table>',\r\n            '<div class=\"button-bar\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id%}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.btnOK_Caption %}</div>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id%}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_close\">{%= $.btnCancel_Caption %}</div>',\r\n            '</div>',\r\n        '</div>',\r\n    '</div>',\r\n'</div>'\r\n]\r\n"}});
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/Opportunity/UpdateOpportunities", [
        'dojo/_base/declare',
        'dojo/i18n!./nls/UpdateOpportunities',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/_base/lang',
        'dijit/Dialog',
        'dijit/_Widget',
        'Sage/_Templated',
        'Sage/UI/Dialogs',
        'Sage/UI/Controls/Lookup',
        'dojo/text!./templates/UpdateOpportunities.html',
        'Sage/UI/Controls/SingleSelectPickList',
        'Sage/UI/Controls/DateTimePicker',
        'dijit/form/Form',
        'dijit/form/Select',
        'dijit/form/Textarea',
        'dijit/layout/ContentPane',
        'dojox/layout/TableContainer'
],
function (declare, i18nStrings, _DialogHelpIconMixin, dojoLang, dijitDialog, _Widget, _Templated, Dialogs, Lookup, template) {
    var updateOpportunities = declare('Sage.MainView.Opportunity.UpdateOpportunities', [_Widget, _Templated], {
        id: "dlgUpdateMultipleOpps",
        _dialog: false,
        _updateableProperties: false,
        selectedFieldIndex: 1,
        lup_AcctMgr: false,
        _selectionInfo: false,
        widgetsInTemplate: true,
        widgetTemplate: new Simplate(eval(template)),
        constructor: function (selectionInfo) {
            this._selectionInfo = selectionInfo;
            dojo.mixin(this, i18nStrings);
            if (!this._updateableProperties) {
                this._updateableProperties = [{ propertyName: '', propertyDisplayName: ''}];
                this.loadUpdateableProperties('AcctMgr', this.updateProp_AcctMgr);
                this.loadUpdateableProperties('Forecast', this.updateProp_Forecast);
                this.loadUpdateableProperties('CloseProb', this.updateProp_Probability);
                this.loadUpdateableProperties('EstClose', this.updateProp_EstClose);
                this.loadUpdateableProperties('Comments', this.updateProp_Comments);
            }
        },
        loadUpdateableProperties: function (propertyName, propertyDisplayName) {
            var property = {
                propertyName: propertyName,
                propertyDisplayName: propertyDisplayName
            };
            this._updateableProperties.push(property);
        },
        setSelectionInfo: function (selectionInfo) {
            this._selectionInfo = selectionInfo;
        },
        show: function () {
            this._dialog.show();
            if (!this.lup_AcctMgr) {
                this.createAcctMgrLookup();
            }
            this._propertyChanged();
            if (!this._dialog.helpIcon) {
                dojoLang.mixin(this._dialog, new _DialogHelpIconMixin());
                this._dialog.createHelpIconByTopic('updateopportunities');
            }
        },
        _propertyChanged: function () {
            if (this.propertyNameSelect) {
                this.setDisplayProperty(this.divAcctMgrContainer, (this.propertyNameSelect.value == "AcctMgr"));
                this.setDisplayProperty(this.divCloseProbContainer, (this.propertyNameSelect.value == "CloseProb"));
                this.setDisplayProperty(this.divCommentsContainer, (this.propertyNameSelect.value == "Comments"));
                this.setDomDisplayProperty(this.divForecastContainer, (this.propertyNameSelect.value == "Forecast"));
                this.setDisplayProperty(this.divUpdateOppsTolbl, (this.propertyNameSelect.value != "EstClose"));
                this.setDomDisplayProperty(this.divEstCloseContainer, (this.propertyNameSelect.value == "EstClose"));
            }
            this.estimatedCloseDateChange();
        },
        setDisplayProperty: function (property, display) {
            if (property && display) {
                dojo.removeClass(property, "display-none");
            }
            else if (property) {
                dojo.addClass(property, "display-none");
            }
        },
        setDomDisplayProperty: function (property, display) {
            if (property && display) {
                dojo.removeClass(property.domNode, "display-none");
            }
            else if (property) {
                dojo.addClass(property.domNode, "display-none");
            }
        },
        estimatedCloseDateChange: function () {
            var closeOption = this.rdoEstClose.get('checked');
            if (this.propertyNameSelect) {
                this.setDisplayProperty(this.divEstCloseDateContainer, (closeOption && this.propertyNameSelect.value == "EstClose"));
                this.setDisplayProperty(this.divMoveEstimatedCloseContainer, (!closeOption && this.propertyNameSelect.value == "EstClose"));
            }
        },
        createAcctMgrLookup: function () {
            this.accountMgrLookupConfig = {
                id: '_acctMgr',
                structure: [
                    {
                        defaultCell: {
                            "sortable": true,
                            "width": "150px",
                            "editable": false,
                            "propertyType": "System.String",
                            "excludeFromFilters": false,
                            "useAsResult": false,
                            "pickListName": null,
                            "defaultValue": ""
                        },
                        cells: [
                            {
                                "name": this.lookupNameColText,
                                "field": "UserInfo.UserName"
                            }, {
                                "name": this.lookupTitleColText,
                                "field": "UserInfo.Title"
                            }, {
                                "name": this.lookupDepartmentColText,
                                "field": "UserInfo.Department"
                            }, {
                                "name": this.lookupRegionColText,
                                "field": "UserInfo.Region"
                            }, {
                                "name": this.lookupTypeColText,
                                "field": "Type",
                                "propertyType": "Sage.Entity.Interfaces.UserType"
                            }
                        ]
                    }
                ],
                gridOptions: {
                    contextualCondition: '',
                    contextualShow: '',
                    selectionMode: 'single'
                },
                storeOptions: { resourceKind: 'users' },
                isModal: true,
                initialLookup: true,
                preFilters: [
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '5'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '6'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '7'
                    },
                    {
                        propertyName: 'type',
                        propertyType: 'Sage.Entity.Interfaces.UserType',
                        conditionOperator: '!=',
                        filterValue: '8'
                    }
                ],
                returnPrimaryKey: true,
                dialogTitle: this.lookupActMgrText,
                dialogButtonText: this.btnOK_Caption
            };
            this.lup_AcctMgr = new Lookup({
                id: 'lu_AcctMgr',
                config: this.accountMgrLookupConfig,
                style: 'width:100%'
            });
            dojo.place(this.lup_AcctMgr.domNode, this.accountMgr_Container.domNode, 'only');
        },
        _okClick: function () {
            var property = this.getPropertySelectionValue();
            var self = this;
            if (!property && !property.value) {
                Dialogs.showError(this.errorUnspecifiedValue);
                return;
            }
            var service = Sage.Data.SDataServiceRegistry.getSDataService('scheduling');
            var request = new Sage.SData.Client.SDataServiceOperationRequest(service)
                .setApplicationName('$app')
                .setOperationName('trigger')
                .setResourceKind("jobs('Sage.SalesLogix.BusinessRules.Jobs.UpdateEntityJob')");
            var entry = {
                "$name": "Sage.SalesLogix.BusinessRules.Jobs.UpdateEntityJob",
                "request": {
                    "parameters": [
                        { "name": "EntityName", "value": "Opportunity" },
                        { "name": "PropertyNames", "value": property.name },
                        { "name": "PropertyValues", "value": property.value },
                        { "name": "SelectedIds", "value": (this._selectionInfo.selectionCount > 0) ? this._selectionInfo.selectedIds.join(',') || '' : '' },
                        { "name": "GroupId", "value": (this._selectionInfo.selectionCount == 0) ? this.getCurrentGroupId() || '' : '' }
                    ]
                }
            };
            request.execute(entry, {
                success: function (result) {
                    self._close();
                },
                failure: function (result) {
                    Dialogs.showError(dojo.string.substitute(self.errorRequestingJobMgr, [result.statusText]));
                }
            });
        },
        getCurrentGroupId: function () {
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (grpContextSvc) {
                var contextService = grpContextSvc.getContext();
                return contextService.CurrentGroupID;
            }
            return '';
        },
        getPropertySelectionValue: function () {
            if (this.propertyNameSelect) {
                switch (this.propertyNameSelect.value) {
                    case 'AcctMgr':
                        if (this.lup_AcctMgr.selectedObject) {
                            return { name: 'AccountManager', value: this.lup_AcctMgr.selectedObject.$key };
                        }
                        return false;
                    case 'CloseProb':
                        return { name: 'CloseProbability', value: this.pkl_CloseProbability.get('value') };
                    case 'Forecast':
                        return { name: 'AddToForecast', value: this.rdoYesForecast.get('checked') };
                    case 'EstClose':
                        if (this.rdoEstClose.get('checked')) {
                            return { name: 'EstimatedClose', value: this.dtpEstCloseDate.get('value') };
                        }
                        else {
                            var date = new Date();
                            if (this.moveEstCloseDateList.value == "Forward") {
                                return { name: 'EstimatedClose', value: new Date().setDate(date.getDate() + this.daysToMove.value) };
                            }
                            else {
                                return { name: 'EstimatedClose', value: new Date().setDate(date.getDate() - this.daysToMove.value) };
                            }
                        }
                    case 'Comments':
                        return { name: 'Notes', value: this.txtComments.value };
                }
            }
            return false;
        },
        _close: function () {
            this._dialog.hide();
        }
    });
    return updateOpportunities;
});
},
'Sage/UI/Dashboard/nls/Dashboard':function(){
define("Sage/UI/Dashboard/nls/Dashboard", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            newTabTitleText: 'New Tab Title',
            inputTitleText: 'Input a Title',
            copiedPageText: 'Copied Tab',
            showText: 'Show'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/MainView/ActivityMgr/nls/ActivityListPanelConfig':function(){
﻿define("Sage/MainView/ActivityMgr/nls/ActivityListPanelConfig", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
           colNameComplete:'Complete',
           colNameAttachment:'Attachment',
           colNameRecurring:'Recurring',
           colNameAlarm: 'Alarm',
           colNameType:'Activity Type',
           colNameStartDate:'Start Date',
           colNameDuration:'Duration',
           colNameContact:'Name',
           colNameLead:'Lead',
           colNameAccount:'Account/Company',
           colNameCompany:'Company',
           colNameRegarding:'Regarding',
           colNamePriority:'Priority',
           colNameUserId:'Leader',
           colNameTimeless:'Timeless',
           colNameTypeName:'Type',
           colNameContactName:'Name',
           SnoozeAlarm: 'Snooze Alarm',
           DismissAlarm: 'Dismiss Alarm',
           colNameUnConfirmStatus: 'Unconfirmed' 
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/nls/PickList':function(){
define("Sage/UI/Controls/nls/PickList", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            okText: 'OK',
            missingPickListText: 'The PickList Could Not be Found'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/Controls/LogOffButton':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/LogOffButton", [
        "dijit/MenuBar",
        "Sage/UI/MenuItem",
        'Sage/UI/MenuBarItem',
        'dojo/i18n!./nls/LogOffButton',
        'dojo/_base/declare'
],
function (MenuBar, MenuItem, MenuBarItem, i18nStrings, declare) {
    var logOffButton = declare('Sage.UI.Controls.LogOffButton', MenuBar, {
        postMixInProperties: function () {
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
           
            this.addChild(new MenuBarItem({
                label: i18nStrings.logOffText,
                iconStyle: 'width: 16px',
                icon: 'images/icons/login_16.png',
                imageClass: 'icon_login_16',
                title: i18nStrings.logOffText,
                id: 'btnLogOff',
                onClick: function () {
                    try {
                        window.location.href = 'Shutdown.axd';
                    } catch (e) { } //ie throws an error when the user clicks cancel on the "are you sure" dialog.
                }
            }));
        }
    });
    
    return logOffButton;
});
},
'url:Sage/MainView/IntegrationContract/templates/CustomerPaymentsRTDV.html':"﻿[\n'<div>',\n    '<div dojoType=\"dijit.Dialog\" id=\"{%= $.id%}_customerPaymentsDetailsDialog\" title=\"{%= $.dialogCaption %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:hideDetailsDialog\">',\n        '<table cellspacing=\"5\">',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_reference\">{%= $.lblReferenceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_reference\" name=\"reference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_date\">{%= $.lblDateCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_date\" name=\"date\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_processDate\">{%= $.lblProcessDateCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_processDate\" name=\"processDate\" readonly=\"readonly\" dojoType=\"Sage.UI.DateTextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_name\">{%= $.lblNameCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_name\" name=\"name\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_type\">{%= $.lblTypeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_type\" name=\"type\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_status\">{%= $.lblStatusCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_status\" name=\"status\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_currency\">{%= $.lblCurrencyCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_currency\" name=\"currency\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_tenderType\">{%= $.lblTenderTypeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_tenderType\" name=\"tenderType\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_tenderReference\">{%= $.lblTenderReferenceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_tenderReference\" name=\"tenderReference\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_discountTotal\">{%= $.lblDiscountsCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_discountTotal\" name=\"discountTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_netTotal\">{%= $.lblNetTotalCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_netTotal\" name=\"netTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_taxTotal\">{%= $.lblTaxesCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_taxTotal\" name=\"taxTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_chargesTotal\">{%= $.lblChargesCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_chargesTotal\" name=\"chargesTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_taxCode\">{%= $.lblTaxCodeCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_taxCode\" name=\"taxCode\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n            '<tr>',\n                '<td>',\n                    '<label for=\"PaymentDetails_grossTotal\">{%= $.lblGrossTotalCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_grossTotal\" name=\"grossTotal\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n                '<td>',\n                    '<label for=\"PaymentDetails_source\">{%= $.lblSourceCaption %}</label>',\n                '</td>',\n                '<td>',\n                    '<input type=\"text\" id=\"{%= $.id%}_source\" name=\"source\" readonly=\"readonly\" dojoType=\"dijit.form.TextBox\" />',\n                '</td>',\n            '</tr>',\n        '</table>',\r\n        '<div class=\"button-bar alignright\">',\r\n            '<button dojoType=\"dijit.form.Button\" id=\"{%= $.id%}_paymentBtnClose\" type=\"button\" dojoAttachEvent=\"onClick:hideDetailsDialog\">{%= $.btnCloseCaption %}</button>',\r\n        '</div>',\n    '</div>',\n'</div>'\n]",
'Sage/Utility/nls/Email':function(){
﻿define("Sage/Utility/nls/Email", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
                RecipientInfoError: "There was an unexpected error attempting to read the recipient information: ${0}",
                MailToProtocolError: "There was an error attempting to generate an e-mail message using the mailto: protocol (href.length=${0}). The number of e-mail recipients may need to be reduced. Browser error: ${1}.",
                InvalidContextError: "The e-mail request cannot be processed. This operation is only supported for Contacts or Leads.",
                InvalidArgumentError: "The e-mail request cannot be processed. Invalid argument.",
                FilteredOutMsg: "Filtered out: Non-solicitable: ${0}; Invalid: ${1}; Dupes: ${2}",
                AllInvalidEmailError: "The collection does not include one entity with a valid and/or solicitable e-mail address.",
                EmailFieldQueried: "The e-mail field queried was: ${0}.",
                EntityInfoError: "The was a failure attempting to retrieve the entity information.",
                CapabilityModeError: "The capability to write an e-mail to a group selection is only available in list views.",
                CapabilityEntityError: "The capability to write an e-mail to a group selection is only available for Contacts or Leads.",
                NoRowsSelectedError: "There are no rows selected."
            }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/LitRequestListPanelConfig':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */


define("Sage/MainView/ActivityMgr/LitRequestListPanelConfig", [
    'Sage/MainView/ActivityMgr/BaseListPanelConfig',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/SummaryFormatterScope',
    'Sage/Data/BaseSDataStore',
    'Sage/UI/Columns/DateTime',
    'dojo/_base/declare',
    'dojo/i18n!./nls/LitRequestListPanelConfig'
],

function (
    BaseListPanelConfig,
    SageUtility,
    UtilityActivity,
    SummaryFormatterScope,
    BaseSDataStore,
    ColumnsDateTime,
    declare,
    nlsResources
) {
    var litRequestListPanelConfig = declare('Sage.MainView.ActivityMgr.LitRequestListPanelConfig', [BaseListPanelConfig], {
        constructor: function() {
            this._nlsResources = nlsResources;
            this._listId = 'literature';
            this._resourceKind = 'litRequests';
            this.entityName = 'LitRequest';
            this._contextMenu = 'LitRequestListContextMenu';
            this._securedAction = 'Activities\View\LitratureRequests';
            this._structure = this._getStructure();
            this._select = this._getSelect();
            this._sort = this._getSort();
            this._where = this._getWhere();
            this._store = this._getStore();
            this.list = this._getListConfig();
            this.summary = this._getSummaryConfig();
            this.toolBar = this._getToolBars();
            dojo.subscribe('/entity/litRequest/change', this._onListRefresh);
        },
        _onListRefresh: function(event) {
            var activityService = Sage.Services.getService('ActivityService');
            activityService.refreshList('literature');
        },

        _getSelect: function() {
            var select = [
                '$key',
                'ContactName',
                'Contact/$key',
                'Description',
                'FillDate',
                'FillStatus',
                'Options',
                'Priority',
                'RequestDate',
                'SendDate',
                'SendVia',
                'TotalCost',
                'FillUser/UserInfo/UserName',
                'RequestUser/UserInfo/UserName',
                'Contact/AccountName',
                'Contact/Address/PostalCode',
                'Contact/Account/AccountId',
                'ReqestUser/$key'
            ];
            return select;
        },
        _getSort: function() {
            var sort = [
                { attribute: 'RequestDate', descending: true }
            ];
            return sort;
        },
        _getWhere: function() {
            var completeStatus = this._nlsResources.litFillStatusComplete || 'Completed';
            var where = (this._currentUserId) ? dojo.string.substitute('(RequestUser.Id eq "${0}") and (FillStatus ne "${1}"  or FillStatus eq null )', [this._currentUserId, completeStatus]) : '';
            return where;
        },
        _getStructure: function() {
            /*
            example urls for this list...
            http://localhost:59230/SlxClient_RedPill/slxdata.ashx/slx/dynamic/-/litRequests?format=json
            */

            var colNameView = this._nlsResources.colNameView || 'View';
            var colNameContact = this._nlsResources.colNameContact || 'Contact';
            var colNameDescription = this._nlsResources.colNameDescription || 'Description';
            var colNameFillStatus = this._nlsResources.colNameFillStatus || 'Status';
            var colNamePriority = this._nlsResources.colNamePriority || 'Priority';
            var colNameReqestDate = this._nlsResources.colNameReqestDate || 'Request Date';
            var colNameSendDate = this._nlsResources.colNameSendDate || 'Send Date';
            var colNameSendVia = this._nlsResources.colNameSendVia || 'Send Via';
            var colNameTotalCost = this._nlsResources.colNameTotalCost || 'Total Cost';
            var colNameRequestUser = this._nlsResources.colNameReqestUser || 'Request User';
            var colNameAccount = this._nlsResources.colNameAccount || 'Account';
            var colNamePostalCode = this._nlsResources.colNamePostalCode || 'Postal Code';

            declare("Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitViewCell", dojox.grid.cells.Cell, {
                format: function(inRowIndex, inItem) {
                    var key = SageUtility.getValue(inItem, "$key");
                    var html = '<a href="LitRequest.aspx?entityid=' + key + '&modeid=Detail" >' + colNameView + '</a>';
                    return html;
                }
            });

            declare("Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitContactCell", dojox.grid.cells.Cell, {
                format: function(inRowIndex, inItem) {
                    var contactId = Sage.Utility.getValue(inItem, 'Contact.$key');
                    var contactName = Sage.Utility.getValue(inItem, 'ContactName');
                    var html = '<a href="Contact.aspx?entityid=' + contactId + '&modeid=Detail" >' + contactName + '</a>';
                    return html;
                }
            });

            declare("Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitAccountCell", dojox.grid.cells.Cell, {
                format: function(inRowIndex, inItem) {
                    var accountId = Sage.Utility.getValue(inItem, 'Contact.Account.$key');
                    var accountName = Sage.Utility.getValue(inItem, 'Contact.AccountName');
                    var html = '<a href="Account.aspx?entityid=' + accountId + '&modeid=Detail" >' + accountName + '</a>';
                    return html;
                }
            });
            var structure = [
                { field: '$key', name: ' ', type: Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitViewCell, width: '60px' },
                { field: 'RequestDate', name: colNameReqestDate, type: ColumnsDateTime, dateOnly: true, width: '90px' },
                { field: 'Priority', name: colNamePriority, width: '60px' },
                { field: 'Description', name: colNameDescription, width: '200px' },
                { field: 'ContactName', name: colNameContact, type: Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitContactCell, width: '200px' },
                { field: 'Contact.AccountName', name: colNameAccount, type: Sage.MainView.ActivityMgr.LitRequestListPanelConfig.LitAccountCell, width: '200px' },
                { field: 'SendDate', name: colNameSendDate, type: ColumnsDateTime, dateOnly: true, width: '90px' },
                { field: 'SendVia', name: colNameSendVia, width: '60px' },
                { field: 'TotalCost', name: colNameTotalCost, width: '60px' },
                { field: 'FillStatus', name: colNameFillStatus, width: '60px' },
                { field: 'RequestUser.UserInfo.UserName', name: colNameRequestUser, width: '90px' },
                { field: 'Contact.Address.PostalCode', name: colNamePostalCode, width: '60px' }
            ];
            return structure;
        },

        _getDetailConfig: function() {
            var detailConfig = {
                resourceKind: this._resourceKind,
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'LitRequestSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/LitRequestSummary.html',
                postProcessCallBack: false
            };
            return detailConfig;

        },
        _getFormatterScope: function() {
            var formatScope = new SummaryFormatterScope({
                requestConfiguration: {
                    mashupName: 'ActivityManager',
                    queryName: 'LitRequestSummary_query'
                },
                templateLocation: 'MainView/ActivityMgr/Templates/LitRequestSummary.html'
            });
            return formatScope;
        },
        _getToolBars: function() {
            var toolBars = { items: [] };
            return toolBars;
        }
    });
    return litRequestListPanelConfig;
});
},
'Sage/Services/_ServiceMixin':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Services/_ServiceMixin", [
    'Sage/Data/SDataServiceRegistry',
    'dojo/_base/declare'
],
function (sDataServiceRegistry, declare) {
    var _serviceMixin = declare('Sage.Services._ServiceMixin', null, {
        serviceMap: null,
        constructor: function () {
            var map = this.serviceMap;
            if (map) {
                for (var property in map) {
                    if (this[property]) continue; /* skip any that were explicitly mixed in */

                    this[property] = this._resolveService(map[property]);
                }
            }
        },
        _resolveService: function (specification) {
            if (specification && specification.type === 'sdata')
                return sDataServiceRegistry.getSDataService(specification.name);

            return Sage.Services.getService(specification);
        }
    });
    return _serviceMixin;
});

},
'Sage/Utility/File/DefaultDropHandler':function(){
﻿/*globals Sage, dojo, define */
define("Sage/Utility/File/DefaultDropHandler", [
    'Sage/Utility/File/DragDropWatcher',
    'Sage/Utility/File/Attachment',
    'Sage/Utility/File/LibraryDocument',
    'Sage/UI/Dialogs',
    'dojo/string',
    'Sage/Utility',
    'Sage/Utility/EntityRelationships',
    'dojo/_base/lang',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'dijit/_Widget',
    'Sage/Services/ActivityService',
    'dojo/i18n',
    'dojo/i18n!./nls/DefaultDropHandler',
    'dojo/_base/declare'
],
function (dragDropWatcher, attachmentUtil, libraryDocsUtil, Dialogs, dString, utility, utilEntityRelationships, dLang, SingleEntrySDataStore, sDataServiceRegistry,
    _Widget, activityService, i18n, nlsResource, declare) {
    var emailHandler = declare('Sage.Utility.File.EmailFileHandler', null, {
        file: null,
        histRelIdProperty: '',
        histRelNameProperty: '',
        histRelId: '',
        histRelName: '',
        extendRelationships: null,
        entityContext: null,
        fileMetaData: null,
        newHistory: null,
        saveAsMsg: false,
        doNotPromptHistory: false,
        saveAttachments: false,
        emailDroppedText: 'Dropped Email',
        attachmentTitleText: 'Save Attachements',
        attachmentQuestionText: 'Would you like to keep a copy of these attachment(s) in SalesLogix? <br />The attachments will be stored under the Attachments tab for relevant entities.',
        constructor: function (opts) {
            //console.log('file handler constructed. file: ' + opts.file.name);
            dLang.mixin(this, opts);
        },
        handleFile: function () {
            if (!this.file) {
                console.log('no file - aborting...');
                return;
            }

            utilEntityRelationships.getRelationships(this.entityContext, function (relationships) {

                var store = new SingleEntrySDataStore({
                    resourceKind: 'history',
                    service: sDataServiceRegistry.getSDataService('dynamic')
                });
                store.newItem({
                    onComplete: function (histTemplate) {
                        var hist = {};
                        hist[this.histRelIdProperty] = this.histRelId;
                        hist[this.histRelNameProperty] = this.histRelName;
                        hist['Type'] = 'atEmail';
                        hist['Duration'] = 1;
                        hist['Timeless'] = false;
                        hist['Category'] = this.emailDroppedText;
                        var d = (this.fileMetaData.sentOn) ? this.fileMetaData.sentOn : this.fileMetaData.receivedTime;
                        if (!d) {
                            d = new Date();
                        }
                        var strDate = utility.Convert.toIsoStringFromDate(d);
                        hist['StartDate'] = strDate;
                        hist['CompletedDate'] = strDate;
                        hist['OriginalDate'] = strDate;
                        if (this.fileMetaData['subject']) {
                            hist['Description'] = this.fileMetaData.subject.substring(0, 64);
                        }
                        if (this.fileMetaData['body']) {
                            hist['LongNotes'] = this.fileMetaData.body;
                        }
                        if (this.fileMetaData['senderName']) {
                            hist['UserDef2'] = this.fileMetaData.senderName;
                        }
                        var histTemplate = dLang.mixin(histTemplate, hist);
                        if (relationships) {
                            histTemplate = dLang.mixin(histTemplate, relationships);
                        }
                        store.saveNewEntity(histTemplate,
                        this._historySaved,
                        this._historyFailed,
                        this,
                        false);
                    },
                    scope: this
                });
            },
            this
            );

        },
        _getAttachmentMixin: function (attachment, historyMixin) {
            var mixin = {};
            for (var p in historyMixin) {
                mixin[p] = historyMixin[p];
            }
            mixin['description'] = attachment.filename;
            return mixin;
        },
        _historySaved: function (hist) {
            this.newHistory = hist;
            var mixin = {};
            mixin['HistoryId'] = hist['$key'];
            mixin['historyId'] = hist['$key'];
            //get all relationships - in case Attachment has the same ones...
            for (var p in hist) {
                var lastTwoChar = p.substring(p.length - 2);
                if (lastTwoChar.toUpperCase() === 'ID' && hist[p]) {
                    mixin[p] = hist[p];
                }
            }

            if (this.saveAsMsg) {
                //Creates the msg as an attachment.
                this.file.name = hist['$key'] + '.msg';
                this.file.filename = hist['$key'] + '.msg';
                var msgMixin = this._getAttachmentMixin(this.file, mixin);
                msgMixin.description = hist['Description'];
                attachmentUtil.createAttachmentSilent(this.file, msgMixin);
            }
            if (this.fileMetaData.attachments.length > 0) {
                if (this.saveAttachments) {
                    for (var i = 0; i < this.fileMetaData.attachments.length; i++) {
                        var attachment = this.fileMetaData.attachments[i];
                        var attachMixin = this._getAttachmentMixin(attachment, mixin);
                        if ((!attachment.name) && (attachment.filename)) {
                            attachment['name'] = attachment.filename;
                        }
                        attachmentUtil.createAttachmentSilent(attachment, attachMixin);
                    }
                }
            }

            this.onHistorySaved(hist['$key']);
        },
        _historyFailed: function (req) {

        },
        onHistoryFailed: function () { },
        onHistorySaved: function (histId) {

        }

    });

    Sage.namespace('Utility.File.DefaultDropHandler');
    Sage.Utility.File.DefaultDropHandler = {
        // i18n strings
        attachmentTitleText: 'Save Attachements',
        attachmentQuestionText: 'Would you like to keep a copy of these attachment(s) in SalesLogix? <br />The attachments will be stored under the Attachments tab for relevant entities.',
        emailDroppedText: 'Dropped Email',
        // end i18n strings
        promptForAttachments: true,
        saveAttachments: false,
        hasAttachments: false,
        options: {},
        historyQueue: [],
        historyHandlers: [],
        fileType: Sage.Utility.File.fileType.ftAttachment,
        init: function (options) {
            dojo.connect(dragDropWatcher, 'onFilesDropped', this, 'onFilesDropped');
            Sage.Utility.File.DefaultDropHandler.options['SAVEMSGFILES'] = options.saveMSGFiles;
            var uOptSvc = Sage.Services.getService('UserOptions');
            if (uOptSvc) {
                uOptSvc.get("DoNotPromptHistory", "Email",
                    function (opt) {
                        Sage.Utility.File.DefaultDropHandler.options['DoNotPromptHistory'] = (opt['value'] === 'T');
                    }
                );
            }
        },
        onFilesDropped: function (files, target) {
            if (this.shouldForceAttachments(target)) {
                if (this.fileType !== Sage.Utility.File.fileType.ftLibraryDocs) {
                    attachmentUtil.createAttachments(files);
                }
                else {
                    libraryDocsUtil.createDocuments(files, target);
                }
                return;
            }
            var emails = [];
            var attachments = [];
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                if (this.isOutlookEmailFile(file)) {
                    emails.push(file);
                } else {
                    attachments.push(file);
                }
            }
            if (emails.length > 0) {
                this.handleEmailFiles(emails, target);
            }
            if (attachments.length > 0) {
                if (this.fileType !== Sage.Utility.File.fileType.ftLibraryDocs) {
                    attachmentUtil.createAttachments(attachments);
                }
                else {
                    libraryDocsUtil.createDocuments(files, target);
                }
            }
        },
        shouldForceAttachments: function (target) {
            var isAttachmentDrop = false;
            if (!Sage.gears) {
                return true;
            }
            if (target) {
                isAttachmentDrop = Sage.Utility.File.DefaultDropHandler.isTargetAttachmentTab(target.parentElement);
            }
            if (isAttachmentDrop) {
                return true;
            } else {
                return false;
            }
        },

        isOutlookEmailFile: function (file) {
            var re = /\.(\w+)$/;
            var matches = file.name.match(re);
            if (matches.length > 1) {
                return matches[1].toLowerCase() === 'msg';
            }
            return false;
        },
        isTargetAttachmentTab: function (target) {

            if (!target) {
                return false;
            }
            if (target.id.indexOf('tabContent.dijitContentPane') != -1) {
                return false;
            }
            if (target.id.indexOf('AttachmentList') != -1) {
                return true;
            }
            //recursive call
            return Sage.Utility.File.DefaultDropHandler.isTargetAttachmentTab(target.parentElement);

        },
        handleEmailFiles: function (files, target) {
            if (!Sage.gears || (this.fileType === Sage.Utility.File.fileType.ftLibraryDocs)) {
                if (this.fileType !== Sage.Utility.File.fileType.ftLibraryDocs) {
                    attachmentUtil.createAttachments(files);
                }
                else {
                    libraryDocsUtil.createDocuments(files, target);
                }
                return;
            }
            if (files.length < 1) {
                return;
            }
            this.hasAttachments = false;
            this._buildEmailQueue(files);
            if (this.hasAttachments) {
                var self = this;
                var queryOptions = {
                    title: this.attachmentTitleText,
                    query: this.attachmentQuestionText,
                    callbackFn: function (result) {
                        if (result) {
                            self.saveAttachments = true;
                        }
                        else {
                            self.saveAttachments = false;
                        }
                        self._processNextHistoryHandler();
                    },
                    yesText: null,
                    noText: null,
                    showNoButton: true
                };
                Dialogs.raiseQueryDialogExt(queryOptions);
            } else {
                this.saveAttachments = false;
                this._processNextHistoryHandler();
            }

        },
        _buildEmailQueue: function (files) {
            var entinfo = this.getEntityInfo();
            var table = entinfo.EntityTableName.toUpperCase().substring(0, 1) + entinfo.EntityTableName.toLowerCase().substring(1);
            var desktop = Sage.gears.factory.create('beta.desktop');
            this.historyHandlers = [];
            this.historyQueue = [];
            for (var i = 0; i < files.length; i++) {
                var blob = null;
                if (files[i].blob) {
                    blob = files[i].blob; // from gears;
                } else {
                    blob = files[i]; //from html5 will not work.
                }
                var md = desktop.extractMetaData(blob);
                if (md.attachments.length > 0) {
                    this.hasAttachments = true;
                }

                this.historyHandlers.push(new emailHandler({
                    file: files[i],
                    histRelIdProperty: table + 'Id',
                    histRelNameProperty: table + 'Name',
                    histRelId: entinfo.EntityId,
                    histRelName: entinfo.Description,
                    entityContext: entinfo,
                    emailDroppedText: Sage.Utility.File.DefaultDropHandler.emailDroppedText,
                    fileMetaData: md,
                    saveAttachments: false,
                    saveAsMsg: Sage.Utility.File.DefaultDropHandler.options.SAVEMSGFILES,
                    doNotPromptHistory: Sage.Utility.File.DefaultDropHandler.options.DoNotPromptHistory,
                    onHistorySaved: dojo.hitch(this, '_onHistoryHandlerSuccsess'),
                    onHistoryFailed: dojo.hitch(this, '_onHistoryHandlerFailed')
                }));

            }
        },
        _processNextHistoryHandler: function () {
            if (this.historyHandlers.length > 0) {
                var handler = this.historyHandlers.pop();
                if (handler) {
                    handler.saveAttachments = this.saveAttachments;
                    handler.handleFile();
                }
            } else {
                this.saveAttachments = false; //rest the prompt.
                this._hasAttachmnets = false;
                this._checkContinueToComplete();
            }
        },
        _onHistoryHandlerSuccsess: function (historyId) {
            this.historyQueue.push(historyId);
            this._processNextHistoryHandler();
        },
        _onHistoryHandlerFailed: function () {
            //this.historyQueue.push('');
            this._processNextHistoryHandler();
        },
        _checkContinueToComplete: function () {
            //all the history records have been created - now show complete dialog...
            if (!this.options.DoNotPromptHistory) {
                this._showCompleteDlg();
            } else {
                dojo.publish('/entity/history/change', null);
                this.historyQueue = [];
            }
        },
        _showCompleteDlg: function () {
            var actService = Sage.Services.getService('ActivityService');
            actService.completeHistoriesInList(this.historyQueue);
        },
        getEntityInfo: function () {
            if (Sage.Services.hasService('ClientEntityContext')) {
                var entitycontext = Sage.Services.getService('ClientEntityContext');
                var context = entitycontext.getContext();
                if (context.EntityId != "") {
                    return context;
                } else {
                    return null;
                }
            }
        }
    };
    return Sage.Utility.File.DefaultDropHandler = dojo.mixin(Sage.Utility.File.DefaultDropHandler, i18n.getLocalization("Sage.Utility.File", "DefaultDropHandler")); ;
});

},
'Sage/TaskPane/nls/SecurityManagerTasksTasklet':function(){
﻿define("Sage/TaskPane/nls/SecurityManagerTasksTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        addSecurityProfileTitle: 'Add Profile',
        editSecurityProfileTitle: 'Edit Profile'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/nls/TimeZoneItem':function(){
define("Sage/UI/nls/TimeZoneItem", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            buttonOKText: 'OK',
            buttonCancelText: 'Cancel',
            timeZoneText: 'Time zone',
            timeZoneSettingsText: 'Time Zone Settings',
            setTimeZoneText: 'Set the time zone:'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/File/GoogleDocPicker':function(){
﻿/*globals dojo define google  */
define("Sage/Utility/File/GoogleDocPicker", [
    'dijit/_Widget',
    'dijit/tree/TreeStoreModel',
    'dijit/Dialog',
    'dijit/Tree',
    'dojo/window',
    'dojo/data/ItemFileReadStore',
    'dojo/i18n!./nls/GoogleDocPicker',
    'dojo/_base/declare'
],
function (
    _Widget,
    TreeStoreModel,
    Dialog,
    Tree,
    dojoWindow,
    ItemFileReadStore,
    nlsResources,
    declare
) {

    var googleAuthModule = declare('Sage.Utility.File.GoogleAuthModule', null, {
        couldNotOpenWindowMsg: 'Could not open authentication window - please check your popup blocker settings.',

        scope: '',
        authUrl: '',
        constructor: function (opts) {
            this.scope = opts.authUrl;
            dojo.mixin(this, opts);
            dojo.mixin(this, nlsResources);
        },

        login: function () {
            // summary:
            //  Process login.
            //  When login completes (either because the user is already logged in, or because he successfully logs in)
            // the onLoggedIn function will be called.
            var r = this;
            this._loadGoogleLibrary(function () {
                google.load("gdata", "2.0", { "callback":
			        function () {
			            google.gdata.onLoad();
			            if (google.accounts.user.checkLogin(r.authUrl)) {
			                r.onLoggedIn();
			            } else {
			                window.googleAuthModule = r;
			                var win = window.open("GoogleAuth.aspx", "_blank");
			                setTimeout(function () {
			                    var blocked = false;
			                    if (typeof win == 'undefined')
			                    // safari popup blocker
			                        blocked = true;
			                    else if (win && win.closed)
			                    // happens if user closes the window right away
			                        blocked = false;
			                    else if (win && !win.outerHeight)
			                        blocked = true;
			                    if (blocked) {
			                        alert(r.couldNotOpenWindowMsg);
			                    }
			                }, 3000);
			            }
			        }
                });
            });
        },
        logout: function () {
            if (google.accounts.user.checkLogin(this.authUrl)) {
                google.accounts.user.logout();
            }
        },
        onLoggedIn: function () {

        },
        _loadGoogleLibrary: function (callback) {
            if (typeof google !== 'undefined') {
                callback();
            } else {
                var cbName = "googleCallback_" + String(Math.random()).replace(/^0\./, "");
                window[cbName] = callback;
                var script = document.createElement("script");
                script.src = "https://www.google.com/jsapi?callback=" + cbName;
                script.type = "text/javascript";
                document.getElementsByTagName("head")[0].appendChild(script);
            }
        }

    });

    var googleDocPicker = declare('Sage.Utility.File.GoogleDocPicker', _Widget, {
        id: '',
        googleDocumentsTitle: 'Google Documents',
        pick: function () {
            // summary:
            //	Show picker.  When selection is done, onDocumentSelected will be picked.
            var auth = new googleAuthModule({ authUrl: 'https://docs.google.com/feeds' });
            dojo.connect(auth, 'onLoggedIn', this, this._onLoggedInHandler);
            auth.login();
        },
        _onLoggedInHandler: function () {
            var svc = new google.gdata.client.GoogleService("writely", "mytest");
            svc.getFeed("https://docs.google.com/feeds/documents/private/full?showfolders=true",
				dojo.hitch(this, "_displayFeed"),
				function (e) {
				    alert(localeStrings.errorRetrievingData + "\n" + e.toString());
				}, undefined, true);
        },
        _displayFeed: function (feed) {
            var root = this._parseFeed(feed);
            dojo.ready(dojo.hitch(this, function () {
                var store = new ItemFileReadStore({ data: { items: [{ children: root, title: 'Root', root: true}]} });
                var treeModel = new TreeStoreModel({ store: store, childrenAttrs: ["children"], labelAttr: "title", query: {} });
                var tree = new Tree({
                    model: treeModel, showRoot: false, openOnDblClick: true
                });
                dojo.connect(tree, "onDblClick", dojo.hitch(this, function (item, node, evt) {
                    this.onDocumentSelected(item.title, item.url);
                }));
                dojo.connect(tree, "onLoad", dojo.hitch(this, function () {
                    var dlg = new Dialog({ title: nlsResources.googleDocumentsTitle, content: tree });
                    dlg.startup();
                    dlg.containerNode.style.maxHeight = dojo.window.getBox().h / 3 + "px";
                    dlg.containerNode.style.minWidth = "200px"; // dojo.window.getBox().w / 6 + "px";
                    dlg.containerNode.style.overflow = "auto";
                    dlg.show();
                }));
            }));
        },

        _parseFeed: function (feed) {
            // summary:
            //	Parse the incoming gdata feed and return the array of root items
            var items = [];
            var entries = feed.feed.entry;
            if (entries) {
                for (var i = 0; i < entries.length; i++) {
                    var entry = entries[i];
                    var newItem = { id: entry.id.$t, title: entry.title.$t, feedentry: entry };
                    dojo.some(entry.category, function (x) {
                        if (x.scheme == "http://schemas.google.com/g/2005#kind") {
                            newItem.type = x.label;
                            return true;
                        }
                    });
                    items.push(newItem);
                }
            }
            items.sort(function (a, b) { return a.title > b.title ? 1 : (a.title < b.title ? -1 : 0); });

            // this prepares the tree for the feed
            var root = items.slice(0);
            var removed = 0;
            dojo.forEach(items, function (item, i) {
                var hasParent = false;
                dojo.forEach(item.feedentry.link, function (link) {
                    if (link.rel == "http://schemas.google.com/docs/2007#parent") {
                        dojo.some(items, function (parent) {
                            if (link.href == parent.id) {
                                hasParent = true;
                                if (!parent.children)
                                    parent.children = [];
                                parent.children.push(item);
                            }
                        });
                    }
                    if (link.rel == "alternate") {
                        // this seems to be the most reliable way to obtain the edit URL
                        item.url = link.href;
                    }
                });
                if (hasParent) {
                    root.splice(i - removed, 1);
                    removed++;
                }
            });
            return root;
        },
        onDocumentSelected: function (title, url) {
            // summary:
            //	Function called when the user has picked a document

        }
    });


    return googleDocPicker;

});
},
'Sage/UI/Columns/nls/SlxEdit':function(){
define("Sage/UI/Columns/nls/SlxEdit", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            editText: 'Edit'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Layout/ContentPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Layout/ContentPane", [
        'dojo/_base/declare',
        'dijit/layout/ContentPane',
        'Sage/Layout/_SplitterEnhancedMixin'
],
function (declare, ContentPane, _SplitterEnhancedMixin) {
    var contentPane = declare('Sage.Layout.ContentPane', [ContentPane, _SplitterEnhancedMixin], { });


    return contentPane;
});
},
'Sage/UI/FilteringSelect':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/FilteringSelect", [
        'dijit/form/FilteringSelect',
        'dojo/_base/declare'
], function(FilteringSelect, declare) {
    return declare('Sage.UI.FilteringSelect', FilteringSelect, {
        valueAttr: false,
        _getValueField: function(){
            // Overrides dijit.form.FilteringSelect._getValueField()
            return this.valueAttr || "value";
        }
    });
});
},
'Sage/QuickForms/Design/OwnerControlDesigner':function(){
define("Sage/QuickForms/Design/OwnerControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/OwnerBasicPropertyEditor',
    './Editors/OwnerAdvancedPropertyEditor',
    'dojo/i18n!./nls/OwnerControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    OwnerBasicPropertyEditor,
    OwnerAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.OwnerControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            OwnerBasicPropertyEditor,
            OwnerAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="{%= $.fieldClass %}-icon"></div>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-owner',
        helpTopicName: 'Owner_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXOwner, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Owner',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'LookupResultValue');
            });
        },

        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },


        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('required', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'LookupResultValue',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: 'null'
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/Layout/TabContainer':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Layout/TabContainer", [
        'dojo/_base/declare',
        'dojo/ready',
        'dojo/aspect',
        'dijit/layout/TabContainer'
],
function (declare, ready, aspect, TabContainer) {
    //summary
    // Override of dijit layout TabContainer.
    var tabContainer = declare('Sage.Layout.TabContainer', [TabContainer], {
        region: 'center',
        destroyRecursive: function () {
            if (this.tablist) {
                this.tablist.destroy();
            }
            this.inherited(arguments);
        },
        postCreate: function () {
            aspect.after(this, 'startup', function () {
                // This is not a typo.  The dijit.layout.ContentPane is not affectively determining all of it's layout information
                // on the first pass through resize.  Calling resize twice effectively renders the TabContainer to fill it's container.
                var localTC = dijit.byId('tabContent');
                localTC.resize(); localTC.resize();
            });
        }
    });


    return tabContainer;
});
},
'url:Sage/UI/Controls/templates/DateTimePicker.html':"<div class=\"dateTimePicker\">\r\n        <div dojoAttachPoint=\"tooltipContainer\">\r\n        \r\n            <div dojoAttachPoint=\"dateContainer\" class=\"dateTimePicker-dateContainer\">\r\n               \r\n                    <input id=\"${id}-Calendar\" data-dojo-type=\"Sage.UI.Calendar\"\r\n                        style=\"width:inherit;\"\r\n                        textAlign=\"${textAlign}\"\r\n                           type=\"text\" \r\n                           tabindex=\"0\"\r\n                           displayMode=\"popup\"\r\n                           dojoAttachPoint=\"dateNode\"\r\n                           dojoAttachEvent=\"onValueSelected:_onValueSelected,onBlur:_onCalendarBlur\">\r\n               \r\n            </div>\r\n            \r\n            <div dojoAttachPoint=\"timeZoneContainer\" class=\"dateTimePicker-timeZoneContainer\">\r\n               \r\n                    <label for=\"${id}-TimeStart\">${timeStartText}</label><br />\r\n                    <input id=\"${id}-TimeTextBox\" data-dojo-type=\"dijit.form.TimeTextBox\" \r\n                           style=\"width:16em;\"\r\n                           textAlign=\"${textAlign}\"\r\n                           tabindex=\"0\"\r\n                           type=\"text\" dojoAttachPoint=\"timeNode\">\r\n                    <br /><br/>\r\n                    <label for=\"${id}-TzCalculator\">${timeZoneCalculatorText}</label>\r\n                    <div id=\"timeZoneCalucaltor\" class=\"dateTimePicker-timeZoneCalculator\">\r\n                       <p style=\"width:auto;margin-top:auto\">\r\n                            <label for=\"${id}-TzSelectSource\">${timeZoneSourceText}</label><br />\r\n                            <select id=\"${id}-TzSelectSource\" data-dojo-type=\"dijit.form.ComboBox\"  dojoAttachPoint=\"timeZoneSourceComboNode\" style=\"width:15em;\">\r\n                            </select>\r\n                            <br />\r\n                            <label for=\"${id}-TzSelectDest\">${timeZoneDestText}</label><br />\r\n                           <select id=\"${id}-TzSelectDest\" data-dojo-type=\"dijit.form.ComboBox\"  dojoAttachPoint=\"timeZoneDestComboNode\" style=\"width:15em;\">\r\n                           </select>\r\n                           <br/>\r\n                            <span id=\"${id}-ConvertResults\" dojoAttachPoint=\"convertResultsNode\" style=\"float:left;padding-top:5px;\">\r\n                        </span>\r\n                        </p><br/>\r\n                        <button id=\"${id}-Convert\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"timeZoneConvertButtonNode\" type=\"button\" style=\"float:right\" dojoAttachEvent=\"onClick:_convertClicked\">\r\n                            ${convertText}\r\n                        </button>\r\n                       \r\n                        \r\n                    </div>\r\n               \r\n                <div class=\"button-bar alignright\" style=\"clear: both\">\r\n                    <button id=\"${id}-OKButton\" tabindex=\"0\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"OKButtonNode\" type=\"button\" dojoAttachEvent=\"onClick:_okClicked\">\r\n                        ${okText}\r\n                    </button>\r\n                    <button id=\"${id}-CancelButton\" tabindex=\"0\" data-dojo-type=\"dijit.form.Button\" dojoAttachPoint=\"CancelButtonNode\" type=\"button\" dojoAttachEvent=\"onClick:_cancelClicked\">\r\n                        ${cancelText}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    \r\n</div>\r\n\r\n",
'Sage/QuickForms/Design/Editors/nls/CheckBoxAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/CheckBoxAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            checkedText: "Checked:",
            checkedTooltipText: "Sets default state of checkbox to selected.",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Data/BaseSDataStore':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Data/BaseSDataStore", [
        'Sage/Utility',
        'Sage/Data/SDataServiceRegistry',
        'dojo/_base/declare',
        'dojo/_base/lang'
],
function (Utility, SDataServiceRegistry, declare, lang) {
    var baseStore = declare('Sage.Data.BaseSDataStore', null, {
        queryName: null,
        constructor: function (o) {
            lang.mixin(this, o);
            this.features = {
                'dojo.data.api.Read': true
            };
            if (!this.identityAttributes) {
                this.identityAttributes = [this.identityAttribute || '$key'];
            }
            if (!this.labelAttributes) {
                this.labelAttributes = ['$descriptor'];
            }
            this.features['dojo.data.api.Identity'] = true;
            this.dataCache = { query: '' };
        },
        fetch: function (context) {
            if (!this.isNewContext(context) && this.feed) {
                this.onSuccess(context, this.feed);
                return;
            }

            this.setContext(context);
            if (context.count === Infinity) {
                context.count = 500;  //500 is almost Infinity, right?
            }

            var pagesize = (context.count - 0) || this.pageSize || 15;
            var startIdx = (context.start - 0) || 1;
            if (startIdx > 1) {
                startIdx = startIdx + 1;
            }

            this.verifyService();
            var request = this.getCollectionRequestObj(context);
            if (!request) {
                if (context.onError) {
                    context.onError.call(context.scope || this, "Invalid data url", context);
                }
                return;
            }

            request.setQueryArg(Sage.SData.Client.SDataUri.QueryArgNames.StartIndex, (isNaN(startIdx)) ? 1 : startIdx);
            var qry = '';

            // New dojo 1.7 controls will clobber this.query.
            // Issue a warn if this.query was set to an object or string
            if (this.query && typeof this.query !== 'function') {
                console.warn('BaseSDataStore.query should not be set. Use directQuery instead.');

                // Set the new property so we don't break anything.
                if (!this.directQuery) {
                    this.directQuery = this.query;
                }
            }

            // Check to see if a query has been added directly to the store, for binding with native dojo components, ie. ComboBox
            // TODO: Determine patterns for mixin, replacement, seed value, etc. of query,
            if (this.directQuery) {
                if (!context.query) {
                    context.query = {};
                }
                lang.mixin(context.query, this.directQuery);
            }
            if (context.query) {
                if (typeof context.query === 'function') {
                    qry = context.query();
                } else if (typeof context.query === 'string') {
                    qry = context.query;
                } else if (typeof context.query === 'object') {
                    for (var queryItem in context.query) {
                        //Initial context based query
                        if (queryItem === 'fn') {
                            qry = context.query.fn.call(context.query.scope || this);
                        }
                        //Additional conditions.  Typically from the ConditionManager.
                        else if (queryItem === 'conditions') {
                            if (typeof context.query.conditions === 'string' && context.query.conditions !== '') {
                                qry += (qry && qry.length > 0) ? ' and ' + context.query.conditions : context.query.conditions;
                            }
                        }
                        //In the case of ComboBoxes and FilteringTextBoxes, we need to include the user input into the query.
                        else if (queryItem !== 'scope') {
                            if (context.query.hasOwnProperty(queryItem)) {
                                var userInput = [queryItem, ' like ', "'", context.query[queryItem].replace('*', '%'), "'"].join('');
                                qry += (qry.length > 0) ? ' and ' + userInput : userInput;
                            }
                        }
                    }
                }
            }

            context.evaluatedQuery = qry || '';
            if (qry && qry !== '') {
                request.setQueryArg('where', qry);
            }

            if (this.select && this.select.length > 0)
                request.setQueryArg('select', this.select.join(','));

            if (this.include && this.include.length > 0)
                request.setQueryArg('include', this.include.join(','));

            if (this.sort) {
                // add the "intrinsic" sort (specified in store options)
                // take care not to re-add an attribute that is already specified in the context sort 
                // (or sdata will give an error)
                context.sort = context.sort || [];

                dojo.forEach(this.sort, function (sortItem) {
                    if (dojo.filter(context.sort, function (existingSort) {
                        return sortItem.attribute == existingSort.attribute;
                    }).length == 0) {
                        context.sort.push(sortItem);
                    }
                });
            }

            if (typeof context.resourcePredicate !== 'undefined') {
                request.getUri().setCollectionPredicate(context.resourcePredicate);
            }

            this._setQueryArgsOnRequest(context.queryArgs, request);

            if (context.sort && context.sort.length > 0) {
                var order = [];
                dojo.forEach(context.sort, function (v) {
                    if (v.descending)
                        this.push(v.attribute + ' desc');
                    else
                        this.push(v.attribute);
                }, order);
                // ProxySDataStore hits this, and it should be camel-case to follow our SData spec
                //  Our system is case-insensitive, but other systems following the spec may not be (X3 for instance)
                request.setQueryArg('orderBy', order.join(','));
            }

            if (this.beforeRequest && typeof this.beforeRequest === 'function') {
                this.beforeRequest.call(context.scope || this, request);
            }
            var key = request.read({
                success: lang.hitch(this, this.onSuccess, context),
                failure: lang.hitch(this, this.onFailure, context)
            });

            return {
                abort: lang.hitch(this, this.abortRequest, key)
            };
        },
        getCollectionRequestObj: function (context) {
            var request = this.queryName
                ? new Sage.SData.Client.SDataNamedQueryRequest(this.service).setQueryName(this.queryName)
                : new Sage.SData.Client.SDataResourceCollectionRequest(this.service);

            request.setResourceKind(this.resourceKind);
            request.setStartIndex(context.start + 1);

            if (this.resourcePredicate
                && this.resourcePredicate !== "''") {
                request.getUri().setCollectionPredicate(this.resourcePredicate);
            }

            this._setQueryArgsOnRequest(this.queryArgs, request);

            if (!context.count && this.count) {
                context.count = this.count;
            }
            request.setCount(context.count);
            return request;
        },
        _setQueryArgsOnRequest: function (queryArgs, request) {
            if (queryArgs) {
                for (var prop in queryArgs) {
                    if (queryArgs.hasOwnProperty(prop)) {
                        request.setQueryArg(prop, queryArgs[prop]);
                    }
                }
            }
        },
        abortRequest: function (key) {
            this.service.abortRequest(key);
        },
        onSuccess: function (context, feed) {
            if (context.onBegin) {
                if (typeof feed.$totalResults === 'undefined') {
                    feed.$totalResults = 500000;
                }
                context.onBegin.call(context.scope || this, feed.$totalResults, context);
            }
            if (context.onComplete) context.onComplete.call(context.scope || this, feed.$resources, context);
            this.addToCache(context, feed);
        },
        onFailure: function (context, request, o) {
            var msg = 'An unknown exception occurred obtaining data.';
            if (request.responseText) {
                var responseJObj = Sys.Serialization.JavaScriptSerializer.deserialize(request.responseText);
                if (dojo.isArray(responseJObj)) {
                    msg = responseJObj[0].message;
                } else {
                    msg = request.responseText;
                }
            }
            if (context && context.onError) {
                context.onError.call(context.scope || this, msg, context);
            }
            else {
                if (typeof msg === 'string' && typeof console !== 'undefined') {
                    if (request && request.status) {
                        msg += ' (HTTP status = %o; statusText = %o)';
                        console.error(msg, request.status, request.statusText);
                    }
                    else
                        console.error(msg);
                }
            }
        },
        setContext: function (newContext) {
            this.context = {
                start: newContext.start,
                count: newContext.count,
                query: newContext.query,
                queryOptions: newContext.queryOptions,
                sort: newContext.sort
            };
        },
        addToCache: function (context, feed) {
            var i, item, key;
            if (context.evaluatedQuery !== this.dataCache.query) {
                this.clearCache();
                this.dataCache.query = context.evaluatedQuery;
            }
            if (feed.$resources) {
                for (i = 0; i < feed.$resources.length; i++) {
                    item = feed.$resources[i];
                    key = this.getIdentity(item);
                    this.dataCache[key] = item;
                }
            }
        },
        clearCache: function () {
            for (var key in this.dataCache) {
                if (key !== 'query') {
                    delete this.dataCache[key];
                }
            }
            this.dataCache.query = '';
        },
        isNewContext: function (newContext) {
            if (typeof this.context !== 'object') return true;
            if (this.context.start !== newContext.start) return true;
            if (this.context.count !== newContext.count) return true;
            return false;
        },
        verifyService: function (contract) {
            if (!this.service) {
                this.service = SDataServiceRegistry.getSDataService(contract || 'dynamic');
            }
        },
        getValue: function (item, attribute, defaultValue) {
            return Utility.getValue(item, attribute);
        },
        getFeatures: function () {
            return this.features;
        },
        //dojo.data.api.Read implementations....
        getLabel: function (item) {
            var lbl = [];
            for (var i = 0; i < this.labelAttributes.length; i++) {
                if (item.hasOwnProperty(this.labelAttributes[i])) {
                    lbl.push(item[this.labelAttributes[i]]);
                }
            }
            return lbl.join(' ');
        },
        getLabelAttributes: function (item) {
            return this.labelAttributes;
        },
        //dojo.data.api.Identity implementations...
        getIdentity: function (item) {
            //summary:
            //  Returns the value of the unique identifier for the item passed
            //item:
            //  The item from which to obtain its identifier.
            if (item) {
                var identity = [];
                for (var i = 0; i < this.identityAttributes.length; i++) {
                    if (item.hasOwnProperty(this.identityAttributes[i])) {
                        identity.push(item[this.identityAttributes[i]]);
                    }
                }
                return identity.join('');
            }
        },
        getIdentityAttributes: function (item) {
            return this.identityAttributes;
        },
        fetchItemByIdentity: function (keywordArgs) {
            //summary:
            //  returns the item from the store that matches the identity passed in the keywordArgs object.
            //keywordArgs:
            //  object that defines the item to locate and callback methods to invoke when the item has been located and loaded.
            //  {
            //      identity: string|object,    //id
            //      onItem: function(item),     //called when item has been loaded
            //      onError: function(error),   //called when an error occurred or item could not be loaded.
            //      scope: object,              //the scope in which to call the onItem and onError functions
            //  }
            if (this.dataCache.hasOwnProperty(keywordArgs.identity)) {
                keywordArgs.onItem.call(keywordArgs.scope || this, this.dataCache[keywordArgs.identity]);
            } else {
                var msg = 'Item with that key does not exist in the data cache: ' + keywordArgs.identity;
                if (keywordArgs.onError) {
                    keywordArgs.onError.call(keywordArgs.scope || this, { 'error': msg });
                } else {
                    if (typeof console !== 'undefined') { console.info(msg); }
                }
            }
        },
        containsValue: function (item, attr, value) {
            var val = Utility.getValue(item, attr);
            return val !== '';
        }
    });

    return baseStore;
});
},
'url:Sage/templates/SpeedSearch.html':"<span>\r    <!-- the textbox -->\r    <input type=\"text\" id=\"txt_ss\" />\r    <!--the image button-->\r    <button id='ss-btn-image' type=\"button\" style=\"font-size:10px\"></button>\r    <button id='ss-btn-toggle' type=\"button\" style=\"font-size:10px\"></button>\r</span>\r",
'Sage/UI/GroupTabPane':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GroupTabPane", ['dijit/layout/TabContainer',
        'dojo/topic',
        'dojo/_base/lang',
        'dojo/_base/declare'
],
function (TabContainer, topic, lang, declare) {
    var groupTabPane = declare("Sage.UI.GroupTabPane", TabContainer, {
        useMenu: false,
        _children: null,
        constructor: function (options) {
            this._children = [];
            this.inherited(arguments);
        },
        addChild: function (widget) {
            // TODO: Call addChildren instead
            this._children.push(widget);
            topic.publish(this.id+"-addChild", widget, this._children.length);
            this._setupChild(widget);
            
            if(!this.selectedChildWidget){
                this.selectChild(widget);
            }

            if (this.doLayout) {
                this.layout();
            }
            
            this.onAddChildrenComplete();
        },
        addChildren: function (widgets) {
            var len = widgets.length,
                filtered,
                chunkSize = 100,
                chunk,
                pos = 0,
                last = false;

            // Split the tabs into chunks, and render that many at one time.
            // Throwing each chunk in a defer to prevent IE8 from throwing a long running script warning.
            while (pos < len) {
                if (pos < len - chunkSize) {
                    chunk = widgets.splice(0, chunkSize);
                } else {
                    chunk = widgets.splice(0, len - pos);
                    last = true;
                }

                pos = pos + chunkSize;

                this.defer((function(chunk, self, last) {
                    return lang.hitch(self, function () {
                        var i,
                            chunkLength = chunk.length,
                            childLen = this._children.length;
                        for (i = 0; i < chunkLength; i++) {
                            if (this._started) {
                                topic.publish(this.id+"-addChild", chunk[i], childLen + i);
                                this._setupChild(chunk[i]);
                                
                                if(!this.selectedChildWidget){
                                    this.selectChild(chunk[i]);
                                }
                                
                                this._children.push(chunk[i]);
                            }
                        }

                        if (last) {
                            if (this.doLayout) {
                                this.layout();
                            }
                            
                            this.onAddChildrenComplete();
                        }
                    });
                })(chunk, this, last));
            }
        },
        onAddChildrenComplete: function () {
        },
        getChildren: function () {
            /* overrides _WidgetBase getChildren */
            return this._children;
        },
        removeChildren: function () {
            var i = 0,
                widget;
            for (i = 0; i < this._children.length; i++) {
                widget = this._children[i];
                topic.publish(this.id + "-removeChild", widget);// publish
                widget.destroyDescendants();
            }

            this._children = [];
            this.destroyDescendants();
            
            if (this.doLayout) {
                this.layout();
            }
        }
    });
    return groupTabPane;
});
},
'Sage/TaskPane/AccountingTasksTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/AccountingTasksTasklet", [
        'Sage/TaskPane/_BaseTaskPaneTasklet',
        'Sage/UI/Dialogs',
        'dojo/i18n!./nls/AccountingTasksTasklet',
        'dojo/_base/declare'
],
function (_BaseTaskPaneTasklet, Dialogs, i18nStrings, declare) {
    var accountingTasksTasklet = declare('Sage.TaskPane.AccountingTasksTasklet', _BaseTaskPaneTasklet, {
        nlsAccountingResources: i18nStrings,
        linkAccount: function () {
            //if details mode just assume the current id, which will be handled by the user control
            if (Sage.Utility.getModeId() === 'detail') {
                return true;
            }
            var selectionInfo = this.getSelectionInfo();
            if (this.verifySingleSelection(selectionInfo)) {
                this.saveSelections(this.actionItem, selectionInfo);
                return true;
            }
            else {
                Dialogs.showInfo(this.selectSingleRecord, this.invalidSelectionTitle);
                return false;
            }
        },
        actionItem: function () {
            //Client-side actions
        },
        checkPrices: function () {
            if (Sage.Utility.getModeId() === 'detail') {
                return true;
            }
            var selectionInfo = this.getSelectionInfo();
            if (this.verifySingleSelection(selectionInfo)) {
                this.saveSelections(this.actionItem, selectionInfo);
            }
            else {
                Dialogs.showInfo(this.nlsAccountingResources.updatePricingRecords, this.invalidSelectionTitle);
                return false;
            }
        },
        submitSalesOrder: function () {
            if (Sage.Utility.getModeId() === 'detail') {
                return true;
            }
            var selectionInfo = this.getSelectionInfo();
            if (this.verifySingleSelection(selectionInfo)) {
                this.saveSelections(this.actionItem, selectionInfo);
            }
            else {
                Dialogs.showInfo(this.nlsAccountingResources.updatePricingRecords, this.invalidSelectionTitle);
                return false;
            }
        }
    });
    return accountingTasksTasklet;
});
},
'Sage/QuickForms/Design/ComboBoxControlDesigner':function(){
define("Sage/QuickForms/Design/ComboBoxControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/ComboBoxBasicPropertyEditor',
    './Editors/ComboBoxAdvancedPropertyEditor',
    'dojo/i18n!./nls/ComboBoxControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    ComboBoxBasicPropertyEditor,
    ComboBoxAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.ComboBoxControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            ComboBoxBasicPropertyEditor,
            ComboBoxAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="{%= $.fieldClass %}-icon"></div>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-combobox',
        helpTopicName: 'ComboBox_control',
        quickFormControlType: 'Sage.Platform.QuickForms.QFControls.QFListBox, Sage.Platform.QuickForms.QFControls',

        //Localization
        displayNameText: 'ComboBox',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'SelectedValue');
            });
        },
        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getDataSourceAttr: function() {
            return lang.getObject('DataSource', false, this.entry);
        },
        _setDataSourceAttr: function(value) {
            lang.setObject('DataSource', value, this.entry);
        },
        _getHasItemsAttr: function() {
            var items = lang.getObject('ItemValues', false, this.entry);
            return (lang.isArray(items) && items.length > 0);
        },
        _getItemValuesAttr: function() {
            return lang.getObject('ItemValues', false, this.entry);
        },
        _setItemValuesAttr: function(value) {
            lang.setObject('ItemValues', value, this.entry);
        },
        _getTextFieldAttr: function() {
            return lang.getObject('TextField', false, this.entry);
        },
        _setTextFieldAttr: function(value) {
            lang.setObject('TextField', value, this.entry);
        },
        _getValueFieldAttr: function() {
            return lang.getObject('ValueField', false, this.entry);
        },
        _setValueFieldAttr: function(value) {
            lang.setObject('ValueField', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('dataSource', null);
            this.set('textField', '');
            this.set('valueField', '');

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'SelectedValue',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/UI/Controls/nls/LogOffButton':function(){
﻿define("Sage/UI/Controls/nls/LogOffButton", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            logOffText: 'Log Off'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/Editors/nls/TextBoxAdvancedPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/TextBoxAdvancedPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Advanced",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            controlInfoText: "Control Info",
            dataText: "Data",
            controlIdText: "Control Id:",
            controlIdTooltipText: "Identifier for this control.",
            controlLabelPlacementText: "Label Placement:",
            controlLabelPlacementTooltipText: "Label position in relation to the control.",
            controlTypeText: "Control Type:",
            controlTypeTooltipText: "Sage SalesLogix control type.",
            defaultDataBindingText: "Data Bindings:",
            defaultDataBindingTooltipText: "Data field(s) in the database used by this control.",
            enabledText: "Enabled:",
            enabledTooltipText: "Allows user to interact with this control.",
            maxLengthText: "Max Length:",
            maxLengthTooltipText: "Maximum number of characters user can enter.",
            requiredText: "Required:",
            requiredTooltipText: "Requires a value when saving data.",
            visibleText: "Visible:",
            visibleTooltipText: "Show or hide this control on the form.",
            labelPlacementText: {
                left: "Left",
                right: "Right",
                top: "Top",
                none: "None"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/MainView/ActivityMgr/nls/EditEventEditor':function(){
﻿define("Sage/MainView/ActivityMgr/nls/EditEventEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleScheduleText: 'Schedule Event',
            titleEditText: 'Edit Event',
            lblDayTypeText: 'Day Type:',
            lblStartDateText: 'Start Date:',
            lblEndDateText: 'End Date:',
            lblUserText: 'User:',
            lookupUserText: 'Lookup User',
            lblCategoryText: 'Category:',
            lblLocationText: 'Location:',
            lblDescriptionText: 'Description:',
            btnOkayText: 'OK',
            btnCancelText: 'Cancel',
            btnHelpText: 'Help',
            eventTypeActiveText: 'Active',
            eventTypeBusinessTripText: 'Business Trip',
            eventTypeConferenceText: 'Conference',
            eventTypeHolidayText: 'Holiday',
            eventTypeOffText: 'Off',
            eventTypeTradeShowText: 'Trade Show',
            eventTypeUnavailableText: 'Unavailable',
            eventTypeVacationText: 'Vacation',
            errorText: 'I\'m sorry, the event could not be created because an error occurred.',
            invaildDatesText: 'I\'m sorry, the end date cannot be earlier than the start date.',
            nameText: 'Name',  
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/Utility/File/FallbackFilePicker':function(){
require({cache:{
'url:Sage/Utility/File/templates/FallbackFilePicker_Attachment.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"uploadFileDialog\" title=\"{%= $.attachFileText %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onHide\">',\r\n        '<iframe src=\"about:blank\" style=\"width:0px;height:0px;border-width:0px;\" name=\"{%= $._iframeId %}\" id=\"{%= $._iframeId %}\" dojoAttachPoint=\"_iframe\" dojoAttachEvent=\"onload:_iframeLoad\"></iframe>',\r\n        '<form method=\"post\" enctype=\"multipart/form-data\" action=\"{%= $._buildPostUrl() %}\" target=\"{%= $._iframeId %}\" dojoAttachPoint=\"_postForm\" class=\"attachment-properties-form\">',\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"160\">',\r\n                '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.uploadFileText %}\" >',\r\n                    '<input name=\"file\" multiple=\"false\" type=\"file\" dojoAttachEvent=\"onchange:_onNewFile\" dojoAttachPoint=\"btn_FileSelect\" class=\"uploadButton\" />',\r\n                '</div>',\r\n                 '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.descriptionText %}\" name=\"description\" id=\"{%= $.id %}_tb_Description\" dojoAttachPoint=\"tb_Description\" maxlength=\"128\" ></div>',\r\n                 '<input type=\"hidden\" dojoType=\"dijit.form.TextBox\" name=\"fileName\" id=\"{%= $.id %}_tb_realFileName\" dojoAttachPoint=\"tb_realFileName\" maxlength=\"255\" />',\r\n            '</div>',\r\n            '<div class=\"general-dialog-actions\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                '<span>&nbsp;&nbsp</span>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n            '</div>',\r\n            '<input type=\"hidden\" name=\"dataType\" value=\"R\" />',\r\n            '<input type=\"hidden\" name=\"attachDate\" dojoAttachPoint=\"_attachDate\"/>',\r\n            '<input type=\"hidden\" name=\"accountId\" dojoAttachPoint=\"_accountId\"/>',\r\n            '<input type=\"hidden\" name=\"activityId\" dojoAttachPoint=\"_activityId\" />',\r\n            '<input type=\"hidden\" name=\"contactId\" dojoAttachPoint=\"_contactId\" />',\r\n            '<input type=\"hidden\" name=\"contractId\" dojoAttachPoint=\"_contractId\" />',\r\n            '<input type=\"hidden\" name=\"defectId\" dojoAttachPoint=\"_defectId\" />',\r\n            '<input type=\"hidden\" name=\"historyId\" dojoAttachPoint=\"_historyId\" />',\r\n            '<input type=\"hidden\" name=\"leadId\" dojoAttachPoint=\"_leadId\" />',\r\n            '<input type=\"hidden\" name=\"opportunityId\" dojoAttachPoint=\"_opportunityId\" />',\r\n            '<input type=\"hidden\" name=\"productId\" dojoAttachPoint=\"_productId\" />',\r\n            '<input type=\"hidden\" name=\"returnId\" dojoAttachPoint=\"_returnId\" />',\r\n            '<input type=\"hidden\" name=\"salesOrderId\" dojoAttachPoint=\"_salesOrderId\" />',\r\n            '<input type=\"hidden\" name=\"ticketId\" dojoAttachPoint=\"_ticketId\" />',\r\n            '<input type=\"hidden\" name=\"userId\" dojoAttachPoint=\"_userId\" />',\r\n        '</form>',\r\n    '</div>',\r\n'</div>'\r\n]",
'url:Sage/Utility/File/templates/FallbackFilePicker_LibraryDoc.html':"﻿[\r\n'<div>',\r\n    '<div dojoType=\"dijit.Dialog\" id=\"uploadFileDialog\" title=\"{%= $.addLibraryFileText %}\" dojoAttachPoint=\"_dialog\" dojoAttachEvent=\"onHide:_onHide\">',\r\n        '<iframe src=\"about:blank\" style=\"width:0px;height:0px;border-width:0px;\" name=\"{%= $._iframeId %}\" id=\"{%= $._iframeId %}\" dojoAttachPoint=\"_iframe\" dojoAttachEvent=\"onload:_iframeLoad\"></iframe>',\r\n        '<form method=\"post\" enctype=\"multipart/form-data\" action=\"\" target=\"{%= $._iframeId %}\" dojoAttachPoint=\"_postForm\" class=\"attachment-properties-form\">',\r\n            '<div dojoType=\"dojox.layout.TableContainer\" orientation=\"horiz\" cols=\"1\" labelWidth=\"160\">',\r\n                 '<div data-dojo-type=\"dijit.layout.ContentPane\" label=\"{%= $.uploadFileText %}\" >',\r\n                    '<input name=\"file\" multiple=\"false\" type=\"file\" dojoAttachEvent=\"onchange:_onNewFile\" dojoAttachPoint=\"btn_FileSelect\" class=\"uploadButton\" />',\r\n                 '</div>',\r\n                 '<div dojoType=\"dijit.form.TextBox\" label=\"{%= $.descriptionText %}\" name=\"description\" id=\"{%= $.id %}_tb_Description\" dojoAttachPoint=\"tb_Description\" maxlength=\"255\" ></div>',\r\n                 '<input type=\"hidden\" dojoType=\"dijit.form.TextBox\" name=\"fileName\" id=\"{%= $.id %}_tb_realFileName\" dojoAttachPoint=\"tb_realFileName\" maxlength=\"255\" />',\r\n            '</div>',\r\n            '<div class=\"general-dialog-actions\" align=\"right\">',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_OK\" name=\"btn_OK\" dojoAttachPoint=\"btn_OK\" dojoAttachEvent=\"onClick:_okClick\">{%= $.okText %}</div>',\r\n                '<span>&nbsp;&nbsp</span>',\r\n                '<div data-dojo-type=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Cancel\" name=\"btn_Cancel\" dojoAttachPoint=\"btn_Cancel\" dojoAttachEvent=\"onClick:_cancelClick\">{%= $.cancelText %}</div>',\r\n            '</div>',\r\n        '</form>',\r\n    '</div>',\r\n'</div>'\r\n]"}});
﻿/*globals Sage, dojo, define */
define("Sage/Utility/File/FallbackFilePicker", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dijit/Dialog',
    'require',
    'dojo/string',
    'Sage/UI/Dialogs',
    'Sage/Utility',
    'Sage/Utility/ErrorHandler',
    'Sage/Utility/File',
    'Sage/Utility/File/Attachment',
    'dojo/_base/lang',
    'Sage/UI/_DialogLoadingMixin',
    'dojo/i18n',
    'dojo/i18n!./nls/FallbackFilePicker',
    'dojo/text!./templates/FallbackFilePicker_Attachment.html',
    'dojo/text!./templates/FallbackFilePicker_LibraryDoc.html',
    'dojo/_base/array',
    'dojo/_base/declare',
    'dojo/has'
],
// ReSharper disable InconsistentNaming
function (
    _Widget,
    _Templated,
    Dialog,
    require,
    dString,
    Dialogs,
    sageUtility,
    ErrorHandler,
    File,
    attachmentUtility,
    dojoLang,
    _DialogLoadingMixin,
    i18n,
    nlsBundle,
    attachmentTemplate,
    libraryDocTemplate,
    array,
    declare,
    has
 ) {
    var filePicker = declare('Sage.Utility.File.FallbackFilePicker', [_Widget, _Templated], {
        addLibraryFileText: 'Add Library File',
        attachFileText: 'Attach File',
        descriptionText: 'Description',
        uploadFileText: 'Select File',
        okText: 'OK',
        cancelText: 'Cancel',
        _iframeId: 'attachmentPostIFrame',
        _hiddenFields: ['_attachDate', '_accountId', '_activityId', '_contactId', '_contractId', '_defectId', '_historyId', '_leadId', '_opportunityId', '_productId', '_returnId', '_salesOrderId', '_ticketId', '_userId'],
        _showing: false,
        fileType: File.fileType.ftAttachment,
        widgetsInTemplate: true,
        id: 'fallbackFilePicker',
        widgetTemplate: null,
        constructor: function (options) {
            this.inherited(arguments);
            if (options && typeof options === 'object') {
                dojo.mixin(this, options);
            }
        },
        destroy: function () {
            if (this._dialog) {
                this._dialog.destroyRecursive();
            }
            this.inherited(arguments);
        },
        postMixInProperties: function () {
            dojo.mixin(this, i18n.getLocalization('Sage.Utility.File', 'FallbackFilePicker'));
            this.inherited(arguments);
            if (this.fileType != File.fileType.ftLibraryDocs) {
                this.widgetTemplate = new Simplate(eval(attachmentTemplate));
            }
            else {
                this.widgetTemplate = new Simplate(eval(libraryDocTemplate));
            }
        },
        show: function () {
            if (this._postForm) {
                this._postForm.reset();
            }
            this._dialog.show();
            if (this.fileType != File.fileType.ftLibraryDocs) {
                attachmentUtility.getKnownRelationships(this._receiveRelationships, this, true);
            }
            if (has("ie") < 9) {
                // Dojo has a bug where it cannot connect to an IE8 IFrame's onload event, so attachEvent is used.
                this._iframe.attachEvent('onload', this._iframeLoad);
                window.FallbackFilePicker = this;
            }
            this._showing = true;
        },
        hide: function () {
            this._dialog.hide();
        },
        _onHide: function () {
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            if (this.fileType != File.fileType.ftLibraryDocs) {
                for (var i = 0; i < this._hiddenFields.length; i++) {
                    if (this._hiddenFields[i]) {
                        this[this._hiddenFields[i]].value = '';
                    }
                }
            }
            this.tb_Description.set('value', '');
            this.tb_realFileName.set('value', '');
            this._showing = false;
        },
        _receiveRelationships: function (rels) {
            if (this.fileType == File.fileType.ftLibraryDocs) {
                return;
            }
            for (var rel in rels) {
                //console.log('rel: ' + rel + ' value: ' + rels[rel]);
                if (this['_' + rel]) {
                    this['_' + rel].value = rels[rel];
                } else if (rel) {
                    this['_' + rel] = dojo.create('input', {
                        'type': 'hidden',
                        'name': rel,
                        'value': rels[rel]
                    }, this._postForm);
                    this._hiddenFields.push('_' + rel);
                }
            }
            this._userId.value = sageUtility.getClientContextByKey('userID') || '';
            this._attachDate.value = sageUtility.Convert.toIsoStringFromDate(new Date());
        },
        _buildPostUrl: function () {
            var urlparts = [];
            urlparts.push(/https/i.test(window.location.protocol) ? 'https' : 'http');
            urlparts.push('://');
            urlparts.push(window.location.hostname);
            if (window.location.port && window.location.port !== 80) {
                urlparts.push(':', window.location.port);
            }
            urlparts.push('/');
            urlparts.push(sageUtility.getVirtualDirectoryName());
            if (this.fileType != File.fileType.ftLibraryDocs) {
                urlparts.push('/slxdata.ashx/slx/system/-/attachments/file?iframe=true&format=xml');
            }
            else {
                if (!Sage.Library || !Sage.Library.Manager || !Sage.Library.FileHandler) {
                    Dialogs.showError(this.invalidContext);
                    return null;
                }
                var sDirId = Sage.Library.FileHandler.findDirectoryId();
                var sUrl = dString.substitute('/slxdata.ashx/slx/system/-/libraryDirectories(\'${0}\')/documents/file?iframe=true&format=xml', [sDirId]);
                urlparts.push(sUrl);
            }
            var url = urlparts.join('');
            return url;
        },
        _iframeLoad: function (e) {
            var self;
            if (has("ie") < 9) {
                // NOTE: "this" in IE8 is the window and not the dialog.
                self = window.FallbackFilePicker;
            } else {
                self = this;
            }
            var frame = self._iframe;
            if (frame.contentDocument.body &&
                frame.contentDocument.body.innerText) {
                // Was there an unhandled Exception in Application_Error on the server because the file was too large?
                if (frame.contentDocument.body.innerText == 'RuntimeErrorPostTooLarge' /* DNL */) {
                    self.hide();
                    Dialogs.showError(self.fileTooLargeError);
                    return;
                }
            }
            try {
                var fnProcessDiagnoses = function (diagnosis) {
                    // Attempt to parse the innerText as an xml SData diagnoses.
                    // This data would be from a 500 error passed through by Sage.Integration.Server.dll.
                    if (diagnosis && diagnosis.hasOwnProperty('message')) {
                        var message = diagnosis.message;
                        if (diagnosis.hasOwnProperty('applicationCode') && ErrorHandler.isSDataExceptionDiagnoses(diagnosis.applicationCode)) {
                            var fnParseApplicationCode = function () {
                                var obj = {};
                                var arrAppData = diagnosis.applicationCode.split("; ");
                                array.forEach(arrAppData, function (item) {
                                    if (item && dojo.isString(item) && item.indexOf("=") !== -1) {
                                        var arrItem = item.split("=");
                                        var name = arrItem[0].trim();
                                        var value = arrItem[1].trim();
                                        obj[name] = value;
                                    }
                                });
                                return obj;
                            };
                            var info = fnParseApplicationCode();
                            if (info && info.hasOwnProperty('slxErrorId')) {
                                message += '<br /><br />';
                                message += self.slxErrorIdInfo + info.slxErrorId;
                            }
                        }
                        Dialogs.showError(message);
                    }
                };
                // The FallbackFilePicker is only used for IE
                if (has("ie")) {
                    var obj = {};
                    // Perhaps we have xml from an SData diagnoses?
                    if (has("ie") < 9) {
                        var sXml = (frame.contentDocument.body) ? frame.contentDocument.body.innerText : null;
                        if (sXml && dojo.isString(sXml)) {
                            sXml = sXml.trim();
                            // NOTE: The xml will be the "formatted" xml that IE creates...not the xml that we want.
                            var arrXml = sXml.split('\n');
                            if (dojo.isArray(arrXml)) {
                                array.forEach(arrXml, function (line, idx) {
                                    var pos = line.indexOf('- ');
                                    if (pos == 0) {
                                        arrXml[idx] = line.replace('- ', '');
                                    } else {
                                        pos = line.indexOf('  ');
                                        if (pos == 0) {
                                            arrXml[idx] = line.replace('  ', '');
                                        }
                                    }
                                });
                                sXml = arrXml.join('');
                                obj = ErrorHandler.getSDataDiagnosis(sXml, true);
                                fnProcessDiagnoses(obj);
                            }
                        }
                    } else {
                        // IE9+
                        if (frame.contentDocument.documentElement && frame.contentDocument.documentElement.childNodes.length >= 2) {
                            if (frame.contentDocument.documentElement.childNodes[1].tagName === 'sdata:diagnosis') {
                                var diagnosisNode = frame.contentDocument.documentElement.childNodes[1];
                                for (var i = 0; i < diagnosisNode.childNodes.length; i++) {
                                    var node = diagnosisNode.childNodes[i];
                                    if (node.nodeName.indexOf('sdata:') == 0) {
                                        obj[node.nodeName.replace('sdata:', '')] = node.textContent;
                                    }
                                }
                                fnProcessDiagnoses(obj);
                            }
                        }
                    }
                }
            } catch (e) {
                if (typeof console !== 'undefined') {
                    console.warn(e);
                }
            }
            if (frame.contentDocument.URL && typeof frame.contentDocument.URL !== 'undefined') {
                if (self.fileType != File.fileType.ftLibraryDocs) {
                    if (frame.contentDocument.URL.indexOf('attachments') > 0) {
                        dojo.publish('/entity/attachment/create', '');
                        self.hide();
                    }
                } else {
                    if (frame.contentDocument.URL.indexOf('/documents/file') > 0) {
                        dojo.publish('/sage/library/manager/libraryDocuments/refresh', null);
                        self.hide();
                    }
                }
            }
        },
        _onNewFile/*onChange*/: function (fileArray) {
            if (fileArray.srcElement && fileArray.srcElement.value.length > 0) {
                if (fileArray.srcElement.value) {
                    var fileName = fileArray.srcElement.value.replace(/^.*[\\\/]/, '');
                    if (this.tb_Description.get('value') === '') {
                        var fileNamePieces = fileName.split('.'),
                            descriptionValue = '';
                        if (fileNamePieces.length <= 2) {
                            descriptionValue = fileNamePieces[0];
                        }
                        else {
                            for (var i = 0; i < fileNamePieces.length - 1; i++) {
                                if (i > 0) {
                                    descriptionValue += '.';
                                }
                                descriptionValue += fileNamePieces[i];
                            }
                        }
                        this.tb_Description.set('value', descriptionValue);
                    }
                    this.tb_realFileName.set('value', fileName);
                }
            }
        },
        _okClick: function () {
            if (this.tb_realFileName.get('value') === '') {
                Dialogs.showInfo(this.pleaseSelectFile);
                return;
            }
            if (this.fileType === File.fileType.ftLibraryDocs) {
                // The action may have to change when a library file is added; the widget will only call _buildPostUrl()
                // the first time the form is submitted since the call to this._postForm.reset() does [not] reset the form action.
                this._postForm.action = this._buildPostUrl();
            }
            this._postForm.submit();
            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
            }
            this._dialog.showLoading();
        },
        _cancelClick: function () {
            this.hide();
        }
    });
    return filePicker;
});
},
'Sage/QuickForms/Design/Editors/NonVisibleAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/NonVisibleAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/NonVisibleAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.NonVisibleAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,

        //Localization
        titleText: 'Advanced',

        controlInfoText: 'Control Info',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        }
    });
});

},
'Sage/Format':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/Format", ['Sage/Utility', 'dojo/string'],
function (utility, dString) {

    Sage.Format = {
        // summary:
        // this class contains common SalesLogix based formatters for formatting data in grids and elsewhere.
        phone: function (val, index) {
            if (!val) return '';
            if (val.length !== 10) return utility.htmlEncode(val);

            return dString.substitute('(${0}) ${1}-${2}',
			[val.substring(0, 3), val.substring(3, 6),
			val.substring(6)]);
        },
        email: function (val, index) {
            if (!val) return '';
            var dispstr = val; ;
            if (this.icon && this.icon !== '') {
                dispstr = (this.icon === true || this.icon === 'true')
                    ? '<img src="images/icons/Send_Write_email_16x16.png" />'
                    : '<img src="' + this.icon + '" />';
            }
            return dojo.string.substitute('<a href="mailto:${0}">${1}</a>', [val, dispstr]);
        },
        stringFromArray: function (formatString, arr) {
            switch (arr.length) {
                case 1:
                    return String.format(formatString, arr[0]);
                case 2:
                    return String.format(formatString, arr[0], arr[1]);
                case 3:
                    return String.format(formatString, arr[0], arr[1], arr[2]);
                case 4:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3]);
                case 5:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4]);
                case 6:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]);
                case 7:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]);
                case 8:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]);
                case 9:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]);
                case 10:
                    return String.format(formatString, arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]);
                default:
                    return formatString;

            }
        },

        abbreviationFormatter: function (maxLength) {
            // summary:
            //  Return formatter function to be used to restrict length of a display
            return function (value) {
                if (!value || typeof (value) != "string" || value.length <= maxLength)
                    return value;
                value = value.substring(0, maxLength);
                var ispace = value.lastIndexOf(" ");
                if (ispace > 0 && ispace > value.length * .75) {
                    // pick the last space in the string, but only if it's at least 3/4 of it
                    value = value.substring(0, ispace);
                }
                return value + "...";
            };
        },
        Address: {
            fullAddressFormatStrings: {
                "USA": "${0}\r\n${1}\r\n${2}\r\n${3}, ${4} ${5}\r\n${6}",
                "Japan": "${0}\r\n${1}${2}\r\n${3}, ${4} ${5}\r\n${6}"
            },
            formatDefault: function (address) {
                var addr1F = '', addr2F = '', addr3F = '', cityF = '', stateF = '', postalCodeF = '', countryF = '';
                var lineBreak = '\r\n';
                for (var i = 0; i < address.length; i++) {
                    //Build up the formatted string based on presence of values.
                    switch (address[i].name) {
                        case 'addr1':
                            addr1F = (address[i].value.length > 0) ? address[i].value : '';
                            break;
                        case 'addr2':
                            addr2F = (address[i].value.length > 0) ? [lineBreak, address[i].value].join('') : '';
                            break;
                        case 'addr3':
                            addr3F = (address[i].value.length > 0) ? [lineBreak, address[i].value].join('') : '';
                            break;
                        case 'city':
                            cityF = (address[i].value.length > 0) ? [lineBreak, address[i].value, ','].join('') : '';
                            break;
                        case 'state':
                            var cityTest = (address[i - 1].value.length > 0) ? '' : lineBreak;
                            stateF = (address[i].value.length > 0) ? [cityTest, ' ', address[i].value].join('') : '';
                            break;
                        case 'postalCode':
                            postalCodeF = (address[i].value.length > 0) ? [' ', address[i].value].join('') : '';
                            break;
                        case 'country':
                            countryF = (address[i].value.length > 0) ? [lineBreak, address[i].value].join('') : '';
                            break;
                    }
                }
                return [addr1F, addr2F, addr3F, cityF, stateF, postalCodeF, countryF].join('');
            },
            formatAddress: function (address, byLocal) {
                // summary: 
                // Takes and array of address fields and formats them by local.
                // @param address: Array of addres fields.
                // @param byLocal: Determines whether the country code should determine the formatting.
                var addr1 = '', addr2 = '', addr3 = '', city = '', state = '', postalCode = '', country = '';
                var formattedAddress = '';
                for (var i = 0; i < address.length; i++) {
                    switch (address[i].name) {
                        case 'addr1': addr1 = address[i].value; break;
                        case 'addr2': addr2 = address[i].value; break;
                        case 'addr3': addr3 = address[i].value; break;
                        case 'city': city = address[i].value; break;
                        case 'state': state = address[i].value; break;
                        case 'postalCode': postalCode = address[i].value; break;
                        case 'country': country = address[i].value; break;
                    }
                }

                if (byLocal) {
                    switch (country) {
                        case 'USA':
                            formattedAddress = this.formatDefault(address);
                            break;
                        case 'Japan':
                            formattedAddress = dojo.string.substitute(this.fullAddressFormatStrings['Japan'],
                            [addr1, addr2, addr3, city, state, postalCode, country]);
                            break;
                        default:
                            formattedAddress = this.formatDefault(address);
                    }
                }
                else {
                    formattedAddress = this.formatDefault(address);
                }
                return formattedAddress;
            }
        }
    };
    return Sage.Format;
});
},
'Sage/Workspaces/main':function(){
define("Sage/Workspaces/main", [
    "Sage/Workspaces/Dialog"
    ], function() {
	// module:
	    // Sage/Workspaces/main
	// summary:
        // The Sage/Workspaces/main module provides loading of all Sage/Workspaces modules.
});
},
'Sage/MailMerge/nls/Loader':function(){
﻿define("Sage/MailMerge/nls/Loader", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            decodeFailed: "The call to DecodeMailMergeJsonFromUrl() failed."
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'url:Sage/UI/Controls/templates/SingleSelectPickList.html':"<div>\r\n    <select id=\"${id}-Combo\" data-dojo-type=\"Sage.UI.ComboBox\" shouldPublishMarkDirty=\"false\" required=\"${required}\" dojoAttachPoint=\"comboBox\" dojoAttachEvent=\"onBlur: _onBlur,onChange:_onChange\">\r\n    </select>\r\n</div>\r\n",
'Sage/QuickForms/Design/Editors/PickListBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/PickListBasicPropertyEditor", [
    'dojo/string',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dojox/layout/TableContainer',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'dijit/form/CheckBox',
    'dijit/form/ComboBox',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'Sage/Services/_ServiceMixin',
    'dojo/i18n!./nls/PickListBasicPropertyEditor'
], function(
    string,
    declare,
    lang,
    ContentPane,
    TableContainer,
    TextBox,
    NumberTextBox,
    Select,
    Checkbox,
    ComboBox,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    _ServiceMixin,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.PickListBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated, _ServiceMixin], {
        serviceMap: {
            'dataService': { type: 'sdata', name: 'system' }
        },
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.captionTooltipText %}">',
                        '<label>{%= $.captionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_caption" data-dojo-attach-event="onChange:_onCaptionChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.captionAlignmentTooltipText %}">',
                        '<label>{%= $.captionAlignmentText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_captionAlignment" data-dojo-attach-event="onChange:_onCaptionAlignmentChange">',
                            '{% for (var alignment in $.alignmentText) { %}',
                                '<span value="{%= alignment %}">{%= $.alignmentText[alignment] %}</span>',
                            '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.toolTipTooltipText %}">',
                        '<label>{%= $.toolTipText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_toolTip" data-dojo-attach-event="onChange:_onToolTipChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.isReadOnlyTooltipText %}">',
                        '<label>{%= $.isReadOnlyText %}</label>',
                        '<div data-dojo-type="dijit.form.CheckBox" data-dojo-attach-point="_isReadOnly" data-dojo-attach-event="onChange:_onIsReadOnlyChange"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>'
        ]),

        _caption: null,
        _captionAlignment: null,
        _isReadOnly: null,
        _toolTip: null,


        //Localization
        titleText: 'Basic',
        appearanceText: 'Appearance',
        behaviorText: 'Behavior',

        captionText: 'Caption:',
        captionTooltipText: 'The label to display on the form for this control.',
        captionAlignmentText: 'Caption Alignment:',
        captionAlignmentTooltipText: 'Justification of the label text.',
        isReadOnlyText: 'Read Only:',
        isReadOnlyTooltipText: 'Does not allow edits.',
        toolTipText: 'Tooltip:',
        toolTipTooltipText: 'Short help text about control.',
        alignmentText: {
            'left': 'Left',
            'center': 'Center',
            'right': 'Right'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function() {
            this.inherited(arguments);


            this._caption.set('value', this._designer.get('caption'));
            this._captionAlignment.set('value', this._designer.get('captionAlignment'));
            this._isReadOnly.set('value', this._designer.get('isReadOnly'));
            this._toolTip.set('value', this._designer.get('toolTip'));
        },

        _onCaptionChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('caption', value);
        },
        _onCaptionAlignmentChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('captionAlignment', value);
        },
        _onIsReadOnlyChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('isReadOnly', value);
        },
        _onToolTipChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('toolTip', value);
        }
    });
});
},
'url:Sage/templates/ImageButton.html':"<span id=\"${id}\" class=\"dijit dijitReset dijitInline\" role=\"presentation\">\r\n<span class=\"dijitReset dijitInline dijitButtonNode imageButtonNode\" data-dojo-attach-event=\"ondijitclick:_onClick\" role=\"presentation\">\r\n        <span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdata-dojo-attach-point=\"titleNode,focusNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\">\r\n                <img alt=\"\" src=\"\" data-dojo-attach-point=\"iconNode\"/>\r\n                <div class=\"dijitIcon dijitMenuItemIcon Global_Images icon16x16 ${imageClass}\" data-dojo-attach-point=\"iconNodeSprite\"></div>\r\n            </span\r\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t\tdata-dojo-attach-point=\"containerNode\"\r\n\t\t\t></span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\"\r\n\t\ttabIndex=\"-1\" role=\"presentation\" data-dojo-attach-point=\"valueNode\"\r/></span>\r\r\n",
'Sage/UI/SDataMainViewConfigurationProvider':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SDataMainViewConfigurationProvider", [
       'Sage/UI/ListPanel',
       'Sage/_ConfigurationProvider',
       'Sage/UI/TitleContentPane',
       'Sage/UI/DetailPanel',
       'Sage/UI/_DetailPanelConfigurationProvider',
       'dojo/_base/declare'
],
function (listPanel, _configurationProvider, titleContentPane, detailPanel, _detailPanelConfigurationProvider, declare) {
    var widget = declare('Sage.UI.SDataMainViewConfigurationProvider', [
            _configurationProvider,
            Sage.UI._TitlePaneConfigProvider,
            _detailPanelConfigurationProvider], 
        {
        // summary:
        //      Base class for classes that will act as a configuration provider to provide configurations for the list view, 
        //      detail view and the title pane.  This class mixes in Sage.UI._ListPanelConfigurationProvider,
        //      Sage.UI._TitlePaneConfigProvider and Sage.UI._DetailPanelConfigurationProvider.
            
        // entityType: string
        //      The name of the type of entity displayed in this "MainView".
        entityType: '',
        // service: object
        //      The SData Service used for SData data access
        service: null,
            
        // listPanelConfiguration: object
        //      The configuration object for the Sage.UI.ListPanel.  Do not access this property directly, use requestConfiguration() 
        //      and provide a callback instead.
        //      Example configuration object: { list: false, detail: false, summary: false, toolBar: false }
        listPanelConfiguration: false,

        constructor: function(definition) {
            this.listPanelConfiguration = this.listPanelConfiguration || {
                list: { },
                detail: false,
                summary: false
            };
            this.titlePaneConfiguration = this.titlePaneConfiguration || {
                tabs: false,
                menu: false,
                titleFmtString: '${0}'
            };            
            var eCtx = Sage.Services.getService('ClientEntityContext');
            if (eCtx) {
                eCtx.setContext({ EntityType : this.entityType });
            }
            var grpContextService = Sage.Services.getService('ClientGroupContext');
            if (grpContextService) {
                dojo.connect(grpContextService, 'onCurrentGroupChanged', this, 'handleProfileChanged');
            }
            if (Sage.Services.hasService('MainViewConfigurationProvider')) {
                Sage.Services.removeService('MainViewConfigurationProvider');
            }
        },
        handleProfileChanged: function(opt) {
            // summary:
            //      callback method for the onCurrentGroupChanged event of the ClientGroupContext service.  This fires
            //      the onConfigurationChange that the ListPanel listens for in order to refresh the list.
            this.onConfigurationChange(opt);
        },
        requestConfiguration: function(options) {
            // summary:
            //      returns the list panel configuration through the success callback method.  Override this method 
            //      to provide further logic in creating the list panel configuration before calling the success method.
            // options: object
            //      An object containing callback methods: 'success' and 'failure'.  The configuration object will be passed 
            //      as an argument to the success method.
            if (options.success && this.listPanelConfiguration) {
                options.success.call(options.scope || this, this.listPanelConfiguration, this);
            }
        }
    });

    return widget;
});


},
'Sage/UI/Controls/nls/DateTimePicker':function(){
define("Sage/UI/Controls/nls/DateTimePicker", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            okText: 'OK',
            cancelText: 'Cancel',
            convertDescription: 'Compare to another time zone.',
            convertText: 'Compare',
            calculatorText: 'Time Zone Calculator',
            timeZoneSourceText: 'Current Time Zone',
            timeZoneDestText: 'Comparison Time Zone',
            buttonToolTip: 'Calendar',
            timeStartText: 'Time',
            timeZoneCalculatorText: 'Time Zone Calculator'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/UI/GroupMenuFmtScope':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/GroupMenuFmtScope", [
    'dijit/form/CheckBox',
    'dojo/_base/declare'
],
function (
    Checkbox,
    declare
    ) {
    var scope = declare('Sage.UI.GroupMenuFmtScope', null, {
        store : null,
        currentGroupId : '',
        constructor: function(args) {
            this.store = args.store;
            this.currentGroupId = '';
            var ctxService = Sage.Services.getService('ClientGroupContext');
            if (ctxService) {
                dojo.connect(ctxService, 'onCurrentGroupChanged', this, "onCurrentGroupChanged");
            }
        },
        fmtSelectedCol: function(value, idx) {
            if (this.currentGroupId === '') {
                var clGrpContextSvc = Sage.Services.getService("ClientGroupContext");
                if (clGrpContextSvc) {
                    var clGrpContext = clGrpContextSvc.getContext();
                    this.currentGroupId = (clGrpContext.CurrentGroupID === 'LOOKUPRESULTS') ? 'p6UJ9A00024G' : clGrpContext.CurrentGroupID;
                }
            }
            //return '<span class="dijitCheckedMenuItemIconChar">&#10003;</span>';
            //'<div style="width:20px;text-align:center"><img src="images/greendot.gif" alt="Selected" /></div>' : 
            return (value === this.currentGroupId)  
                ? ['<span id="', value, '" >&#10003;</span>'].join('') 
                : ['<span id="', value, '" >&nbsp;</span>'].join('');
        },
        fmtHideCol: function(value, idx, cell) {
            var grid = cell.grid,
                item = grid.getItem(idx),
                checkBox = new Checkbox();

            checkBox.set('checked', !value);
            checkBox.on('click', function() {
                var checked = checkBox.get('checked');
                if (checked) {
                    Sage.Groups.GroupManager.UnHideGroup(item['$key'], true);
                } else {
                    Sage.Groups.GroupManager.HideGroup(item['$key'], true);
                }
            });

            return checkBox; 
        },
        onCurrentGroupChanged: function() {
            this.currentGroupId = '';
            var groupContextSvc = Sage.Services.getService('ClientGroupContext');
            var context = groupContextSvc.getContext();
            //dijit.byId('grpMenuWithXGroup').set('label', dojo.string.substitute('For ${0} Group', [context.CurrentName])));
            if (dijit.byId('GroupTabs').selectedChildWidget.id !== context.CurrentGroupID) {
                dijit.byId('GroupTabs').selectChild(context.CurrentGroupID);
            }

        }
    });
    
    return scope;
});
},
'Sage/UI/AttachmentList':function(){
﻿/*globals Sage, dojo, define, window  */
define("Sage/UI/AttachmentList", [
    'dijit/_Widget',
    'Sage/UI/EditableGrid',
    'Sage/Data/SDataServiceRegistry',
    'dojo/string',
    'Sage/UI/Columns/DateTime',
    'Sage/UI/Columns/SlxLink',
    'Sage/Utility',
    'Sage/Utility/File',
    'Sage/Utility/File/Attachment',
    'Sage/UI/Dialogs',
    'Sage/Utility/File/AttachmentPropertiesEditForm',
    'Sage/Utility/File/FallbackFilePicker',
    'Sage/Utility/File/AddURLAttachment',
    'Sage/Utility/File/GoogleDocPicker',
    'Sage/UI/SLXPreviewGrid',
    'Sage/UI/SLXPreviewGrid/Filter/DateRange',
    'Sage/UI/SLXPreviewGrid/Filter/Text',
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/i18n!./nls/AttachmentList'
],
function (_Widget,
    EditableGrid,
    SDataServiceRegistry,
    dString,
    colDateTime,
    colLink,
    utility,
    fileUtility,
    attachmentUtility,
    Dialogs,
    attachmentForm,
    FallbackFilePicker,
    AddURLAttachment,
    GoogleDocPicker,
    SlxPreviewGrid,
    dateRangeFilter,
    textFilter,
    declare,
    lang,
    attachmentListStrings) {
    var attachmentList = declare('Sage.UI.AttachmentList', [_Widget], {
        placeHolder: '',
        conditionFmt: '',
        parentRelationshipName: '',
        workspace: '',
        tabId: '',
        fileInputBtn: false,
        _attachmentEditor: false,
        _newAttachmentsCache: [],
        subscriptions: [],
        constructor: function () {
            lang.mixin(this, attachmentListStrings);
            this.subscriptions = [];
        },
        startup: function (callBack) {
            this._checkDbType(callBack);
        },
        _checkDbType: function (callBack) {
            var svc = Sage.Services.getService('SystemOptions');
            svc.get('DbType',
                function (val) {
                    this._buildGrid(val === "2" || val === "3");
                    if (typeof callBack == 'function') {
                        callBack(this);
                    }
                },
                function () {
                    this._buildGrid(false);
                    if (typeof callBack == 'function') {
                        callBack(this);
                    }
                },
                this
            );
        },
        _buildGrid: function (isRemote) {
            var columns = [
                {
                    // key field, added for automation
                    field: '$key',
                    editable: false,
                    hidden: true,
                    id: 'id',
                    formatter: function (value, rowIdx, cel) {
                        var insertId = [cel.grid.id, '-row', rowIdx].join('');
                        var id = (utility.getModeId() === 'insert') ? insertId : value;
                        var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                        return anchor;
                    }
                },
                {
                    field: 'description',
                    name: attachmentListStrings.attachmentText,
                    format: function (rowIdx, rowItem) {
                        if (!rowItem) {
                            return this.defaultValue;
                        }

                        //console.warn('ToDo: include role security to Attachment description column rendering (or whatever other security) that was applied before.   <---<<<   <---<<<');
                        if (rowItem['url']) {
                            var href = rowItem['url'] || '';
                            href = (href.indexOf('http') < 0) ? 'http://' + href : href;
                            return dString.substitute('<a href="${0}" target="_blank" title="${1}">${2}</a>', [href, rowItem['url'], rowItem['$descriptor']]);
                        } else {
                            if (rowItem['fileExists']) {
                                return dString.substitute('<a href="javascript: Sage.Utility.File.Attachment.getAttachment(\'${0}\');" title="${1}">${1}</a>',
                                    [rowItem['$key'], rowItem['$descriptor']]);
                            } else {
                                return rowItem['$descriptor'];
                            }
                        }
                    },
                    filterConfig: { widgetType: textFilter },
                    width: '300px'
                },
                {
                    field: 'user',
                    name: attachmentListStrings.userText,
                    format: function (rowIdx, rowItem) {
                        if (!rowItem) { return ''; }
                        var user = (rowItem.hasOwnProperty('user') && typeof rowItem['user'] === 'object') ? rowItem.user : null;
                        if (!user) {
                            return '';
                        }
                        return user['$descriptor'];
                    },
                    width: '120px'
                },
                {
                    field: 'attachDate',
                    name: attachmentListStrings.modDateText,
                    filterConfig: {
                        widgetType: dateRangeFilter,
                        label: attachmentListStrings.dateRangeText
                    },
                    type: colDateTime,
                    width: '175px'
                }, {
                    field: 'fileSize',
                    name: attachmentListStrings.sizeText,
                    formatter: function (v) {
                        return fileUtility.formatFileSize(v);
                    },
                    width: '120px'
                }, {
                    field: 'fileName',
                    name: attachmentListStrings.extensionText,
                    formatter: function (s, rowIdx, cell) {
                        if (!s) {
                            return '.';
                        }
                        return s.substr(s.lastIndexOf('.'));
                    },
                    sortable: false,
                    width: '120px'
                }
            ];
            var tools = [
                {
                    id: this.id + '_btnBrowse',
                    imageClass: 'icon_plus_16x16',
                    handler: this.browseForFiles,
                    title: attachmentListStrings.addFileText,
                    alternateText: attachmentListStrings.addFileText,
                    appliedSecurity: '',
                    scope: this
                }, {
                    //       id: this.id + '_btnAddGoogle',
                    //      imageClass: 'icon_google_16x16',
                    //      handler: this.addGoogle,
                    //      title: attachmentListStrings.addGoogleText,
                    //      appliedSecurity: '',
                    //      scope: this
                    //  }, {
                    id: this.id + '_btnAddUrl',
                    imageClass: 'icon_Internet_Service_Add_16x16',
                    handler: this.addUrlAttachment,
                    title: attachmentListStrings.addUrlText,
                    appliedSecurity: '',
                    alternateText: attachmentListStrings.addUrlText,
                    scope: this
                }, {
                    id: this.id + '_btnEditAttachProps',
                    imageClass: 'icon_Edit_Item_16x16',
                    handler: this.editSelectedAttachment,
                    title: attachmentListStrings.editText,
                    appliedSecurity: '',
                    alternateText: attachmentListStrings.editText,
                    scope: this
                }, {
                    id: this.id + '_btnDeleteAttachment',
                    imageClass: 'icon_Delete_16x16',
                    title: attachmentListStrings.deleteText,
                    handler: this.deleteSelectedAttachment,
                    appliedSecurity: '',
                    alternateText: attachmentListStrings.deleteText,
                    scope: this
                }, {
                    id: this.id + '_btnHelp',
                    imageClass: 'icon_Help_16x16',
                    handler: function () {
                        utility.openHelp('attachmentstab');
                    },
                    title: attachmentListStrings.helpText,
                    alternateText: attachmentListStrings.helpText,
                    appliedSecurity: ''
                }
            ];

            if (isRemote) {
                var remoteColumn = {
                    field: 'remoteStatus',
                    name: '&nbsp;',
                    width: '300px',
                    format: function (rowIdx, rowItem) {
                        if (!rowItem) {
                            return this.defaultValue;
                        }

                        var status = (rowItem['remoteStatus']) ? rowItem['remoteStatus'] : (rowItem['fileExists']) ? 'Delivered' : 'Available';
                        if (!rowItem['dataType']) {
                            status = 'X'; // URL attachments - do not put a link to download these, they fail anyway.
                        }

                        // Available | Requested | Delivered
                        var link = dString.substitute('<a href="javascript:Sage.Utility.File.Attachment.remoteRequestAttachment(\'${0}\')">${1}</a>',
                            [rowItem['$key'], attachmentListStrings.request]);
                        switch (status) {
                            case 'Available':
                                return attachmentListStrings.available + ' - ' + link;
                            case 'Requested':
                                return attachmentListStrings.requested; // +' - ' + link;
                            case 'Delivered':
                                return attachmentListStrings.delivered + ' - ' + link;
                            default:
                                return ' ';
                        }
                    }
                };
                columns.splice(2, 0, remoteColumn);
            }

            var parentRelationshipName = this.parentRelationshipName;
            var entityId = utility.getCurrentEntityId()
            if (parentRelationshipName === 'activityId') {
                entityId = entityId.substr(0, 12); // for reoccuring activity Ids;
            }
            var options = {
                readOnly: true,
                columns: columns,
                tools: tools,
                storeOptions: {
                    service: SDataServiceRegistry.getSDataService('system'),
                    resourceKind: 'attachments',
                    include: ['$descriptors'],
                    select: ['description', 'user', 'attachDate', 'fileSize', 'fileName', 'url', 'fileExists', 'remoteStatus', 'dataType'],
                    sort: [{ attribute: 'attachDate'}]
                },
                slxContext: { 'workspace': this.workspace, tabId: this.tabId },
                contextualCondition: function () {



                    return (parentRelationshipName || '\'A\'') + ' eq \'' + entityId + '\'';
                },
                id: this.id + '_attachments',
                rowsPerPage: 20
            };
            var curId = utility.getCurrentEntityId();
            if (!curId) {
                options.storeOptions['isInsertMode'] = true;
            }
            //fire this so that customizations can change these options without overriding the whole thing
            this.onBeforeCreateGrid(options);

            var grid = new SlxPreviewGrid.Grid(options, this.placeHolder);
            grid.setSortColumn('attachDate');
            this._grid = grid._grid;
            this._previewGrid = grid;

            grid.startup();
            // This is not a typo.  The dijit.layout.ContentPane is not affectively determining all of it's layout information
            // on the first pass through resize.  Calling resize twice effectively renders the grid to fill it's container.
            if (this.workspace) {
                var localTC = dijit.byId('tabContent');
                localTC.resize(); localTC.resize();
            }
            //            });

            var self = this;
            //<input type="file" id="fileElem" multiple="true" accept="image/*" style="display:none" onchange="handleFiles(this.files)">  
            this.fileInputBtn = dojo.doc.createElement('INPUT');
            dojo.attr(this.fileInputBtn, {
                'type': 'file',
                'multiple': 'true',
                'accept': '*/*',
                'class': 'display-none',
                onchange: function (e) {
                    self.handleFiles(e);
                }
            });
            dojo.place(this.fileInputBtn, this.domNode, 'last');

            this.subscriptions.push(dojo.subscribe('/entity/attachment/create', this, this.onNewAttachmentEntity));
            this.subscriptions.push(dojo.subscribe('/entity/attachment/update', this, this.onAttachmentUpdated));
            if (isRemote) {
                this.subscriptions.push(dojo.subscribe('/entity/attachment/requested', this, this.onAttachmentUpdated));
            }

            dojo.connect(grid, 'destroy', this, this.destroy);
            var contextservice = Sage.Services.getService('ClientEntityContext');
            var ctx = contextservice.getContext();
            this.contextEntityType = ctx.EntityType;
        },
        refresh: function () {
            if (this._grid) {
                var gridmode = this._grid.get('mode');
                var curId = utility.getCurrentEntityId();
                if ((!curId && gridmode !== 'insert') ||
                   (curId && gridmode === 'insert')) {
                    this._grid.set('mode', (!curId) ? 'insert' : '');
                }
                this._previewGrid.refresh();
            }
        },
        resetEntityContext: function () {
            var parentRelationshipName = this.parentRelationshipName;
            var entityId = utility.getCurrentEntityId();
            if (parentRelationshipName === 'activityId') {
                entityId = entityId.substr(0, 12); // for reoccuring activity Ids;
            }
            var contextualCondition = function () {
                return (parentRelationshipName || '\'A\'') + ' eq \'' + entityId + '\'';
            };
            this._previewGrid.resetContextualCondition(contextualCondition);
            this.refresh();
        },
        destroy: function () {
            var len = this.subscriptions.length;
            for (var i = 0; i < len; i++) {
                dojo.unsubscribe(this.subscriptions.pop());
            }
        },
        handleFiles: function (e) {
            var files = this.fileInputBtn.files;
            this._createAttachments(files);
        },
        handleGearsDesktopFileSelect: function (files) {
            if (files.length > 0) {
                attachmentUtility.createAttachments(files);
            }
        },
        _createAttachments: function (files) {
            if (files.length > 0) {
                attachmentUtility.createAttachments(files);
            }
        },
        onNewAttachmentEntity: function (attachment) {
            var contextservice = Sage.Services.getService('ClientEntityContext');
            var ctx = contextservice.getContext();
            if (this.contextEntityType !== ctx.EntityType) {
                return;
            }
            if (this._grid.mode === 'insert') {
                if (!attachment) {
                    this._getFallBackPickerAttachment();
                    return;
                } else {
                    this._newAttachmentsCache.push(attachment);
                    this._grid.store.addToCache(this, attachment, 1);
                }
            }
            this._previewGrid.refresh();
        },
        _getFallBackPickerAttachment: function () {
            var editor = dijit.byId('activityEditor');
            var idField = 'activityId';
            if (!editor || !editor._tempIdForAttachments) {
                editor = dijit.byId('historyEditor') || {};
                idField = 'historyId';
            }
            var tempid = editor._tempIdForAttachments;
            if (tempid) {
                var req = new Sage.SData.Client.SDataResourceCollectionRequest(SDataServiceRegistry.getSDataService('system'))
                    .setResourceKind('attachments')
                    .setQueryArg('select', ['description', 'userId', 'attachDate', 'fileSize', 'fileName', 'url', 'fileExists'].join(','))
                    .setQueryArg('where', idField + ' eq \'' + tempid + '\'')
                    .setStartIndex(1)
                    .setCount(50);
                req.read({
                    success: this._receivedFallBackPickerAttachments,
                    failure: function () {
                    },
                    scope: this
                });

            }
        },
        _receivedFallBackPickerAttachments: function (data) {
            var attachments = data.$resources;
            this.clearNewAttachments();
            for (var i = 0; i < attachments.length; i++) {
                var att = attachments[i];
                this._newAttachmentsCache.push(att);
                this._grid.store.addToCache(this, att, i);
            }
            this._previewGrid.refresh();
        },
        onAttachmentUpdated: function (attachment) {

            var contextservice = Sage.Services.getService('ClientEntityContext');
            var ctx = contextservice.getContext();
            if (this.contextEntityType !== ctx.EntityType) {
                return;
            }
            if (this._grid.mode === 'insert') {
                var newAtts = this._newAttachmentsCache;
                for (var i = 0; i < newAtts.length; i++) {
                    if (newAtts[i].$key === attachment.$key) {
                        lang.mixin(newAtts[i], attachment);
                    }
                }
            }
            this._previewGrid.refresh();
        },
        getNewAttachments: function () {
            return this._newAttachmentsCache;
        },
        clearNewAttachments: function () {
            this._newAttachmentsCache = [];
            this._grid.store.clearCache();
        },
        _editAttachmentInfo: function (attachId) {
            // use query parameter of _includeFile=false to get only the attachment entity for editing

            if (!this._attachmentEditor) {
                this._attachmentEditor = new attachmentForm();
            }
            this._attachmentEditor.set('attachmentId', attachId);
            this._attachmentEditor.show();

        },
        browseForFiles: function (e) {
            if (Sage.gears) {
                var desktop = Sage.gears.factory.create('beta.desktop');
                desktop.openFiles(this.handleGearsDesktopFileSelect);
            } else if (fileUtility.supportsHTML5File) {
                this.fileInputBtn.click();
            } else {
                var fbfp = dijit.byId('fallbackFilePicker');
                if (!fbfp) {
                    fbfp = new FallbackFilePicker({ id: 'fallbackFilePicker' });
                }
                fbfp.show();
            }
        },
        addUrlAttachment: function (e) {
            var ed = dijit.byId('urlAttachmentEditor');
            if (!ed) {
                ed = new AddURLAttachment({ id: 'urlAttachmentEditor' });
            }
            ed.set('attachmentId', '');
            ed.show();
        },
        editSelectedAttachment: function () {
            var selectedItems = this._grid.selection.getSelected();
            if (selectedItems.length < 1) {
                return;
            }
            var item = selectedItems[0];  // what do we do if more than one is selected - edit only the first?
            this._editAttachmentInfo(item['$key']);
        },
        deleteSelectedAttachment: function () {
            this._grid.deleteSelected(function () {
                dojo.publish('/entity/attachment/delete');
            });
        },
        addGoogle: function () {
            var gPicker = dijit.byId('googleDocumentPicker');
            if (!gPicker) {
                gPicker = new GoogleDocPicker({ id: 'googleDocumentPicker' });
                dojo.connect(gPicker, 'onDocumentSelected', this, '_handleGoogleDocPicked');
            }
            gPicker.pick();
        },
        _handleGoogleDocPicked: function (title, url) {
            var request = new Sage.SData.Client.SDataTemplateResourceRequest(SDataServiceRegistry.getSDataService('system'));
            request.setResourceKind('attachments');
            request.read({
                success: function (attachment) {
                    attachment.description = dojo.isArray(title) ? title[0] : title;
                    attachment.url = dojo.isArray(url) ? url[0] : url;
                    this._addRelationshipsToGoogleDocAttachment(attachment);
                },
                failure: function (err) {
                    console.warn('an exception occurred getting attachment template ' + err);
                },
                scope: this
            });
        },
        _addRelationshipsToGoogleDocAttachment: function (attachment) {
            attachmentUtility.getKnownRelationships(function (rels) {
                var newAttach = lang.mixin(attachment, rels);
                newAttach.user = { '$key': utility.getClientContextByKey('userID') || '' };
                newAttach.attachDate = utility.Convert.toIsoStringFromDate(new Date());
                var request = new Sage.SData.Client.SDataSingleResourceRequest(SDataServiceRegistry.getSDataService('system'))
                    .setResourceKind('attachments');
                request.create(newAttach, {
                    success: function (att) {
                        dojo.publish('/entity/attachment/create', att);
                    },
                    failure: function (err) {
                        console.warn('an exception occurred saving google document attachment ' + err);
                    },
                    scope: this
                });
            }, this);
        },
        onBeforeCreateGrid: function (options) { },
        setToReadOnly: function (readOnly) {

            var disableList = [this.id + '_btnBrowse',
                             this.id + '_btnAddUrl',
                             this.id + '_btnEditAttachProps',
                             this.id + '_btnDeleteAttachment'
                             ];
            this._bulkSetProperty(this, disableList, 'disabled', readOnly);

        },
        _bulkSetProperty: function (ui, propsList, prop, val) {
            for (var i = 0; i < propsList.length; i++) {
                var ctrl = dijit.byId(propsList[i]);
                if (ctrl) {
                    ctrl.set(prop, val);
                }
            }
        }

    });

    return attachmentList;
});
},
'Sage/MainView/SecurityMgr/SecurityManagerGroupContext':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/SecurityMgr/SecurityManagerGroupContext", [
    'Sage/Groups/GroupContextService',
    'dojo/_base/declare'
],
function (groupContextService, declare) {
    var grpContext = declare('Sage.MainView.SecurityMgr.SecurityManagerGroupContext', groupContextService, {
        _currentContext: {},
        constructor: function () {
            dojo.mixin(this._currentContext, this._emptyContext);
        },
        getContext: function () {
            if (this._currentContext.CurrentGroupID === null) {
                this.requestContext();
            }
            return this._currentContext;
        },
        requestContext: function () {
            if (this._isRetrievingContext === true) {
                return;
            }
            this.setContext('PROF00000001', 'Read/Write Default');
            //            var userOptionsService = Sage.Services.getService('UserOptions');
            //            if (!userOptionsService) {
            //                
            //            }
            //ToDo:  call the useroptionsService to get the user option for this...
        },
        setContext: function (id, name) {
            this._currentContext.CurrentGroupID = id;
            this._currentContext.CurrentName = name;
            this._isRetrievingContext = false;
        },
        setCurrentGroup: function (id, name) {
            //ToDo:  call useroptions service to set the user option for this...
            this.setContext(id, name);
            this.onCurrentGroupChanged({ current: this._currentContext });
        }
    });
    return grpContext;
});
},
'Sage/UI/Alarms/nls/AlarmPopup':function(){
﻿define("Sage/UI/Alarms/nls/AlarmPopup", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            title: 'Alerts',
            alarmsText: 'Alarms',
            unconfirmedText: 'Unconfirmed',
            deleteText: 'Delete Selected',
            helpText: 'Help',
            completeText: 'Complete selected activities'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/QuickForms/Design/CurrencyControlDesigner':function(){
define("Sage/QuickForms/Design/CurrencyControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/CurrencyBasicPropertyEditor',
    './Editors/CurrencyAdvancedPropertyEditor',
    'dojo/i18n!./nls/CurrencyControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    CurrencyBasicPropertyEditor,
    CurrencyAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.CurrencyControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            CurrencyBasicPropertyEditor,
            CurrencyAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-currency',
        helpTopicName: 'Currency_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXCurrency, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Currency',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'Text');
            });
        },

        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getDecimalDigitsAttr: function() {
            return lang.getObject('DecimalDigits', false, this.entry);
        },
        _setDecimalDigitsAttr: function(value) {
            lang.setObject('DecimalDigits', value, this.entry);
        },
        _getDisplayCurrencyCodeAttr: function() {
            return lang.getObject('DisplayCurrencyCode', false, this.entry);
        },
        _setDisplayCurrencyCodeAttr: function(value) {
            lang.setObject('DisplayCurrencyCode', value, this.entry);
        },
        _getDisplayModeAttr: function() {
            return lang.getObject('DisplayMode', false, this.entry);
        },
        _setDisplayModeAttr: function(value) {
            lang.setObject('DisplayMode', value, this.entry);
        },
        _getExchangeRateTypeAttr: function() {
            return lang.getObject('ExchangeRateType', false, this.entry);
        },
        _setExchangeRateTypeAttr: function(value) {
            lang.setObject('ExchangeRateType', value, this.entry);
        },
        _getMaxLengthAttr: function() {
            return lang.getObject('MaxLength', false, this.entry);
        },
        _setMaxLengthAttr: function(value) {
            lang.setObject('MaxLength', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('decimalDigits', -1);

            this.set('currentCode', null);
            this.set('displayCurrencyCode', true);
            this.set('displayMode', 'AsControl');
            this.set('exchangeRateType', 'BaseRate');
            this.set('maxLength', propertyContext['data'].length || '');
            this.set('required', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'Text',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/MainView/ActivityMgr/OccurrenceOrSeriesQueryDlg':function(){
﻿/*globals define, dojo, Simplate */
define("Sage/MainView/ActivityMgr/OccurrenceOrSeriesQueryDlg", [
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/string',
    'dijit/Dialog',
    'Sage/UI/_DialogLoadingMixin',
    'dojo/_base/lang',
    'Sage/Data/SingleEntrySDataStore',
    'Sage/Data/SDataServiceRegistry',
    'Sage/MainView/BindingsManager',
    'Sage/Utility',
    'Sage/Utility/Activity',
    'Sage/UI/Dialogs',
    'dijit/form/RadioButton',
    'dojo/_base/declare',
    'dojo/i18n!./nls/OccurrenceOrSeriesQueryDlg'
],
function (_Widget,
    _Templated,
    dString,
    Dialog,
    _DialogLoadingMixin,
    dojoLang,
    SingleEntrySDataStore,
    sDataServiceRegistry,
    BindingsManager,
    utility,
    activityUtil,
    sageDialogs,
    RadioButton,
    declare,
    occurenceDlgStrings) {
    var qryDlg = declare('Sage.MainView.ActivityMgr.OccurrenceOrSeriesQueryDlg', [_Widget, _Templated], {
        activityId: '',
        activityMemberId: '',
        activity: false,
        store: false,
        mode: 'edit',
        widgetsInTemplate: true,
        disableSeriesOption: '',
        widgetTemplate: new Simplate([
            '<div>',
                '<div dojoType="dijit.Dialog" title="" dojoAttachPoint="_dialog" dojoAttachEvent="onHide:_onDlgHide">',
                    '<div class="recur-activity-dialog">',
                        '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="1" labelWidth="160" >',
                            '<div dojoType="dijit.layout.ContentPane" label="{%= $.actDateText %}" dojoAttachPoint="container_actDate"></div>',
                            '<div dojoType="dijit.layout.ContentPane" label="{%= $.accountText %}" dojoAttachPoint="container_account"></div>',
                            '<div dojoType="dijit.layout.ContentPane" label="{%= $.contactText %}" dojoAttachPoint="container_contact"></div>',
                            '<div dojoType="dijit.layout.ContentPane" label="{%= $.opportunityText %}" dojoAttachPoint="container_opportunity"></div>',
                        '</div>',  //tableContainer
                        '<div class="dijitContentPane">&nbsp;</div>', //whitespace
                        '<div class="dijitContentPane">',
                            '<input type="radio" dojoType="dijit.form.RadioButton" name="editType" id="{%= $.id %}_thisOccurrence" checked="true" dojoAttachPoint="_thisOccurRadio" />&nbsp;',
                            '<label for="{%= $.id %}_thisOccurrence">{%= ($.mode === "edit") ? $.editOneText : (($.mode === "delete")? $.deleteOneText : $.completeOneText) %}</label>',
                        '</div><div class="dijitContentPane">',
                            '<input type="radio" dojoType="dijit.form.RadioButton" name="editType" id="{%= $.id %}_Series" dojoAttachPoint="_seriesRadio" {%=$.disableSeriesOption%} />&nbsp;',
                            '<label for="{%= $.id %}_Series">{%= ($.mode === "edit") ? $.editAllText : (($.mode === "delete")? $.deleteAllText : $.completeAllText) %}</label>',
                        '</div>',
                        '<div class="general-dialog-actions">', //buttons
                            '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnContinue" name="_btnContinue" dojoAttachPoint="_btnContinue" dojoAttachEvent="onClick:_continueClick" >{%= $.continueText %}</div>',
                        '</div>', //buttons
                    '</div>', //form
                '</div>', //dialog
            '</div>' //root
        ]),
        constructor: function () {
            dojoLang.mixin(this, occurenceDlgStrings);

        },
        show: function () {
           
            this._dialog.show();
            if (!this._dialog._standby) {
                dojoLang.mixin(this._dialog, new _DialogLoadingMixin());
                if (!this.activity) {
                    this._dialog.showLoading();
                }
            }
            this._thisOccurRadio.set('checked', true);
        },
        _setModeAttr: function (mode) {
            this.mode = mode;
        },
        _getModeAttr: function () {
            return this.mode;
        },
        hide: function () {
            this._dialog.hide();
        },
        _onDlgHide: function () {
            this.activity = false;
            this.activityId = '';
        },
        _setActivityIdAttr: function (activityId) {
            this.activityId = activityId;
            if (this.activityId && this.activityId !== '') {
                this._loadData();
            }
        },
        _getActivityIdAttr: function () {
            return this.activityId;
        },
        _setActivityMemebrIdAttr: function (memberId) {
            this.activityMemberId = memberId;
        },
        _getActivityMemberIdAttr: function () {
            return this.activityMemberId;
        },
        _loadData: function () {
            if (this._dialog._standby) {
                this._dialog.showLoading();
            }
            var select = ['Description', 'AccountName', 'ContactName', 'OpportunityName', 'StartDate', 'Type', 'Timeless', 'Recurring', 'RecurrenceState'];
            if (this.activityId.length > 12) {
                if (!this.store) {
                    this.store = new SingleEntrySDataStore({
                        include: [],
                        select: select, // ['Description', 'AccountName', 'ContactName', 'OpportunityName', 'StartDate', 'Type', 'Timeless', 'Recurring', 'RecurrenceState'],
                        resourceKind: 'activities',
                        service: sDataServiceRegistry.getSDataService('system')
                    });
                }
                if (this.activityId !== '') {
                    this.store.fetch({
                        predicate: '"' + this.activityId + '"',
                        onComplete: this._receiveActivity,
                        onError: this._failLoad,
                        scope: this
                    });
                }
            } else {
                var req = new Sage.SData.Client.SDataResourceCollectionRequest(sDataServiceRegistry.getSDataService('system'))
                .setResourceKind('activities')
                .setQueryArg('select', select.join(','))
                .setQueryArg('where', 'id eq \'' + this.activityId + '\'')
                .setQueryArg('orderby', 'StartDate asc')
                .setQueryArg('count', '1');
                req.read({
                    success: this._receiveActivities,
                    failure: this._failLoad,
                    scope: this
                });
            }
        },
        _receiveActivity: function (activity) {
            //debugger;
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            this.activity = activity;
            this._bind();
        },
        _receiveActivities: function (data) {
            //debugger;
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            var activities = data['$resources'];
            if (activities.length < 1) {
                this._failLoad();
            }
            this.activity = activities[0];
            this.activityId = this.activity['$key']; //reset this because the original one may not have had the occurrence half
            this._bind();
        },

        _bind: function () {
            var act = this.activity;
            var d = act.Description;
            if (d.length > 30) {
                d = d.substring(0, 26) + '...';
            }
            this._dialog.set('title', dString.substitute(this.titleFmt, { type: activityUtil.getActivityTypeName(act.Type), description: d }));

            this.container_actDate.set('content', activityUtil.formatActivityStartDate(utility.Convert.toDateFromString(act.StartDate, act.Timeless)));
            this.container_account.set('content', act.AccountName || '&nbsp;');
            this.container_contact.set('content', act.ContactName || '&nbsp;');
            this.container_opportunity.set('content', act.OpportunityName || '&nbsp;');
        },
        _failLoad: function () {
            if (this._dialog._standby) {
                this._dialog.hideLoading();
            }
            sageDialogs.showWarning(this.failedToLoadMsg);
            this._dialog.hide();
        },
        _continueClick: function (e) {
            this.hide();
            if (this._thisOccurRadio.get('checked')) {
                this.onSelectOccurrence(this.activityId, utility.Convert.toDateFromString(this.activity.StartDate), this.activityMemberId);
            } else {
                this.onSelectSeries(this.activityId, this.activityMemberId);
            }
        },
        onSelectSeries: function (id) { },
        onSelectOccurrence: function (id, startDate) { }
    });
    return qryDlg;
});
},
'Sage/QuickForms/Design/DataGridControlDesigner':function(){
define("Sage/QuickForms/Design/DataGridControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'dojo/dom-construct',
    'dojo/dom-style',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/DataGridBasicPropertyEditor',
    './Editors/DataGridAdvancedPropertyEditor',
    'dojo/i18n!./nls/DataGridControlDesigner'
], function(
    declare,
    array,
    lang,
    domConstruct,
    domStyle,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    DataGridBasicPropertyEditor,
    DataGridAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.DataGridControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            DataGridBasicPropertyEditor,
            DataGridAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
                '<table class="{%= $.fieldClass %}-table" data-dojo-attach-point="tableNode">',
                '</table>',
            '</div>'
        ]),
        tableHeaderTemplate: new Simplate([
            '<th style="width:{%= $.widthStyle %}">{%: $.ColumnHeading || $.Text %}</th>'
        ]),

        fieldClass: 'design-datagrid',
        helpTopicName: 'Data_Grid_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFDataGrid, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Data Grid',
        emptyTableRowStringText: 'No records match the selection criteria.',

        constructor: function() {
            lang.mixin(this, localization);
        },
        _getDataSourceAttr: function() {
            return lang.getObject('DataSource', false, this.entry);
        },
        _setDataSourceAttr: function(value) {
            lang.setObject('DataSource', value, this.entry);
        },
        _getPageSizeAttr: function() {
            return lang.getObject('PageSize', false, this.entry);
        },
        _setPageSizeAttr: function(value) {
            lang.setObject('PageSize', value, this.entry);
        },
        _getResizableColumnsAttr: function() {
            return lang.getObject('ResizableColumns', false, this.entry);
        },
        _setResizableColumnsAttr: function(value) {
            lang.setObject('ResizableColumns', value, this.entry);
        },
        _getColumnsAttr: function() {
            return lang.getObject('Columns', false, this.entry);
        },
        _setColumnsAttr: function(value) {
            lang.setObject('Columns', value, this.entry);
        },
        _getEmptyTableRowTextAttr: function() {
            return lang.getObject('EmptyTableRowText', false, this.entry);
        },
        _setEmptyTableRowTextAttr: function(value) {
            lang.setObject('EmptyTableRowText', value, this.entry);
        },
        _getExpandableRowsAttr: function() {
            return lang.getObject('ExpandableRows', false, this.entry);
        },
        _setExpandableRowsAttr: function(value) {
            lang.setObject('ExpandableRows', value, this.entry);
        },
        _getRenderVerticalAttr: function() {
            return lang.getObject('RenderVertical', false, this.entry);
        },
        _setRenderVerticalAttr: function(value) {
            lang.setObject('RenderVertical', value, this.entry);
        },
        _getShowSortIconAttr: function() {
            return lang.getObject('ShowSortIcon', false, this.entry);
        },
        _setShowSortIconAttr: function(value) {
            lang.setObject('ShowSortIcon', value, this.entry);
        },

        renderColumns: function(){
            var columns = this.get('columns'),
                row = domConstruct.create('tr');

            for(var i = 0; i < columns.length; i++) {
                var column = lang.clone(columns[i]);

                column.widthStyle = column.Width > 0 ? column.Width + 'em' : 'auto';

                domConstruct.place(this.tableHeaderTemplate.apply(column, this), row, 'last');
            }
            domConstruct.place(row, this.tableNode, 'only');
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('dataSource', null);
            this.set('pageSize', 20);
            this.set('resizableColumns', true);

            this.set('emptyTableRowString', this.emptyTableRowStringText);
            this.set('expandableRows', false);
            this.set('renderVertical', false);
            this.set('showSortIcon', true);
        },
        startup: function() {
            this.inherited(arguments);

            this.renderColumns();
            this.applyVisibility();
        }
    });
});
},
'Sage/QuickForms/Design/PickListControlDesigner':function(){
define("Sage/QuickForms/Design/PickListControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/PickListBasicPropertyEditor',
    './Editors/PickListAdvancedPropertyEditor',
    'dojo/i18n!./nls/PickListControlDesigner'
], function (
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    PickListBasicPropertyEditor,
    PickListAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.PickListControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            PickListBasicPropertyEditor,
            PickListAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="{%= $.fieldClass %}-icon">...</div>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-picklist',
        helpTopicName: 'Pick_List_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFSLXPickList, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'Pick List',

        constructor: function () {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function (value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function () {
            return this.findDataBinding(function (binding) {
                return (binding['ControlItemName'] == 'PickListValue');
            });
        },

        _getStorageModeAttr: function () {
            var mode = lang.getObject('StorageMode', false, this.entry);
            if (mode === "ID") {
                return "Id";
            } else {
                return mode;
            }
        },
        _setStorageModeAttr: function (value) {
            lang.setObject('StorageMode', value, this.entry);
        },
        _getRequiredAttr: function () {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function (value) {
            lang.setObject('Required', value, this.entry);
        },
        _getPickListNameAttr: function () {
            return lang.getObject('PickListName', false, this.entry);
        },
        _setPickListNameAttr: function (value) {
            lang.setObject('PickListName', value, this.entry);
        },
        _getPickListIdAttr: function () {
            return lang.getObject('PickListId', false, this.entry);
        },
        _setPickListIdAttr: function (value) {
            lang.setObject('PickListId', value, this.entry);
        },
        _getMustExistInListAttr: function () {
            return lang.getObject('MustExistInList', false, this.entry);
        },
        _setMustExistInListAttr: function (value) {
            lang.setObject('MustExistInList', value, this.entry);
        },
        _getMaxLengthAttr: function () {
            return lang.getObject('MaxLength', false, this.entry);
        },
        _setMaxLengthAttr: function (value) {
            lang.setObject('MaxLength', value, this.entry);
        },
        _getDisplayModeAttr: function () {
            return lang.getObject('DisplayMode', false, this.entry);
        },
        _setDisplayModeAttr: function (value) {
            lang.setObject('DisplayMode', value, this.entry);
        },
        _getCanEditTextAttr: function () {
            return lang.getObject('CanEditText', false, this.entry);
        },
        _setCanEditTextAttr: function (value) {
            lang.setObject('CanEditText', value, this.entry);
        },
        _getControlLabelPlacementAttr: function () {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function (value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getAllowMultiplesAttr: function () {
            return lang.getObject('AllowMultiples', false, this.entry);
        },
        _setAllowMultiplesAttr: function (value) {
            lang.setObject('AllowMultiples', value, this.entry);
        },
        setupFor: function (propertyContext) {
            this.inherited(arguments);

            this.set('allowMultiples', false);
            this.set('canEditText', true);
            this.set('displayMode', 'AsControl');
            this.set('maxLength', propertyContext['data'].length || -1);
            this.set('mustExistInList', false);
            this.set('required', false);
            this.set('storageMode', 'Id');
            this.set('pickListName', propertyContext['dataTypeData']['PickListName']);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'PickListValue',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function () {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/QuickForms/Design/Editors/FormBasicPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/FormBasicPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dijit/form/TextBox',
    'dojo/data/ItemFileWriteStore',
    'Sage/_Templated',
    './_PropertyEditor',
    'dojo/i18n!./nls/FormBasicPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    ItemFileWriteStore,
    _Templated,
    _PropertyEditor,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.FormBasicPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.generalText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.activeControlTooltipText %}">',
                        '<label>{%= $.activeControlText %}</label>',
                        '<div data-dojo-type="dijit.form.ComboBox" data-dojo-attach-point="_activeControl" data-dojo-attach-event="onChange:_onActiveControlChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.nameTooltipText %}">',
                        '<label>{%= $.nameText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_name" data-dojo-attach-event="onChange:_onNameChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.descriptionTooltipText %}">',
                        '<label>{%= $.descriptionText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_description" data-dojo-attach-event="onChange:_onDescriptionChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _activeControl: null,
        _description: null,
        _name: null,

        // Localization
        titleText: 'Basic',
        generalText: 'General',

        activeControlText: 'Active Control:',
        activeControlTooltipText: 'The control the user\'s cursor starts on.',
        descriptionText: 'Description:',
        descriptionTooltipText: 'Optional description of the purpose of the form.',
        nameText: 'Name:',
        nameTooltipText: 'Form identifier used by the system.',

        constructor: function() {
            lang.mixin(this, localization);
        },

        setup: function() {
            this.inherited(arguments);

            this.setActiveControlList();

            this._activeControl.set('value', this._designer.get('activeControl'));
            this._description.set('value', this._designer.get('description'));
            this._name.set('value', this._designer.get('name'));
        },

        setActiveControlList: function(){
            var controls = this._designer.get('controls'),
                options = new ItemFileWriteStore({
                    data: {
                        identifier: 'key',
                        label: 'name',
                        items: []
                    }
            });

            for (var i = 0; i < controls.length; i++)
            {
                var control = controls[i];
                if (control.entry && control.entry['ControlId'])
                    options.newItem({
                        key: 'control_'+i,
                        name: control.entry['ControlId']
                    });
            }

            this._activeControl.set({
                store: options,
                disabled: false
            });
        },

        _onActiveControlChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('activeControl', value);
        },
        _onNameChange: function(value){
        },
        _onDescriptionChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('description', value);
        }
    });
});
},
'Sage/QuickForms/Design/Editors/nls/OwnerBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/OwnerBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/DateTimePickerControlDesigner':function(){
define("Sage/QuickForms/Design/DateTimePickerControlDesigner", [
    'dojo/_base/declare',
    'dojo/_base/array',
    'dojo/_base/lang',
    'Sage/_Templated',
    'dijit/_Widget',
    'dijit/_Contained',
    './ControlDesigner',
    './Editors/LayoutPropertyEditor',
    './Editors/DateTimePickerBasicPropertyEditor',
    './Editors/DateTimePickerAdvancedPropertyEditor',
    'dojo/i18n!./nls/DateTimePickerControlDesigner'
], function(
    declare,
    array,
    lang,
    _Templated,
    _Widget,
    _Contained,
    ControlDesigner,
    LayoutPropertyEditor,
    DateTimePickerBasicPropertyEditor,
    DateTimePickerAdvancedPropertyEditor,
    localization
) {
    return declare('Sage.QuickForms.Design.DateTimePickerControlDesigner', [_Widget, _Contained, _Templated, ControlDesigner], {
        designSupport: {
            visible: true
        },
        editors: [
            DateTimePickerBasicPropertyEditor,
            DateTimePickerAdvancedPropertyEditor,
            LayoutPropertyEditor
        ],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div class="{%= $.fieldClass %}" data-dojo-attach-point="containerNode">',
            '<div class="{%= $.fieldClass %}-caption" data-dojo-attach-point="designCaptionNode"></div>',
            '<div class="{%= $.fieldClass %}-field">',
                '<span data-dojo-attach-point="designBindingNode"></span>',
                '<div class="{%= $.fieldClass %}-icon"></div>',
            '</div>',
            '</div>'
        ]),
        _setDesignCaptionAttr: {
            node: 'designCaptionNode', type: 'innerText'
        },
        _setDesignBindingAttr: {
            node: 'designBindingNode', type: 'innerText'
        },

        fieldClass: 'design-datetimepicker',
        helpTopicName: 'DateTime_Picker_control',
        quickFormControlType: 'Sage.SalesLogix.QuickForms.QFControls.QFDateTimePicker, Sage.SalesLogix.QuickForms.QFControls',

        //Localization
        displayNameText: 'DateTime Picker',

        constructor: function() {
            lang.mixin(this, localization);
        },

        _setCaptionAttr: function(value) {
            this.inherited(arguments);

            this.set('designCaption', value);
        },
        _getDefaultDataBindingAttr: function() {
            return this.findDataBinding(function(binding) {
                return (binding['ControlItemName'] == 'DateTimeValue');
            });
        },

        _getButtonToolTipAttr: function() {
            return lang.getObject('ButtonToolTip', false, this.entry);
        },
        _setButtonToolTipAttr: function(value) {
            lang.setObject('ButtonToolTip', value, this.entry);
        },
        _getControlLabelPlacementAttr: function() {
            return lang.getObject('ControlLabelPlacement', false, this.entry);
        },
        _setControlLabelPlacementAttr: function(value) {
            lang.setObject('ControlLabelPlacement', value, this.entry);
        },
        _getDisplayDateAttr: function() {
            return lang.getObject('DisplayDate', false, this.entry);
        },
        _setDisplayDateAttr: function(value) {
            lang.setObject('DisplayDate', value, this.entry);
        },
        _getDisplayModeAttr: function() {
            return lang.getObject('DisplayMode', false, this.entry);
        },
        _setDisplayModeAttr: function(value) {
            lang.setObject('DisplayMode', value, this.entry);
        },
        _getDisplayTimeAttr: function() {
            return lang.getObject('DisplayTime', false, this.entry);
        },
        _setDisplayTimeAttr: function(value) {
            lang.setObject('DisplayTime', value, this.entry);
        },
        _getRequiredAttr: function() {
            return lang.getObject('Required', false, this.entry);
        },
        _setRequiredAttr: function(value) {
            lang.setObject('Required', value, this.entry);
        },
        _getTimelessAttr: function() {
            return lang.getObject('Timeless', false, this.entry);
        },
        _setTimelessAttr: function(value) {
            lang.setObject('Timeless', value, this.entry);
        },

        setupFor: function(propertyContext){
            this.inherited(arguments);

            this.set('displayDate', true);
            this.set('displayTime', false);

            this.set('buttonToolTip', '');
            this.set('displayMode', 'AsControl');
            this.set('required', false);
            this.set('timeless', false);

            this.set('dataBindings', [{
                $type: 'Sage.Platform.QuickForms.Controls.QuickFormPropertyDataBindingDefinition, Sage.Platform.QuickForms',
                BindingType: 'Property',
                ControlItemName: 'DateTimeValue',
                DataItemName: propertyContext.propertyPath,
                DataSourceID: 'MainEntity',
                FormatString: '',
                NullValueString: ''
            }]);
            this.set('designBinding', propertyContext.propertyPath || '');
        },
        startup: function() {
            this.inherited(arguments);

            var binding = this.get('defaultDataBinding');

            this.set('designCaption', this.get('caption'));
            this.set('designBinding', (binding && binding['DataItemName']) || '');
            this.applyCaptionAlignment();
            this.applyVisibility();
        }
    });
});
},
'Sage/UI/Filters/FilterManager':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Filters/FilterManager", [
        'dojo/_base/lang',
        'dojo/_base/declare',
        'dojo/_base/array',
        'dojo/string',
        'dojo/date',
        'dojo/date/locale',
        'Sage/Utility',
        'Sage/Utility/Filters'
],
function (
        lang,
        declare,
        array,
        dString,
        dojoDate,
        dateLocale,
        Utility,
        FiltersUtil) {
    var widget = declare('Sage.UI.Filters.FilterManager', null, {
        _connects: null,
        _subscribes: null,
        _owner: null,
        _timeout: null,
        _applied: null,
        _definitionSet: null,
        refreshBufferDelay: 500,
        filterGroup: 'default',
        owner: null,
        nullName: 'SLX_NULL',
        emptyName: 'SLX_EMPTY',

        constructor: function (options) {
            lang.mixin(this, options);

            this._applied = {};
            this._definitionSet = {};

            var filterStore = Utility.getValue(window, 'Sage.UI.DataStore.Filters'),
                applied = null,
                definitionSet = null;

            if (filterStore && filterStore[this.filterGroup]) {
                applied = filterStore[this.filterGroup].applied;
                definitionSet = filterStore[this.filterGroup].definitionSet;

                if (applied) {
                    this._applied = applied;
                }

                if (definitionSet) {
                    this._definitionSet = definitionSet;
                }
            }

            /*
            events:
            change: filter changed
            clear: clear filters
            refresh: refresh data bound to filters
            apply: apply new state
            */
            this._connects = [];
            this._subscribes = [];
            this._subscribes.push(
                dojo.subscribe(dString.substitute("/ui/filters/${0}/change", [this.filterGroup]), this, this._onChange),
                dojo.subscribe(dString.substitute("/ui/filters/${0}/clear", [this.filterGroup]), this, this._onClear),
                dojo.subscribe(dString.substitute("/ui/filters/${0}/apply", [this.filterGroup]), this, this._onApply));
        },
        destroy: function () {
            array.forEach(this._connects, function (handle) {
                handle.remove();
            });

            array.forEach(this._subscribes, function (handle) {
                handle.remove();
            });

            this.uninitialize();
        },
        uninitialize: function () {

        },
        // todo: total hack for attribute support
        'set': function (name, value) {
            this['_' + name] = value;
        },
        'get': function (name) {
            return this['_' + name];
        },
        _onClear: function (definition, source) {
            var key = definition && definition.$key;
            if (key && this._applied[key]) {
                delete this._applied[key];
            } else {
                this._applied = {};
            }
        },
        _onApply: function (applied, definitionSet, source) {
            this._applied = applied || {};
            this._definitionSet = definitionSet || {}; // todo: pre-load the definition set
        },
        _onChange: function (definition, name, value, source) {
            if (this._timeout) {
                clearTimeout(this._timeout);
            }

            var key = definition && definition.$key,
                container = null;

            if (key) {
                this._definitionSet[key] = definition;
                this._applied[key] = this._applied[key] || {};
                container = this._applied[key];
                if ((definition.details.userLookupFilter) || (definition.details.lookupFilter)) {
                    container['value'] = value
                }else if (value !== false) {
                    container[name] = value;
                } else {
                    delete container[name];
                }
            }

            this._timeout = setTimeout(lang.hitch(this, this._onTimeout), this.refreshBufferDelay);
        },
        _onTimeout: function () {
            dojo.publish(dString.substitute("/ui/filters/${0}/refresh", [this.filterGroup]), [this._applied, this._definitionSet, this]);
        },
        _escapeString: function (expression, quote) {
            quote = quote || '"';
            return expression.replace(quote, quote + quote);
        },
        _transformValue: function (type, value, quote) {
            if (value) {
                quote = quote || '"';
                if (type === 'string' || type === 'key' || type === 'enum' || type === 'boolean') {
                    return quote + this._escapeString(value, quote) + quote;
                }

                if (type === 'date') {
                    quote = '@';
                    return quote + this._transformDate(value) + quote;
                }
            }

            return value;
        },
        _transformDate: function (value) {
            var today = new Date(Date.now()),
                parsedDate;

            if (this.specialDates.hasOwnProperty(value)) {
                return Utility.Convert.toIsoStringFromDate(this.specialDates[value](today));
            } else {
                parsedDate = dateLocale.parse(value);
                if (parsedDate) {
                    return Utility.Convert.toIsoStringFromDate(parsedDate);
                } else {
                    return value;
                }
            }
        },
        /* static object */
        specialDates: {
            // today and todaystart are the same
            ':today': function (today) {
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':todaystart': function (today) {
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':todayend': function (today) {
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            // yesterday and yesterdaystart are the same
            ':yesterday': function (today) {
                today.setDate(today.getDate() - 1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':yesterdaystart': function (today) {
                today.setDate(today.getDate() - 1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':yesterdayend': function (today) {
                today.setDate(today.getDate() - 1);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            // tomorrow and tomorrowstart are the same
            ':tomorrow': function (today) {
                today.setDate(today.getDate() + 1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':tomorrowstart': function (today) {
                today.setDate(today.getDate() + 1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':tomorrowend': function (today) {
                today.setDate(today.getDate() + 1);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':thisweekstart': function (today) {
                today.setDate(today.getDate() - today.getDay());
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':thisweekend': function (today) {
                today.setDate(today.getDate() + (6 - today.getDay()));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':thismonthstart': function (today) {
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':thismonthend': function (today) {
                today.setDate(dojoDate.getDaysInMonth(today));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':thisyearstart': function (today) {
                today.setDate(1);
                today.setMonth(0);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':thisyearend': function (today) {
                today.setDate(31);
                today.setMonth(11);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':thisquarterstart': function (today) {
                // 1 | jan (0), feb (1), march (2)
                // 2 | april (3), may (4), june (5)
                // 3 | july (6), august (7), sept (8)
                // 4 | oct (9), nov (10), dec (11)
                var month = today.getMonth(),
                    mod = month % 3;
                today.setMonth(month - mod);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':thisquarterend': function (today) {
                var month = today.getMonth(),
                    mod = 2 - (month % 3);
                today.setMonth(month + mod);
                today.setDate(dojoDate.getDaysInMonth(today));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':nextweekstart': function (today) {
                today.setDate(today.getDate() + (7 - today.getDay()));
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':nextweekend': function (today) {
                today.setDate(today.getDate() + (7 - today.getDay()) + 6);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':nextmonthstart': function (today) {
                today.setMonth(today.getMonth() + 1);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':nextmonthend': function (today) {
                today.setMonth(today.getMonth() + 1);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':nextyearstart': function (today) {
                today.setFullYear(today.getFullYear() + 1);
                today.setMonth(0);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':nextyearend': function (today) {
                today.setFullYear(today.getFullYear() + 1);
                today.setMonth(11);
                today.setDate(31);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':nextquarterstart': function (today) {
                var month = today.getMonth(),
                    mod = 2 - (month % 3);
                today.setMonth(month + mod + 1);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':nextquarterend': function (today) {
                var month = today.getMonth(),
                    mod = 2 - (month % 3);
                today.setMonth(month + mod + 3);
                today.setDate(dojoDate.getDaysInMonth(today));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':lastweekstart': function (today) {
                today.setDate(today.getDate() - today.getDay() - 7);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':lastweekend': function (today) {
                today.setDate(today.getDate() - today.getDay() - 1);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':lastmonthstart': function (today) {
                today.setMonth(today.getMonth() - 1);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':lastmonthend': function (today) {
                today.setMonth(today.getMonth() - 1);
                today.setDate(dojoDate.getDaysInMonth(today));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':lastyearstart': function (today) {
                today.setFullYear(today.getFullYear() - 1);
                today.setMonth(0);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':lastyearend': function (today) {
                today.setFullYear(today.getFullYear() - 1);
                today.setMonth(11);
                today.setDate(31);
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            },
            ':lastquarterstart': function (today) {
                var month = today.getMonth(),
                    mod = month % 3;
                today.setMonth(month - mod - 3);
                today.setDate(1);
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                return today;
            },
            ':lastquarterend': function (today) {
                var month = today.getMonth(),
                    mod = month % 3;
                today.setMonth(month - mod - 1);
                today.setDate(dojoDate.getDaysInMonth(today));
                today.setHours(23);
                today.setMinutes(59);
                today.setSeconds(59);
                return today;
            }
        },
        resolveProperty: function (propertyName, dataPath /* optional */) {
            if (this._owner && this._owner.resolveProperty) {
                return this._owner.resolveProperty(propertyName, dataPath);
            }

            return propertyName;
        },
        resolveTimelessProperty: function (propertyName) {
            if (this._owner) {
                if (this._owner._configuration) {
                    if (this._owner._configuration.getTimelessProperty) {
                        return this._owner._configuration.getTimelessProperty(propertyName);
                    }
                }
            }
            return false;
        },
        resolveDataType: function (dataTypeId) {
            return FiltersUtil.resolveDataType(dataTypeId);
        },
        createRangeFragment: function (definition, propertyName, applied, dataPath) {
            var propertyType = this.resolveDataType(definition.propertyDataTypeId),
                resolvedName = this.resolveProperty(propertyName, dataPath),
                details = definition.details.rangeFilter,
                timelessProperty = false,
                values = [],
                segments = [],
                multiSegmentOperator = 'and',
                sub = dString.substitute,
                name = null,
                range = null,
                options = null,
                transform = function (p) { return p; },
                strippedValues = [],
                characters = details.characters > 0 ? details.characters : 1;

            if (propertyType === 'string') {
                transform = function (p) {
                    return sub("substring(${0}, 1, ${1})", [p, characters]);
                };
            }

            for (name in applied) {
                if (applied.hasOwnProperty(name)) {
                    range = applied[name];
                    if (typeof range === 'undefined' || range === null) {
                        continue;
                    }
                    if (propertyType === 'date') {
                        timelessProperty = this.resolveTimelessProperty(resolvedName);
                    }
                    if (timelessProperty) {
                        var lowerTimelessDate = new Date(Date.now());
                        var upperTimelessDate = new Date(Date.now());
                        var quote = '@';
                        var s_lowerTimelessDate = '';
                        var s_upperTimelessDate = '';

                        if (range.lower === range.upper) {
                            values.push(this._transformValue(propertyType, range.lower));
                        } else {

                            if (this.specialDates.hasOwnProperty(range.lower)) {
                                lowerTimelessDate = this.specialDates[range.lower](lowerTimelessDate);
                                lowerTimelessDate.setHours(0);
                                lowerTimelessDate.setMinutes(0);
                                lowerTimelessDate.setSeconds(0);
                                s_lowerTimelessDate = quote + Utility.Convert.toIsoStringFromDateNonUTC(lowerTimelessDate) + quote;

                            }
                            if (this.specialDates.hasOwnProperty(range.upper)) {
                                upperTimelessDate = this.specialDates[range.upper](upperTimelessDate);
                                upperTimelessDate.setHours(23);
                                upperTimelessDate.setMinutes(59);
                                upperTimelessDate.setSeconds(59);
                                s_upperTimelessDate = quote + Utility.Convert.toIsoStringFromDateNonUTC(upperTimelessDate) + quote;
                            }
                            options = [
                                timelessProperty,
                                transform(resolvedName),
                                this._transformValue(propertyType, range.lower),
                                this._transformValue(propertyType, range.upper),
                                s_lowerTimelessDate,
                                s_upperTimelessDate
                            ];

                            if (range.lower === null) {
                                segments.push(sub('((${0} eq false and ${1} le ${3}) or (${0} eq true and ${1} le ${4}))', options));                                
                            } else if (range.upper === null) {
                                segments.push(sub('((${0} eq false and ${1} ge ${2}) or (${0} eq true and ${1} le ${5}))', options));                                
                            } else {
                                segments.push(sub('((${0} eq false and ${1} between ${2} and ${3}) or (${0} eq true and ${1} between ${4} and ${5}))', options));                               
                            }
                            multiSegmentOperator = 'or';
                        }
                    } else {
                        if (range.lower === range.upper) {
                            if (range.lower !== null && typeof range.lower !== 'undefined') {
                                values.push(this._transformValue(propertyType, range.lower));
                            }
                        } else {
                            options = [
                            transform(resolvedName),
                            this._transformValue(propertyType, range.lower),
                            this._transformValue(propertyType, range.upper)
                        ];

                            if (range.lower === null) {
                                segments.push(sub('${0} le ${2}', options));
                            } else if (range.upper === null) {
                                segments.push(sub('${0} ge ${1}', options));
                            } else {
                                segments.push(sub('${0} between ${1} and ${2}', options));
                            }

                            multiSegmentOperator = 'or';
                        }
                    }
                }
            }

            if (values.length > 0) {
                if (propertyType === 'string') {
                    array.forEach(values, function (value) {
                        if (value && value.length > 2) {
                            // Substring will include the starting quote (characters + 1)
                            strippedValues.push(value.substring(0, characters + 1) + '"');
                        }
                    });

                    values = strippedValues;
                }

                segments.push(sub('${0} in (${1})', [transform(resolvedName), values.join(',')]));
            }

            return segments.length > 0 ? '(' + segments.join(') ' + multiSegmentOperator + ' (') + ')' : false;
        },
        createDistinctFragment: function (definition, propertyName, applied, dataPath) {
            var propertyType = this.resolveDataType(definition.propertyDataTypeId),
                sub = dString.substitute,
                name = null,
                values = [],
                additional = null,
                results = false,
                resolvedProperty = this.resolveProperty(propertyName, dataPath);

            for (name in applied) {
                if (applied.hasOwnProperty(name)) {
                    if (name === this.nullName) {
                        additional = sub('${0} eq null', [resolvedProperty]);
                    } else if (name === this.emptyName) {
                        values.push("''");
                    } else {
                        values.push(this._transformValue(propertyType, applied[name]));
                    }
                }
            }

            if(values.length > 0) {
                results = sub('${0} in (${1})', [resolvedProperty, values.join(',')]);
            }

            if (additional && values.length > 0) {
                results = sub('(${0} or ${1})', [results, additional]);
            } else if (additional) {
                results =  additional;
            }

            return results;
        },
        createLookupFragment: function (definition, propertyName, applied, dataPath) {
            var propertyType = this.resolveDataType(definition.propertyDataTypeId),
                operator,
                value = '',
                prop = this.resolveProperty(propertyName, dataPath),
                results = '',
                values = [],
                name;
                          
            if (applied.hasOwnProperty('value')) {
                operator = applied['value'].operator
                value = applied['value'].value;
            }

            if ((value === '') || (value === null)) {
                return false;
            }
            
            if (typeof value === 'string') {
                prop = 'upper(' + prop + ')';
                value = value.toUpperCase();
            }

            results = dString.substitute('${0} ${1}', [prop, this._transformLookupOperator(operator, value, propertyType)]);
            return results;
        },
        _transformLookupOperator: function (operator, value, propertyType) {
            var results = '',
                lhs,
                rhs = '${0}';

            switch (operator) {
                case 'Equal':
                    lhs = 'eq';
                    break;
                case 'NotEqual':
                    lhs = 'ne';
                    break;
                case 'LessThan':
                    lhs = 'lt';
                    break;
                case 'LessThanEqual':
                    lhs = 'le';
                    break;
                case 'GreaterThan':
                    lhs = 'gt';
                    break;
                case 'GreaterThanEqual':
                    lhs = 'ge';
                    break;
                case 'StartsWith':
                    lhs = 'like';
                    rhs = '${0}%';
                    break;
                case 'EndsWith':
                    lhs = 'like';
                    rhs = '%${0}';
                    break;
                case 'Contains':
                    lhs = 'like';
                    rhs = '%${0}%';
                    break;
                default:
                    lhs = 'eq';
                    break;
            }

            // wrap string in quotes
            if (propertyType === 'string' || propertyType === 'key') {
                rhs = '"' + rhs + '"';
            }

            // transform the right hand side
            rhs = dString.substitute(rhs, [value]);

            // combine operator (lhs) with rhs and return
            return dString.substitute('${0} ${1}', [lhs, rhs]);
        },
        createQuery: function () {
            var segments = [],
                key,
                applied,
                definition,
                propertyName,
                details,
                segment,
                dataPath;
            for (key in this._applied) {
                if (this._applied.hasOwnProperty(key)) {
                    applied = this._applied[key];
                    definition = this._definitionSet[key];
                    propertyName = definition.propertyName;
                    details = definition.details;
                    dataPath = definition.dataPath;

                    if (details.rangeFilter) {
                        segment = this.createRangeFragment(definition, propertyName, applied, dataPath);
                    } else if (details.distinctFilter) {
                        segment = this.createDistinctFragment(definition, propertyName, applied, dataPath);
                    } else if ((details.userLookupFilter) || (details.lookupFilter)) {
                        segment = this.createLookupFragment(definition, propertyName, applied, dataPath);
                    }

                    if (segment) {
                        segments.push(segment);
                    }
                }
            }

            return segments.length > 0 ? '(' + segments.join(') and (') + ')' : false;
        },
        createValueSet: function () {
           var result = [],
                applied,
                definition,
                details,
                filterType,
                filter,
                name,
                key;

            for (key in this._applied) {
                if (this._applied.hasOwnProperty(key)) {
                    applied = this._applied[key];
                    definition = this._definitionSet[key];
                    details = definition.details;
                    filterType = (details.rangeFilter && 'rangeFilter') || (details.distinctFilter && 'distinctFilter') || (details.userLookupFilter && 'lookupFilter');

                    filter = {
                        'filterId': definition.$key,
                        'filterName': definition.filterName,
                        'appliedValues': [],
                        'operator': null
                    };

                    switch (filterType) {
                        case 'rangeFilter':
                            for (name in applied) {
                                if (applied.hasOwnProperty(name)) {
                                    filter.appliedValues.push(applied[name] && applied[name].rangeId);
                                }
                            }

                            break;
                        case 'distinctFilter':
                            for (name in applied) {
                                if (applied.hasOwnProperty(name)) {
                                    filter.appliedValues.push(name);
                                }
                            }

                            break;
                        case 'lookupFilter':
                            for (name in applied) {
                                if (applied.hasOwnProperty(name)) {
                                    if (applied[name].hasOwnProperty('operator')) {
                                        filter.appliedValues.push(applied[name]);
                                        filter.operator = applied[name].operator;
                                    }
                                }
                            }

                            break;
                        default:
                            break;
                    }

                    result.push(filter);
                }
            }

            return result;
        }       
    });

    return widget;
});

},
'Sage/UI/Controls/Currency':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/Currency", [
       'dojo/_base/html',
       'dojox/grid/DataGrid',
       'dijit/_Widget',
       'Sage/_Templated',
       'dijit/form/CurrencyTextBox',
       'Sage/UI/Controls/CurrencyTextBox',
       'dojo/currency',
       'dojo/string',
       'dojo/_base/declare',
       'Sage/Utility'
],
function (html, dataGrid, _Widget, _Templated, currencyTextBox, sageCurrencyTextBox, currency, string, declare, utility) {
    //TODO: This hook will be depricated once ClientBindingManagerService has been converted with Dojo.
    dojo.mixin(dijit.form.ValidationTextBox.prototype.attributeMap, { slxchangehook: 'focusNode' });

    var widget = declare("Sage.UI.Controls.Currency", [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        //Reference enum for Display Modes
        displayModes: {
            //Renders the control as hyperlinked text.
            'AsHyperlink': 0,
            //Default rendering of the control.
            'AsControl': 1,
            //Renders the control a text only.        
            'AsText': 2
        },
        //Display Mode template object.
        modeTemplates: {
            //Renders the control as hyperlinked text.
            // Does not work - was never wired up
            'AsHyperlink': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">{%= $.value %}</div>'
            ]),
            //Default rendering of the control.
            'AsControl': new Simplate([
                '<input  data-dojo-type="Sage.UI.Controls.CurrencyTextBox" ',
                'constraints="{ {%= $.constraintsToString() %} }" ',
                'id="{%= $.id %}_CurrencyTextBox" ',
                'style="width:inherit;"',
                'textAlign="{%= $.textAlign %}"',
                ' name="{%= $.name %}" type="text" ',
                ' value="{%= $.value %}" dojoAttachPoint="focusNode" ',
                '{% if ( $.multiCurrency ) { %} ',
                ' class="ISOSpace" ',
                '{% } %}',
                ' hotKey="{%= $.hotKey %}" ',
                '{% if($.disabled === "disabled") { %} ',
                ' disabled="disabled" ',
                '{% } %}',
                '{% if($.readonly === "readonly") { %} ',
                ' readonly="readonly" ',
                '{% } %}',
                ' maxlength="{%= $.maxLength %}" ',
                ' required="{%= $.required %}">',
                '{% if ( $.multiCurrency ) { %} ',
                    '<label id="{%= $.id %}_ISOLabel" ',
                       'dojoAttachPoint="currencyCodeLabel" ',
                       'for="${0}_CurrencyTextbox" ',
                       'class="ISOLabel" ',
                       'wairole="presentation" ',
                       'readonly="true" ',
                       'tabindex="-1" ',
                       'class="dijitInputInner" ',
                       'role="presentation">',
                    '</label> ',
                '{% } %}'
            ]),
            //Renders the control a text only.
            'AsText': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">{%= $.formattedText() %}</div>'
            ])
        },
        widgetTemplate: new Simplate([
            '<div style="width:inherit;" slxcompositecontrol="true" id="{%= $.id %}" >',
            '{%= $.modeTemplates[$.displayMode].apply($) %}',
            '</div>'
        ]),
        postMixInProperties: function () {
            this.currentCultureSymbol = Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol;

            if (this.multiCurrency) {
                // multiCurrency displays currency code in a label, not the currency symbol
                this.constraints['currency'] = null;
            } else {
                if (this.constraints['currency'] === '' || this.constraints['currency'] === null) {
                    this.constraints['currency'] = this.currentCode;
                }
            }
        },
        _onBlur: function () {
            //we need this so that the validationtextbox does not set the state as an error when only one digit was added after the decimal place
            this.focusNode.set('displayedValue', utility.maximizeDecimalDigit(this.focusNode.focusNode.value, this.constraints.places));
        },
        postCreate: function () {
            //summary:
            // Place the ISO code next to the textbox in a label

            //ISO Code placement
            if (this.multiCurrency) {
                //Set the style attribute instead of dojo.style, which does not allow !important.
                dijit.byId(this.id + '_CurrencyTextBox').domNode.setAttribute("style", "width:100% !important;");
                this.currencyCodeLabel.innerHTML = this.currentCode;
            }

            this.inherited(arguments);
        },
        value: 0,
        //summary:
        //     When provided to dijit.form.CurrencyTextBox via the lang property, 
        //     currentCulture enables the control to know the expected formatting.
        //     example: 'de-de'    
        //     Sys.CultureInfo.CurrentCulture.name,
        //summary:
        //   Provided to dijit.form.CurrencyTextBox for currency formatting.
        //   example: 'EUR', 'USD'
        //   postMixInProperties sets this.
        currentCultureSymbol: '', //Sys.CultureInfo.CurrentCulture.numberFormat.CurrencySymbol,
        //summary:
        //  Represents the current currency code.  
        //  Displayed with value when multiCurrency is true.
        //  example: 'EUR', 'USD'
        currentCode: 'USD',  //Default
        //summary:
        //Represents the current exchange rate. For a server side control, the value is already calculated.
        exchangeRate: 1, //Default
        //summary:
        // Is multicurrency enabled
        multiCurrency: false,
        displayCurrencyCode: true, // not used? TODO:
        //summary:
        //.Net control behavior
        autoPostBack: false,
        width: 15,
        maxLength: 128,
        required: false,
        style: '',
        //These three props are for non-grid modes.  Add to basic control config but not column config.    
        enabled: true, // For non-grid mode. Redundant from grid.column.editable: true
        readonly: '', // For non-grid mode. Redundant from grid.column.editable: true
        disabled: '',
        visible: true, // For non-grid mode. Redundant from field in grid Select but column not included.
        hotKey: '',
        tabIndex: 0,
        //Sets the display mode that the control will render in.
        displayMode: 'AsControl',
        // appliedSecurity: '',  Note: Not yet enabled on control.    
        widgetsInTemplate: true,
        styles: 'text-align: right;',
        name: '',
        constraints: null,
        id: 'currencyControl',
        //summary:
        //  Converts the constraints object to a string usable in the template.
        //  Strings are wrapped in single quotes.
        constraintsToString: function () {
            // TODO: Same function is used in numeric, move to a util class
            var tmp = [];
            for (var prop in this.constraints) {
                if (this.constraints.hasOwnProperty(prop)) {
                    var value = this.constraints[prop];
                    if (typeof value === 'string') {
                        value = "\'" + value + "\'";
                    }

                    tmp.push(prop + ":" + value);
                }
            }

            var results = tmp.join(",");
            return results;
        },
        constructor: function (options) {
            this.inherited(arguments);
        },
        destroy: function () {
            if (this.focusNode) {
                this.focusNode.destroy();
            }
            this.inherited(arguments);
        }
    });

    return widget;
});


},
'Sage/Utility/File/DescriptionsForm':function(){
﻿/*globals define, Sage   */
define("Sage/Utility/File/DescriptionsForm", [
    'Sage/Utility/File',
    'dijit/_Widget',
    'Sage/_Templated',
    'dojo/_base/lang',
    'dojo/string',
    'dijit/Dialog',
    'dojo/i18n',
    'dojo/i18n!./nls/DescriptionsForm',
    'dojo/_base/declare'
],
function (File, _Widget, _Templated, dLang, dString, Dialog, i18n, descriptionsFormStrings, declare) {
    var descForm = declare('Sage.Utility.File.DescriptionsForm', [_Widget, _Templated], {
        fileType: File.fileType.ftAttachment,
        titleFmt: 'Add Attachment(s) for ${0}',
        titleLibraryDoc: 'Add Library Document(s)',
        fileNameText: 'File name and size: ',
        descText: 'Description:',
        okText: 'OK',
        cancelText: 'Cancel',
        entityDesc: '',
        _formParts: [],
        files: [],
        widgetsInTemplate: true,
        widgetTemplate: new Simplate([
            '<div>',
                '<div dojoType="dijit.Dialog" id="dlgFileDescriptions" title="" dojoAttachPoint="_dialog">',
                    '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="2" labelWidth="3" style="width:580px">',
                        '<div dojoType="dijit.layout.ContentPane" label="" style="width:212px;"><label>{%= $.fileNameText %}</label></div>',
                        '<div dojoType="dijit.layout.ContentPane" label="" style="width:250px;"><label>{%= $.descText %}</label></div>',
                    '</div>', //labels
                    '<div dojoType="dojox.layout.TableContainer" orientation="horiz" cols="2" labelWidth="5" dojoAttachPoint="contentNode" style="min-height:150px;width:580px;max-height:250px;overflow:auto" >',

                    '</div>', //body
                    '<div class="general-dialog-actions">', //buttons
                        '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnOK" name="_btnOK" dojoAttachPoint="_btnOK" dojoAttachEvent="onClick:_okClick">{%= $.okText %}</div>',
                        '<div dojoType="dijit.form.Button" id="{%= $.id %}_btnCancel" name="_btnCancel" dojoAttachPoint="_btnCancel" dojoAttachEvent="onClick:_cancelClick">{%= $.cancelText %}</div>',
                    '</div>', //buttons
                '</div>', //dialog
            '</div>' //root
        ]),
        postMixInProperties: function () {
            dojo.mixin(this, descriptionsFormStrings);
            this.inherited(arguments);
        },
        show: function () {
            if (this.fileType !== File.fileType.ftLibraryDocs) {
                this._dialog.set('title', dString.substitute(this.titleFmt, [this.entityDesc]));
            }
            else {
                this._dialog.set('title', this.titleLibraryDoc);
            }
            this._dialog.show();
            this._addFormParts();
        },
        //        destroy: function () {
        //            this.inherited(arguments);
        //        },
        _setEntityDescAttr: function (desc) {
            this.entityDesc = desc;
        },
        _getEntityDescAttr: function () {
            return this.entityDesc;
        },
        _setFilesAttr: function (files) {
            this.files = files;
        },
        _getFilesAttr: function () {
            return this.files;
        },
        _addFormParts: function () {
            for (var i = 0; i < this.files.length; i++) {
                var file = this.files[i];
                var filelength = 0;
                if (file.size === 0) {
                    filelength = 0;
                }
                else {
                    filelength = file.size || file.blob.length;
                }
                if (filelength === 0) {
                    filelength += "0 Bytes";
                }
                else {
                    if (filelength) {
                        if (filelength > 1024) {
                            if (filelength > 1048576) {
                                filelength = Math.round(filelength / 1048576) + " MB";
                            } else {
                                filelength = Math.round(filelength / 1024) + " KB";
                            }
                        } else {
                            filelength += " Bytes";
                        }
                    }
                }
                var fnFld = new dijit.form.TextBox({
                    id: 'filename_' + i,
                    value: file.name + "  (" + filelength + ")",
                    style: 'min-width:250px;margin:0 0 5px 15px;',
                    disabled: true
                });
                var descFld = new dijit.form.TextBox({
                    id: 'desc_' + i,
                    value: this.getDefaultDescription(file.name),
                    style: 'min-width:250px;margin:0 0 5px 20px;',
                    maxLength: 128,
                    relFileName: file.name
                });
                this._formParts.push(fnFld);
                this._formParts.push(descFld);
                this.contentNode.addChild(fnFld);
                this.contentNode.addChild(descFld);
            }
        },
        _clearForm: function () {
            var len = this._formParts.length;
            for (var i = len - 1; i > -1; i--) {
                var elem = this._formParts[i];
                this.contentNode.removeChild(elem);
                elem.destroyRecursive(false);
            }
            this._formParts = [];
        },
        _okClick: function () {
            var descriptions = [];
            for (var i = 0; i < this._formParts.length; i++) {
                var elem = this._formParts[i];
                if (elem.params['relFileName']) {
                    descriptions.push({
                        description: elem.get('value') || this.getDefaultDescription(elem.params['relFileName']),
                        fileName: elem.params['relFileName']
                    });
                }
            }
            this._clearForm();
            this.onDescriptionsEntered(this.files, descriptions);
            this._dialog.hide();
        },
        _cancelClick: function () {
            this._clearForm();
            this._dialog.hide();
        },
        getDefaultDescription: function (filename) {
            return filename.replace(/\.[\w]*/, '');
        },
        onDescriptionsEntered: function (files, descriptions) { }
    });
    return descForm;
});
},
'Sage/QuickForms/Design/nls/TextBoxControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/TextBoxControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "TextBox"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Dashboard/DashboardPage':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Dashboard/DashboardPage", [
       'dojo/i18n',
       'Sage/UI/GridContainer',
       'Sage/UI/Dialogs',
       'Sage/UI/Dashboard/DashboardWidgetCell',
       'Sage/Utility',
       'dijit/form/ValidationTextBox',
       'Sage/UI/Controls/_DialogHelpIconMixin',
       'dojo/dom-construct',
       'Sage/Array',
       'dojo/i18n!./nls/DashboardTabController',
       'dojo/i18n!./nls/WidgetDefinition',
       'dojo/_base/declare'
],
function (
    i18n, 
    gridContainer,
    dialogs,
    dashboardWidgetCell,
    Utility,
    validationTextBox,
    _DialogHelpIconMixin,
    domConstruct,
    SageArray,
    resourceDashboardTabController,
    resourceWidgetDefinition,
    declare
    ) {
    //dojo.requireLocalization("dijit", "common");

    // the number of columns could change during runtime now, keep track of them
    // with a class each to make them easier to persist. Each col obj should
    // be named column number, have a width (maybe deprecated), and an array of
    // Widget objects
    var dashboardColumn = declare('Sage.UI.Persistance.DashboardColumn', null, {
        constructor: function (config) {
            dojo.safeMixin(this, config);
        }
    });

    /**
    * Dashboard page class will handle individual tab page duties such as layout,
    * generating the widget 'cells', adding and removing page content, drag and
    * dropping widgets etc, page persistance, etc...
    */
    var widget = declare('Sage.UI.Dashboard.DashboardPage', gridContainer, {
        _nwTableOuter: new Simplate(['<div id="nwTable" class="new-widget-table"><div style="height:400px; overflow-y:auto;"><table width="100%">{%= $.content %}</table></div>',
            '<div align="right"><button data-dojo-type="dijit.form.Button"',
            ' type="button" id="btnAddContentClose" class="ok-button" title="{%= $.buttonCancel %}" align="right" style="margin-top:10px;">{%= $.buttonCancel %}</button>',
            '</div></div>']),
        _nwTableInner: new Simplate([
            '<tr><td><b>{%= $.key %}</b><br />{%= $.value %}</td></tr>',
            '<tr><td><button data-dojo-type="dijit.form.Button"',
            'type="button" id="{%= $.btnId %}" class="btn-add-new">{%= $.addText %}</button></td></tr>',
            '<tr><td><hr /></td></tr>'
        ]),
        style: 'z-index:500;',
        _eoTable: new Simplate([
            '<div id="eoTable" class="edit-options-table"><table width="100%">',
            '<tr><td>{%= $.titleText %}</td><td><div data-dojo-type="dijit.form.ValidationTextBox" id="txtEO"',
            ' regExp="[^-<>:;@#\$!%\^&\*\(\)\+=\`\[{},/?\.~]*" value="{%= $.title %}" invalidMessage="{%= $.invalidMessage %}"></div></td></tr>',
            '<tr><td colspan=2>{%= $.chooseTemplateText %}</td></tr>',
            '<tr><td><input type="radio" id="rdoEO0" data-dojo-type="dijit.form.RadioButton"',
            ' value="one_column" name="radioEO" /></td><td><label for="rdoEO0">{%= $.oneColumnText %}',
            '</label></td></tr>',
            '<tr><td><input type="radio" id="rdoEO1" data-dojo-type="dijit.form.RadioButton"',
            ' value="two_even" name="radioEO" /></td><td><label for="rdoEO1">{%= $.twoColumnText %}',
            '</label></td></tr>',
            '<tr><td><input type="radio" id="rdoEO2" data-dojo-type="dijit.form.RadioButton"',
            ' value="fat_left" name="radioEO" /></td><td><label for="rdoEO2">{%= $.fatLeftText %}',
            '</label></td></tr>',
            '<tr><td><input type="radio" id="rdoEO3" data-dojo-type="dijit.form.RadioButton"',
            ' value="fat_right" name="radioEO" /></td><td><label for="rdoEO3">{%= $.fatRightText %}',
            '</label></td></tr>',
            '<tr><td><input type="checkbox" id="chkMD" data-dojo-type="dijit.form.CheckBox"',
            ' value="make_def"/></td><td><label for="chkMD">{%= $.makeDefaultText %}</label></td></tr>',
            '<tr><td colspan=2 align="right"><button data-dojo-type="dijit.form.Button" type="button"',
            ' id="btnEOK" class="ok-button" title="{%= $.buttonOk %}" >{%= $.buttonOk %}</button>',
            '<button data-dojo-type="dijit.form.Button" type="button"',
            ' id="btnEOCancel" class="cancel-button" title="{%= $.buttonCancel %}">{%= $.buttonCancel %}</button>',
            '</td></tr></table></div>'
        ]),
        _raisePermissionInvalidMessage: function() {
            var currentDashboardTab = this;
            var fn = function(ans) {
                if(ans) {
                    var db = dijit.byId('Dashboard');
                    db._copyPage(currentDashboardTab);
                }
            }
            
            var opts = {
                    title: this.resources.errorText,
                    query: [this.resources.permissionErrorText, this.resources.permissionErrorPerformCopyText],
                    yesText: this.resources.yesText,
                    noText: this.resources.noText,
                    callbackFn: fn,
                    style: {width: '350px'},
                    align: 'right'
                }

            Sage.UI.Dialogs.raiseQueryDialogExt(opts);
        },
        postCreate: function () {
            this.inherited(arguments);
            this.subscribe('/ui/dashboard/pageSave', function (page) {
                if (typeof page === 'string') { page = parseInt(page, 10); }
                if (page === this._page) {
                    if(this.permission) {
                        this._save();
                    }
                    else {
                        this._raisePermissionInvalidMessage();
                    }
                }
            });
            this.subscribe('/dojox/mdnd/drop', '_dropped');
        },
        resources: {},
        postMixInProperties: function () {
            dojo.mixin(this.resources, i18n.getLocalization("Sage.UI.Dashboard", "DashboardTabController"));
            //dojo.mixin(this.resources, i18n.getLocalization("Sage.UI.Dashboard", "WidgetDefinition"));
            dojo.mixin(this.resources, i18n.getLocalization("dijit", "common"));
            this._releaseManager.page = this;
            this.inherited(arguments);
        },
        _createChild: function (widget, col, idx, page) {
            var widgetName = widget.options.title || widget['@name'],
                nameResourceString = widgetName;
            
            while(nameResourceString.indexOf(' ') >= 0) { nameResourceString = nameResourceString.replace(' ', '_'); }
            while(nameResourceString.indexOf('.') >= 0) { nameResourceString = nameResourceString.replace('.', '_'); }
            while(nameResourceString.indexOf('\'') >= 0) { nameResourceString = nameResourceString.replace('\'', '_'); }
            
            if(resourceWidgetDefinition[nameResourceString]) {
                widgetName = resourceWidgetDefinition[nameResourceString];
            }
            
            this._childWidgets.push(
            new dashboardWidgetCell({
                dndType: 'Portlet',
                title: widgetName,
                resizeChildren: false,
                column: col,
                index: idx,
                _page: page,
                _parentId: this.id,
                preventRender: this.toBeHidden,
                widgetOptions: widget.options
            }));
            // always return the last one added
            return this._childWidgets[this._childWidgets.length - 1];
        },
        _addNewWidget: function (name) {
            if(this.permission) {
                // who is the last widget?
                var last = this._childWidgets[this._childWidgets.length - 1];
                var col = last && last.column ? last.column : 0;
                var idx = last && last.index ? last.index + 1 : 0;
                var newWidget = new dashboardWidgetCell({
                    dndType: 'Portlet',
                    isNew: true,
                    title: this.resources[name] || name,
                    resizeChildren: false,
                    column: col,
                    index: idx,
                    _page: this._page,
                    _parentId: this.id,
                    widgetOptions: {
                        name: name,
                        title: name
                    }
                });
                this._childWidgets.push(newWidget);
                this.addChild(this._childWidgets[this._childWidgets.length - 1], col, idx);
                this._save();
            }
            else {
                this._raisePermissionInvalidMessage();
            }
        },
        _editOptionsMenu: function () {
            var uo = Sage.UI.DataStore.Dashboard.userOptions;
            var oneColumn = false, evenSplit = false, fatLeft = false, fatRight = false;
            switch (this.colWidths.toString()) {
                case '50,50':
                    evenSplit = true;
                    break;
                case '67,33':
                    fatLeft = true;
                    break;
                case '33,67':
                    fatRight = true;
                    break;
                case '100':
                default:
                    oneColumn = true;
            }

            var d = new dijit.Dialog({
                title: this.resources.editOptionsText,
                style: "width:350px"
            });

            // write the html
            d.set('content', this._eoTable.apply({
                title: this.get('title'),
                buttonOk: this.resources.buttonOk,
                buttonCancel: this.resources.buttonCancel,
                addText: this.resources.addText,
                titleText: this.resources.titleText,
                chooseTemplateText: this.resources.chooseTemplateText,
                oneColumnText: this.resources.oneColumnText,
                twoColumnText: this.resources.twoColumnText,
                fatLeftText: this.resources.fatLeftText,
                fatRightText: this.resources.fatRightText,
                makeDefaultText: this.resources.makeDefaultText,
                invalidMessage: this.resources.invalidMessage
            }));
            // Setting this when writing the html fails in IE,
            //  which will always render the radio buttons as checked
            dijit.byId('rdoEO0').set('checked', oneColumn);
            dijit.byId('rdoEO1').set('checked', evenSplit);
            dijit.byId('rdoEO2').set('checked', fatLeft);
            dijit.byId('rdoEO3').set('checked', fatRight);
            
            if(uo.defaultTab == this.title) {
                dijit.byId('chkMD').set('checked', true);
            }
            
            d.show();
            var fnDestroy = function () {
                if (this.isNew) {
                    // This tab doesn't yet exist, so just hide it. On refresh, it won't exist
                    var parent = dijit.byId('Dashboard');
                    parent.closeChild(this);
                    parent.selectFirstVisible();
                }

                dojo.disconnect(_closed);
                dojo.disconnect(ok);
                dojo.disconnect(cancel);
                d.destroyRecursive();
            };
            var _closed = dojo.connect(d, "hide", this, fnDestroy);

            // cancel
            var cancel = dojo.connect(dijit.byId('btnEOCancel'), 'onClick', this,
                function () {
                    d.hide();
                });
            var ok = dojo.connect(dijit.byId('btnEOK'), 'onClick', this,
                function () {
                    if(this.permission) {
                        var txtEO = dijit.byId('txtEO');
                        if (!txtEO.isValid() || !this.getParent()._isTitleUnique(txtEO.value, this.id)) {
                            return false;
                        }
                        
                        // build up a config to pass to setOptions
                        var config = {};
                        config.ttl = txtEO.value;
                        config.one_column = dijit.byId('rdoEO0').get('value');
                        config.even_split = dijit.byId('rdoEO1').get('value');
                        config.fat_left = dijit.byId('rdoEO2').get('value');
                        config.fat_right = dijit.byId('rdoEO3').get('value');
                        config.make_def = dijit.byId('chkMD').get('value');
                        
                        // Only set the name of the tab the first time
                        if (this.isNew) {
                            this.isNew = false;
                        }
                        else {
                            config.oldName = this.name;
                        }
                        
                        this._setOptions(config);
                        this._save();
                        this._redrawWidgets();
                        this.getParent().addRemovePageContextMenu();
                        d.hide();
                    }
                    else {
                        d.hide();
                        this._raisePermissionInvalidMessage();
                    }
                });
        },
        _redrawWidgets: function () {
            if (this._childWidgets) {
                dojo.forEach(this._childWidgets, function (widget) {
                    widget.refresh(true);
                });
            }
        },
        // A class to support the Release management of plugins.
        _releaseManager: {
            // TODO: 
            // constructor: 
            // Initialization function fired on click action. Handles the launch of share dialog with release list grid.
            share: function () {
                this.lookupOptions.callerId = this.page.id;
                if (!this.dialog) {
                    this.dialog = new dijit.Dialog({
                        id: this.page.id + '-shareDialog',
                        style: "width: 405px",
                        title: this.page.resources.shareTabText
                    });
                    var _closed = dojo.connect(this.dialog, "hide", this, this.fnHide);
                    dojo.mixin(this.dialog, new _DialogHelpIconMixin());
                    this.dialog.createHelpIconByTopic("Working_with_the_Dashboard");
                }

                if (this.grid) { this.grid.destroyRecursive(); }
                this.grid = new dojox.grid.DataGrid({
                    id: this.page.id + '-shareDialog-grid',
                    structure: [
                            {
                                field: '$key',
                                editable: false,
                                hidden: true,
                                id: 'id',
                                formatter: function (value, rowIdx, cel) {
                                    var id = [cel.grid.id, '-row', rowIdx].join('');
                                    var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
                                    return anchor;
                                }
                            },
                            { field: 'Text', name: this.page.resources.releasedToText, width: '185px' }, //, editable: false 
                            {field: 'Type', name: this.page.resources.typeText, width: '175px'} //, editable: false 
                        ],
                    height: '200px'
                }, document.createElement('div'));

                // go get the json for release candidates
                var def = dojo.xhrGet({
                    url: 'slxdata.ashx/slx/crm/-/dashboard/release', //ReleaseManager config: { url: '' }
                    preventCache: true,
                    handleAs: 'json',
                    content: {
                        name: this.page.name,
                        family: this.page.family
                    },
                    load: dojo.hitch(this, this.releaseFetchSuccess),
                    error: function (data) {
                        console.log(this.page.resources.releaseFetchErrorText);
                    }
                });

            },
            releaseFetchSuccess: function (data, xhr) {
                //Assemble with data and show.
                var storeData = { identifier: 'Id', items: data };
                this.gridStore = new dojo.data.ItemFileWriteStore({
                    data: storeData
                });
                this.dialog.set('content', this.dialogContent.apply({
                    id: this.dialog.id,
                    pageId: this.page.id,
                    closeText: this.page.resources.closeText,
                    everyoneText: this.page.resources.everyoneText,
                    headerText: this.page.resources.shareTabText
                }));
                this.initTools();

                this.dialog.show();
                dojo.place(this.grid.domNode, this.dialog.id + '-grid', 'replace');
                this.grid.setStore(this.gridStore);
                dojo.style(this.dialog.id, 'top', '130px');
            },
            fnHide: function () {
                // Essentially perform the save only after the dialog is hidden
                this.release();
            },
            initTools: function () {
                var delid = this.dialog.id + '_delBtn';
                var delBtn = domConstruct.create('img', {
                    'id': delid,
                    'alt': this.page.resources.deleteText,
                    'title': this.page.resources.deleteText,
                    'src': 'images/icons/Delete_16x16.png',
                    'class': 'tws-header-icon'
                });
                dojo.place(delBtn, dojo.query(['#', this.dialog.id, '-toolbar'].join(''))[0], 'last');
                dojo.connect(dojo.byId(delid), 'onclick', this, this.deleteSelected);

                var delid = this.dialog.id + '_lookupBtn';
                var delBtn = domConstruct.create('img', {
                    'id': delid,
                    'alt': this.page.resources.addText,
                    'title': this.page.resources.addText,
                    'src': 'images/icons/Plus_16x16.gif',
                    'class': 'tws-header-icon'
                });
                dojo.place(delBtn, dojo.query(['#', this.dialog.id, '-toolbar'].join(''))[0], 'last');
                dojo.connect(dojo.byId(delid), 'onclick', this, this.startLookup);
            },
            //addSelected: see this.lookupOptions.doSelected
            deleteSelected: function () {
                var selectedItems = this.grid.selection.getSelected(); // 'this' doesn't work within the forEach
                if (selectedItems.length) {
                    var gStore = this.gridStore;
                    dojo.forEach(selectedItems, function (item) {
                        if (item !== null) {
                            // Delete the item from the data store:
                            gStore.deleteItem(item);
                        }
                    }); // end forEach
                    this.gridStore.save();
                }
            },
            // The parent page object
            page: null,
            // Release list
            grid: null,
            //        gridOptions: null,
            gridStore: null,
            //Share dialog
            dialog: null,
            // The template for the share dialog
            dialogContent: new Simplate(['<div width="560px">',
                '<div style="width:100%;" align="right" id="{%= $.id %}-toolbar"></div>',
                '<div id="{%= $.id %}-grid" ></div>',
            //TODO: Add button bar feature to a Sage.UI.Dialogs option.
                '<div style="width:100%;" align="right" ><button data-dojo-type="dijit.form.Button" type="button" style="margin-top:10px;" ',
                'data-dojo-props="onClick:function(){dijit.byId(\'{%= $.pageId %}\')._releaseManager.everyoneClick();}"',
                '>{%= $.everyoneText %}</button>', //{%= $.buttonClose %}
            //TODO: Add button bar feature to a Sage.UI.Dialogs option.
                '<button data-dojo-type="dijit.form.Button" type="button" style="margin-left:10px; margin-top:10px;" ',
                'data-dojo-props="onClick:function(){dijit.byId(\'{%= $.pageId %}\')._releaseManager.dialog.hide();}"',
                '>{%= $.closeText %}</button></div>', //{%= $.buttonClose %}        
                '</div> ']),
            // Owner lookup control
            lookup: null,
            //
            everyoneClick: function () {
                //doSelected expects objects sent from sdata.  Format our default value as such.
                var item = [{ $key: "SYST00000001", OwnerDescription: this.page.resources.everyoneText}];
                this.lookupOptions.doSelected(item);
            },
            release: function () {
                var ids = "";
                var items = this.gridStore._arrayOfAllItems;
                //this.gridStore.
                for (var i = 0; i < items.length; i++) {
                    if (items[i]) {
                        ids += items[i].Id[0] + ",";
                    }
                }
                var vURL = "SLXGroupBuilder.aspx?method=GetGroupIdFromNameFamilyAndType&name=" + this.page.name + "&family=System&type=36";
                dojo.xhrGet({
                    url: vURL,
                    error: dojo.hitch(this, function (pluginData) { console.log(['Page ', this.page.id, ' not released.'].join('')); }),
                    load: dojo.hitch(this, function (pluginData) {
                        vURL = "SLXGroupBuilder.aspx?method=ReleaseGroup&gid=" + pluginData + "&toids=" + ids;
                        dojo.xhrGet({
                            url: vURL,
                            error: dojo.hitch(this, function (releaseData) { console.log(['Page [', releaseData, '] not released.'].join('')); }),
                            load: dojo.hitch(this, function (releaseData) { })
                        });
                    })
                });
            },
            startLookup: function () {
                if (!this.lookup) {
                    this.lookup = new Sage.UI.SDataLookup(this.lookupOptions);
                    // lookupOptions constructor doesn't have access to the resources
                    this.lookup.dialogTitle = this.page.resources.addLookup;
                    this.lookup.dialogButtonText = this.page.resources.okButton;
                    this.lookup.structure[0].cells[0].name = this.page.resources.typeText;
                    this.lookup.structure[0].cells[1].name = this.page.resources.descriptionText;
                }
                this.lookup.showLookup();
            },
            // Configuration object for the Owner lookup control 
            lookupOptions: {
                callerId: null,
                displayMode: 5,
                structure: [{
                    cells: [
                        { name: "", field: "Type", sortable: true, width: "150px", editable: false, styles: null,
                            propertyType: "Sage.Entity.Interfaces.OwnerType", excludeFromFilters: false, useAsResult: false
                        },
                        { "name": "", "field": "OwnerDescription", "sortable": true, "width": "500px", "editable": false, "styles": null, "propertyType": "System.String", "excludeFromFilters": false, "useAsResult": false}],
                    "defaultCell": { "name": null, "field": null, "sortable": false, "width": "50px", "editable": false, "styles": "text-align: left;", "propertyType": null, "excludeFromFilters": false, "useAsResult": false }
                }],
                gridOptions: {},
                storeOptions: { "resourceKind": "owners" },
                dialogTitle: '',
                dialogButtonText: '',
                id: "MainContent_AccountDetails_Owner_Grid",
                modality: 'modal',
                doSelected: function (items) {
                    //When refactored to stand alone, caller will BE _releaseManager.
                    var manager = dijit.byId(this.callerId)._releaseManager;
                    for (var i = 0, len = items.length; i < len; i++) {
                        if (!manager.gridStore._itemsByIdentity[items[i].$key]) {
                            manager.gridStore.newItem({ Id: items[i].$key, Text: items[i].OwnerDescription, Type: items[i].Type });
                        }
                    }
                    manager.gridStore.save();
                    //Don't save until the window is closed
                    //manager.release();
                    manager.grid.startup();
                    if (manager.lookup && manager.lookup.lookupDialog) {
                        manager.lookup.lookupDialog.hide();
                    }
                }
            }
        },
        // If column is set to 1, make sure to move all the content from the second column first
        _joinColumnWidgets: function () {
            if (this.nbZones === 2) {
                for (var i = this._childWidgets.length - 1; i >= 0; i--) {
                    if (this._childWidgets[i].column === 1) {
                        this.removeChild(this._childWidgets[i]);
                        this._childWidgets[i].column = 0;
                        this._childWidgets[i].index += this._childWidgets.length;
                        this.addChild(this._childWidgets[i], 0, this._childWidgets[i].index);
                    }
                }
                this._deleteColumn(1);
            }
        },
        _setOptions: function (config) {
            var uo = Sage.UI.DataStore.Dashboard.userOptions;

            if (config.ttl) {
                this.title = config.ttl;
                this.set('name', config.ttl);
                
                var dashboardTab = dijit.byId('Dashboard_tablist_' + this.id);
                if(dashboardTab) {
                    dashboardTab._setLabelAttr(config.ttl);
                }
            }
            if (config.one_column) {
                this._joinColumnWidgets();
                this.setColumns(1);
                this.set('colWidths', '100');
                dojo.publish('ui/dashboard/columnResize');
            }

            if (config.even_split) {
                this.setColumns(2);
                this.set('colWidths', '50,50');
                dojo.publish('/ui/dashboard/columnResize');
            }

            if (config.fat_left) {
                this.setColumns(2);
                this.set('colWidths', '67,33');
                dojo.publish('/ui/dashboard/columnResize');
            }

            if (config.fat_right) {
                this.setColumns(2);
                this.set('colWidths', '33,67');
                dojo.publish('/ui/dashboard/columnResize');
            }

            if (config.make_def) {
                // get the parent db
                var db = dijit.byId(this._parentId);
                // set the def as this pages title
                if (this.title) {
                    uo.defaultTab = this.title;
                    // update the opts
                    db._updateUserOptions();
                }
            }
            
            if(config.oldName) {
                this.oldName = config.oldName;
            }
            else {
                this.oldName = '';
            }
        },
        _newWidgetMenu: function () {
            // the dialog
            var d = new dijit.Dialog({
                title: this.resources.addContentText,
                style: "width:365px;"
            });
            dojo.mixin(d, new _DialogHelpIconMixin());
            // build up the content
            var list = Sage.UI.DataStore.Dashboard.widgetsList;
            // table content
            var inner = [];
            this._nwListeners = [];
            for (var item in list) {
                if (list.hasOwnProperty(item) && item != 'Default') {
                    var btn_id = item.replace(' ', '_');
                    inner.push(this._nwTableInner.apply({
                        btnId: btn_id + '_label',
                        key: resourceWidgetDefinition[btn_id] || item,
                        value: resourceWidgetDefinition[btn_id + '_Description'] || list[item],
                        addText: this.resources.addText
                    }));
                }
            }
            var mkup = this._nwTableOuter.apply({
                content: inner.join(''),
                buttonCancel: this.resources.buttonCancel
            });

            d.createHelpIconByTopic('Introducing_Widgets');
            d.set('content', mkup);
            d.show();

            var fnDestroy = function () {
                dojo.forEach(this._nwListeners, dojo.disconnect);
                dojo.disconnect(_closed);
                dojo.disconnect(closeClick);

                setTimeout((function (d) {
                    return function () {
                        d.destroyDescendants();
                        d.destroy(false);
                    };
                })(d), 1);
            };

            var _closed = dojo.connect(d, "hide", this, fnDestroy);
            var closeClick = dojo.connect(dijit.byId('btnAddContentClose'), "onClick", this, function () {
                d.hide();
            });

            // get a ref to the Add buttons
            var adds = dijit.findWidgets(dojo.byId('nwTable'));
            for (var i = 0, len = adds.length; i < len; i++) {
                if (adds[i].id != 'btnAddContentClose') {
                    // pass a ref to the dialog so we can close it
                    //  (and the id, otherwise clicking on the button's outer edge
                    //   prevents the id from being attainable)
                    var cb = dojo.hitch(this, this._addNewClick, d, adds[i].id);
                    // disconnect these when destroyed
                    this._nwListeners.push(dojo.connect(adds[i], 'onClick', null, cb));
                }
            }
        },
        _addNewClick: function (d, buttonId, evt) {
            var id = buttonId.replace('_label', '').replace('_', ' ');
            d.hide();
            this._addNewWidget(id);
        },
        // callable from the parent dashboard so that
        // unselected children don't startup until viewed
        _init: function () {
            // has already rendered?
            if (this.pageRendered) {
                // here all charting types on 'firstButNotDefault' should redraw
                if (this.firstButNotDefault) {
                    for (var k = 0, llen = this._childWidgets.length; k < llen; k++) {
                        this._childWidgets[k]._redrawCharts();
                    }
                    // reset the flag so we don't fire this again
                    this.firstButNotDefault = false;
                }
                return;
            }
            // set colWidths now that I am selected
            //        if (this._colWidths) {
            //            this.set('colWidths', this._colWidths);
            //        }
            // a new page won't have a length
            if (this._columns.length) {
                //iterate over the zones and add widget cells to them
                for (var i = 0; i < this.nbZones; i++) {
                    //per column 
                    if (this._columns[i]) {
                        // If there is only 1 Widget, it may not be an array, which won't get caught in the following for-loop
                        //  So ensure it's an array first
                        this._columns[i].Widgets.Widget = Utility.Convert.toArrayFromObject(this._columns[i].Widgets.Widget);
                        for (var j = 0, len = this._columns[i].Widgets.Widget.length; j < len; j++) {
                            if(this._columns[i].Widgets.Widget[j]) {
                                this.addChild(this._createChild(
                                    this._columns[i].Widgets.Widget[j], i, j, this._page), i, j);
                            }
                        }
                    }
                }
            }
            this.pageRendered = true;
        },
        _dropped: function (drp, target, i) {
            // get a ref to the widget instance being dropped
            var widget = dijit.byId(drp.id);
            // ignore if not this page
            if (this._page !== widget._page) { return; }
            // what is the target column
            var col = target.node.cellIndex;
            // change the widget's col and index to match
            widget._setColumn(col);
            widget._setIndex(i);
            // inform widgets dropped, page, column, index
            dojo.publish('/ui/widget/dropped', [drp.id, widget._page, col, i]);
            
            if(this.permission) {
                this._save();
            }
            else {
                this._raisePermissionInvalidMessage();
            }
        },
        // alias for _save(true) => the bool representing 'hidden'. the page
        // representation is just returned so it can be stored and eventually 
        // 'shown' or just copied
        _hide: function () {
            return this.title;
        },
        _copy: function () {
            return this._save(true);
        },
        // If the context menu option for Saving the Page is hit and the Page
        // hasn't been viewed yet, all the content of the page would get removed on Save
        _contextSave: function() {
            if(!this.pageRendered) {
                // page hasn't been rendered, so there couldn't have been any changes to save
                return;
            }
            
            this._save();
        },
        // push in the columns and send the page to dashboard
        _save: function (hidden) {
            // need to get the current colWidths
            var cw = this.colWidths;
            var _cw;
            if (cw) {
                _cw = typeof cw === 'string' ?
                    cw : cw.join(',');
            }
            // make the page & column objects a local var so we forget...
            var pageObject;
            if(hidden) {
                pageObject = {
                    '@name': this.name,
                    '@title': this.name,
                    '@id': this.id,
                    '@family': this.family || 'System',
                    '@permission': this.permission,
                    // an array of strings if present
                    '@colWidths': _cw,
                    Columns: {
                        Column: []
                    }
                };
            }
            else {
                pageObject = {
                    '@name': this.name,
                    '@title': this.name,
                    '@id': this.id,
                    '@family': this.family || 'System',
                    // an array of strings if present
                    '@colWidths': _cw,
                    Columns: {
                        Column: []
                    }
                };
            }
            
            var columnObjects = {};
            // iterate over the widgets and push them into the correct
            // column objects
            for (var i = 0, len = this._childWidgets.length; i < len; i++) {
                var col = this._childWidgets[i].column;
                var opts = this._childWidgets[i].widgetOptions;
                // a wrapper object for each widgetOptions
                var w = {
                    // index only used by placeByAttr
                    index: this._childWidgets[i].index,
                    '@name': opts.name,
                    '@family': opts.family || 'System',
                    options: opts
                };
                if (!columnObjects[col]) {
                    columnObjects[col] =
                        new dashboardColumn({
                            Widgets: {
                                Widget: [] // array of widget objects
                            }
                        });
                }
                // the order may have changed. use placeByAttr?
                columnObjects[col].Widgets.Widget.placeByAttr(w, 'index');
            }
            // how many columns now?
            var cols = Sage.Utility.size(columnObjects);
            // push them into a pageObject.Column
            for (var j = 0; j < cols; j++) {
                pageObject.Columns.Column.push(columnObjects[j]);
            }
            // match the current (overly-nested) DB structure
            var pg = { Dashboard: {} };
            // mixin is copying too much stuff
            Sage.Utility.mixOwn(pg.Dashboard, pageObject);
            if (hidden) {
                /* We were returning pg here (it was not being used by callers), and
                JSLint was warning that _save does not always return a value.*/
                return pg;
            }
            var pgStr = dojo.toJson(pg);
            
            if(!this.oldName) {
                this.oldName = '';
            }
            
            // post to the server if not hidden specified
            var uri = dojo.string.substitute('slxdata.ashx/slx/crm/-/dashboard/page?name=${0}&family=${1}&oldName=${2}',
                [encodeURIComponent(this.name), encodeURIComponent(this.family), encodeURIComponent(this.oldName)]);
            var def = dojo.xhrPost({
                url: uri,
                handleAs: 'text',
                postData: pgStr,
                load: function (data) {
                },
                error: function (err) {
                    console.error(err);
                }
            });
        }
    });

    return widget;

});

},
'url:Sage/MainView/Account/templates/AccountDetailSummary.html':"﻿[\r\n'<table style=\"width:100%\">',\r\n    '<thead>',\r\n        '<tr>',\r\n            '<th>',\r\n                '<div class=\"SummaryTitle\">',\r\n                    '<a href=\"Account.aspx?entityid={%= $.templateData.id %}\">{%= Sage.Utility.htmlEncode($.templateData.name) %}</a>',\r\n                '</div>',\r\n            '</th>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_address1 %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n        '<tr>',\r\n            '<td>',\r\n                '<span>{%= $.templateData.address_citystatezip %}</span>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</thead>',\r\n    '<tbody>',\r\n        '<tr>',\r\n            '<td class=\"DataColumn\">',\r\n                '<table>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svType_Caption || \"Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.type %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svSubType_Caption || \"Sub Type:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.subtype %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTitle_Status || \"Status:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.status %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svDivision_Caption || \"Division:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.division %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svIndustry_Caption || \"Industry:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.industry) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svMainPhone_Caption || \"Main phone:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.mainphone) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svTollFree_Caption || \"Toll free:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= Sage.Format.phone($.templateData.tollfree) %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svEmail_Caption || \"Email:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.email %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svWebAddress_Caption || \"Web:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.webaddress %}</td>',\r\n                    '</tr>',\r\n                    '<tr>',\r\n                        '<td class=\"SummaryCaption\">{%= $.svAccMgr_Caption || \"Acct. Mgr.:\" %}</td>',\r\n                        '<td class=\"DataItem\">{%= $.templateData.accountmanager_userinfo_firstname %} {%= $.templateData.accountmanager_userinfo_lastname %}</td>',\r\n                    '</tr>',\r\n                '</table>',\r\n            '</td>',\r\n        '</tr>',\r\n    '</tbody>',\r\n'</table>',\r\n'<br/>',\r\n'<div style=\"padding-right:20px; text-align:right\">',\r\n    '<asp:Panel runat=\"server\" ID=\"pnlCancel\" CssClass=\"controlslist qfActionContainer\">',\r\n        '<div dojoType=\"dijit.form.Button\" id=\"{%= $.id %}_btn_Close\" onClick=\"javascript:contactSearchForDuplicates._close();\">{%= $.closeText %}</div>',\r\n    '</asp:Panel>',\r\n'</div>'\r\n]",
'Sage/MainView/SecurityManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/MainView/SecurityManager", [
    'Sage/UI/SDataMainViewConfigurationProvider',
    'Sage/UI/Columns/RadioGroup',
    'Sage/Data/WritableSDataStore',
    'Sage/MainView/SecurityMgr/SecurityManagerGroupContext',
    'dojo/i18n!./nls/SecurityManager',
    'dojo/_base/declare'
],
function (SDataMainViewConfigurationProvider, RadioGroup, WritableSDataStore, SecurityManagerGroupContext, nlsStrings, declare) {
    var securityManager = declare('Sage.MainView.SecurityManager', SDataMainViewConfigurationProvider, {
        _profilesStore: false,
        _currentProfileId: false,
        _currentProfileDescription: false,
        _profileNameCache: {},
        store: false,
        entityType: 'securityProfileColumns',
        constructor: function (options) {
            dojo.mixin(this, nlsStrings);
            var grpContextSvc = Sage.Services.getService('ClientGroupContext');
            if (!grpContextSvc || grpContextSvc.declaredClass != 'Sage.MainView.SecurityMgr.SecurityManagerGroupContext') {
                Sage.Services.removeService('ClientGroupContext');
                grpContextSvc = new SecurityManagerGroupContext();
                Sage.Services.addService('ClientGroupContext', grpContextSvc);
            }

            if (grpContextSvc) {
                var ctx = grpContextSvc.getContext();
                this._currentProfileId = ctx.CurrentGroupID;
                this._currentProfileDescription = ctx.CurrentName;
            }
            this.service = Sage.Data.SDataServiceRegistry.getSDataService('system');
            this.titlePaneConfiguration = {
                tabs: this._getTabsConfig(),
                menu: this._getMenuConfig(),
                titleFmtString: this.securityManagerText + ': ${0}'
            }
            
            dojo.subscribe('/group/context/changed', this, 'onConfigurationChange');
        },
        _getListPanelConfig: function () {
            /*
            example urls for this list...
            http://localhost/SlxClient/slxdata.ashx/slx/system/-/securityProfiles
            http://localhost/SlxClient/slxdata.ashx/slx/system/-/securityProfiles("PROF00000001")?format=json

            http://localhost/SlxClient/slxdata.ashx/slx/system/-/securityProfileColumns("PROF00000001;ACCOUNT;ACCOUNT")?format=html
            http://localhost/SlxClient/slxdata.ashx/slx/system/-/securityProfileColumns?format=json
            http://localhost/SlxClient/slxdata.ashx/slx/system/-/securityProfileColumns?where=table eq "ACCOUNT" and profile.id eq "PROF00000001"
            */

            var refreshBtn = dijit.byId('refreshBtn');
            if (!this.refreshEvent) {
                this.refreshEvent = dojo.connect(refreshBtn, 'onClick', this, function () {
                    var listPanel = dijit.byId('list');
                    listPanel._markClean();
                });
            }

            var structure = [
                { field: 'table', name: this.tableText, width: '155px' },
                { field: 'entity', name: this.entityText, width: '130px' },
                { field: 'column', name: this.columnText, width: '140px' },
                { field: 'property', name: this.propertyText, width: '100px' },
                {
                    field: 'access',
                    name: this.accessText,
                    labels: [this.readWriteText, this.readOnlyText, this.noAccessText],
                    width: '300px',
                    type: RadioGroup,
                    options: ['ReadWrite', 'ReadOnly', 'NoAccess'],
                    editable: true
                }
            ];

            var where = (this._currentProfileId) ? dojo.string.substitute('profile.id eq "${0}"', [this._currentProfileId]) : '';

            if (!this.store) {
                //var store = new Sage.Data.SDataStore({
                this.store = new WritableSDataStore({
                    id: 'securityProfileColumns',
                    service: this.service,
                    isSecurityManager: true,
                    resourceKind: 'securityProfileColumns',
                    include: [],
                    select: ['table', 'entity', 'column', 'property', 'access'],
                    directQuery: { conditions: where }
                });
            } else {
                this.store.directQuery = { conditions: where };
            }
            this.listPanelConfiguration = {
                list: {
                    structure: structure,
                    store: this.store,
                    selectionMode: 'none',
                    id: 'securityManagerListConfig'
                },
                detail: false,
                //                {
                //                    resourceKind: 'securityProfiles',
                //                    loadingMsg: 'Loading...',
                //                    predicateProperty: '$key',
                //                    contentType: Sage.UI.FLSDetailPaneContent
                //                },
                summary: false,
                toolBar: {
                    items: [
                        {
                            icon: '~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16',
                            title: this.saveText,
                            onClick: dojo.hitch(this.store, "save")
                        },
                        {
                            icon: '~/ImageResource.axd?scope=global&type=Global_Images&key=Reset_16x16',
                            title: this.resetText,
                            onClick: dojo.hitch(this.store, "revert")
                        }
                    ]
                }
            };

            dojo.style(dijit.byId('addGroupButton').domNode, 'display', 'none');
            return this.listPanelConfiguration;
        },
        requestConfiguration: function (options) {
            //returns the list panel configuration through the success callback method...
            if (options.success) {
                options.success.call(options.scope || this, this._getListPanelConfig(), this);
            }
        },
        requestTitlePaneConfiguration: function (options) {
            //            this.titlePaneConfiguration = {
            //                tabs: this._getTabsConfig(),
            //                menu: this._getMenuConfig(),
            //                titleFmtString: 'Security Manager: ${0}'
            //            };
            if (options.success) {
                options.success.call(options.scope || this, this.titlePaneConfiguration, this);
            }
        },
        //handleGroupChanged: function(obj) {
        onConfigurationChange: function (obj) {
            this._currentProfileId = obj.current.CurrentGroupID;
            this._currentProfileDescription = obj.current.CurrentName;
            if (this._currentProfileId && this._currentProfileId.length === 12) {
                if (this._profileNameCache && this._profileNameCache.hasOwnProperty(this._currentProfileId)) {
                    this._setUIForNewGroup(false);
                } else {
                    this._profilesStore.fetch({
                        onComplete: dojo.hitch(this, '_setUIForNewGroup')
                    });
                }
            }
        },
        onTitlePaneConfigurationChange: function () {

        },
        _setUIForNewGroup: function (profileList) {
            if (profileList) {
                this._profileNameCache = {};
                for (var i = 0; i < profileList.length; i++) {
                    this._profileNameCache[profileList[i]['$key']] = profileList[i]['$descriptor'];
                }
            }

            //set title in title pane...
            var titlePane = dijit.byId('titlePane');
            if (titlePane) {
                titlePane.set('title', this._profileNameCache[this._currentProfileId]);
            }

            //select correct tab (without firing tab change event?...)
            var tabs = dijit.byId('GroupTabs');
            if (tabs) {
                var children = tabs.getChildren();
                for (var i = 0; i < children.length; i++) {
                    if (children[i].id === this._currentProfileId) {
                        tabs.selectChild(children[i], false);
                        break;
                    }
                }
            }
        },
        _getTabsConfig: function () {
            this._setProfilesStore();
            this._profilesStore.fetch({
                onComplete: dojo.hitch(this, '_setUIForNewGroup')
            });
            return {
                store: this._profilesStore,
                selectedTabId: this._currentProfileId,
                tabKeyProperty: '$key',
                tabNameProperty: 'profileDescription',
                fetchParams: {},
                staticTabs: [],
                onTabSelect: function (child) {
                    var grpContextSvc = Sage.Services.getService('ClientGroupContext');
                    if (grpContextSvc) {
                        var ctx = grpContextSvc.getContext();
                        var id = child.id || child;
                        if (ctx.CurrentGroupID === id) {
                            return;
                        }
                        var listPanel = dijit.byId('list');
                        listPanel._markClean();
                        grpContextSvc.setCurrentGroup(id, child.title);
                    }
                },
                onTabClose: false
            };

        },
        _setProfilesStore: function () {
            this._profilesStore = this._profilesStore || new WritableSDataStore({
                id: 'securityProfilesstore',
                service: this.service,
                resourceKind: 'securityProfiles',
                include: [],
                select: ['profileDescription', 'defaultPermission', 'profileType'],
                orderby: 'profileDescription'
            });
        },
        _getMenuConfig: function () {
            this._setProfilesStore();
            return {
                id: 'profileMenu',
                img: 'images/icons/Groups_16x16.gif',
                text: this.profilesText,
                tooltip: this.profilesText,
                width: '300px',
                items: [
                    {
                        fn: this._getProfileMenuGrid,
                        scope: this
                    }
                ]
            };
        },
        _getProfileMenuGrid: function () {
            return new Sage.UI.GridMenuItem({
                gridOptions: {
                    id: 'profileGridInMenu',
                    store: this._profilesStore,
                    rowsPerPage: 40,
                    structure: [
                        { field: 'profileDescription', name: 'Description', width: '290px'}//,
                    //{field: 'defaultPermission', name: 'Default Permission', width: '150px'},
                    //{field: 'profileType', name: 'Profile Type', width: '150px'}
                    ],
                    selectionMode: 'single',
                    query: {},
                    height: '400px',
                    width: '350px',
                    //formatterScope: fmtScope,
                    onSelected: function (idx) {
                        var profile = this.getItem(idx);
                        var ctxService = Sage.Services.getService('ClientGroupContext');
                        if (ctxService) {
                            var ctx = ctxService.getContext();
                            if (ctx.CurrentGroupID === profile['$key']) {
                                return;
                            }
                            
                            var groupTabs = dijit.byId('GroupTabs'),
                                groupTabChildren = groupTabs.getChildren();
                            for(var i = 0; i < groupTabChildren.length; i++) {
                                if(groupTabChildren[i].id == profile['$key']) {
                                    groupTabs.selectChild(groupTabChildren[i]);
                                    ctxService.setCurrentGroup(profile['$key'], profile.profileDescription);
                                    return;
                                }
                            }
                        }
                    }
                }
            });
        }

    });
    return securityManager;
});
},
'Sage/QuickForms/Design/Editors/TextBoxAdvancedPropertyEditor':function(){
define("Sage/QuickForms/Design/Editors/TextBoxAdvancedPropertyEditor", [
    'dojo/_base/declare',
    'dojo/_base/lang',
    'dijit/layout/ContentPane',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/Select',
    'Sage/_Templated',
    './_PropertyEditor',
    '../PropertyValueError',
    'dojo/i18n!./nls/TextBoxAdvancedPropertyEditor'
], function(
    declare,
    lang,
    ContentPane,
    TextBox,
    NumberTextBox,
    Select,
    _Templated,
    _PropertyEditor,
    PropertyValueError,
    localization)
{
    return declare('Sage.QuickForms.Design.Editors.TextBoxAdvancedPropertyEditor', [ContentPane, _PropertyEditor, _Templated], {
        widgetsInTemplate: true,
        contentTemplate: new Simplate([
            '<fieldset><legend>{%= $.appearanceText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlLabelPlacementTooltipText %}">',
                        '<label>{%= $.controlLabelPlacementText %}</label>',
                        '<div data-dojo-type="dijit.form.Select" data-dojo-attach-point="_controlLabelPlacement" data-dojo-attach-event="onChange:_onControlLabelPlacementChange">',
                        '{% for (var placement in $.labelPlacementText) { %}',
                            '<span value="{%= placement %}">{%= $.labelPlacementText[placement] %}</span>',
                        '{% } %}',
                        '</div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.visibleTooltipText %}">',
                        '<label>{%= $.visibleText %}</label>',
                        '<div data-dojo-attach-point="_visible" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onVisibleChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.behaviorText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.enabledTooltipText %}">',
                        '<label>{%= $.enabledText %}</label>',
                        '<div data-dojo-attach-point="_enabled" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onEnabledChange"></div>',
                    '</div>',
                    '<div class="editor-field" title="{%= $.maxLengthTooltipText %}">',
                        '<label>{%= $.maxLengthText %}</label>',
                        '<div data-dojo-type="dijit.form.NumberTextBox" data-dojo-attach-point="_maxLength" data-dojo-attach-event="onChange:_onMaxLengthChange" data-dojo-props="constraints:{min:-1,places:0}"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.requiredTooltipText %}">',
                        '<label>{%= $.requiredText %}</label>',
                        '<div data-dojo-attach-point="_required" data-dojo-type="dijit.form.CheckBox" data-dojo-attach-event="onChange:_onRequiredChange"></div>',
                    '</div>',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.dataText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.defaultDataBindingTooltipText %}">',
                        '<label>{%= $.defaultDataBindingText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_defaultDataBinding" data-dojo-attach-event="onChange:_onDefaultDataBindingChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                '</div>',
            '</fieldset>',

            '<fieldset><legend>{%= $.controlInfoText %}</legend>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlIdTooltipText %}">',
                        '<label>{%= $.controlIdText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlId" data-dojo-attach-event="onChange:_onControlIdChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
                '<div class="editor-content-half">',
                    '<div class="editor-field" title="{%= $.controlTypeTooltipText %}">',
                        '<label>{%= $.controlTypeText %}</label>',
                        '<div data-dojo-type="dijit.form.TextBox" data-dojo-attach-point="_controlType" data-dojo-attach-event="onChange:_onControlTypeChange" data-dojo-props="disabled:true"></div>',
                    '</div>',
                '</div>',
            '</fieldset>'
        ]),

        _controlType: null,
        _controlId: null,
        _enabled: null,
        _controlLabelPlacement: null,
        _defaultDataBinding: null,
        _maxLength: null,
        _required: null,
        _visible: null,

        //Localization
        titleText: 'Advanced',

        appearanceText: 'Appearance',
        behaviorText: 'Behavior',
        controlInfoText: 'Control Info',
        dataText: 'Data',

        controlIdText: 'Control Id:',
        controlIdTooltipText: 'Identifier for this control.',
        controlLabelPlacementText: 'Label Placement:',
        controlLabelPlacementTooltipText: 'Label position in relation to the control.',
        controlTypeText: 'Control Type:',
        controlTypeTooltipText: 'Sage SalesLogix control type.',
        defaultDataBindingText: 'Data Bindings:',
        defaultDataBindingTooltipText: 'Data field(s) in the database used by this control.',
        enabledText: 'Enabled:',
        enabledTooltipText: 'Allows user to interact with this control.',
        maxLengthText: 'Max Length:',
        maxLengthTooltipText: 'Maximum number of characters user can enter.',
        requiredText: 'Required:',
        requiredTooltipText: 'Requires a value when saving data.',
        visibleText: 'Visible:',
        visibleTooltipText: 'Show or hide this control on the form.',
        labelPlacementText: {
            'left': 'Left',
            'right': 'Right',
            'top': 'Top',
            'none': 'None'
        },

        constructor: function() {
            lang.mixin(this, localization);
        },
        setup: function(){
            this.inherited(arguments);

            this._controlType.set('value', this._designer.get('controlName'));
            this._controlId.set('value', this._designer.get('controlId'));
            this._enabled.set('value', this._designer.get('enabled'));
            this._controlLabelPlacement.set('value', this._designer.get('controlLabelPlacement'));
            this._maxLength.set('value', this._designer.get('maxLength'));
            this._required.set('value', this._designer.get('required'));
            this._visible.set('value', this._designer.get('visible'));

            var binding = this._designer.get('defaultDataBinding');
            this._defaultDataBinding.set('value', (binding && binding['DataItemName']) || '');
        },

        _onControlTypeChange: function(value){
        },
        _onControlIdChange: function(value){
        },
        _onDefaultDataBindingChange: function(value){
        },
        _onEnabledChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('enabled', value);
        },
        _onControlLabelPlacementChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('controlLabelPlacement', value);
        },
        _onMaxLengthChange: function(value){
            if (this.isSuspended() || !this._maxLength.isValid()) return;
            this._designer.set('maxLength', value);
        },
        _onRequiredChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('required', value);
        },
        _onVisibleChange: function(value){
            if (this.isSuspended()) return;
            this._designer.set('visible', value);
        }
    });
});
},
'Sage/UI/Calendar':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Calendar", [
        'dijit/Calendar',
        'dojo/_base/declare'
    ],
    function (dijitCalendar, declare) {
        var calendar = declare('Sage.UI.Calendar', dijitCalendar, {
            _dateModifiedExternal: false,
            displayMode: '',
            constructor: function (options) {
                this.displayMode = options.displayMode;
                var self = this;

                //displaymode "popup" is for the calendar defined in Sage/UI/Controls/DatetimePicker.html
                if (this.displayMode === "popup") {
                    dojo.connect(this, "_setValueAttr", function (/*Date|Number*/value, /*Boolean*/priorityChange) {
                        // summary:
                        //		Support set("value", ...)
                        // description:
                        // 		Set the current date and update the UI.  If the date is disabled, the value will
                        //		not change, but the display will change to the corresponding month.
                        // value:
                        //		Either a Date or the number of seconds since 1970.
                        // tags:
                        //      protected
                        if (value) {
                            // convert from Number to Date, or make copy of Date object so that setHours() call below
                            // doesn't affect original value
                            value = new self.dateClassObj(value);
                        }
                        if (self._isValidDate(value)) {
                            //if (!self._isValidDate(self.value) || self.dateFuncObj.compare(value, self.value)) {
                            //SalesLogix update : Commented above condition to allow the clicking on current date so that we can close the popup
                            value.setHours(1, 0, 0, 0); // round to nearest day (1am to avoid issues when DST shift occurs at midnight, see #8521, #9366)

                            if (!self.isDisabledDate(value, self.lang)) {
                                self._set("value", value);

                                // Set focus cell to the new value.   Arguably this should only happen when there isn't a current
                                // focus point.   This will also repopulate the grid, showing the new selected value (and possibly
                                // new month/year).
                                if (self.monthWidget && self.monthWidget.dropDown) {
                                    self.set("currentFocus", value);
                                }

                                if (priorityChange || typeof priorityChange == "undefined") {
                                    self.onChange(self.get('value'));
                                }
                            }
                            // }
                        } else {
                            // clear value, and repopulate grid (to deselect the previously selected day) without changing currentFocus
                            self._set("value", null);
                            self.set("currentFocus", self.currentFocus);
                        }
                    });
                } else {
                    dojo.subscribe("/entity/activity/calendar/schedulerDateChanged", function (data) {
                        (function () {
                            self._dateModifiedExternal = true;
                            self.set('value', data.date);
                            self._dateModifiedExternal = false;
                        })();
                    });
                    /**
                    This will keep the date selected when the month/year changed
                    */
                    dojo.connect(this, "_setCurrentFocusAttr", function (date) {
                        self.set('value', date);
                    });
                }
                this.inherited(arguments);
            },
            onValueSelected: function (date) {
                if (this.displayMode != "popup") {
                    if (!this._dateModifiedExternal) {
                        this._dateModifiedExternal = false;
                        dojo.publish('/entity/activity/calendar/navigationCalendarDateChanged', [date, this]);
                        this._dateModifiedExternal = false;
                    }
                }
            },
            getClassForDate: function (date) {
                var day = date.getDay();
                if ((day == 6) || (day == 0)) {
                    return "dijitCalendarWeekEndDate";
                }
            }
        });
        return calendar;
    });
   
},
'Sage/QuickForms/Design/nls/EmailControlDesigner':function(){
﻿define("Sage/QuickForms/Design/nls/EmailControlDesigner", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            displayNameText: "Email"
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/UI/Controls/nls/Lookup':function(){
﻿define("Sage/UI/Controls/nls/Lookup", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            buttonToolTip: 'Find',
            closeButtonToolTip: 'Remove'
        }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Utility/File/nls/DescriptionsForm':function(){
﻿define("Sage/Utility/File/nls/DescriptionsForm", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        titleFmt: 'Add Attachment(s) for ${0}',
        titleLibraryDoc: 'Add Library Document (s)',
        fileNameText: 'File name and size: ',
        descText: 'Description:',
        okText: 'OK',
        cancelText: 'Cancel'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/TaskPane/OpportunityTasksTasklet':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/TaskPane/OpportunityTasksTasklet", [
    'dojo/i18n!./nls/OpportunityTasksTasklet',
    'Sage/TaskPane/_BaseTaskPaneTasklet',
    'Sage/TaskPane/TaskPaneContent',
    'Sage/MainView/Opportunity/UpdateOpportunities',
    'Sage/MainView/Opportunity/OpportunityStatistics',
    'dojo/_base/declare'
],
function (i18nStrings, _BaseTaskPaneTasklet, TaskPaneContent, UpdateOpportunities, OpportunityStatistics, declare) {
    var opportunityTasksTasklet = declare('Sage.TaskPane.OpportunityTasksTasklet', [_BaseTaskPaneTasklet, TaskPaneContent], {
        updateOpportunitiesTitle: 'Update Opportunities',
        opportunityStatisticsTitle: 'Opportunity Statistics',
        taskItems: [],
        constructor: function () {
            dojo.mixin(this, i18nStrings);
            this.taskItems = [
                { taskId: 'UpdateOpportunities', type: "Link", displayName: this.updateOpportunitiesTitle, clientAction: 'opportunityTasksActions.updateOpportunities();',
                    securedAction: 'Entities/Opportunity/MultiUpdate'
                },
                { taskId: 'OpportunityStatistics', type: "Link", displayName: this.opportunityStatisticsTitle, clientAction: 'opportunityTasksActions.opportunityStatistics();',
                    securedAction: 'Entities/Opportunity/OpportunityStatistics'
                }
            ];
        },
        updateOpportunities: function () {
            this.prepareSelectedRecords(this.updateOpportunitiesActionItem(this.getSelectionInfo()));
        },
        updateOpportunitiesActionItem: function (selectionInfo) {
            return function () {
                var updateDialog = dijit.byId("dlgUpdateMultipleOpps");
                if (!updateDialog) {
                    updateDialog = new UpdateOpportunities(selectionInfo);
                } else {
                    updateDialog.setSelectionInfo(selectionInfo);
                }
                updateDialog.show();
            };
        },
        opportunityStatistics: function () {
            this.prepareSelectedRecords(this.opportunityStatisticsActionitem(this.getSelectionInfo()));
        },
        opportunityStatisticsActionitem: function (selectionInfo) {
            return function () {
                var dialog = new OpportunityStatistics(selectionInfo);
                dialog.show();
            };
        }
    });
    return opportunityTasksTasklet;
});
},
'Sage/UI/Controls/SimpleTextarea':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/Controls/SimpleTextarea", [
       'dijit/form/SimpleTextarea',
       'dojo/_base/declare'
],
function (simpleTextarea, declare) {
    var widget = declare("Sage.UI.Controls.SimpleTextarea", [simpleTextarea], {
        baseClass: "dijitTextBox dijitTextArea sageTextArea",
        templateString: "<div><textarea ${!nameAttrSetting} dojoAttachPoint='focusNode,containerNode,textbox' autocomplete='off'></textarea></div>",
        hotKey: '',
        multiLineMaxLength: '',
        shouldPublishMarkDirty: true,
        _setHotKeyAttr: { node: 'textbox', type: 'attribute', attribute: 'accessKey' },
        constructor: function (args) {
            this.maxLength = args.multiLineMaxLength;
        },
        onChange: function (e) {
            if (this.shouldPublishMarkDirty) {
                dojo.publish("Sage/events/markDirty");
            }
            this.inherited(arguments);
        }
    });
    return widget;
});
},
'Sage/UI/SLXPreviewGrid/FilterPanel':function(){
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SLXPreviewGrid/FilterPanel", [
        'dijit/form/Button',
        'dijit/_Widget',
        'Sage/Utility/_LocalStorageMixin',
        'dojo/i18n!../nls/SLXPreviewGrid',
        'dojo/_base/declare'
],
function (Button, _Widget, _LocalStorageMixin, previewGridStrings, declare) {
    var filterPanel = declare("Sage.UI.SLXPreviewGrid.FilterPanel", [_Widget, _LocalStorageMixin], {
        // summary:
        //  Master filter panel for the grid.
        //  At construction time the "filterConfig" option should be set to an array of filter configuration objects.
        //  They must contain a property "widgetType" - type of the widget to instantiate (must have a "getQuery" method)
        //  and should have a "field" property, which usually will be used by the filter widget to build the query,
        //  and a "label" property.
        //  The rest of the options are passed down to that widget's constructor.
        // array of filter widgets
        _filters: null,
        _state: {},
        STORE_NS: 'SAGE_UI_EDITABLEGRID', //this is the same as the grid
        STORE_KEY_FILTERINFO: '_FILTER_INFO_',

        //i18n strings:
        applyText: 'Apply',
        resetText: 'Reset',
        //end i18n strings.

        /////////////////////////////////////
        // Widget lifecycle

        constructor: function () {
            this._filters = [];
        },
        postMixInProperties: function () {
            dojo.mixin(this, previewGridStrings);
            this._loadState();
            this.inherited(arguments);
        },
        buildRendering: function () {
            // summary:
            //  build the child filter widgets
            this.inherited(arguments);
            this.domNode.className = "filterPanel";
            var left = document.createElement("div");
            left.style.styleFloat = left.style.cssFloat = "left";
            left.style.width = "39%";
            var right = document.createElement("div");
            right.style.styleFloat = right.style.cssFloat = "left";
            right.style.width = "39%";

            var filterStates = this._state['filterStates'] || {};
            var target = left;
            dojo.forEach(this.filterConfig, function (item, index, ar) {

                if (target === left && index + 1 > ar.length / 2) {
                    target = right;
                }
                var filterItem = document.createElement("div");
                filterItem.className = "filterItem";
                var filter = this._createFilter(item);
                if (filterStates[item.field] && filter.applyState) {
                    filter.applyState(filterStates[item.field]);
                }
                this._filters.push(filter);
                if (item.label) {
                    var lbl = document.createElement("label");
                    lbl.appendChild(document.createTextNode(item.label + ":"));
                    lbl.className = "filterPanelLabel";
                    lbl.htmlFor = filter.domNode.id;
                    filterItem.appendChild(lbl);
                }
                filterItem.appendChild(filter.domNode);
                target.appendChild(filterItem);
            }, this);

            // create apply / reset buttons and add to right columns
            var btnPanel = document.createElement("div");
            btnPanel.style.styleFloat = btnPanel.style.cssFloat = "left";
            btnPanel.style.width = "20%";
            btnPanel.className = "filterButtonPanel";
            var btnOk = new Button({ label: this.applyText });
            btnPanel.appendChild(btnOk.domNode);
            dojo.connect(btnOk, "onClick", this, "_applyFilter");
            var btnReset = new Button({ label: this.resetText });
            btnPanel.appendChild(btnReset.domNode);
            dojo.connect(btnReset, "onClick", this, "_resetFilter");
            dojo.connect(this.domNode, "keydown", this, function (e) {
                if (e.keyCode === 13) {
                    this._applyFilter();
                }
            });

            this.domNode.appendChild(left);
            this.domNode.appendChild(right);
            this.domNode.appendChild(btnPanel);
        },
        startup: function () {
            this.inherited(arguments);
            dojo.forEach(this._filters, function (item) { item.startup(); });
            if (this._state['visible'] && this._state['visible'] === true) {
                this.toggle();
            }
        },
        destroy: function () {
            dojo.forEach(this._filters, function (item) {
                item.destroy(false);
            });

            dojo.forEach(dijit.findWidgets(this.domNode), function (wid) {
                wid.destroy(false);
            });

            this.inherited(arguments);
        },
        /////////////////////////////////////
        // Public API

        getQuery: function () {
            // summary:
            //  build and return the sdata query string for the filter.  If no conditions are specified then it will return null.
            var c = [];
            dojo.forEach(this._filters, function (f) {
                var q = f.getQuery();
                if (q) {
                    c.push(q);
                }
            });
            return c.length > 0 ? c.join(" and ") : null;
        },

        toggle: function () {
            if (this.domNode.style.display === "none") {
                this.domNode.style.display = "block";
                this._state['visible'] = true;
            }
            else {
                this.domNode.style.display = "none";
                this._state['visible'] = false;
            }
            this._saveState();
        },

        /////////////////////////////////////
        // Events

        onFilterApply: function (conditions) {
            // summary:
            //  callback when the filter should be applied
            // conditions:
            //  conditions query string
        },

        /////////////////////////////////////
        // Private Helpers

        _createFilter: function (filterConfig) {
            // summary:
            //  instantiate and return a filter widget
            var c = filterConfig.widgetType;
            return new c(filterConfig);
        },

        _applyFilter: function () {
            var filterStates = {};
            for (var i = 0; i < this._filters.length; i++) {
                var f = this._filters[i];
                if (f.getState) {
                    filterStates[f.field] = f.getState();
                }
            }
            this._state['filterStates'] = filterStates;
            this._saveState();
            this.onFilterApply(this.getQuery());
        },

        _resetFilter: function () {
            dojo.forEach(this._filters, function (f) { f.reset(); });
            this._applyFilter();
        },

        _saveState: function () {
            var key = this.STORE_KEY_FILTERINFO + this.id;
            this.saveToLocalStorage(key, this._state, this.STORE_NS);
        },
        _loadState: function () {
            var key = this.STORE_KEY_FILTERINFO + this.id;
            this._state = this.getFromLocalStorage(key, this.STORE_NS) || {};
        }
    });

    return filterPanel;
});
},
'Sage/QuickForms/Design/Editors/nls/NumericBasicPropertyEditor':function(){
﻿define("Sage/QuickForms/Design/Editors/nls/NumericBasicPropertyEditor", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            titleText: "Basic",
            appearanceText: "Appearance",
            behaviorText: "Behavior",
            captionText: "Caption:",
            captionTooltipText: "The label to display on the form for this control.",
            captionAlignmentText: "Caption Alignment:",
            captionAlignmentTooltipText: "Justification of the label text.",
            isReadOnlyText: "Read Only:",
            isReadOnlyTooltipText: "Does not allow edits.",
            toolTipText: "Tooltip:",
            toolTipTooltipText: "Short help text about control.",
            alignmentText: {
                left: "Left",
                center: "Center",
                right: "Right"
            }
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/TaskPane/nls/CommonTasksTasklet':function(){
﻿define("Sage/TaskPane/nls/CommonTasksTasklet", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
        okButtonText: 'OK',
        loadingText: 'loading...',
        noPrimaryEmail: 'No primary email available',
        selectFileFormat: 'Select a file format:',
        exportToFile_OptionCSV: 'Standard CSV',
        exportToFile_OptionTab: 'Tab delimited (recommended for Microsoft Excel)',
        exportToFile_OptionSaveFormat: 'Remember my selection and do not ask again.',
        exportToFile_OK: 'OK',
        exportToFile_Cancel: 'Cancel',
        exportToFile_DialogTitle: 'Export to File',
        errorExecutionAction: 'An error occurred executing action ${0}'
    }
    };
    return lang.mixin(LanguageList, nls);
});

},
'Sage/Utility/File':function(){
﻿/*globals Sage, define, FileReader, FormData, window */
define("Sage/Utility/File", [
    'Sage/UI/Dialogs',
    'dojo/number'
],
function (dialogs, dNumber) {
    Sage.namespace('Utility.File');
    Sage.Utility.File = {
        fileType: {
            ftAttachment: 0,
            ftLibraryDocs: 1
        },
        unableToUploadText: 'Sage SalesLogix Desktop Integration Module must be installed to use this feature.',
        unknownSizeText: 'unknown',
        supportsHTML5File: (window.File && window.FileReader && window.FileList && window.Blob),
        largeFileWarningText: 'Warning: This request exceed the size limit set by your administrator and fail to upload.',
        largeFileWarningTitle: 'Warning',
        fileUploadOptions: { maxFileSize: 4000000 },
        init: function (options) {
            if (options) {
                this.fileUploadOptions = options;
            }
        },
        isFileSizeAllowed: function (files) {
            var l = 0;
            var maxfileSize = Sage.Utility.File.fileUploadOptions.maxFileSize;
            var title = Sage.Utility.File.largeFileWarningTitle;
            var msg = Sage.Utility.File.largeFileWarningText;
            for (var i = 0; i < files.length; i++) {
                if (files[i].size === 0) {
                    // do nothing.
                } else {

                    l += files[i].size || files[i].blob.length;
                }
            }
            if (l > (maxfileSize)) {
                dialogs.showError(msg, title);
                return false;

            }
            return true;
        },
        uploadFile: function (file, url, progress, complete, error, scope, asPut) {
            if (!Sage.Utility.File.isFileSizeAllowed([file])) {
                return;
            }
            if (Sage.gears) {
                this._uploadFileGears(file, url, progress, complete, error, scope, asPut);
            } else if (this.supportsHTML5File) {
                if (window.FileReader.prototype.readAsBinaryString) {
                    this._uploadFileHTML5_asBinary(file, url, progress, complete, error, scope, asPut);
                } else {
                    this._uploadFileHTML5(file, url, progress, complete, error, scope, asPut);
                }
            } else {
                this._showUnableToUploadError();
            }
        },
        uploadFileHTML5: function (file, url, progress, complete, error, scope, asPut) {
            if (!Sage.Utility.File.isFileSizeAllowed([file])) {
                return;
            }
            if (this.supportsHTML5File) {
                if (window.FileReader.prototype.readAsBinaryString) {
                    this._uploadFileHTML5_asBinary(file, url, progress, complete, error, scope, asPut);
                } else {
                    this._uploadFileHTML5(file, url, progress, complete, error, scope, asPut);
                }
            } else {
                this._showUnableToUploadError();
            }
        },
        _uploadFileGears: function (file, url, progress, complete, error, scope, asPut) {
            if (!window.Sage && !Sage.gears) {
                this._showUnableToUploadError();
                return;
            }
            if (!url) {
                //assume Attachment SData url
                url = 'slxdata.ashx/slx/system/-/attachments/file?format=json';
            }
            var request = Sage.gears.factory.create('beta.httprequest');
            request.open((asPut) ? 'PUT' : 'POST', url);

            //var boundary = '------multipartformboundary' + (new Date()).getTime();
            var boundary = "---------------------------" + (new Date()).getTime();
            var dashdash = '--';
            var crlf = '\r\n';

            var builder = Sage.gears.factory.create('beta.blobbuilder');
            //for (var i = 0; i < files.length; i++) {
            /* Write boundary. */
            builder.append(dashdash);
            builder.append(boundary);
            builder.append(crlf);
            //var file = files[i];
            /* Generate headers. */
            //builder.append('Content-Disposition: form-data; name="file_"'); // + i + '"'); // will not work for raw binary
            builder.append('Content-Disposition: attachment; name="file_"'); // + i + '"');

            if (file.name) {
                builder.append('; filename*="' + encodeURI(file.name) + '"');
            }
            builder.append(crlf);

            builder.append('Content-Type: application/octet-stream');
            builder.append(crlf);
            builder.append(crlf);

            /* Append binary data. */
            builder.append(file.blob);
            builder.append(crlf);
            //}
            /* Mark end of the request. */
            builder.append(dashdash);
            builder.append(boundary);
            builder.append(dashdash);
            builder.append(crlf);

            if (typeof (complete) === 'function') {
                request.onreadystatechange = function () {
                    if (request.readyState === 4) {
                        //console.log(JSON.parse(xhr.responseText.replace(/^\{\}&&/, '')));
                        if (Math.floor(request.status / 100) !== 2) {
                            if (typeof (error) === 'function') {
                                error.call(scope || this, request);
                            }
                        } else {
                            complete.call(scope || this, request);
                        }
                    }
                };
            }

            if (typeof (progress) === 'function') {
                request.upload.onprogress = function (prog) {
                    // { total : 500, loaded : 250, lengthComputable : true };  <-- example progress object
                    progress.call(scope || this, prog);
                };
            }
            request.setRequestHeader('Content-Type', 'multipart/attachment; boundary=' + boundary);
            // request.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary); //will not work for raw binary
            var blob = builder.getAsBlob();
            request.send(blob);
        },
        _uploadFileHTML5: function (file, url, progress, complete, error, scope, asPut) {            
            if (!this.supportsHTML5File || !window.FormData) {
                this._showUnableToUploadError();
                return;
            }
            if (!url) {
                //assume Attachment SData url
                url = 'slxdata.ashx/slx/system/-/attachments/file';
            }
            var fd = new FormData();
            //fd.append('filename*', encodeURI(file.name)); //Does not work
            fd.append('file_', file, encodeURI(file.name)); // Does not work
            //fd.name = encodeURI(file.name)
            var request = new XMLHttpRequest();

            request.open((asPut) ? 'PUT' : 'POST', url);
            request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            if (complete) {
                request.onreadystatechange = function () {
                    if (request.readyState === 4) {
                        //console.log(JSON.parse(xhr.responseText.replace(/^\{\}&&/, '')));
                        if (Math.floor(request.status / 100) !== 2) {
                            if (error) {
                                error.call(scope || this, request);
                            }
                        } else {
                            complete.call(scope || this, request);
                        }
                    }
                };
            }
            if (progress) {
                request.upload.addEventListener('progress', function (e) {
                    progress.call(scope || this, e);
                });
            }
            request.send(fd);
        },
        _uploadFileHTML5_asBinary: function (file, url, progress, complete, error, scope, asPut) {            
            if (!this.supportsHTML5File) {
                this._showUnableToUploadError();
                return;
            }
            if (!url) {
                //assume Attachment SData url
                url = 'slxdata.ashx/slx/system/-/attachments/file';
            }
            var request = new XMLHttpRequest();
            request.open((asPut) ? 'PUT' : 'POST', url);
            request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            var reader = new FileReader();
            reader.onload = function (evt) {               
                var binary = evt.target.result;
                var boundary = "---------------------------" + (new Date()).getTime();
                var dashdash = '--';
                var crlf = '\r\n';
                var msg = dashdash + boundary + crlf;
                //msg += 'Content-Disposition: form-data; '; //Will not work for raw binary
                msg += 'Content-Disposition: attachment; ';
                msg += 'name="file_"; ';
                msg += 'filename*="' + encodeURI(file.name) + '" ';
                msg += crlf;
                msg += 'Content-Type: ' + file.type;
                msg += crlf + crlf;
                msg += binary;
                msg += crlf;
                msg += dashdash + boundary + dashdash + crlf;

                if (complete) {
                    request.onreadystatechange = function () {
                        if (request.readyState === 4) {

                            //console.log(JSON.parse(xhr.responseText.replace(/^\{\}&&/, '')));
                            console.log('responseText: ' + request.responseText);

                            if (Math.floor(request.status / 100) !== 2) {
                                if (error) {
                                    error.call(scope || this, request);
                                }
                            } else {
                                complete.call(scope || this, request);
                            }
                        }
                    };
                }
                if (progress) {
                    request.upload.addEventListener('progress', function (e) {
                        progress.call(scope || this, e);
                    });
                }
                //request.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary); //Will not work for raw binary
                request.setRequestHeader('Content-Type', 'multipart/attachment; boundary=' + boundary);
                
                if (request.sendAsBinary) {
                    request.sendAsBinary(msg);
                } else {
                    request.send(msg);
                }
                   
            };            
            reader.readAsBinaryString(file);
        },
        _showUnableToUploadError: function () {
            dialogs.showError(this.unableToUploadText);
        },
        formatFileSize: function (size) {
            size = parseInt(size, 10);
            if (size === 0) {
                return '0 KB';
            }
            if (!size || size < 0) {
                return this.unknownSizeText;
            }
            if (size < 1024) {
                return '1 KB';
            }
            return dNumber.format(Math.round(size / 1024)) + ' KB';
        }
    };

    return Sage.Utility.File;
});
},
'Sage/UI/ConditionManager':function(){
﻿/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/ConditionManager", [
       'Sage/_Templated',
       'dijit/_Widget',
       'dijit/form/Select',
       'dijit/form/Button',
       'Sage/UI/ImageButton',
       'Sage/UI/SearchConditionWidget',
       'Sage/Utility',
       'dojo/i18n!./nls/ConditionManager',
       'dojo/_base/declare'
],
function (_Templated, _Widget, select, button, imageButton, SearchConditionWidget, util, nls, declare) {
    //dojo.requireLocalization('Sage.UI', 'ConditionManager');

    var widget = declare('Sage.UI.ConditionManager', [_Widget, _Templated], {
        widgetsInTemplate: true,
        srchBtnCaption: 'Search',
        addrowlabel: 'Lookup by:',
        hiderowlabel: 'And:',

        hideimgurl: 'images/icons/Find_Remove_16x16.gif',
        addimgurl: 'images/icons/Find_Add_16x16.gif',
        hideimgalttext: 'Remove Condition',
        addimgalttext: 'Add Condition',
        errorOperatorRequiresValue: 'The operator requires a value',

        equalTo: 'Equal to',
        notEqualTo: 'Not Equal to',
        startingWith: 'Starting With',
        contains: 'Contains',
        equalOrLessThan: 'Equal or Less than',
        equalOrGreaterThan: 'Equal or Greater than',
        lessThan: 'Less than',
        greaterThan: 'Greater than',
        //end localize

        operators: null,
        fields: null,
        fieldsHash: null,
        fieldNameProperty: 'fieldname',
        fieldDisplayNameProperty: 'displayname',
        fieldTypeProperty: 'propertyType',
        fieldPickListNameProperty: 'pickListName',
        conditionWidgets: null,
        widgetConnects: null,
        widgetTemplate: new Simplate([
            '<div id="{%= $.id %}" class="lookup-condition-manager">',
                '<table cellspacing="0" cellpadding="3">',
                    '<tr><td><div dojoAttachPoint="conditions"></div></td></tr>', 
                '</table>',
                '<div class="lookup-condition-actions">',
                '<button id="{%= $.id %}-Search" data-dojo-type="dijit.form.Button" type="button" dojoAttachPoint="searchButton" dojoAttachEvent="onClick:_doSearch">{%= $.srchBtnCaption %}</button>',
                '</div>',
            '</div>']),
        isSettingValues: false,
        id: '',
        constructor: function() {
            this.conditionWidgets = {};
            this.operators = {};
            this.fieldsHash = {};
            this.fields = [];
            this.widgetConnects = [];
        },
        destroy: function() {
            var wid,
                i;
            
            for (i = 0; i < this.widgetConnects.length; i++) {
                dojo.disconnect(this.widgetConnects[i]);
            }
            
            for (wid in this.conditionWidgets) {
                if(this.conditionWidgets.hasOwnProperty(wid)) {
                    if (this.conditionWidgets[wid].destroy) {
                        this.conditionWidgets[wid].destroy();
                    }
                }
            }
            
            this.inherited(arguments);
        },
        postMixInProperties: function () {
            dojo.mixin(this, nls);
            this.inherited(arguments);
        },
        getOperatorsByField: function(field) {
            var boolOptions,
                stringLikeOptions,
                basicOptions,
                picklistControlOptions,
                operators;
                
            //build this after localization has been applied:
            //these are in the format of: dijit.form.__SelectOption 
            boolOptions = [
                { value: 'eq', label: this.equalTo, selected: false, disabled: false },
                { value: 'ne', label: this.notEqualTo, selected: false, diabled: false }   
            ];

            stringLikeOptions = [
                { value: 'sw', label: this.startingWith, selected: false, disabled: false },
                { value: 'like', label: this.contains, selected: false, diabled: false },
                { value: 'eq', label: this.equalTo, selected: false, diabled: false },
                { value: 'ne', label: this.notEqualTo, selected: false, diabled: false },
                { value: 'le', label: this.equalOrLessThan, selected: false, diabled: false },
                { value: 'ge', label: this.equalOrGreaterThan, selected: false, diabled: false },
                { value: 'lt', label: this.lessThan, selected: false, diabled: false },
                { value: 'gt', label: this.greaterThan, selected: false, diabled: false }
            ];

            basicOptions = [
                { value: 'eq', label: this.equalTo, selected: false, diabled: false },
                { value: 'ne', label: this.notEqualTo, selected: false, diabled: false },
                { value: 'le', label: this.equalOrLessThan, selected: false, diabled: false },
                { value: 'ge', label: this.equalOrGreaterThan, selected: false, diabled: false },
                { value: 'lt', label: this.lessThan, selected: false, diabled: false },
                { value: 'gt', label: this.greaterThan, selected: false, diabled: false }
            ];

            picklistControlOptions = [
                 { value: 'eq', label: this.equalTo, selected: false, diabled: false },
                 { value: 'ne', label: this.notEqualTo, selected: false, diabled: false }
            ];
            
            operators = {
                "System.Boolean": {
                    options: boolOptions 
                },
                "Boolean": {
                    options: boolOptions 
                },
                "System.String": { 
                    options: stringLikeOptions
                },
                "SalesLogix.PickList": {
                    options: picklistControlOptions
                },
                "Sage.Entity.Interfaces.UserType": {
                    options: basicOptions
                },
                "Sage.Entity.Interfaces.OwnerType": {
                    options : basicOptions
                },
                "System.DateTime": {
                    options: basicOptions
                },
                "DateTime": {
                    options: basicOptions
                },
                "Phone": {
                    options: stringLikeOptions
                },
                "User": {
                    options: stringLikeOptions
                },
                "Owner": {
                    options: stringLikeOptions
                },
                "System.Double": {
                    options: basicOptions 
                },
                "System.Int32": {
                    options: basicOptions 
                },
                "System.Int16": {
                    options: basicOptions 
                },
                "System.Decimal": {
                    options: basicOptions 
                },
                "Fixed": {
                    options: basicOptions 
                },
                "Decimal": {
                    options: basicOptions 
                },
                "Integer": {
                    options: basicOptions 
                },
                "Positive Integer": {
                    options: basicOptions 
                },
                "Currency": {
                    options: basicOptions 
                },
                "Percent": {
                    options: basicOptions 
                },
                "defaultOperators": {
                    options: stringLikeOptions 
                },
                "None": {
                    options: stringLikeOptions
                }
            };

            if ((field.hasOwnProperty(this.fieldTypeProperty)) && (operators.hasOwnProperty(field[this.fieldTypeProperty]))) {
                return operators[field[this.fieldTypeProperty]].options;
            }
            return operators.defaultOperators && operators.defaultOperators.options;
        },
        getConditionsAsUrlWhereString : function () {
            //console.log('ConditionManager :: getConditionsAsUrlWhereString');
            //manipulate conditions to match SData requirements for where URL parameter...
            var conds = this.getConditions(),
                condString = [],
                condVal = null,
                i,
                tempCondition,
                lhd, rhd, lhs, rhs,
                dateFormat;
                
            for (i = 0; i < conds.length; i++) {
                condVal = conds[i].val;
                if (typeof condVal === 'string') {
                    condVal = condVal.replace(/%/g, '');
                }

                if (condVal.constructor === Date){
                    // Handle equal to and not equal to as a special case.
                    // - They need to be in a range from start to end of date
                    if (conds[i].operator === 'eq' || conds[i].operator === 'ne') {
                        lhd = condVal;
                        rhd = condVal;
                        
                        lhd.setHours(0);
                        lhd.setMinutes(0);
                        lhd.setSeconds(0);
                        lhs = util.Convert.toIsoStringFromDate(lhd);
                        
                        rhd.setHours(23);
                        rhd.setMinutes(59);
                        rhd.setSeconds(59);
                        rhs = util.Convert.toIsoStringFromDate(rhd);
                        
                        // eq:(somedate > lhs and somedate < rhs)
                        // ne: (somedate < lhs or somedate > rhs)
                        dateFormat = {
                            field: conds[i].fieldname,
                            leftOp: 'gt', 
                            leftVal: lhs,
                            rightOp: 'lt', 
                            rightVal: rhs,
                            join: 'and'
                        };
                        
                        // Switch operators for not equal
                        if (conds[i].operator === 'ne') {
                            dateFormat.leftOp = 'lt';
                            dateFormat.rightOp = 'gt';
                            dateFormat.join = 'or';
                        }
                        
                        condString.push(dojo.string.substitute("(${field} ${leftOp} '${leftVal}' ${join} ${field} ${rightOp} '${rightVal}')", dateFormat));
                        continue;
                    } else if (conds[i].operator === 'le' || conds[i].operator === 'gt') {
                        /* less than/equal, greater than */
                        condVal.setHours(23);
                        condVal.setMinutes(59);
                        condVal.setSeconds(59);
                        
                    } else if (conds[i].operator === 'ge' || conds[i].operator === 'lt') {
                        /* greater than/equal, less than */
                        condVal.setHours(0);
                        condVal.setMinutes(0);
                        condVal.setSeconds(0);
                    }
                    
                    condVal = util.Convert.toIsoStringFromDate(condVal);
                }

                tempCondition = {
                    field: conds[i].fieldname,
                    op: conds[i].operator,
                    val: condVal
                };

                var fld = this.getField(conds[i].fieldname);
                if (fld && fld.propertyType === "SalesLogix.PickList") {
                    if (typeof condVal === "object" && condVal[0]) {
                        tempCondition.val = condVal[0];
                    }
                }
                
                if (tempCondition.op === 'like') {
                    tempCondition.val = ['%', tempCondition.val, '%'].join('');
                } else if (tempCondition.op === 'sw') {
                    tempCondition.op = 'like';
                    tempCondition.val += '%';
                }

                if (typeof tempCondition.val === 'string') {
                    tempCondition.val = ['"', tempCondition.val.toUpperCase(), '"'].join('');// wrap string in quotes
                    tempCondition.field = ['upper(', tempCondition.field, ')'].join('');// make search case insensitive
                }
                
                condString.push([tempCondition.field, ' ', tempCondition.op, ' ', tempCondition.val].join(''));
            }
            
            return condString.join(' and ');
        },
        getField: function (fieldName) {
            if (this.fieldsHash && this.fieldsHash.hasOwnProperty(fieldName)) {
                return this.fieldsHash[fieldName];
            }
            return false;
        },
        getConditionsJSON : function () {
            var i = 0,
                conditions = this.getConditions(),
                condVal,
                currentCondition;
            for (i = 0; i < conditions.length; i++) {
                currentCondition = conditions[i];
                condVal = conditions[i].val;
                if(condVal.constructor === Date) {
                    condVal = util.Convert.toIsoStringFromDate(condVal);
                }

                conditions[i].val = condVal;
            }

            return Sys.Serialization.JavaScriptSerializer.serialize(conditions);
        },
        getConditions : function () {
            var conds = [],
                wid,
                c;
            
            for (wid in this.conditionWidgets) {
                if(this.conditionWidgets.hasOwnProperty(wid)) {
                    if (this.conditionWidgets[wid].getCondition) {
                        c = this.conditionWidgets[wid].getCondition();
                        if (c) {
                            conds.push(c);
                        }
                    }
                }
            }
            
            return conds;
        },
        resetConditions: function() {
            var wid,
                i;
                
            for (i = 0; i < this.widgetConnects.length; i++) {
                dojo.disconnect(this.widgetConnects[i]);
            }
            for (wid in this.conditionWidgets) {
                if (this.conditionWidgets.hasOwnProperty(wid)) {
                    if (this.conditionWidgets[wid].getCondition) {
                        this._removeCondition(this.conditionWidgets[wid]);
                    }
                }
            }

            this._setInitialCondition();
        },
        _doSearch: function() {
            this.onDoSearch(this.getConditions());
        },
        _setFieldsAttr: function(fields) {
            var i;
            this.fields = fields;
            this.fieldsHash = {};
            for (i = 0; i < fields.length; i++) {
                this.fieldsHash[fields[i][this.fieldNameProperty]] = fields[i];
            }
            this.resetConditions();
        },
        setFirstConditionValue: function(field, op, value) {
            var prop,
                wid;
            for(prop in this.conditionWidgets) {
                if(this.conditionWidgets.hasOwnProperty(prop)) {
                    wid = this.conditionWidgets[prop];
                    if(wid.isFirstCondition) {
                        wid.defaultOperator = op;
                        wid.defaultField = field;
                        wid.defaultValue = value;
                        wid.refreshDefaults();
                    }
                }
            }
        },
        addCondition: function(field, op, value, visible) {
            var count = this._conditionCount(),
                newWid = new SearchConditionWidget({
                    conditionManager: this,
                    label: this.hiderowlabel,
                    isFirstCondition: false,
                    defaultField: field,
                    defaultOperator: op,
                    defaultValue: value,
                    id: this.id + '-SearchCondition' + count,
                    visible: visible
                });

            this.widgetConnects.push(dojo.connect(newWid, 'onRemoveLookupCondition', this, '_removeCondition'));
            
            dojo.place(newWid.domNode, this.conditions);
            newWid.startup();
            this.conditionWidgets[newWid.id] = newWid;
        },
        _setInitialCondition: function() {
            var self = this,
                wid = new SearchConditionWidget({
                    conditionManager: self,
                    label: self.addrowlabel,
                    isFirstCondition: true,
                    id: self.id + '-SearchCondition0',
                    visible: true
                });
                
            this.widgetConnects.push(dojo.connect(wid, 'onAddLookupCondition', self, '_addCondition'));
            self.conditionWidgets[wid.id] = wid;
            dojo.place(wid.domNode, self.conditions);
            wid.startup();
        },
        _addCondition: function() {
            var count = this._conditionCount(),
                newWid = new SearchConditionWidget({
                    conditionManager: this,
                    label: this.hiderowlabel,
                    isFirstCondition: false,
                    id: this.id + '-SearchCondition' + count,
                    visible: true
                });
                
            this.widgetConnects.push(dojo.connect(newWid, 'onRemoveLookupCondition', this, '_removeCondition'));
            this.conditionWidgets[newWid.id] = newWid;
            dojo.place(newWid.domNode, this.conditions);
            newWid.startup();
        },
        _removeCondition: function(conditionWidget) {
            var id = conditionWidget.id;
            conditionWidget.destroyRecursive();
            delete(this.conditionWidgets[id]);
        },
        _conditionCount: function() {
            var count = 0,
                wid;
            for (wid in this.conditionWidgets) {
                if(this.conditionWidgets.hasOwnProperty(wid)) {
                    count += 1;
                }
            }

            return count;
        },
        onDoSearch: function(args) {
        }
    });

    return widget;
});

},
'Sage/UI/SearchMenuItem':function(){
require({cache:{
'url:Sage/templates/GridMenuItem.html':"<tr class=\"dijitGridMenuItem\" data-dojo-attach-point=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\n\t\tdata-dojo-attach-event=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"4\" data-dojo-attach-point=\"containerNode\"></td>\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" data-dojo-attach-point=\"accelKeyNode\"></td>\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\" style=\"display:none\">\n\t\t<div data-dojo-attach-point=\"arrowWrapper\" style=\"display:none\">\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\n\t\t</div>\n\t</td>\n    <td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\" style=\"display:none\">\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" data-dojo-attach-point=\"iconNode\"/>\n\t</td>\n</tr>\n"}});
/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define("Sage/UI/SearchMenuItem", [
        'dojo/_base/declare',
        'dijit/MenuItem',
        'dijit/form/TextBox',
        'dijit/form/CheckBox',
        'dijit/form/Button',
        'Sage/UI/ImageButton',
        'dojo/dom-construct',
        'dojo/_base/lang',
        'dojo/has',
        'dojo/_base/sniff',
        'Sage/UI/Controls/_DialogHelpIconMixin',
        'dojo/text!../templates/GridMenuItem.html',
        'dojo/i18n!./nls/SearchMenuItem',
        'dojo/topic'
    ],
function (
        declare,
        MenuItem,
        TextBox,
        CheckBox,
        Button,
        ImageButton,
        domConstruct,
        lang,
        has,
        sniff,
        DialogHelpIconMixin,
        template,
        nls,
        topic
    ) {
    var widget = declare('Sage.UI.SearchMenuItem', MenuItem, {
        id: 'groupSearchMenuItem',

        templateString: template,
        seedQuery: '',

        // localized strings
        findText: 'Find: ',
        showHiddenText: 'Show Hidden: ',
        clearText: 'Clear',
        // end localized strings

        textBox: null,
        findButton: null,
        clearButton: null,
        showHiddenCheck: null,
        registeredWidgets: null,
        
        startup: function() {
            this.inherited(arguments);
            var keyDownFunc = lang.hitch(this, function(event) {
                    if (event.keyCode === 9) {
                        event.cancelBubble = true;
                    }
                });
            if (nls) {
                this.findText = nls.findText;
                this.showHiddenText = nls.showHiddenText;
                this.clearText = nls.clearText;
            }
            
            this.getParent().on('open', lang.hitch(this, this.init));
            
            if (has("mozilla")) {
                this.getParent().on('keyPress', keyDownFunc);
            } else {
                this.getParent().on('keyDown', keyDownFunc);
            }
        },
        init: function() {
            if (!this.started) {
                topic.subscribe("sage/ui/groups/gridMenuStarted", lang.hitch(this, function(gridMenuItem) {
                    this.registeredWidgets = [];
                    this._createSearchTextBox();
                    this._createShowHidden();
                    this._setQuery();// TODO: This will cause an extra query on initial load because the grid was started with an existing store. Fix it.
                    this.started = true;
                }));
            }

            var fn = lang.hitch(this, function() { this.focusText(); });
            setTimeout(fn, 100);
        },
        focusText: function() {
            if (this.textBox && this.textBox.focus) {
                this.textBox.focus();
            }
        },
        _createSearchTextBox: function() {
            this.textBox = new TextBox();
            this.textBox.startup();
            this.registeredWidgets.push(this.textBox);
            var keyDownFunc = lang.hitch(this, function(event) {
                if(event.keyCode === 13) {
                    this._setQuery();
                }
                
                // Prevent left/right arrow and tab from bubbling.
                if (event.keyCode === 37 || event.keyCode === 39 || event.keyCode === 9) {
                    event.cancelBubble = true;
                }
            });
            
            if (has("mozilla")) {
                this.textBox.on('keyPress', keyDownFunc);
            } else {
                this.textBox.on('keyDown', keyDownFunc);
            }

            domConstruct.place(this.textBox.domNode, this.containerNode, 'only');
            domConstruct.create('label', {
                    'for': this.textBox.id,
                    'innerHTML': this.findText + ': ',
                    'class': 'groupMenuLabel'
                }, this.containerNode, 'first');
                
            this.findButton = new ImageButton({
                imageClass: 'icon_Find_16x16',
                'class': 'groupMenuButton',
                'title': this.findText,
                onClick: lang.hitch(this, function() { this._setQuery(); })
            });
            
            this.clearButton = new Button({
                label: this.clearText,
                'class': 'groupMenuButton',
                'title': this.clearText,
                onClick: lang.hitch(this, function () {
                    this.textBox.set('value', '');
                    this._setQuery();
                })
            });
            
            domConstruct.place(this.findButton.domNode, this.containerNode, 'last');
            domConstruct.place(this.clearButton.domNode, this.containerNode, 'last');
            
            this.titleBar = this.containerNode;
            lang.mixin(this, new DialogHelpIconMixin());
            this.createHelpIconByTopic('Group_Manager');
            domConstruct.place(this.helpIcon, this.containerNode, 'last');
            
            this.registeredWidgets.push(this.findButton);
            this.registeredWidgets.push(this.clearButton);
        },
        _createShowHidden: function() {
            var key = 'GroupMenuShowHidden',
                checkState = sessionStorage.getItem(key);
            
            if (checkState === null) {
                sessionStorage.setItem(key, 'false');
                checkState = 'false';
            }
            
            this.showHiddenCheck = new CheckBox();
            this.showHiddenCheck.set('checked', checkState === 'true' ? true : false);
            this.registeredWidgets.push(this.showHiddenCheck);
            
            this.showHiddenCheck.on('click', lang.hitch(this, function(event) {
                this._setQuery();
                var grid = dijit.byId('groupsGridInMenu');
                
                if (grid) {
                    if (this.showHiddenCheck.checked) {
                        sessionStorage.setItem(key, 'true');
                        grid.structure[1].width = "205px";
                    } else {
                        sessionStorage.setItem(key, 'false');
                        grid.structure[1].width = "260px";
                    }
                
                    grid.setStructure(grid.structure);
                    grid.layout.setColumnVisibility(2, this.showHiddenCheck.checked);
                }
            }));
            
            var wrapper = domConstruct.create('p', null, this.containerNode, 'last');
            
            domConstruct.place(this.showHiddenCheck.domNode, wrapper, 'last');
            domConstruct.create('label', {
                    'for': this.showHiddenCheck.id,
                    'innerHTML': this.showHiddenText,
                    'class': 'groupMenuLabel'
                }, this.showHiddenCheck.domNode, 'before');
        },
        _setQuery: function() {
            var grid = dijit.byId('groupsGridInMenu'),
                searchText = this.textBox.get('value').replace(/'/g, "''"),
                queryParts = [];
                
            if (grid) {
                if (!this.seedQuery) {
                    // Preserve the original query.
                    this.seedQuery = grid.get('query');
                }
                
                queryParts.push(this.seedQuery);
                
                if (searchText) {
                    searchText = this._escapeSearchText(searchText);
                    queryParts.push("and upper(displayName) like '%" + searchText.toUpperCase() + "%'");
                }

                if (!this.showHiddenCheck.checked) {
                    queryParts.push("and not isHidden");
                }

                grid.set('query', queryParts.join(' '));
                grid._refresh();
            }
        },
        _escapeSearchText: function (searchText) {
            searchText = searchText.replace(/\[/g, '[[]').replace(/_/g, '[_]').replace(/%/g, '[%]');
            return searchText;
        },
        _onClick: function(e) {
            // because we live in a menu, we don't want the menu's click handling to hide
            // us when the user selects a row.
            e.cancelBubble = true;
        },
        destroy: function() {
            var i;
            if (this.registeredWidgets !== null) {
                for (i = 0; i < this.registeredWidgets.length; i++) {
                    this.registeredWidgets[i].destroy(false);
                    this.registeredWidgets.splice(i, 1);
                }
            }
            
            this.inherited(arguments);
        }
    });

    return widget;
});

},
'Sage/Utility/nls/Dashboard':function(){
﻿define("Sage/Utility/nls/Dashboard", [
        'Sage/LanguageList',
        'dojo/_base/lang'
],
function (LanguageList, lang) {
    var nls = {
        root: {
            pageText: 'Page'
        }
    };
    return lang.mixin(LanguageList, nls);
});
},
'Sage/QuickForms/Design/PropertyValueError':function(){
define("Sage/QuickForms/Design/PropertyValueError", [
    'dojo/string',
    'dojo/_base/lang'
], function(string, lang) {
    var PropertyValueError = function(result, value, message) {
        this.result = result;
        this.value = value;
        this.message = message || string.substitute(this.messageText, [value]);
    };

    lang.extend(PropertyValueError, {
        messageText: 'The value ${0} is not allowed.',
        toString: function() {
            return this.message;
        }
    });

    return lang.setObject('Sage.QuickForms.Design.PropertyValueError', PropertyValueError);
});
}}});

require(["dojo/i18n"], function(i18n){
i18n._preloadLocalizations("Sage/nls/Sage", ["et","en-tt","eu","ar-sy","xh","en-nz","fa","es-uy","es-cl","rm","ro","fr-be","es-co","fi","es-cr","sv-fi","ar-tn","en-bz","ru","es-ve","es-pa","zh-hk","lt","fo","zh-tw","lv","es-pe","en-ca","fr","en-us","es-pr","sk","fr-ca","de-ch","sl","gd","mk","es-py","sq","sr","fr-ch","pt-pt","af","sv","ms","mt","zh-cn","ar","en-jm","zh","es-ec","nb","th","az","tn","he","zu","nl","tr","hi","ts","be","bg","hr","hu","ar-jo","uk","id","ca","ar-dz","ur","is","it","cs","ve","de-li","vi","ja","da","pl","ar-lb","nl-be","de","es-gt","it-ch","es-ar","pt","fr-lu","en-gb","en-za","zh-sg","es-hn","ar-ma","es-bo","en-au","kk","ko","el","de-at","en","pt-br","es"]);
});
define("Sage/Sage", [], 1);
