<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="jsConditionDlgWidth" xml:space="preserve">
    <value>"350px"</value>
  </data>
  <data name="localizeColumn.Text" xml:space="preserve">
    <value>Spalte</value>
  </data>
  <data name="localizeConditionInstructions.Text" xml:space="preserve">
    <value>Platzieren Sie Felder aus der Liste durch Doppelklicken
														im Raster, um sie als Bedingung für die Datensatzauswahl zu nutzen. 
														Bedingungen werden in der Reihenfolge im Raster angewendet. Mit "Nach oben"
														und "Nach unten" ändern Sie die Reihenfolge.</value>
  </data>
  <data name="jsDescending" xml:space="preserve">
    <value>Absteigend</value>
  </data>
  <data name="localizeGrdSortsSortBy.Text" xml:space="preserve">
    <value>Sortieren nach</value>
  </data>
  <data name="jsNewQuery" xml:space="preserve">
    <value>Neue Abfrage</value>
  </data>
  <data name="MoveRight" xml:space="preserve">
    <value>Nach rechts</value>
  </data>
  <data name="localizeAssignQueryLayout.Text" xml:space="preserve">
    <value>Abfragelayout zuweisen</value>
  </data>
  <data name="localizeLayoutInstructions.Text" xml:space="preserve">
    <value>Platzieren Sie Felder aus der obigen Ansicht durch Doppelklicken  
														im Raster unten. Mit "Nach links" und "Nach rechts" ändern Sie die Feldreihenfolge 
														im Raster.</value>
  </data>
  <data name="localizeConditions.Text" xml:space="preserve">
    <value>Bedingungen</value>
  </data>
  <data name="localizeAssignCondition.Text" xml:space="preserve">
    <value>Bedingung zuweisen</value>
  </data>
  <data name="localizeDelete.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="localizeCaseSens.Text" xml:space="preserve">
    <value>Groß-/Kleinschr.</value>
  </data>
  <data name="MoveLeft" xml:space="preserve">
    <value>Nach links</value>
  </data>
  <data name="localizeOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="localizeCancel.Text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="jsAscending" xml:space="preserve">
    <value>Aufsteigend</value>
  </data>
  <data name="localizeSorting.Text" xml:space="preserve">
    <value>Sortierung</value>
  </data>
  <data name="Collapse" xml:space="preserve">
    <value>Ausblenden</value>
  </data>
  <data name="jsInvalidConditionStringMessage" xml:space="preserve">
    <value>Fehler: Ungültige Zeichenfolge für Bedingung -</value>
  </data>
  <data name="jsConditionDlgHeight" xml:space="preserve">
    <value>"200px"</value>
  </data>
  <data name="localizeEdit.Text" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="localizeMoveDown.Text" xml:space="preserve">
    <value>Nach unten</value>
  </data>
  <data name="jsInvalidSortStringMessage" xml:space="preserve">
    <value>Fehler: Ungültige Zeichenfolge für Sortierung -</value>
  </data>
  <data name="localizeField.Text" xml:space="preserve">
    <value>Feld</value>
  </data>
  <data name="Expand" xml:space="preserve">
    <value>Einblenden</value>
  </data>
  <data name="jsLayoutDlgWidth" xml:space="preserve">
    <value>"375px"</value>
  </data>
  <data name="localizeDefaults.Text" xml:space="preserve">
    <value>Standardeinstellungen</value>
  </data>
  <data name="localizeProperties.Text" xml:space="preserve">
    <value>Eigenschaften</value>
  </data>
  <data name="localizeCalc.Text" xml:space="preserve">
    <value>Formeln...</value>
  </data>
  <data name="localizeSortInstructions.Text" xml:space="preserve">
    <value>Platzieren Sie Felder der Ansicht durch Doppelklicken im 
														Raster unten, um zurückgegeb. Daten zu sortieren. Daten werden 
														in der Reihenfolge der Felder im Raster sortiert. Mit "Nach oben" und   
														"Nach unten" ändern Sie die Reihenfolge.</value>
  </data>
  <data name="localizeNot.Text" xml:space="preserve">
    <value>Nicht</value>
  </data>
  <data name="MoveDown" xml:space="preserve">
    <value>Nach unten</value>
  </data>
  <data name="localizeOperator.Text" xml:space="preserve">
    <value>Operator</value>
  </data>
  <data name="jsCopyOf" xml:space="preserve">
    <value>Kopie von</value>
  </data>
  <data name="jsConfirmDeleteMessage" xml:space="preserve">
    <value>Möchten Sie die aktuelle Gruppe wirklich löschen?</value>
  </data>
  <data name="localizeDisplayName.Text" xml:space="preserve">
    <value>Anzeigename:</value>
  </data>
  <data name="jsCreateLocalJoinMessage" xml:space="preserve">
    <value>Sie müssen zuerst eine Tabelle und ein Feld auswählen.</value>
  </data>
  <data name="localizeHideHiddenFields.Text" xml:space="preserve">
    <value>Ausgeblendete Felder verbergen</value>
  </data>
  <data name="jsInvalidLayoutConditionStringMessage" xml:space="preserve">
    <value>Fehler: Ungültige Zeichenfolge für Layout -</value>
  </data>
  <data name="localizeGrdSortsDirection.Text" xml:space="preserve">
    <value>Richtung</value>
  </data>
  <data name="localizeCreateLocalJoin.Text" xml:space="preserve">
    <value>Local Join erstellen</value>
  </data>
  <data name="localizeName.Text" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="localizeGrdSortsOrder.Text" xml:space="preserve">
    <value>Reihenfolge</value>
  </data>
  <data name="localizeDescription.Text" xml:space="preserve">
    <value>Beschreibung:</value>
  </data>
  <data name="localizeHelp.Text" xml:space="preserve">
    <value>Hilfe</value>
  </data>
  <data name="jsAddDataToLayoutGridMessage" xml:space="preserve">
    <value>Anscheinend ist das Feld bereits in diesem Layout vorhanden. Möchten Sie fortfahren?</value>
  </data>
  <data name="localizeAndOr.Text" xml:space="preserve">
    <value>Und/oder</value>
  </data>
  <data name="localizeMoveUp.Text" xml:space="preserve">
    <value>Nach oben</value>
  </data>
  <data name="MoveUp" xml:space="preserve">
    <value>Nach oben</value>
  </data>
  <data name="localizeLayout.Text" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="localizeReturnDistinct.Text" xml:space="preserve">
    <value>Nur eindeutige Zeilen ausgeben</value>
  </data>
  <data name="jsLayoutDlgHeight" xml:space="preserve">
    <value>"245px"</value>
  </data>
  <data name="localizeViewSQL.Text" xml:space="preserve">
    <value>SQL-Code anzeigen</value>
  </data>
  <data name="localizeGlobalJoins.Text" xml:space="preserve">
    <value>Global Joins...</value>
  </data>
  <data name="localizeValue.Text" xml:space="preserve">
    <value>Wert</value>
  </data>
</root>