<%@ Control Language="C#" ClassName="OpportunityDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription" Rows="1"
MaxLength="64"
 />
  </div>

      </td>
                <td rowspan="10"  >
<%@ Register tagPrefix="SalesLogix" tagName="wbrOpportunitySnapShot" src="~/SmartParts/Opportunity/OpportunitySnapShot.ascx" %>
<SalesLogix:wbrOpportunitySnapShot id="wbrOpportunitySnapShot" runat="server" OnInit="setwbrOpportunitySnapShotContext" ></SalesLogix:wbrOpportunitySnapShot>
<script runat="server" type="text/C#">
	protected void setwbrOpportunitySnapShotContext(object sender, EventArgs e)
	{
		Sage.Platform.WebPortal.SmartParts.SmartPart sp = wbrOpportunitySnapShot as Sage.Platform.WebPortal.SmartParts.SmartPart;
		if (sp != null)
		{
			sp.InitSmartPart(ParentWorkItem, PageWorkItem.Services.Get<Sage.Platform.Application.UI.Web.IPageWorkItemLocator>());
			sp.DialogService = DialogService;
			Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart esp = sp as Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart;
			if (esp != null)
			{
                esp.InitEntityBoundSmartPart(PageWorkItem.Services.Get<Sage.Platform.Application.IEntityContextService>());
			}
		}
	}

    protected void Page_Load(object sender, EventArgs e)
    {

    }
</script>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.SalesLogix.Entities.Account, Sage.SalesLogix.Entities" EnableHyperLinking="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAcctManager_lbl" AssociatedControlID="lueAcctManager" runat="server" Text="<%$ resources: lueAcctManager.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueAcctManager" LookupEntityName="Vactiveusers" LookupEntityTypeName="Sage.Entity.Interfaces.IVactiveusers, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" InitializeLookup="true" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAcctManager.LookupProperties.Username.PropertyHeader %>" PropertyName="Username" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueReseller_lbl" AssociatedControlID="lueReseller" runat="server" Text="<%$ resources: lueReseller.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueReseller" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true" AllowClearingResult="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.AccountManager.UserName.PropertyHeader %>" PropertyName="AccountManager.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpEstimatedClose_lbl" AssociatedControlID="dtpEstimatedClose" runat="server" Text="<%$ resources: dtpEstimatedClose.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpEstimatedClose" ButtonToolTip="<%$ resources: dtpEstimatedClose.ButtonToolTip %>" DisplayTime="false" Timeless="true" />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklCloseProbability_lbl" AssociatedControlID="pklCloseProbability" runat="server" Text="<%$ resources: pklCloseProbability.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklCloseProbability" PickListName="Opportunity Probability" MustExistInList="false" NoneEditable="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatus_lbl" AssociatedControlID="pklStatus" runat="server" Text="<%$ resources: pklStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatus" PickListName="Opportunity Status" AutoPostBack="true" NoneEditable="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkbox">
  <SalesLogix:SLXCheckBox runat="server" ID="chkAddToForecast" CssClass="checkbox "
 Text="<%$ resources: chkAddToForecast.Caption %>" TextAlign="left"  />
</div>
      </td>
            </tr>
<tr>
            <td rowspan="2"  >
<asp:Panel runat="server" ID="clIntegrationContract" CssClass="controlslist "
Visible="false" >
   <div class=" lbl alignleft">
   <asp:Label ID="lueERPApplication_lbl" AssociatedControlID="lueERPApplication" runat="server" Text="<%$ resources: lueERPApplication.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="lueERPApplication" ButtonToolTip="<%$ resources: lueERPApplication.ButtonToolTip %>" LookupEntityName="AppIdMapping" LookupEntityTypeName="Sage.Entity.Interfaces.IAppIdMapping, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" DropDownDisplayProperty="Name" InitializeLookup="true" AutoPostBack="true" AddEmptyListItem="false" DialogTitle="<%$ resources: lueERPApplication.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueERPApplication.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Enabled" PropertyType="System.Boolean" OperatorCode="="
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

   <div class=" lbl alignleft">
   <asp:Label ID="luePriceList_lbl" AssociatedControlID="luePriceList" runat="server" Text="<%$ resources: luePriceList.Caption %>" ></asp:Label>
 </div>   
  <div  class="textcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="luePriceList" ButtonToolTip="<%$ resources: luePriceList.ButtonToolTip %>" Enabled="false" LookupEntityName="SlxPriceList" LookupEntityTypeName="Sage.Entity.Interfaces.ISlxPriceList, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="AppId" DropDownDisplayProperty="Name" InitializeLookup="true" DialogTitle="<%$ resources: luePriceList.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.PriceListType.PropertyHeader %>" PropertyName="PriceListType" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.Currency.PropertyHeader %>" PropertyName="Currency" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.StartDate.PropertyHeader %>" PropertyName="StartDate" PropertyType="System.DateTime" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.EndDate.PropertyHeader %>" PropertyName="EndDate" PropertyType="System.DateTime" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="ActiveFlag" PropertyType="System.Boolean" OperatorCode="="
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

</asp:Panel>
      </td>
            </tr>
<tr>
              </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="SalesPotential_lbl" AssociatedControlID="SalesPotential" runat="server" Text="<%$ resources: SalesPotential.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="SalesPotential" Rows="1"
 />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments" Rows="4"
TextMode="MultiLine" Columns="40"
 />
  </div>

      </td>
            </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="OpportunityDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="grnDetails" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="cmdReset"
 AlternateText="<%$ resources: cmdReset.Caption %>"  ToolTip="<%$ resources: cmdReset.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Reset_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdDelete"
 AlternateText="<%$ resources: cmdDelete.Caption %>"  ToolTip="<%$ resources: cmdDelete.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
  <SalesLogix:PageLink ID="lnkOpportunityDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="oppdetailview.htm" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>


<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 

protected override void OnAddEntityBindings() {
                 // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                       // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
                    // lueAcctManager.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAcctManagerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EuroAccountManager", lueAcctManager, "LookupResultValue");
        BindingSource.Bindings.Add(lueAcctManagerLookupResultValueBinding);
                    // lueReseller.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueResellerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Reseller", lueReseller, "LookupResultValue");
        BindingSource.Bindings.Add(lueResellerLookupResultValueBinding);
                    // dtpEstimatedClose.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpEstimatedCloseDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EstimatedClose", dtpEstimatedClose, "DateTimeValue", "", null);
        BindingSource.Bindings.Add(dtpEstimatedCloseDateTimeValueBinding);
                    // pklCloseProbability.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCloseProbabilityPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CloseProbability", pklCloseProbability, "PickListValue");
        BindingSource.Bindings.Add(pklCloseProbabilityPickListValueBinding);
                    // pklStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", pklStatus, "PickListValue");
        BindingSource.Bindings.Add(pklStatusPickListValueBinding);
                    // chkAddToForecast.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkAddToForecastCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AddToForecast", chkAddToForecast, "Checked");
        BindingSource.Bindings.Add(chkAddToForecastCheckedBinding);
                       // lueERPApplication.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueERPApplicationLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany", lueERPApplication, "LookupResultValue");
        BindingSource.Bindings.Add(lueERPApplicationLookupResultValueBinding);
                    // luePriceList.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SlxPriceList", luePriceList, "LookupResultValue");
        BindingSource.Bindings.Add(luePriceListLookupResultValueBinding);
                 // luePriceList.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany.Id", luePriceList, "SeedValue");
        luePriceListSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(luePriceListSeedValueBinding);
                    // SalesPotential.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding SalesPotentialTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SalesPotential", SalesPotential, "Text");
        BindingSource.Bindings.Add(SalesPotentialTextBinding);
                    // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
    
   
             
      
      
      
                 
      
      
      
    }
                                                                                                  
protected void lueAcctManager_ChangeAction(object sender, EventArgs e) {
//==================================================================
    // TAC Code here
    //==================================================================
    Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
    if (_entity != null)
    {
        Sage.Entity.Interfaces.IVactiveusers tmpActiveUser = (Sage.Entity.Interfaces.IVactiveusers)lueAcctManager.LookupResultValue;
        //Sage.Entity.Interfaces.IUser tmpUser = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>(tmpActiveUser.Id.ToString()  );
        //_entity.AccountManager   = tmpUser ;
        //_entity.AccountManagerId = tmpActiveUser.Id.ToString();
        _entity.EuroAccountManager = tmpActiveUser;
        _entity.Save();
        ScriptManager.RegisterStartupScript(this, GetType(), "refresh", "window.setTimeout('window.location.reload(true);',50);", true);
        //Response.Redirect(Request.Url.ToString());
    }

}
protected void pklStatus_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity entity = (Sage.Entity.Interfaces.IOpportunity) this.BindingSource.Current;
if (entity.StatusChangeWon()) {
            pklStatus_ChangeActionS(sender, e);
      
      }
else {
            pklStatus_ChangeActionF(sender, e);
      
      }
}
protected void pklStatus_ChangeActionS(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(400, 600, "OpportunityClosedWon", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunity); 
    DialogService.ShowDialog();
}

}
protected void pklStatus_ChangeActionF(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity entity = (Sage.Entity.Interfaces.IOpportunity) this.BindingSource.Current;
if (entity.StatusChangeLost()) {
            pklStatus_ChangeActionFS(sender, e);
      
      }
else {
        }
}
protected void pklStatus_ChangeActionFS(object sender, EventArgs e) {
if (DialogService != null) {
  // DialogActionItem
  DialogService.SetSpecs(400, 600, "OpportunityClosedLost", string.Empty );
    DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunity); 
    DialogService.ShowDialog();
}

}
protected void lueERPApplication_ChangeAction(object sender, EventArgs e) {
luePriceList.Enabled = true;

}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}
protected void cmdReset_ClickAction(object sender, EventArgs e) {
  
}
protected void cmdDelete_ClickAction(object sender, EventArgs e) {
  Sage.Platform.Orm.Interfaces.IPersistentEntity persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
    persistentEntity.Delete();
  }

          cmdDelete_ClickActionBRC(sender, e);
    
  
}
protected void cmdDelete_ClickActionBRC(object sender, EventArgs e) {
      Response.Redirect("Opportunity.aspx");
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAcctManager.LookupResultValueChanged += new EventHandler(lueAcctManager_ChangeAction);
pklStatus.PickListValueChanged += new EventHandler(pklStatus_ChangeAction);
lueERPApplication.LookupResultValueChanged += new EventHandler(lueERPApplication_ChangeAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
}
}
cmdReset.Click += new ImageClickEventHandler(cmdReset_ClickAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/DELETE"))
{
cmdDelete.Click += new ImageClickEventHandler(cmdDelete_ClickAction);
}
}


}

protected void quickformload0(object sender, EventArgs e) {
lueReseller.SeedValue = GetLocalResourceObject("Reseller_rsc").ToString();

}
protected void quickformload1(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("OpportunityDetails.SetupIntegrationContract", methodArgs);

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdSave);

cmdDelete.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("cmdDelete.ActionConfirmationMessage").ToString()));

if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdSave.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/DELETE"))
{
cmdDelete.Visible = false;
}
if (ClientBindingMgr != null) { ClientBindingMgr.RegisterResetButton(cmdReset); }
quickformload1(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new OpportunityDetailsAdapter(this)); }
}

public class OpportunityDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IOpportunityDetails
{
    public OpportunityDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAccount;
    public  Sage.Platform.Controls.ILookupControl lueAccount
    {
        get { return FindControl(ref _lueAccount, "lueAccount"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAcctManager;
    public  Sage.Platform.Controls.ILookupControl lueAcctManager
    {
        get { return FindControl(ref _lueAcctManager, "lueAcctManager"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueReseller;
    public  Sage.Platform.Controls.ILookupControl lueReseller
    {
        get { return FindControl(ref _lueReseller, "lueReseller"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpEstimatedClose;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpEstimatedClose
    {
        get { return FindControl(ref _dtpEstimatedClose, "dtpEstimatedClose"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklCloseProbability;
    public  Sage.Platform.Controls.IPickListControl pklCloseProbability
    {
        get { return FindControl(ref _pklCloseProbability, "pklCloseProbability"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklStatus;
    public  Sage.Platform.Controls.IPickListControl pklStatus
    {
        get { return FindControl(ref _pklStatus, "pklStatus"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkAddToForecast;
    public  Sage.Platform.Controls.ICheckBoxControl chkAddToForecast
    {
        get { return FindControl(ref _chkAddToForecast, "chkAddToForecast"); }
    }
    private Sage.Platform.Controls.IControlsListControl _clIntegrationContract;
    public  Sage.Platform.Controls.IControlsListControl clIntegrationContract
    {
        get { return FindControl(ref _clIntegrationContract, "clIntegrationContract"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueERPApplication;
    public  Sage.Platform.Controls.ILookupControl lueERPApplication
    {
        get { return FindControl(ref _lueERPApplication, "lueERPApplication"); }
    }
    private Sage.Platform.Controls.ILookupControl _luePriceList;
    public  Sage.Platform.Controls.ILookupControl luePriceList
    {
        get { return FindControl(ref _luePriceList, "luePriceList"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _SalesPotential;
    public  Sage.Platform.Controls.ITextBoxControl SalesPotential
    {
        get { return FindControl(ref _SalesPotential, "SalesPotential"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _grnDetails;
    public  Sage.Platform.Controls.IGroupNavigatorControl grnDetails
    {
        get { return FindControl(ref _grnDetails, "grnDetails"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdReset;
    public  Sage.Platform.Controls.IButtonControl cmdReset
    {
        get { return FindControl(ref _cmdReset, "cmdReset"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdDelete;
    public  Sage.Platform.Controls.IButtonControl cmdDelete
    {
        get { return FindControl(ref _cmdDelete, "cmdDelete"); }
    }

    public  void SetupIntegrationContract(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("OpportunityDetails.SetupIntegrationContract", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
