/*globals Sage, dojo, dojox, dijit, Simplate, window, Sys, define */
define([
       'dojo/_base/html',
       'dijit/_Widget',
       'Sage/_Templated',
       'Sage/UI/NumberTextBox',
       'dojo/currency',
       'dojo/_base/declare'
],
function (html, _Widget, _Templated, NumberTextBox, currency, declare) {
    //TODO: This hook will be depricated once ClientBindingManagerService has been converted with Dojo.
    dojo.mixin(dijit.form.ValidationTextBox.prototype.attributeMap, { slxchangehook: 'focusNode' });

    var widget = declare("Sage.UI.Controls.Numeric", [_Widget, _Templated], {
        //using Simplate to faciliate conditional display
        //Reference enum for Display Modes
        displayModes: {
            //Renders the control as hyperlinked text.
            'AsHyperlink': 0,
            //Default rendering of the control.
            'AsControl': 1,
            //Renders the control a text only.        
            'AsText': 2
        },
        //Display Mode template object.
        modeTemplates: {
            // This is for future user, this option is not in AA - Renders the control as hyperlinked text.
            'AsHyperlink': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">ONE</div>'
            ]),
            //Default rendering of the control.
            'AsControl': new Simplate([
                '<input  data-dojo-type="Sage.UI.NumberTextBox" ',
                'dojoAttachEvent="onChange:onChanged" ',
                'constraints="{ {%= $.constraintsToString() %} }" ',
                'formatType="{%= $.formatType %}" ',
                'ignorechange="true" ',
                'required="{%= $.required %}" ',
                'id="{%= $.id %}_NumberTextBox" ',
                'style="width:inherit;" ',
                'textAlign="{%= $.textAlign %}" ',
                'hotKey="{%= $.hotKey %}" ',
                '{% if($.disabled === "disabled") { %} ',
                'disabled="disabled" ',
                '{% } %}',
                '{% if($.readonly === "readonly") { %} ',
                'readonly="readonly" ',
                '{% } %}',
                'name="{%= $.name %}" type="text" ',
                'value="{%= $.value %}" required="{%= $.required %}" dojoAttachPoint="focusNode" ',
                'maxLength="{%= $.maxLength %}">'
            ]),
            // This is for future user, this option is not in AA - Renders the control a text only.
            'AsText': new Simplate([
                '<div data-dojo-type="dijit.form.Button" showLabel="true">{%= $.formattedText() %}</div>'
            ])
        },
        postMixInProperties: function () {
            this.inherited(arguments);
        },
        postCreate: function () {
            this.inherited(arguments);
            // If this is generated by the Numeric server control, the container will be a span
            //  and the tabIndex of that span will need to be reset, otherwise a double-tab will
            //  have to be done to hit the actual Numeric textbox
            if(this.domNode.parentNode && this.domNode.parentNode.tagName == 'SPAN') {
                this.domNode.parentNode.tabIndex = -1;
            }
        },
        constructor: function (options) {
            this.constraints = {};
            this.inherited(arguments);
        },
        widgetTemplate: new Simplate([
            '<div style="width:inherit;" slxcompositecontrol="true" id="{%= $.id %}" >',
            '{%= $.modeTemplates[$.displayMode].apply($) %}',
            '</div>'
        ]),
        value: 0,
        //summary:
        //.Net control behavior
        autoPostBack: false,
        width: 15,
        maxLength: 128,
        style: '',
        //These three props are for non-grid modes.  Add to basic control config but not column config.    
        enabled: true, // For non-grid mode. Redundant from grid.column.editable: true
        visible: true, // For non-grid mode. Redundant from field in grid Select but column not included.
        readonly: '',
        disabled: '',
        hotKey: '',
        tabIndex: 0,
        required: false,
        //Sets the display mode that the control will render in.
        displayMode: 'AsControl',
        // appliedSecurity: '',  Note: Not yet enabled on control.    
        widgetsInTemplate: true,
        styles: 'text-align: right;',
        constraints: null,
        name: '',
        formattedText: function () { return this.value; },
        formatType: '',
        constraintsToString: function () {
            // Stringify the constraints object, wrap string values in single quote
            var tmp = [];
            for (prop in this.constraints) {
                if (this.constraints.hasOwnProperty(prop)) {
                    var value = this.constraints[prop];
                    if (typeof value === 'string') {
                        value = "\'" + value + "\'";
                    }
                    tmp.push(prop + ":" + value);
                }
            }
            var results = tmp.join(",");
            return results;
        },
        onChanged: function (e) {
            if (this.autoPostBack) {
                if (Sys) {
                    Sys.WebForms.PageRequestManager.getInstance()._doPostBack(this.id, null);
                }
            }
        }
    });

    return widget;
});