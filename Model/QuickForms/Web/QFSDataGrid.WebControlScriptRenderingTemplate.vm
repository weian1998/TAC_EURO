#set($stringObjectName = "${pagegenerator.FormName}${qfcontrol.ControlId}_Strings")
## -----------Column and Grid macros -----------------------------------------------
#macro(doDefaultColParts $col)    
	field: '$col.DataField',
	#if($col.TextFormatString != "")
    displayFields: ['$col.DataField'],
    displayFormatString: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference($col.getColResourceKey("FormatString"))']  || '$col.TextFormatString',
	#end
	#doHideCondition($col)
	name:  ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference($col.getColResourceKey("ColumnHeading"))']  || '$col.ColumnHeading',
	sortable: $generator.GetJavascriptBoolString($col.IsSortable),
	#if($col.Width > -1) 
	width: ${col.Width},
	#else
	width: '10',
	 #end
	styles: 'width:auto;',
    cellClasses: '${col.StyleScheme} #if (${col.Horizontalalignment} == "right") alignright #elseif (${col.Horizontalalignment} == "left") alignleft #elseif(${col.Horizontalalignment} == "center") aligncenter #end',
	headerClasses: '#if (${col.Headeralignment} == "right") alignright #elseif (${col.Headeralignment} == "left") alignleft #elseif(${col.Headeralignment} == "center") aligncenter #end'
#end
#macro(doAbbreviationLength $col)
	#if($col.AbbreviationLength > 0)
	,formatter: Sage.Format.abbreviationFormatter(${col.AbbreviationLength})
	#end	
#end
#macro(doReadOnlyCondition $qfcontrol)
	#if($qfcontrol.ReadOnlyCondition != "")
	//Set to the value of the ReadOnlyCondition property
		#if($qfcontrol.ReadOnlyCondition.ToLower() == "true" || $qfcontrol.ReadOnlyCondition.ToLower() == "false")
          readOnly: ${qfcontrol.ReadOnlyCondition.ToLower()},
		#else 
          readOnly: ${qfcontrol.ReadOnlyCondition}(),
		#end
	#end
#end
#macro(doHideCondition $col)
	#if($col.HideCondition != "")
	    //Set to the value of the visibleCondition property
	    hidden: ${col.HideCondition}(),
	#end
#end
#macro(doEditableField $col)
{
	#doDefaultColParts($col), 
	defaultValue: '', 
	editable: $generator.GetJavascriptBoolString(${col.IsEditable})
	#doAbbreviationLength ($col)
	#if($col.CustomFormatter != "")
	,formatter: ${col.CustomFormatter}
	#end
	#if($col.AbbreviationLength > 0)
	,formatter: Sage.Format.abbreviationFormatter(${col.AbbreviationLength})
	#end	
}
#end
#macro(doDateTimeCol $col)
{
	#doDefaultColParts($col), 
	dateOnly: $generator.GetJavascriptBoolString(${col.DateOnly}),
	#if($col.AbbreviationLength > 0)
	abbreviationLength: ${col.AbbreviationLength},
	#end	
	type: DateTime
}
#end
#macro(doSlxUserCol $col)
{
	#doDefaultColParts($col),
	type: Sage.UI.Columns.SlxUser
}
#end
#macro(doLookupCol $col)
{
	#doDefaultColParts($col),  
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	type: Lookup,
	lookupOptions: {
		field: '$col.LookupDisplayProperty',
		seedOnRowEntity: $generator.GetJavascriptBoolString(${col.SeedOnRowEntity}),
		seedOnRelatedEntity: '$col.SeedOnRelatedEntity',
		returnObject: #if($col.LookupBindingMode == "Object")true #else false #end,
		displayMode: '$col.LookupDisplayMode'
	},
	lookupStructure: [{
            cells: [{
		     name: '$col.LookupDisplayProperty',
		     field: '$col.LookupDisplayProperty'
		 }]
    }],
	lookupStoreOptions: {		
        resourceKind: #if ($col.ResourceKind == "")'$generator.GetSDataPathName(${col.DataField})' #else '$col.ResourceKind' #end
     },
	lookupGridOptions: {
		#if($col.ConditionalWhere != "")
			contextualCondition: ${col.ConditionalWhere}
		#end
	  }
	#doAbbreviationLength ($col)
}
#end
#macro(doCurrencyCol $col)
{
	#doDefaultColParts($col),
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	#if($col.AbbreviationLength > 0)
	abbreviationLength: ${col.AbbreviationLength},
	#end	
	type: Currency,
	constraints: { #if($col.DecimalDigits != "-1") places: ${col.DecimalDigits} #else places: Sys.CultureInfo.CurrentCulture.numberFormat.CurrencyDecimalDigits #end },  

	## TODO: Uncomment this after Exchange Rate Type enum has been updated
	## exchangeRateType: #if ($col.ExchangeRateType == "") 'EntityRate' #else '$col.ExchangeRateType' #end,
	exchangeRateType: #if ($col.ExchangeRateType == "OpportunityRate" || $col.ExchangeRateType == "SalesOrderRate") 'EntityRate' #else '$col.ExchangeRateType' #end,
	displayCurrencyCode: $generator.GetJavascriptBoolString(${col.DisplayCurrencyCode}),
	#if ($col.ExchangeRate != "") 
    exchangeRateField: '$col.ExchangeRate', 
	#end
	#if ($col.CurrentCode != "") 
    exchangeRateCodeField: '$col.CurrentCode', 
	#end
    displayMode: '$col.CurrencyDisplayMode',
    multiCurrency: isMultiCurrencyEnabled()	 //TODO: Move this method to Sage.IntegrationContractService.isMultiCurrencyEnabled()
}
#end
#macro(doLinkCol $col)
{ 
    #doDefaultColParts($col)  
    ,type: SlxLink
    ,editable: false
#if($col.AppliedSecurity != "")
    ,appliedSecurity: '$col.AppliedSecurity'
#end
#if($col.Target != "")
    ,target: '$col.Target'
#end
#if($col.EntityTypeName != "")
    ,pageName: '$col.EntityTypeName'
    ,idField: '$col.EntityIdField.Replace("Id", "$key")'
#elseif($col.DestinationFormatString != "")
    ,urlFields: [$col.DestinationBindFields]
    ,urlFormatString: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference($col.getColResourceKey("DestinationFormatString"))']  || '$col.DestinationFormatString'
#elseif($col.Destination != "")
    ,urlFields: []
    ,urlFormatString: '$col.Destination'
#end ## different linking types...
}
#end
#macro(doEditCol $col)
{
    #if($col.DialogSpecs.SmartPart != "")
		#doDefaultColParts($col),
	   	type: SlxEdit,
		cellValue: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference($col.getColResourceKey("Text"))']  || '$col.Text',
		entityType: '${col.DialogSpecs.GetFullyQualifiedEntityType()}',
		smartPart: '${col.DialogSpecs.SmartPart}',
		dialogTitle: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${col.DialogSpecs.ResourceKey}.DialogTitleOverride")'] || '${col.DialogSpecs.TitleOverride}',
		isCentered: #if($col.DialogSpecs.CenterDialog == "True")true #else false #end,
		dialogTop: ${col.DialogSpecs.Top},
		dialogLeft: ${col.DialogSpecs.Left},
		dialogHeight: ${col.DialogSpecs.Height},
		dialogWidth: ${col.DialogSpecs.Width},
    	formObjectName: '${pagegenerator.FormScriptObjectName}'
    	#if($col.AppliedSecurity != "")
			,appliedSecurity: '$col.AppliedSecurity'
    	#end
    #end
}
#end
#macro(doCheckBoxCol $col)
{
	#doDefaultColParts($col),
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	type: CheckBox,
	defaultValue: "x"   ## Work around for dojo bug where custom formatter does not run when value = false	
}
#end
#macro(doNumericCol $col)
{
	#doDefaultColParts($col),
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	type: Numeric,
	#if($col.AbbreviationLength > 0)
	abbreviationLength: ${col.AbbreviationLength},
	#end	
    constraints: { places: #if($col.DecimalDigits.DecimalDigits != "-1") #if($col.DecimalDigits.Strict == "True") ${col.DecimalDigits.DecimalDigits} #else '0,${col.DecimalDigits.DecimalDigits}' #end , #else Sys.CultureInfo.CurrentCulture.numberFormat.NumberDecimalDigits , #end round: -1 },  
	formatType: '${col.FormatType}'
}
#end

#macro(doPickListCol $col)
{
	#doDefaultColParts($col),
	editable: false,
	type: PickList,
	pickListName: '${col.PickListName}',		
	storageMode: #if ($col.StorageMode == "Text") 'text' #elseif ($col.StorageMode == "Code") 'code' #elseif ($col.StorageMode == "ID") 'id' #end,
	displayMode: '${col.DisplayMode}'
}
#end
#macro(doPhoneCol $col)
{
	#doDefaultColParts($col), 
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	type: Phone
}
#end
#macro(doEmailCol $col)
{
	#doDefaultColParts($col), 
	editable: $generator.GetJavascriptBoolString(${col.IsEditable}),
	type: Email
}
#end
## ----------- Tool macros -----------------------------------------------
#macro(doBaseTool $tool)
  id : '${pagegenerator.FormName}_$tool.Name',
  displayInInsert : $generator.GetJavascriptBoolString($tool.DisplayInInsert),
  imageClass: #if($tool.Image == "")'icon_No_icon_16x16',#else'$generator.getImageClassName($tool.Image)',#end
  'alternateText' : ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference(${tool.getResourceKey("ToolTip")})'] || '$tool.ToolTip',
  #if($tool.StyleScheme != "")'class': '$tool.StyleScheme',#end
  #if($tool.AppliedSecurity != "") appliedSecurity : '$tool.AppliedSecurity',#end
  #if(${tool.MergeControlId} != "") mergePosition : '${tool.MergePosition}',#end
  #if(${tool.MergeControlId} != "") mergeControlId : '${tool.MergeControlId}',#end
#end
#macro(doCustomBtn $tool)
{
  #doBaseTool($tool)
  'handler' : $tool.OnClick
}
#end
#macro(doAddBtn $tool) 
{
  #doBaseTool($tool)
  'handler' : function() { 
       this.addNew({
           scope: this,
           onComplete: function(item) {
#if ($tool.OnClick != "")
               var customAction = ${tool.OnClick};
               customAction(item);
#end
               this.store.saveNewEntity(item, function(entity) { grid._refresh(); }, function() { }, this );
           }
       }) }
}
#end
#macro(doCancelBtn $tool)
{
  #doBaseTool($tool)
  'handler' : function() { this.cancelChanges(); }
}
#end
#macro(doDeleteBtn $tool)
{
  #doBaseTool($tool)
  'handler' : function() { this.deleteSelected($tool.OnClick); }
}
#end
#macro(doSaveBtn $tool)
{
  #doBaseTool($tool)
 'handler' : function() {
    this.saveChanges($tool.OnClick);
 }
}
#end
#macro(doAddRelationBtn $tool)
{
  displayInInsert : $generator.GetJavascriptBoolString($tool.DisplayInInsert),
  type : 'Sage.UI.SDataLookup',
  controlConfig : $pagegenerator.parseControl($tool.LookupButton)
}
#end
## ----------- Actual grid start -----------------------------------------------
$pagegenerator.AddToInitializationScript("setTimeout(function() { ${pagegenerator.FormScriptObjectName}.makeGrid(runtimeConfig); }, 1);")
makeGrid : function(runtimeConfig) {
    require(['Sage/UI/EditableGrid',
             'Sage/UI/Columns/DateTime',
             'Sage/UI/Columns/SlxLink',
             'Sage/UI/Columns/SlxEdit',
             'Sage/UI/Columns/PickList',
             'Sage/UI/Columns/Phone',
             'Sage/UI/Columns/Email',
             'Sage/UI/Columns/CheckBox',
             'Sage/UI/Columns/Numeric',
             'Sage/UI/Columns/Currency',
             'Sage/UI/Columns/Lookup',
             'dojo/aspect',
             'Sage/UI/SLXPreviewGrid',
             'Sage/UI/Columns/SlxUser'],
			 
			 function(EditableGrid, DateTime, SlxLink, SlxEdit, PickList, Phone, Email, CheckBox,
			   Numeric, Currency, Lookup, aspect, SLXPreviewGrid, SlxUser) {
    
    if (typeof $stringObjectName === 'undefined') {
        $stringObjectName = {};
    }

#if($qfcontrol.FeedCategory == "Proxy")
    dojo.require('Sage.Data.ProxySDataStore');
#end    
    var options = {		
		#if($qfcontrol.AppliedSecurity != "")
        appliedSecurity : '${qfcontrol.AppliedSecurity}', 
		#end
        context: runtimeConfig,		
		#if($qfcontrol.EmptyTableRowText != "") 
        noDataMessage: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${qfcontrol.ControlId}.EmptyTableRowText")']  ||  '${qfcontrol.EmptyTableRowText}', 
		#end
		#if($qfcontrol.PreviewField != "")
		previewField: '$qfcontrol.PreviewField',
		#end		
        #doReadOnlyCondition($qfcontrol)
        columns: [
    {
        field: '$key',
        editable: false,
		excludeFromFilters: true,
        hidden: true,
        id: 'id',
        formatter: function (value, rowIdx, cel) {
            var insertId = [cel.grid.id, '-row', rowIdx].join('');
            var id = (Sage.Utility.getModeId() === 'insert') ? insertId : value;
            var anchor = ['<div id=', id, ' >', id, '</ div>'].join('');
            return anchor;
        }
    },
#set ($comma = "")
#foreach($column in $qfcontrol.Columns)
$comma
#if($column.ColumnType == "EditableField")#doEditableField($column)
#elseif($column.ColumnType == "Link")#doLinkCol($column)
#elseif($column.ColumnType == "Currency")#doCurrencyCol($column)
#elseif($column.ColumnType == "Lookup")#doLookupCol($column)
#elseif($column.ColumnType == "Edit")#doEditCol($column)
#elseif($column.ColumnType == "CheckBox")#doCheckBoxCol($column)
#elseif($column.ColumnType == "Numeric")#doNumericCol($column)
#elseif($column.ColumnType == "DateTime")#doDateTimeCol($column)
#elseif($column.ColumnType == "SlxUser")#doSlxUserCol($column)
#elseif($column.ColumnType == "PickList")#doPickListCol($column)
#elseif($column.ColumnType == "Phone")#doPhoneCol($column)
#elseif($column.ColumnType == "Email")#doEmailCol($column)
#end  ##ColumnType checking
#set ($comma = ",")
	#if($column.ColumnType == "Currency")
		## TODO: Uncomment this condition when the EntityRateType enum has been updated		
		##$qfcontrol.SelectUtil.Clear()
		## #if($column.ExchangeRateType == "EntityRate")
		#if($column.ExchangeRate != "")
			## The String Collection Add method returns the index.  Set to a garbage var so it doesn't write to the output.		
			#if (!$qfcontrol.SelectUtil.Contains("$column.ExchangeRate")) #set ($garbage = $qfcontrol.SelectUtil.Add("$column.ExchangeRate")) #end
			#if (!$qfcontrol.SelectUtil.Contains("$column.CurrentCode")) #set ($garbage = $qfcontrol.SelectUtil.Add("$column.CurrentCode")) #end
		#end
	#end
#end  ## foreach
        ],
## Assemble the Select criteria from the Select property and any controls requiring additional fields			
#if ($qfcontrol.Select.Count > 0)
	#foreach($item in $qfcontrol.Select)
## The String Collection Add method returns the index.  Set to a garbage var so it doesn't write to the output.
#if (!$qfcontrol.SelectUtil.Contains("$item")) #set ($garbage = $qfcontrol.SelectUtil.Add("$item")) #end		
	#end ##foreach
#end 
#if($qfcontrol.FeedCategory == "Proxy")
        store : new Sage.Data.ProxySDataStore({
            service : Sage.Utility.getSDataService('proxy', true),
            resourceKind: '${qfcontrol.ResourceKind.Name}',
#if($qfcontrol.ResourceKind.GetPredicate != "")
            getResourcePredicate: ${qfcontrol.ResourceKind.GetPredicate},
#end
            getAppId: ${qfcontrol.OnGetMappingId},
            include: [${qfcontrol.StringsToQuotedArray($qfcontrol.Include)}],
            select: [${qfcontrol.StringsToQuotedArray($qfcontrol.SelectUtil)}],
            pathSegments: [
#set ($comma = "")
#foreach($seg in $qfcontrol.PathSegments)
                $comma {
                    'text' : '$seg.Name'
#if($seg.GetPredicate != "")
                    ,'getPredicate' : $seg.GetPredicate
#end ##if
                }
#set ($comma = ",")
#end  ##foreach
            ]
        }),
#else
        storeOptions: {
            resourceKind: '$qfcontrol.ResourceKind',
#if (${qfcontrol.ParentRelationshipPropertyName} != "")
            newItemParentReferenceProperty: '${qfcontrol.ParentRelationshipPropertyName}',
#end
            include: [${qfcontrol.StringsToQuotedArray($qfcontrol.Include)}],
            select: [${qfcontrol.StringsToQuotedArray($qfcontrol.SelectUtil)}],
	    //The .net vehicle to store grid data on postback
            dataCarrierId: '${pagegenerator.FormName}${qfcontrol.ControlId}_DataCarrier',
            sort: [
## Default sort
#set ($comma = "")
#foreach($column in $qfcontrol.Columns)
 #if ($column.SortDirection != "None")
  $comma { attribute: "${column.SortField}"
  #if ($column.SortDirection == "Descending")
   ,descending: true
  #end
   }
  #set ($comma = ",")   
 #end  
#end   ## foreach         
            ]
        },
#end
        tools: [
#set ($comma = "")
#foreach($tool in $qfcontrol.Tools)
$comma
#if($tool.Name == "Add")#doAddBtn($tool)
#elseif($tool.Name == "Delete")#doDeleteBtn($tool)
#elseif($tool.Name == "Save")#doSaveBtn($tool)
#elseif($tool.Name == "Cancel")#doCancelBtn($tool)
#elseif($tool.Name == "Relate")#doAddRelationBtn($tool)
#else #doCustomBtn($tool)
#end  ##button types
#set ($comma = ",")
#end ##foreach
        ],
#if($qfcontrol.OnDataChange != "")      
        onDataChange : ${qfcontrol.OnDataChange},
#end
#if($qfcontrol.ConditionalWhere != "")
        contextualCondition: ${qfcontrol.ConditionalWhere},
#elseif($qfcontrol.ParentRelationshipPropertyName != "")
        contextualCondition: function() { return '${qfcontrol.ParentRelationshipPropertyName}.Id eq "' + Sage.Utility.getCurrentEntityId() + '"'; },
#end
        
		## -- TODO: Refactor this condition out.  Preview grid made it necessary for the time being.
		#if($qfcontrol.PreviewField != "")
     slxContext: dojo.mixin({ tabId : '${pagegenerator.FormName}' }, runtimeConfig),	   
		#else
		tabId : '${pagegenerator.FormName}',
		gridNodeId: '${pagegenerator.FormName}${qfcontrol.ControlId}_Grid',
		#end        
		id : '${pagegenerator.FormName}${qfcontrol.ControlId}',
        rowsPerPage: ${qfcontrol.PageSize},
        singleClickEdit: true
    };

	#if($qfcontrol.PreviewField != "")

	var grid = new SLXPreviewGrid.Grid(options, '${pagegenerator.FormName}${qfcontrol.ControlId}_Grid');
	#else
	var grid = new EditableGrid(options);
	var container = dijit.byId(grid.gridNodeId);
	container.addChild(grid);
	#end
    window.setTimeout(function () { grid.startup(); }, 1);
	aspect.after(grid, 'startup', function () {
		// This is not a typo.  The dijit.layout.ContentPane is not affectively determining all of it's layout information
		// on the first pass through resize.  Calling resize twice effectively renders the grid to fill it's container.
		var localTC = dijit.byId('tabContent');
		localTC.resize(); localTC.resize();
	});
#if (${qfcontrol.OnAdd} != "")
    grid.store.onNew = ${qfcontrol.OnAdd} ;
#end
## if it was a relate tool, we might need to add more script...
#foreach($tool in $qfcontrol.Tools)
#if($tool.Name == 'Relate')
 #if(${tool.LookupButton.OnSelection} == "")
    var lup = dijit.byId('${tool.LookupButton.ControlId}');
    if (lup) {
      lup.doSelected = function (items) {
        var grid = dijit.byId('${pagegenerator.FormName}${qfcontrol.ControlId}');        
        grid.addAssociatedItems(items, "${qfcontrol.ParentRelationshipPropertyName}", "${qfcontrol.ChildRelationshipPropertyName}", lup);
      };
    }
 #end
#end ##if tool is Relate
#end ##foreach

});
}
