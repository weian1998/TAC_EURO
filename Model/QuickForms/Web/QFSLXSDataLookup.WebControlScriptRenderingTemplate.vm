#set($stringObjectName = "${pagegenerator.FormName}${qfcontrol.ControlId}_Strings")

#macro(doHideCondition $col)
	#if($col.HideCondition != "")
	    //Set to the value of the visibleCondition property
	    hidden: ${col.HideCondition}(),
	#end
#end
{
  id : '${qfcontrol.ControlId}',
  btnToolTip :  ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${qfcontrol.ControlId}.ButtonTooltip")']  ||  '${qfcontrol.ButtonTooltip}', 
  dialogButtonText : ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${qfcontrol.ControlId}.DialogButtonText")']  ||  '${qfcontrol.DialogButtonText}', 
  displayMode : 4, //$ {qf control . LookupDisplayMode}  When adding other dijit templates, need to convert control to use enum values
  dialogTitle : ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${qfcontrol.ControlId}.LookupDialogTitle")']  ||  '${qfcontrol.LookupDialogTitle}',
  #if ($qfcontrol.LookupDialogHeight > 0) dialogHeight : '${qfcontrol.LookupDialogHeight}',  #end
  #if ($qfcontrol.LookupDialogWidth > 0) dialogWidth : '${qfcontrol.LookupDialogWidth}', #end
  structure : [
     {
       defaultCell: { width: 8, editable: false, styles: 'text-align: right;' },
       cells: [
	       {
        field: '$key',
        editable: false,
        hidden: true,
        id: 'id',
        formatter: function (value, rowIdx, grid) {
            var anchor = ['<div id=', value, ' >', value, '</ div>'].join('');
		return anchor;
        }
    },
#set($comma = "")
#foreach($lprop in $qfcontrol.LookupProperties)
         $comma
		 {
		   name: ${stringObjectName}['$generator.ConvertResourceKeyToScriptReference("${qfcontrol.ControlId}.LookupProperties.${lprop.PropertyHeader}.PropertyHeader"))']  || '$lprop.PropertyHeader',
		   field: '$lprop.PropertyName',
		   propertyType: '$lprop.PropertyType',
		   excludeFromFilters: $generator.GetJavascriptBoolString($lprop.ExcludeFromFilters),		   
		   sortable: true,
		   #if($lprop.HideCondition != "")
		       //Set to the value of the visibleCondition property
			   hidden: ${lprop.HideCondition}(),
	       #end
#if($comma != ",")
		   width: 17,
		   styles: 'text-align: left;',
#end
		   formatter: function (value, rowIdx, grid) {
				return Sage.Utility.SDataLookupChildObjectFormatter({
					value: value, rowIdx: rowIdx, grid: grid,
		            fieldName: '$lprop.PropertyName', 
#if($comma != ",")
					includeButton: true, 
#else
					includeButton: false, 
#end
					childentity: '${qfcontrol.ChildEntity}'
		        });
		   }
         }
#set($comma = ",")
#end
       ] ## end of cells array.
     }  ## end of the object in the 'structure' array
  ], ## end of 'structure' array
  storeOptions: {
    resourceKind : '$generator.GetSDataPathName(${qfcontrol.LookupResourceName})',
	select : ${qfcontrol.LookupSelectList}
  },
  gridOptions: {
	#if($qfcontrol.ConditionalShow != "")
        contextualShow: ${qfcontrol.ConditionalShow},
	#end	  
	#if($qfcontrol.ConditionalWhere != "")
        contextualCondition: ${qfcontrol.ConditionalWhere},
	#end
    selectionMode : '${qfcontrol.LookupSelectionMode}',
    rowsPerPage : 15
  }
#if($qfcontrol.OnSelection != "")
  ,
  doSelected : ${qfcontrol.OnSelection}
#end

} // end of sdata lookup config object
