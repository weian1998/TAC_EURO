<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="079c0dd1-96e9-41b2-8a37-93e1cbd6a923" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>dc3d27ec-00a6-4846-8f55-e039b92d70e1</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload0</MethodName>
          <CSharpCodeSnippet>Sage.Entity.Interfaces.IOpportunity opportunity = this.BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
if (opportunity != null)
{
    Sage.Platform.SData.IAppIdMappingService mappingService =
        Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.SData.IAppIdMappingService&gt;(
            true);
	if (mappingService.IsIntegrationEnabled())
	{
		var clientContextService = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.ClientContextService&gt;();
		if (clientContextService != null)
		{
			// OperatingCompany
			if (clientContextService.CurrentContext.ContainsKey("OperatingCompany"))
			{
                if (opportunity.OperatingCompany != null)
                {
				    clientContextService.CurrentContext["OperatingCompany"] = opportunity.OperatingCompany.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("OperatingCompany");
                }
			}
			else
			{
                if (opportunity.OperatingCompany != null)
                {
                    clientContextService.CurrentContext.Add("OperatingCompany", opportunity.OperatingCompany.Id.ToString());
                }
			}
			
			// SlxPriceList
			if (clientContextService.CurrentContext.ContainsKey("SlxPriceList"))
			{
                if (opportunity.SlxPriceList != null)
                {
				    clientContextService.CurrentContext["SlxPriceList"] = opportunity.SlxPriceList.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("SlxPriceList");
                }
			}
			else
			{
                if (opportunity.SlxPriceList != null)
                {
                    clientContextService.CurrentContext.Add("SlxPriceList", opportunity.SlxPriceList.Id.ToString());
                }
			}						
        }
	}
}</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>True</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>OpportunityProducts</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys>
    <string>error_AccountingSystem_Undefined</string>
    <string>error_ClientContext_Undefined</string>
    <string>error_ExecutingRequest</string>
    <string>error_ExecutingRequest_Ext</string>
    <string>error_OperatingCompany_Undefined</string>
    <string>error_ZeroBasePrice</string>
  </ClientResourceKeys>
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls">
      <QFSDataGrid>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>grdOppProducts</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <GenerateMember>false</GenerateMember>
        <ReadOnlyCondition>False</ReadOnlyCondition>
        <AppliedSecurity />
        <RelateToPropertyName>Products</RelateToPropertyName>
        <PreviewField />
        <ResourceKind>
          <Name>opportunityProducts</Name>
          <GetPredicate />
        </ResourceKind>
        <PathSegments />
        <PageSize>21</PageSize>
        <Columns>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>6ef4d952-2b1a-4d9f-a36e-35a942dd32bb</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>EditOpportunityProduct</SmartPart>
              <Height>360</Height>
              <Width>600</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>OpportunityProduct</EntityType>
              <ResourceKey>38611e40-47c3-4f73-88e1-62bfa47171a4</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/Opportunity/Edit</AppliedSecurity>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
}</HideCondition>
            <Width>4</Width>
          </QFSDataEditCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Sort</DataField>
            <ColumnId>33816379-5ee4-4a9d-850c-ce5518934f95</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>Ascending</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Sort</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>6</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Product.Name</DataField>
            <ColumnId>5e29a114-4a97-45a3-9db6-2d0b10fd74dd</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Product.Name</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>15</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Product.Family</DataField>
            <ColumnId>89fb1ecc-72a4-4f09-921b-29a9175daf56</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Product.Family</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>6</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>Program</DataField>
            <ColumnId>a85f781e-8ec4-4eb2-959b-8d969ef1d648</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Program</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return isIntegrationContractEnabled();
}</HideCondition>
            <Width>8</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>false</SeedOnRowEntity>
            <SeedOnRelatedEntity>Product</SeedOnRelatedEntity>
            <ConditionalWhere />
            <ResourceKind>productPrograms</ResourceKind>
            <LookupBindingMode>String</LookupBindingMode>
            <LookupDisplayProperty>Program</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>Price</DataField>
            <ColumnId>6a57e635-5b9d-48b1-a5ec-baf4745cc0c4</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Price</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>6</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Discount</DataField>
            <ColumnId>a4c903b4-ff1a-4479-a402-caae0353699e</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Discount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>6</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>2</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Percent</FormatType>
          </QFSDataNumericCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>6a6d5c85-c8d6-4660-9f10-3855008c45ca</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>8</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>0723086e-115c-4d05-aa21-e047d57c316a</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>Opportunity.ExchangeRateCode</CurrentCode>
            <ExchangeRate>Opportunity.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Quantity</DataField>
            <ColumnId>bdcfebf2-8c54-459a-97ec-00e4d92f86dc</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Quantity</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>8</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>0</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Number</FormatType>
          </QFSDataNumericCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>8b5cf516-7850-47e3-b512-402fe221806c</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>ceb64e60-2b36-42fe-8a84-491ad1bf158d</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>Opportunity.ExchangeRateCode</CurrentCode>
            <ExchangeRate>Opportunity.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
        </Columns>
        <ConditionalWhere>function() { return 'Opportunity.Id eq "' + Sage.Utility.getCurrentEntityId() + '"'; }</ConditionalWhere>
        <Select>
          <string>Id</string>
        </Select>
        <Include>
          <string>Opportunity</string>
        </Include>
        <FeedCategory>InternalAppEntities</FeedCategory>
        <OnGetMappingId />
        <ParentRelationshipPropertyName>Opportunity</ParentRelationshipPropertyName>
        <ChildRelationshipPropertyName>Product</ChildRelationshipPropertyName>
        <OnDataChange>function (entity, attribute, oldValue, newValue) {
	if (oldValue === newValue) {
        return;
    }
    if (attribute === 'Program') {
        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/productPrograms?select=Price&amp;where=Product.Id eq '${0}' and Program eq '${1}'&amp;format=json",
            [entity.Product.$key, escape(newValue)]);
        dojo.xhrGet({
            cache: false,
            preventCache: true,
            handleAs: 'json',
            url: sUrl,
            sync: true,
            load: function(programPrice) {
                if (programPrice.$resources != null &amp;&amp; programPrice.$resources.length == 1) {
                    entity.Price = programPrice.$resources[0].Price;
                    entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
                    entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
                }
            },
            data: { },
            error: function(request, status, error) {
                var sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequest'], [sUrl, request.statusText, request.status]);
                if (dojo.isString(request.responseText)) {
                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                        var oSDataError = dojo.fromJson(request.responseText);
                        if (dojo.isArray(oSDataError)) {
                            sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequestExt'],
                                [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                        }
                    }
                }
                Sage.UI.Dialogs.showError(sError);
            }
        });
    }
    if (attribute === 'Discount') {
        var price = entity.Price;
        if (price == 0) {
            price = entity.CalculatedPrice;
        }
        if (price == 0) {
            entity.Discount = 0;
            Sage.UI.Dialogs.showError(error_ZeroBasePrice);
        } else {
            entity.CalculatedPrice = price - (price * entity.Discount);
        }
    } else if (attribute === 'CalculatedPrice') {
        if (entity.Price == 0) {
            entity.Discount = 0;
        } else {
            entity.Discount = 1 - entity.CalculatedPrice / entity.Price;
        }
    }
    if ((attribute === 'Discount') || (attribute === 'CalculatedPrice') || (attribute === 'Quantity')) {
        entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
    }
}</OnDataChange>
        <OnAdd />
        <Tools>
          <SDataGridSaveTool>
            <Name>Save</Name>
            <Image>[Localization!Global_Images:Save_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridSaveTool>
          <SDataGridAddRelationTool>
            <Name>Relate</Name>
            <Image />
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default add relationship behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
            <LookupButton>
              <Column>0</Column>
              <Row>0</Row>
              <HotKey>0</HotKey>
              <TabIndex>0</TabIndex>
              <ControlId>lueProduct</ControlId>
              <DataBindings />
              <ControlLabelPlacement>left</ControlLabelPlacement>
              <ExtendedProperties />
              <CaptionAlignment>left</CaptionAlignment>
              <StyleScheme />
              <OnChangeAction>
                <ResourceKey>06df5581-bbe5-44b1-b261-ca6d637024da</ResourceKey>
                <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
                  <NoActionActionItem>
                    <MethodName />
                  </NoActionActionItem>
                </Action>
                <IsDialogCloseAction>False</IsDialogCloseAction>
                <RunOnEveryRePaint>False</RunOnEveryRePaint>
                <DialogActionResult>NoResult</DialogActionResult>
                <PerformsUpdate>False</PerformsUpdate>
                <AppliedSecurity />
                <RefreshData>False</RefreshData>
              </OnChangeAction>
              <Required>false</Required>
              <LookupImage>[Localization!Global_Images:add_products_16x16]</LookupImage>
              <LookupDialogWidth xsi:nil="true" />
              <LookupDialogHeight xsi:nil="true" />
              <LookupDisplayMode>ButtonOnly</LookupDisplayMode>
              <LookupBindingMode>Object</LookupBindingMode>
              <LookupResultValue xsi:type="xsd:string" />
              <AddEmptyListItem>false</AddEmptyListItem>
              <AllowClearingResult>false</AllowClearingResult>
              <AppendStringValues>false</AppendStringValues>
              <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
              <LookupEntityName>Product</LookupEntityName>
              <LookupEntityTypeName>Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
              <AutoPostBack>false</AutoPostBack>
              <EnableHyperLinking>false</EnableHyperLinking>
              <InitializeLookup>false</InitializeLookup>
              <LookupProperties>
                <LookupProperty>
                  <PropertyName>Name</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Name</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Family</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Family</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Status</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Status</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ActualId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>SKU</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
              </LookupProperties>
              <LookupPreFilters />
              <LookupSelectionMode>Multi</LookupSelectionMode>
              <OnSelection>function (items) {
    dojo.require('Sage.UI.Dialogs');
    var undefinedAccountingSystem = OpportunityProductsResources['error_AccountingSystem_Undefined'];
    if (!items.length) return;
    var bIsIcEnabled = isIntegrationContractEnabled();
    var grid = dijit.byId('OpportunityProductsgrdOppProducts');
    if (grid &amp;&amp; grid.store) {
        var recordCount = grid.rowCount;
        var iCurrentCount = 0;
        var iTotalCount = 0;
        var sAppId = "";
        if (bIsIcEnabled) {
            var sOperatingCompanyId = "";
            var sPriceListId = "";
            var clientContextService = Sage.Services.getService("ClientContextService");
            if (clientContextService != null &amp;&amp; typeof clientContextService !== "undefined") {
                if (clientContextService.containsKey("OperatingCompany")) {
                    sOperatingCompanyId = clientContextService.getValue("OperatingCompany");
                    if (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12) {
                        sAppId = sOperatingCompanyId;
                    }
                }
            }
            if (sAppId === "") {
                Sage.UI.Dialogs.showError(undefinedAccountingSystem);
                return;
            }
        }
        var arrItems = [];
        grid.store.newItem({
            onComplete: function(oppProduct) {
                var addProduct = function(prod, refresh, quantity) {
                    var sSelect = "select=Id,Description,Family,Name,Unit,";
                    sSelect += (bIsIcEnabled) ? "UnitOfMeasure/Id,Prices/Price,Prices/Currency,Prices/UnitOfMeasure,Prices/SlxPriceList,Prices/SlxPriceList.Id" : "ProductProgram/Program,ProductProgram/Price,ProductProgram/DefaultProgram";
                    var sWhere = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                    sWhere += (bIsIcEnabled) ? dojo.string.substitute(" and UnitOfMeasure eq Prices.UnitOfMeasure and Prices.SlxPriceList.Id eq '${0}' and Prices.AppId eq '${1}' and Prices.ActiveFlag = true", [sPriceListId, sAppId]) : "";
                    var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                        [sSelect, sWhere, (new Date().getTime().toString())]);
                    dojo.xhrGet({
                        url: sUrl,
                        cache: false,
                        preventCache: true,
                        handleAs: 'json',
                        load: function(prodResponse) {
                            if (prodResponse.$resources == null || prodResponse.$resources.length == 0) {
                                if (bIsIcEnabled) {
                                    /* Check without using an SlxPriceList.Id. */
                                    sSelect = "select=Id,ActualId,CommodityType,Description,Family,Name,";
                                    sSelect += "UnitOfMeasure/Id,UnitOfMeasure/Name,Prices/Price,Prices/Currency,Prices/UnitOfMeasure";
                                    sWhere = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                                    sWhere += dojo.string.substitute(" and UnitOfMeasure eq Prices.UnitOfMeasure and Prices.AppId eq '${0}' and Prices.ActiveFlag = true", [sAppId]);
                                    sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                                        [sSelect, sWhere, (new Date().getTime().toString())]);
                                    dojo.xhrGet({
                                        cache: false,
                                        preventCache: true,
                                        handleAs: 'json',
                                        url: sUrl,
                                        load: function(prodResponse) {
                                            if (prodResponse.$resources == null || prodResponse.$resources.length == 0) {
                                                var newEntity = { };
                                                var product = prod;
                                                //Insert mode check
                                                if (Sage.Utility.getModeId() === 'insert') {
                                                    product.$cacheID = new Date().getTime();
                                                } else {
                                                    oppProduct.Opportunity = { $key: Sage.Utility.getCurrentEntityId() };
                                                }
                                                oppProduct.Product = { };
                                                delete product.index;
                                                Sage.Utility.extend(oppProduct.Product, product);
                                                oppProduct.Product.Family = product.Family;
                                                oppProduct.Discount = 0;
                                                oppProduct.Quantity = quantity;
                                                oppProduct.Sort = recordCount += 1;

                                                product.Price = 0;
                                                oppProduct.Price = 0;
                                                oppProduct.ExtendedPrice = 0;
                                                oppProduct.CalculatedPrice = 0;

                                                delete product.$key;
                                                delete product.$name;
                                                delete product.$url;
                                                Sage.Utility.extend(true, newEntity, oppProduct, product);
                                                arrItems.push(newEntity);
                                                iCurrentCount++;
                                                if (iCurrentCount === iTotalCount) {
                                                    grid.createItems(arrItems, function() {
                                                        if (Sage.Utility.getModeId() !== 'insert') {
                                                            __doPostBack("MainContent", "");
                                                        }
                                                    });
                                                }
                                            } else {
                                                if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                                    for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                                        var newEntity = { };
                                                        var product = prodResponse.$resources[x];
                                                        //Insert mode check
                                                        if (Sage.Utility.getModeId() === 'insert') {
                                                            product.$cacheID = new Date().getTime();
                                                        } else {
                                                            oppProduct.Opportunity = { $key: Sage.Utility.getCurrentEntityId() };
                                                        }
                                                        oppProduct.Product = { };
                                                        delete product.index;
                                                        Sage.Utility.extend(oppProduct.Product, product);

                                                        oppProduct.Discount = 0;
                                                        oppProduct.Quantity = quantity;
                                                        oppProduct.Sort = recordCount += 1;
                                                        var price = 0;
                                                        product.Price = 0;
                                                        oppProduct.Price = 0;
                                                        oppProduct.ExtendedPrice = 0;
                                                        oppProduct.CalculatedPrice = 0;
                                                        if (prodResponse.$resources[x].Prices != null &amp;&amp;
                                                            prodResponse.$resources[x].Prices.$resources != null &amp;&amp;
                                                                prodResponse.$resources[x].Prices.$resources.length &gt; 0) {
                                                            for (var j = 0; j &lt; prodResponse.$resources[x].Prices.$resources.length; j++) {
                                                                if (prodResponse.$resources[x].Prices.$resources[j].UnitOfMeasure.$key === product.UnitOfMeasure.$key) {
                                                                    if (prodResponse.$resources[x].Prices.$resources[j].Price != null) {
                                                                        price = prodResponse.$resources[x].Prices.$resources[j].Price;
                                                                    }
                                                                    product.Price = price;
                                                                    oppProduct.Price = price;
                                                                    oppProduct.ExtendedPrice = price;
                                                                    oppProduct.CalculatedPrice = price;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        delete product.$key;
                                                        delete product.$name;
                                                        delete product.$url;
                                                        Sage.Utility.extend(true, newEntity, oppProduct, product);
                                                        arrItems.push(newEntity);
                                                        iCurrentCount++;
                                                        if (iCurrentCount === iTotalCount) {
                                                            grid.createItems(arrItems, function() {
                                                                if (Sage.Utility.getModeId() !== 'insert') {
                                                                    __doPostBack("MainContent", "");
                                                                }
                                                            });
                                                        }
                                                    }
                                                } else {
                                                    iTotalCount--;
                                                    if (iCurrentCount === iTotalCount) {
                                                        grid.createItems(arrItems, function() {
                                                            if (Sage.Utility.getModeId() !== 'insert') {
                                                                __doPostBack("MainContent", "");
                                                            }
                                                        });
                                                    }
                                                }
                                            }
                                        },
                                        data: { },
                                        error: function(request, status, error) {
                                            if (iTotalCount &gt; 0) {
                                                iTotalCount--;
                                            }
                                            var sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequest'], [sUrl, request.statusText, request.status]);
                                            if (dojo.isString(request.responseText)) {
                                                if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                                    var oSDataError = dojo.fromJson(request.responseText);
                                                    if (dojo.isArray(oSDataError)) {
                                                        sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequestExt'],
                                                            [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                                    }
                                                }
                                            }
                                            Sage.UI.Dialogs.showError(sError);
                                        }
                                    });
                                } else {
                                    var newEntity = { };
                                    var product = prod;
                                    //Insert mode check
                                    if (Sage.Utility.getModeId() === 'insert') {
                                        product.$cacheID = new Date().getTime();
                                    } else {
                                        oppProduct.Opportunity = { $key: Sage.Utility.getCurrentEntityId() };
                                    }
                                    oppProduct.Product = { };
                                    delete product.index;
                                    Sage.Utility.extend(oppProduct.Product, product);
                                    oppProduct.Product.Family = product.Family;
                                    oppProduct.Discount = 0;
                                    oppProduct.Quantity = quantity;
                                    oppProduct.Sort = recordCount += 1;
                                    oppProduct.Price = product.Price;
                                    oppProduct.ExtendedPrice = product.Price;
                                    oppProduct.CalculatedPrice = product.Price;
                                    delete product.$key;
                                    delete product.$name;
                                    delete product.$url;
                                    Sage.Utility.extend(true, newEntity, oppProduct, product);
                                    arrItems.push(newEntity);
                                    iCurrentCount++;
                                    if (iCurrentCount === iTotalCount) {
                                        grid.createItems(arrItems, function() {
                                            if (Sage.Utility.getModeId() !== 'insert') {
                                                __doPostBack("MainContent", "");
                                            }
                                        });
                                    }
                                }
                            } else {
                                if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                    for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                        var newEntity = { };
                                        var product = prodResponse.$resources[x];
                                        //Insert mode check
                                        if (Sage.Utility.getModeId() === 'insert') {
                                            product.$cacheID = new Date().getTime();
                                        } else {
                                            oppProduct.Opportunity = { $key: Sage.Utility.getCurrentEntityId() };
                                        }
                                        oppProduct.Product = { };
                                        delete product.index;
                                        Sage.Utility.extend(oppProduct.Product, product);
                                        oppProduct.Discount = 0;
                                        oppProduct.Quantity = quantity;
                                        oppProduct.Sort = recordCount += 1;
                                        var price = 0;
                                        if (bIsIcEnabled) {
                                            /* IC */
                                            product.Price = 0;
                                            oppProduct.Price = 0;
                                            oppProduct.ExtendedPrice = 0;
                                            oppProduct.CalculatedPrice = 0;
                                            oppProduct.Program = null;
                                            if (prodResponse.$resources[x].Prices != null &amp;&amp;
                                                prodResponse.$resources[x].Prices.$resources != null &amp;&amp;
                                                    prodResponse.$resources[x].Prices.$resources.length &gt; 0) {
                                                for (var j = 0; j &lt; prodResponse.$resources[x].Prices.$resources.length; j++) {
                                                    if (prodResponse.$resources[x].Prices.$resources[j].UnitOfMeasure.$key === product.UnitOfMeasure.$key) {
                                                        if (prodResponse.$resources[x].Prices.$resources[j].Price != null) {
                                                            price = prodResponse.$resources[x].Prices.$resources[j].Price;
                                                        }
                                                        product.Price = price;
                                                        oppProduct.Price = price;
                                                        oppProduct.ExtendedPrice = price;
                                                        oppProduct.CalculatedPrice = price;
                                                        break;
                                                    }
                                                }
                                            }
                                        } else {
                                            /* NON-IC */
                                            product.Price = 0;
                                            oppProduct.Price = 0;
                                            oppProduct.ExtendedPrice = 0;
                                            oppProduct.CalculatedPrice = 0;
                                            oppProduct.Program = null;
                                            if (prodResponse.$resources[x].ProductProgram != null &amp;&amp;
                                                prodResponse.$resources[x].ProductProgram.$resources != null &amp;&amp;
                                                    prodResponse.$resources[x].ProductProgram.$resources.length &gt; 0) {
                                                for (var j = 0; j &lt; prodResponse.$resources[x].ProductProgram.$resources.length; j++) {
                                                    /* Grab the price for the default program. */
                                                    if (prodResponse.$resources[x].ProductProgram.$resources[j].DefaultProgram) {
                                                        if (prodResponse.$resources[x].ProductProgram.$resources[j].Price != null) {
                                                            price = prodResponse.$resources[x].ProductProgram.$resources[j].Price;
                                                        }
                                                        product.Price = price;
                                                        oppProduct.Price = price;
                                                        oppProduct.ExtendedPrice = price;
                                                        oppProduct.CalculatedPrice = price;
                                                        oppProduct.Program = prodResponse.$resources[x].ProductProgram.$resources[j].Program;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        delete product.$key;
                                        delete product.$name;
                                        delete product.$url;
                                        Sage.Utility.extend(true, newEntity, oppProduct, product);
                                        arrItems.push(newEntity);
                                        iCurrentCount++;
                                        if (iCurrentCount === iTotalCount) {
                                            grid.createItems(arrItems, function() {
                                                if (Sage.Utility.getModeId() !== 'insert') {
                                                    __doPostBack("MainContent", "");
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        },
                        data: { },
                        error: function(request, status, error) {
                            if (iTotalCount &gt; 0) {
                                iTotalCount--;
                            }
                            var sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequest'], [sUrl, request.statusText, request.status]);
                            if (dojo.isString(request.responseText)) {
                                if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                    var oSDataError = dojo.fromJson(request.responseText);
                                    if (dojo.isArray(oSDataError)) {
                                        sError = dojo.string.substitute(OpportunityProductsResources['error_ExecutingRequestExt'],
                                            [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                    }
                                }
                            }
                            Sage.UI.Dialogs.showError(sError);
                        }
                    });
                };
                var getTotalCount = function() {
                    var iResult = 0;
                    var i;
                    for (i = 0; i &lt; items.length; i += 1) {
                        var item = items[i];
                        if (item.ProdPackageKitType === 'PKG') {
                            for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                                iResult++;
                            }
                        } else {
                            iResult++;
                        }
                    }
                    return iResult;
                };
                iTotalCount = getTotalCount();
                var iCount = 0;
                var i;
                for (i = 0; i &lt; items.length; i += 1) {
                    var quantity = 1;
                    var item = items[i];
                    if (item.ProdPackageKitType === 'PKG') {
                        for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                            var prod = item.PackageKitChildViews.$resources[j];
                            prod.$key = item.PackageKitChildViews.$resources[j].ProductId;
                            if (prod.Quantity != null) {
                                quantity = prod.Quantity;
                            }
                            iCount++;
                            addProduct(prod, true, quantity);
                        }
                    } else {
                        iCount++;
                        addProduct(item, true, quantity);
                    }
                }
            }
        });
    }
}</OnSelection>
              <AdditionalSelectFields>
                <string>ProductId</string>
                <string>ProdPackageKitType</string>
                <string>AppId</string>
                <string>Quantity</string>
                <string>ActiveFlag</string>
              </AdditionalSelectFields>
              <ChildEntity>PackageKitChildViews</ChildEntity>
              <LookupResourceName>ProdPackageKitView</LookupResourceName>
              <ConditionalWhere>function () {
    var sCondition = '';
    var showError = function(msg) {
        var msgService = Sage.Services.getService("WebClientMessageService");
        if (msgService != null &amp;&amp; typeof msgService !== "undefined") {
            msgService.showClientError(msg);
        } else {
            Sage.UI.Dialogs.showError(msg);
        }
    };
    var service = Sage.Services.getService("IntegrationContractService");
    if (service != null &amp;&amp; typeof service !== "undefined") {
        if (service.isIntegrationEnabled) {
            var bFoundOperatingCompany = false;
            var clientContextService = Sage.Services.getService("ClientContextService");
            if (clientContextService != null &amp;&amp; typeof clientContextService !== "undefined") {
                if (clientContextService.containsKey("OperatingCompany")) {
                    var sOperatingCompanyId = clientContextService.getValue("OperatingCompany");
                    bFoundOperatingCompany = (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12);
                    if (bFoundOperatingCompany) {
                        sCondition = 'AppId eq "' + sOperatingCompanyId + '" ' + "And ActiveFlag eq true";
                    }
                }
                var sError = OpportunityProductsResources['error_OperatingCompany_Undefined'];
                if (!bFoundOperatingCompany) {
                    showError(sError);
                    throw new Error(sError);
                }
            } else {
                sError = OpportunityProductsResources['error_ClientContext_Undefined'];
                showError(sError);
                throw new Error(sError);
            }
        }
    }
    return sCondition;
}
</ConditionalWhere>
              <ConditionalShow>function () {
    var oResult = { result: true, reason: '' };
    var service = Sage.Services.getService('IntegrationContractService');
    if (service != null &amp;&amp; typeof service !== 'undefined') {
        if (service.isIntegrationEnabled) {
            var bFoundOperatingCompany = false;
            var clientContextService = Sage.Services.getService('ClientContextService');
            if (clientContextService != null &amp;&amp; typeof clientContextService !== 'undefined') {
                if (clientContextService.containsKey('OperatingCompany')) {
                    var sOperatingCompanyId = clientContextService.getValue('OperatingCompany');
                    bFoundOperatingCompany = (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12);
                }
                if (!bFoundOperatingCompany) {
                    oResult.result = false;
                    oResult.reason = OpportunityProductsResources['error_AccountingSystem_Undefined'];
                }
            } else {
                oResult.result = false;
                oResult.reason = OpportunityProductsResources['error_ClientContext_Undefined'];
            }
        }
    }
    return oResult;
}
</ConditionalShow>
            </LookupButton>
          </SDataGridAddRelationTool>
          <SDataGridCancelTool>
            <Name>Cancel</Name>
            <Image>[Localization!Global_Images:Reset_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default Cancel behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridCancelTool>
          <SDataGridDeleteTool>
            <Name>Delete</Name>
            <Image>[Localization!Global_Images:Delete_16x16]</Image>
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridDeleteTool>
        </Tools>
      </QFSDataGrid>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>f8eed676c0349a4976932438a5f6234</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>f33357a3a724c89b88999a0ca8c0147</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>false</UseEntityNameAsTitle>
  <EntityTypeName>IOpportunity</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>