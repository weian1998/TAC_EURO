<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="8c9411f6-a715-413d-a90b-e93bebb35474" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions />
  <Name>TicketActivityItems</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys>
    <string>error_ExecutingRequest</string>
    <string>error_ExecutingRequestEx</string>
    <string>error_CopyingPart</string>
  </ClientResourceKeys>
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls">
      <QFSDataGrid>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>grdActivityParts</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <GenerateMember>false</GenerateMember>
        <ReadOnlyCondition>False</ReadOnlyCondition>
        <AppliedSecurity />
        <RelateToPropertyName>Items</RelateToPropertyName>
        <PreviewField />
        <ResourceKind>
          <Name>ticketActivityItems</Name>
          <GetPredicate />
        </ResourceKind>
        <PathSegments />
        <Columns>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField />
            <ColumnId>a116eddf-12f1-44ba-b510-7e40e6f6e59c</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>AddEditTicketActivityItem</SmartPart>
              <Height>400</Height>
              <Width>400</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>TicketActivityItem</EntityType>
              <ResourceKey>c66600f9-1fe4-4821-9ece-c93d5457d9f6</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity />
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
}</HideCondition>
            <Width>10</Width>
          </QFSDataEditCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>AccountProduct.ProductName</DataField>
            <ColumnId>9d3402ca-f3c1-4cb5-b118-016de4349de1</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>Ascending</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>AccountProduct.ProductName</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>15</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>AccountProduct.SerialNumber</DataField>
            <ColumnId>b1165945-e43b-4cc8-bb56-630e3e80535c</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>AccountProduct.SerialNumber</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>AccountProduct.ActualId</DataField>
            <ColumnId>5ece826e-d3e3-482d-8c0f-ea72bc664897</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>AccountProduct.ActualId</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>12</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ItemAmount</DataField>
            <ColumnId>8e9dc831-b1fd-43e0-b6f5-dfb0c44d751f</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ItemAmount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ItemDescription</DataField>
            <ColumnId>86f7a539-714d-4ae1-ae45-af0c526e277b</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>128</AbbreviationLength>
          </QFEditableCol>
        </Columns>
        <ConditionalWhere />
        <Select>
          <string>TicketActivity.Id</string>
        </Select>
        <Include />
        <FeedCategory>InternalAppEntities</FeedCategory>
        <OnGetMappingId />
        <ParentRelationshipPropertyName>TicketActivity</ParentRelationshipPropertyName>
        <ChildRelationshipPropertyName>Product</ChildRelationshipPropertyName>
        <OnDataChange />
        <OnAdd />
        <Tools>
          <SDataGridAddRelationTool>
            <Name>Relate</Name>
            <Image />
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default add relationship behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
            <LookupButton>
              <Column>0</Column>
              <Row>0</Row>
              <HotKey>0</HotKey>
              <TabIndex>0</TabIndex>
              <ControlId>grdActivityParts_AddRelationTool</ControlId>
              <DataBindings />
              <ControlLabelPlacement>left</ControlLabelPlacement>
              <ExtendedProperties />
              <CaptionAlignment>left</CaptionAlignment>
              <StyleScheme />
              <OnChangeAction>
                <ResourceKey>grdActivityParts_AddRelationTool</ResourceKey>
                <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
                  <NoActionActionItem>
                    <MethodName />
                  </NoActionActionItem>
                </Action>
                <IsDialogCloseAction>False</IsDialogCloseAction>
                <RunOnEveryRePaint>False</RunOnEveryRePaint>
                <DialogActionResult>NoResult</DialogActionResult>
                <PerformsUpdate>False</PerformsUpdate>
                <AppliedSecurity />
                <RefreshData>False</RefreshData>
              </OnChangeAction>
              <Required>false</Required>
              <LookupImage>[Localization!Global_Images:plus_16x16]</LookupImage>
              <LookupDialogWidth xsi:nil="true" />
              <LookupDialogHeight xsi:nil="true" />
              <LookupDisplayMode>ButtonOnly</LookupDisplayMode>
              <LookupBindingMode>Object</LookupBindingMode>
              <LookupResultValue xsi:type="xsd:string" />
              <AddEmptyListItem>false</AddEmptyListItem>
              <AllowClearingResult>false</AllowClearingResult>
              <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
              <LookupEntityName>Product</LookupEntityName>
              <LookupEntityTypeName>Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
              <AutoPostBack>false</AutoPostBack>
              <EnableHyperLinking>false</EnableHyperLinking>
              <InitializeLookup>false</InitializeLookup>
              <LookupProperties>
                <LookupProperty>
                  <PropertyName>ActualId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>SKU</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Name</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Name</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Status</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Status</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
              </LookupProperties>
              <LookupPreFilters />
              <LookupSelectionMode>Multi</LookupSelectionMode>
              <OnSelection>function (items) {
        dojo.require('Sage.UI.Dialogs');
        if (!items.length) return;
        var grid = dijit.byId('TicketActivityItemsgrdActivityParts');
        if (grid &amp;&amp; grid.store) {
            var arrItems = [];
            var iCurrentCount = 0;
            var iTotalCount = 0;
            grid.store.newItem({
                onComplete: function (ticketActivityItem) {
                    var addProduct = function (prod) {
                        var price = 0;
                        var sSelect = "select=Id,Description,Family,Name,ActualId,";
                        sSelect += "ProductProgram/Program,ProductProgram/Price,ProductProgram/DefaultProgram";
                        var sWhere = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                            [sSelect, sWhere, (new Date().getTime().toString())]);
                        dojo.xhrGet({
                            url: sUrl,
                            handleAs: 'json',
                            load: function (prodResponse) {
                                if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                    for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                        var newTicketActivityItem = {};
                                        var newAccountProduct = {};
                                        var product = prodResponse.$resources[x];
                                        if (Sage.Utility.getModeId() === 'insert') {
                                            product.$cacheID = new Date().getTime();
                                        } else {
                                            ticketActivityItem.TicketActivity = { $key: Sage.Utility.getCurrentEntityId() };
                                        }
                                        ticketActivityItem.Product = {};
                                        ticketActivityItem.AccountProduct = {};

                                        delete product.index;
                                        Sage.Utility.extend(ticketActivityItem.Product, product);
                                        var accountProduct = {};
                                        accountProduct.ProductDescription = product.Description;
                                        accountProduct.ProductName = product.Name;
                                        accountProduct.ActualId = product.ActualId;
                                        accountProduct.Product = product;
                                        Sage.Utility.extend(true, newAccountProduct, ticketActivityItem.AccountProduct, accountProduct);
                                        Sage.Utility.extend(ticketActivityItem.AccountProduct, newAccountProduct);

                                        ticketActivityItem.ItemQuantity = 1;
                                        ticketActivityItem.ProductDescription = product.Description;
                                        ticketActivityItem.ProductName = product.Name;
                                        ticketActivityItem.ActualId = product.ActualId;
                                        product.Price = 0;
                                        ticketActivityItem.ItemAmount = 0;
                                        ticketActivityItem.ItemTotalAmount = 0;

                                        if (prodResponse.$resources[x].ProductProgram != null &amp;&amp;
                                            prodResponse.$resources[x].ProductProgram.$resources != null &amp;&amp;
                                                prodResponse.$resources[x].ProductProgram.$resources.length &gt; 0) {
                                            for (var j = 0; j &lt; prodResponse.$resources[x].ProductProgram.$resources.length; j++) {
                                                /* Grab the price for the default program. */
                                                if (prodResponse.$resources[x].ProductProgram.$resources[j].DefaultProgram) {
                                                    if (prodResponse.$resources[x].ProductProgram.$resources[j].Price != null) {
                                                        price = prodResponse.$resources[x].ProductProgram.$resources[j].Price;
                                                    }
                                                    product.Price = price;
                                                    ticketActivityItem.ItemAmount = price;
                                                    ticketActivityItem.ItemTotalAmount = price * ticketActivityItem.ItemQuantity;
                                                    break;
                                                }
                                            }
                                        }

                                        delete product.$key;
                                        delete product.$name;
                                        delete product.$url;
                                        Sage.Utility.extend(true, newTicketActivityItem, ticketActivityItem, product);
                                        Sage.Utility.extend(true, newTicketActivityItem, newAccountProduct, accountProduct);
                                        arrItems.push(newTicketActivityItem);
                                        iCurrentCount++;
                                        if (iCurrentCount === iTotalCount) {
                                            grid.createItems(arrItems, function () {
                                                if (Sage.Utility.getModeId() !== 'insert') {
                                                    __doPostBack("MainContent", "");
                                                }
                                            });
                                        }
                                    }
                                }
                            },
                            data: {},
                            error: function (request) {
                                var sError = dojo.string.substitute(TicketActivityItemsResources['error_ExecutingRequest'], [sUrl, request.statusText, request.status]);
                                if (dojo.isString(request.responseText)) {
                                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                        var oSDataError = dojo.fromJson(request.responseText);
                                        if (dojo.isArray(oSDataError)) {
                                            sError = dojo.string.substitute(TicketActivityItemsResources['error_ExecutingRequestExt'],
                                                [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                        }
                                    }
                                }
                                Sage.UI.Dialogs.showError(sError);
                            }
                        });
                    };
                    iTotalCount = items.length;
                    for (var i = 0; i &lt; items.length; i += 1) {
                        addProduct(items[i]);
                    }
                }
            });
        }
    }</OnSelection>
              <AdditionalSelectFields />
              <ChildEntity />
              <LookupResourceName>Product</LookupResourceName>
              <ConditionalWhere />
              <ConditionalShow />
            </LookupButton>
          </SDataGridAddRelationTool>
          <SDataGridTool>
            <Name>btnCopy</Name>
            <Image>[Localization!Global_Images:Copy_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () {
         // Execute the "CopyPart" method on each selected record
         var grid = this;
         var selectedItems = grid.selection.getSelected();
         if (selectedItems.length &lt; 1) {
             Sage.UI.Dialogs.showError(grid.noSelectionsText);
             return;
         }
         var store = grid.store;
         grid.showLoading();
         var service = Sage.Data.SDataServiceRegistry.getSDataService('dynamic');
         var fnCopy = function (i) {
             if (store.isItem(selectedItems[i])) {
                 var request = new Sage.SData.Client.SDataServiceOperationRequest(service)
	                .setResourceKind('ticketActivityItems')
	                .setOperationName('CopyPart');
                 var id = store.getValue(selectedItems[i], "$key");
                 var actId = store.getValue(selectedItems[i], "TicketActivity");
                 var entry = {
                     "$name": "CopyPart",
                     "request": {
                         "TicketActivityItemId": id,
                         "ticketActivity": actId
                     }
                 };
                 request.execute(entry, {
                     success: function (result) {
                         i++;
                         if (i &lt; selectedItems.length) {
                             fnCopy(i);
                         } else {
                             grid.refresh();
                         }
                     },
                     failure: function (result) {
                         Sage.UI.Dialogs.showError(dojo.string.substitute(TicketActivityItemsResources['error_CopyingPart'], [result]));
                     }
                 });
             }
         };
         fnCopy(0);
     }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridTool>
          <SDataGridDeleteTool>
            <Name>Delete</Name>
            <Image>[Localization!Global_Images:Delete_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { __doPostBack("MainContent", ""); }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridDeleteTool>
        </Tools>
      </QFSDataGrid>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>false</UseEntityNameAsTitle>
  <EntityTypeName>ITicketActivity</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>