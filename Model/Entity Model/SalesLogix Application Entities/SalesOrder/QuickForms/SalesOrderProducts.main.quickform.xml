<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="90e12bf4-fd63-47e4-b713-d69cfd0d2e09" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>bf48998d-0a7a-4649-9b73-71b442ebf292</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload0</MethodName>
          <CSharpCodeSnippet>Sage.Entity.Interfaces.ISalesOrder salesOrder = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
    Sage.Platform.SData.IAppIdMappingService mappingService =
        Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.SData.IAppIdMappingService&gt;(
            true);
    //if this is a Sales Order that synced from the accounting system or the Sales Order has been submitted then we disable it
    bool isIntegrated = mappingService.IsIntegrationEnabled();
	if (isIntegrated)
	{
		var clientContextService = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.ClientContextService&gt;();
		if (clientContextService != null)
		{
			// OperatingCompany
			if (clientContextService.CurrentContext.ContainsKey("OperatingCompany"))
			{
                if (salesOrder.OperatingCompany != null)
                {
				    clientContextService.CurrentContext["OperatingCompany"] = salesOrder.OperatingCompany.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("OperatingCompany");
                }
			}
			else
			{
                if (salesOrder.OperatingCompany != null)
                {
                    clientContextService.CurrentContext.Add("OperatingCompany", salesOrder.OperatingCompany.Id.ToString());
                }
			}
			
			// SlxPriceList
			if (clientContextService.CurrentContext.ContainsKey("SlxPriceList"))
			{
                if (salesOrder.SlxPriceList != null)
                {
				    clientContextService.CurrentContext["SlxPriceList"] = salesOrder.SlxPriceList.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("SlxPriceList");
                }
			}
			else
			{
                if (salesOrder.SlxPriceList != null)
                {
                    clientContextService.CurrentContext.Add("SlxPriceList", salesOrder.SlxPriceList.Id.ToString());
                }
			}			

			// GlobalSyncId			
			if (clientContextService.CurrentContext.ContainsKey("GlobalSyncId"))
			{
				clientContextService.CurrentContext["GlobalSyncId"] = salesOrder.GlobalSyncId.ToString();
			}
			else
			{
				clientContextService.CurrentContext.Add("GlobalSyncId", salesOrder.GlobalSyncId.ToString());
			}
			
			// SalesOrderStatus
            if (clientContextService.CurrentContext.ContainsKey("SalesOrderStatus"))
            {
                if (salesOrder.ERPSalesOrder != null &amp;&amp; !String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus))
                {
                    clientContextService.CurrentContext["SalesOrderStatus"] = salesOrder.ERPSalesOrder.ERPStatus;
                }
                else
                {
                    clientContextService.CurrentContext.Remove("SalesOrderStatus");
                }
            }
            else
            {
                if (salesOrder.ERPSalesOrder != null)
                {
                    clientContextService.CurrentContext.Add("SalesOrderStatus",
                                                            !String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus)
                                                                ? salesOrder.ERPSalesOrder.ERPStatus
                                                                : String.Empty);
                }
            }
        }
	}
    bool isOpen = false;
    if (!String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus))
    {
        isOpen = (salesOrder.ERPSalesOrder.ERPStatus.Equals(
            GetLocalResourceObject("erpStatus_Open").ToString()) ||
            salesOrder.ERPSalesOrder.ERPStatus.Equals(GetLocalResourceObject("erpStatus_Rejected").ToString()));
    }
    bool erpSalesOrder = (mappingService.IsIntegrationEnabled() &amp;&amp; (salesOrder.GlobalSyncId.HasValue &amp;&amp; !isOpen));
        
    bool lockPriceAccess = RoleSecurityService.HasAccess("Entities/SalesOrders/LockPricing");
    bool closed = false;
    if (salesOrder.Status != null)
    {
        closed = (salesOrder.Status.ToUpper().Equals(GetLocalResourceObject("SalesOrderStatus_Closed").ToString().ToUpper()) ||
            salesOrder.Status.ToUpper().Equals(GetLocalResourceObject("SalesOrderStatus_Transmitted").ToString().ToUpper()));
    }
    btnAddCustomProduct.Visible = btnAddCustomProduct.Visible &amp;&amp; !closed &amp;&amp; !erpSalesOrder;
    btnLockAll.Visible = !closed &amp;&amp; isIntegrated &amp;&amp; lockPriceAccess &amp;&amp; !erpSalesOrder;
    btnUnlockAll.Visible = !closed &amp;&amp; isIntegrated &amp;&amp; lockPriceAccess &amp;&amp; !erpSalesOrder;
    btnRenumber.Visible = !closed &amp;&amp; !erpSalesOrder &amp;&amp; salesOrder.Id != null;
}</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>True</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
    <FormActionDefinition>
      <ResourceKey>90791539-c253-4402-a54f-0860cfbe893a</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CodeSnippetActionItem, Sage.Platform.QuickForms">
        <CodeSnippetActionItem methodId="a9a32432-7fbd-4971-bde0-0740a2aadcb4">
          <MethodName>quickformload1</MethodName>
        </CodeSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>SalesOrderProducts</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys>
    <string>error_ZeroBasePrice</string>
  </ClientResourceKeys>
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls">
      <QFSDataGrid>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>grdItems</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <GenerateMember>false</GenerateMember>
        <ReadOnlyCondition>function() {
    if (isIntegrationContractEnabled()) {
        var clientContextService = Sage.Services.getService("ClientContextService");
        if (clientContextService) {
            if (clientContextService.containsKey("SalesOrderStatus") &amp;&amp; clientContextService.containsKey("GlobalSyncId")) {
                var status = clientContextService.getValue("SalesOrderStatus");
                var globalSyncId = clientContextService.getValue("GlobalSyncId");
                if (globalSyncId != "" &amp;&amp; (status != "Open" || status != "Rejected")) { 
                    return true;
                }
            }
        }
    }
    return false;
}</ReadOnlyCondition>
        <AppliedSecurity />
        <RelateToPropertyName>SalesOrderItems</RelateToPropertyName>
        <PreviewField />
        <ResourceKind>
          <Name>salesOrderItems</Name>
          <GetPredicate />
        </ResourceKind>
        <PathSegments />
        <Columns>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>a8c6d9fd-1bde-4d02-b2a8-f56adc076935</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>EditSalesOrderItem</SmartPart>
              <Height>375</Height>
              <Width>600</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>SalesOrderItem</EntityType>
              <ResourceKey>f842ee53-0b9f-43c7-858c-57afa8508f76</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/SalesOrder/Edit</AppliedSecurity>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return isIntegrationContractEnabled();
}</HideCondition>
            <Width>4</Width>
          </QFSDataEditCol>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>3160cbc2-c14d-4e58-94c9-5277e17b3951</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>ICEditSalesOrderItem</SmartPart>
              <Height>750</Height>
              <Width>700</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>SalesOrderItem</EntityType>
              <ResourceKey>0475f9ec-f5ca-4fbd-9241-6d93fbcbdaf7</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/SalesOrder/Edit</AppliedSecurity>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>4</Width>
          </QFSDataEditCol>
          <QFSDataCheckBoxCol>
            <StyleScheme />
            <DataField>ItemLocked</DataField>
            <ColumnId>eae77157-0570-48d4-bd9a-d78df7b84496</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFSDataCheckBoxCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LineNumber</DataField>
            <ColumnId>530b7cdb-cef1-4e94-a46a-cf8d931ff779</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>Ascending</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LineNumber</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>3</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ProductName</DataField>
            <ColumnId>0c39de35-d246-4c4b-a1fa-57a0a9be41c6</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ProductName</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>15</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Family</DataField>
            <ColumnId>506f0947-d9d3-441f-bfed-329263b9df81</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Family</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>Program</DataField>
            <ColumnId>a74f322c-ebd9-49d4-ad41-3bcd939e8b41</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Program</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>false</SeedOnRowEntity>
            <SeedOnRelatedEntity>Product</SeedOnRelatedEntity>
            <ConditionalWhere />
            <ResourceKind>productPrograms</ResourceKind>
            <LookupBindingMode>String</LookupBindingMode>
            <LookupDisplayProperty>Program</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>Price</DataField>
            <ColumnId>3ef53358-80dd-4e3f-99fb-355cb397a797</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Price</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Discount</DataField>
            <ColumnId>983c7b9b-3c12-48e3-add2-73ff8cd065c2</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Discount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>2</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Percent</FormatType>
          </QFSDataNumericCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>5cd443a0-928c-44a2-86f2-a4246f8223c7</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>28d57a8b-13ca-47c0-b41e-d969ed17dc28</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate>SalesOrder.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Quantity</DataField>
            <ColumnId>0fd9479b-1d6f-497f-a870-26efbf44550d</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Quantity</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>0</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Number</FormatType>
          </QFSDataNumericCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>UnitOfMeasure</DataField>
            <ColumnId>eef3d53b-092f-4f1b-9429-22cfd8dd2bf4</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>UnitOfMeasure</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>false</SeedOnRowEntity>
            <SeedOnRelatedEntity />
            <ConditionalWhere>function () {
	        var sCondition = '';
	        var showError = function (msg) {
	            var msgService = Sage.Services.getService("WebClientMessageService");
	            if (msgService != null &amp;&amp; typeof msgService !== "undefined") {
	                msgService.showClientError(msg);
	            }
	            else {
	                alert(msg);
	            }
	        }
	        var service = Sage.Services.getService("IntegrationContractService");
	        if (service != null &amp;&amp; typeof service !== "undefined") {
	            if (service.isIntegrationEnabled) {
	                var bFoundOperatingCompany = false;
	                var bFoundSlxPriceList = false;
	                var clientContextService = Sage.Services.getService("ClientContextService");
	                if (clientContextService != null &amp;&amp; typeof clientContextService !== "undefined") {
	                    if (clientContextService.containsKey("OperatingCompany")) {
	                        var sOperatingCompanyId = clientContextService.getValue("OperatingCompany");
	                        bFoundOperatingCompany = (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12);
	                        if (bFoundOperatingCompany) {
	                            sCondition = 'AppId eq "' + sOperatingCompanyId + '" ' + "And ActiveFlag eq true";
	                        }
	                    }
	                    var sError = "";
	                    if (!bFoundOperatingCompany) {
	                        sError = "The Operating Company could not be determined.";
	                        showError(sError);
	                        throw new Error(sError);
	                    }
	                }
	                else {
	                    sError = "The ClientContextService is unavailable.";
	                    showError(sError);
	                    throw new Error(sError);
	                }
	            }
	        }
	        return sCondition;
        }
</ConditionalWhere>
            <ResourceKind>unitsOfMeasure</ResourceKind>
            <LookupBindingMode>Object</LookupBindingMode>
            <LookupDisplayProperty>Name</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>68096333-c869-44c2-9b19-51d9058e50d8</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>ff4abcfa-992a-4721-8841-c0c0b6e89485</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate>SalesOrder.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LineType</DataField>
            <ColumnId>ca87da6c-54ec-4780-b7c9-ff6e49313f91</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LineType</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>CommodityType</DataField>
            <ColumnId>7f13becf-d7b7-41ec-82af-24215aec5077</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CommodityType</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
        </Columns>
        <ConditionalWhere>function() { return 'SalesOrder.Id eq "' + Sage.Utility.getCurrentEntityId() + '"'; }</ConditionalWhere>
        <Select>
          <string>Id</string>
          <string>Product.Id</string>
          <string>SalesOrder.CurrencyCode</string>
          <string>SalesOrder.OperatingCompany.Id</string>
          <string>SalesOrder.SlxPriceList.Id</string>
          <string>UnitOfMeasure.Id</string>
          <string>UnitOfMeasure.Name</string>
          <string>UnitOfMeasure.AppId</string>
        </Select>
        <Include>
          <string>SalesOrder</string>
          <string>Product</string>
          <string>UnitOfMeasure</string>
        </Include>
        <FeedCategory>InternalAppEntities</FeedCategory>
        <OnGetMappingId />
        <ParentRelationshipPropertyName>SalesOrder</ParentRelationshipPropertyName>
        <ChildRelationshipPropertyName>Product,UnitOfMeasure</ChildRelationshipPropertyName>
        <OnDataChange>function (entity, attribute, oldValue, newValue) {
    if (oldValue === newValue) {
        return;
    }
    if (attribute === 'Discount') {
		if (entity.Price == 0) {
			entity.Discount = 0;
		 	Sage.UI.Dialogs.showError(error_ZeroBasePrice);
		} else {
		 	entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
		}
    } else if (attribute === 'CalculatedPrice') {
		if (entity.Price == 0) {
            entity.Discount = 0;
        } else {
            entity.Discount = 1 - entity.CalculatedPrice / entity.Price;
        }
    }
    if ((attribute === 'Discount') || (attribute === 'CalculatedPrice') || (attribute === 'Quantity')) {
        entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
    }
    if (attribute === 'Program') {
        if (!entity.Product || typeof entity.Product.$key === 'undefined') {
            /* Custom product (FreeText). */
            entity.Program = null;
            return;
        }
        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/productPrograms?select=Price&amp;where=Product.Id eq '${0}' and Program eq '${1}'&amp;format=json",
        [entity.Product.$key, escape(newValue)]);
        dojo.xhrGet({
            cache: false,
            preventCache: true,
            handleAs: 'json',
            url: sUrl,
			sync: true,
            load: function (programPrice) {
                if (programPrice.$resources != null &amp;&amp; programPrice.$resources.length == 1) {
                    entity.Price = programPrice.$resources[0].Price;
                    entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
                    entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
                }
            },
            data: {},
            error: function (request, status, error) {
                var sError = dojo.string.substitute("There was an error opening ${0}. StatusText: ${1}; StatusCode: ${2}.", [sUrl, request.statusText, request.status]);
                if (dojo.isString(request.responseText)) {
                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                        var oSDataError = dojo.fromJson(request.responseText);
                        if (dojo.isArray(oSDataError)) {
                            sError = dojo.string.substitute("There was an error opening ${0}. Severity: ${1}; SDataCode: ${2}; Message: ${3}; ApplicationCode: ${4}; StatusText: ${5}; StatusCode: ${6}.",
                            [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                        }
                    }
                }
                Sage.UI.Dialogs.showError(sError);
            }
        })
    }
    if (attribute === 'UnitOfMeasure') {
        if (!isIntegrationContractEnabled()) return;
        if (!entity.Product) return;
        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/slxPrices?select=Price,Currency&amp;where=UnitOfMeasure.Id eq '${0}' and AppId eq '${1}' and Product.Id eq '${2}' and SlxPriceList.Id eq '${3}' and ActiveFlag = true&amp;format=json&amp;_t=${4}",
            [newValue.$key, entity.SalesOrder.OperatingCompany.$key, entity.Product.$key, entity.SalesOrder.SlxPriceList.$key, (new Date().getTime().toString())]);
        dojo.xhrGet({
            cache: false,
            preventCache: true,
            handleAs: 'json',
            url: sUrl,
            load: function (slxPrice) {
                if (slxPrice.$resources != null &amp;&amp; slxPrice.$resources.length == 1) {
                    entity.Price = slxPrice.$resources[0].Price;
                    entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
                    entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
                }
                else {
                    entity.Price = 0;
                    entity.CalculatedPrice = 0;
                    entity.ExtendedPrice = 0;
                }
				grid.update();
            },
            data: {},
            error: function (request, status, error) {
                var sError = dojo.string.substitute("There was an error opening ${0}. StatusText: ${1}; StatusCode: ${2}.", [sUrl, request.statusText, request.status]);
                if (dojo.isString(request.responseText)) {
                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                        var oSDataError = dojo.fromJson(request.responseText);
                        if (dojo.isArray(oSDataError)) {
                            sError = dojo.string.substitute("There was an error opening ${0}. Severity: ${1}; SDataCode: ${2}; Message: ${3}; ApplicationCode: ${4}; StatusText: ${5}; StatusCode: ${6}.",
                    [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                        }
                    }
                }
                Sage.UI.Dialogs.showError(sError);
            }
        })
    }
}</OnDataChange>
        <OnAdd />
        <Tools>
          <SDataGridSaveTool>
            <Name>Save</Name>
            <Image>[Localization!Global_Images:Save_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridSaveTool>
          <SDataGridAddRelationTool>
            <Name>Relate</Name>
            <Image />
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default add relationship behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
            <LookupButton>
              <Column>0</Column>
              <Row>0</Row>
              <HotKey>0</HotKey>
              <TabIndex>0</TabIndex>
              <ControlId>luProduct</ControlId>
              <DataBindings />
              <ControlLabelPlacement>left</ControlLabelPlacement>
              <ExtendedProperties />
              <CaptionAlignment>left</CaptionAlignment>
              <StyleScheme />
              <OnChangeAction>
                <ResourceKey>db915983-f6ce-4e4f-99a0-a1a332a6b7cd</ResourceKey>
                <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
                  <NoActionActionItem>
                    <MethodName />
                  </NoActionActionItem>
                </Action>
                <IsDialogCloseAction>False</IsDialogCloseAction>
                <RunOnEveryRePaint>False</RunOnEveryRePaint>
                <DialogActionResult>NoResult</DialogActionResult>
                <PerformsUpdate>False</PerformsUpdate>
                <AppliedSecurity />
                <RefreshData>False</RefreshData>
              </OnChangeAction>
              <Required>false</Required>
              <LookupImage>[Localization!Global_Images:add_products_16x16]</LookupImage>
              <LookupDialogWidth xsi:nil="true" />
              <LookupDialogHeight xsi:nil="true" />
              <LookupDisplayMode>ButtonOnly</LookupDisplayMode>
              <LookupBindingMode>Object</LookupBindingMode>
              <LookupResultValue xsi:type="xsd:string" />
              <AddEmptyListItem>false</AddEmptyListItem>
              <AllowClearingResult>false</AllowClearingResult>
              <AppendStringValues>false</AppendStringValues>
              <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
              <LookupEntityName>Product</LookupEntityName>
              <LookupEntityTypeName>Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
              <AutoPostBack>false</AutoPostBack>
              <EnableHyperLinking>false</EnableHyperLinking>
              <InitializeLookup>false</InitializeLookup>
              <LookupProperties>
                <LookupProperty>
                  <PropertyName>Name</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Name</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Family</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Family</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Status</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Status</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ActualId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>SKU</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
              </LookupProperties>
              <LookupPreFilters />
              <LookupSelectionMode>Multi</LookupSelectionMode>
              <OnSelection>function (items) {
      if (!items.length) return;
      dojo.require('Sage.UI.Dialogs');
      var undefinedAccountingSystem = "Products cannot be added to the Sales Order because the Accounting System or Price List is undefined. Please close this message and the Add Product lookup to return to the main window.";
            var grid = dijit.byId('SalesOrderProductsgrdItems');
            if (grid &amp;&amp; grid.store) {
                var recordCount = grid.rowCount;
                var iCurrentCount = 0;
                var iTotalCount = 0;
                var oService = Sage.Services.getService("IntegrationContractService");
                var bIsICEnabled = (typeof oService !== "undefined" &amp;&amp; oService != null &amp;&amp; oService.isIntegrationEnabled);
                var sAppId = "";
                if (bIsICEnabled) {
                    var sOperatingCompanyId = "";
                    var sPriceListId = "";
                    var clientContextService = Sage.Services.getService("ClientContextService");
                    if (clientContextService != null &amp;&amp; typeof clientContextService !== "undefined") {
                        if (clientContextService.containsKey("OperatingCompany")) {
                            sOperatingCompanyId = clientContextService.getValue("OperatingCompany");
                            if (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12) {
                                sAppId = sOperatingCompanyId;
                            }
                        }
                        if (clientContextService.containsKey("SlxPriceList")) {
                            var sValue = clientContextService.getValue("SlxPriceList");
                            if (dojo.isString(sValue) &amp;&amp; String(sValue).length == 12) {
                                sPriceListId = sValue;
                            }
                        }
                    }
                    if (sAppId === "" || sPriceListId === "") {
                        Sage.UI.Dialogs.showError(undefinedAccountingSystem);
                        return;
                    }
                }
                var arrItems = [];
                grid.store.newItem({ onComplete: function (soItem) {
                    var addProduct = function (prod, refresh, quantity) {
                        var sSelect = "select=Id,ActualId,CommodityType,Description,Family,Name,";
                        sSelect += (bIsICEnabled) ? "UnitOfMeasure/Id,UnitOfMeasure/Name,Prices/Price,Prices/Currency,Prices/UnitOfMeasure,Prices/SlxPriceList,Prices/SlxPriceList.Id" : "ProductProgram/Program,ProductProgram/Price,ProductProgram/DefaultProgram";
                        var sWhere = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                        sWhere += (bIsICEnabled) ? dojo.string.substitute(" and UnitOfMeasure eq Prices.UnitOfMeasure and Prices.SlxPriceList.Id eq '${0}' and Prices.AppId eq '${1}' and Prices.ActiveFlag = true", [sPriceListId, sAppId]) : "";
                        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                                        [sSelect, sWhere, (new Date().getTime().toString())]);
                        $.ajax({
                            type: "GET",
                            contentType: "application/json",
                            url: sUrl,
                            dataType: 'json',
                            success: function (prodResponse) {
                                var bIsICEnabled = isIntegrationContractEnabled();
                                if (prodResponse.$resources == null || prodResponse.$resources.length == 0) {
                                    if (bIsICEnabled) {
                                        /* Check without using an SlxPriceList.Id. */
                                        sSelect = "select=Id,ActualId,CommodityType,Description,Family,Name,";
                                        sSelect += "UnitOfMeasure/Id,UnitOfMeasure/Name,Prices/Price,Prices/Currency,Prices/UnitOfMeasure";
                                        sWhere = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                                        sWhere += dojo.string.substitute(" and UnitOfMeasure eq Prices.UnitOfMeasure and Prices.AppId eq '${0}' and Prices.ActiveFlag = true", [sAppId]);
                                        sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                                            [sSelect, sWhere, (new Date().getTime().toString())]);
                                        $.ajax({
                                            type: "GET",
                                            async: false,
                                            contentType: "application/json",
                                            url: sUrl,
                                            dataType: 'json',
                                            success: function (prodResponse) {
                                                if (prodResponse.$resources == null || prodResponse.$resources.length == 0) {
                                                    var newEntity = {};
                                                    var product = prod;
                                                    //Insert mode check
                                                    if (Sage.Utility.getModeId() === 'insert') {
                                                        product.$cacheID = new Date().getTime();
                                                    }
                                                    else {
                                                        soItem.SalesOrder = { $key: Sage.Utility.getCurrentEntityId() };
                                                    }
                                                    soItem.Product = {};
                                                    delete product.index;
                                                    Sage.Utility.extend(soItem.Product, product);
                                                    soItem.Product.Family = product.Family;
                                                    soItem.ActualId = product.ActualId;
                                                    soItem.CommodityType = product.CommodityType;
                                                    soItem.Discount = 0;
                                                    soItem.Family = product.Family;
                                                    soItem.ProductName = product.Name;
                                                    soItem.Quantity = quantity;
                                                    soItem.LineNumber = recordCount += 1;
                                                    if (bIsICEnabled) {
                                                        product.Price = 0; // Required because of Sage.Utility.extend().
                                                        soItem.Price = 0;
                                                        soItem.ExtendedPrice = 0;
                                                        soItem.CalculatedPrice = 0;
                                                    }
                                                    else {
                                                        soItem.Price = product.Price;
                                                        soItem.ExtendedPrice = product.Price;
                                                        soItem.CalculatedPrice = product.Price;
                                                    }
                                                    delete product.$key;
                                                    delete product.$name;
                                                    delete product.$url;
                                                    Sage.Utility.extend(true, newEntity, soItem, product);
                                                    arrItems.push(newEntity);
                                                    iCurrentCount++;
                                                    if (iCurrentCount === iTotalCount) {
                                                        grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                                    }
                                                }
                                                else {
                                                    if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                                        for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                                            var newEntity = {};
                                                            var product = prodResponse.$resources[x];
                                                            //Insert mode check
                                                            if (Sage.Utility.getModeId() === 'insert') {
                                                                product.$cacheID = new Date().getTime();
                                                            }
                                                            else {
                                                                soItem.SalesOrder = { $key: Sage.Utility.getCurrentEntityId() };
                                                            }
                                                            soItem.Product = {};
                                                            delete product.index;
                                                            Sage.Utility.extend(soItem.Product, product);
                                                            soItem.ActualId = product.ActualId;
                                                            soItem.CommodityType = product.CommodityType;
                                                            soItem.Discount = 0;
                                                            soItem.Family = product.Family;
                                                            soItem.ProductName = product.Name;
                                                            soItem.Quantity = quantity;
                                                            soItem.LineNumber = recordCount += 1;
                                                            var price = 0;
                                                            soItem.UnitOfMeasure = product.UnitOfMeasure;
                                                            product.Price = 0; // Required because of Sage.Utility.extend().
                                                            soItem.Price = 0;
                                                            soItem.ExtendedPrice = 0;
                                                            soItem.CalculatedPrice = 0;
                                                            soItem.Program = null;
                                                            if (prodResponse.$resources[x].Prices != null &amp;&amp;
                                                            prodResponse.$resources[x].Prices.$resources != null &amp;&amp;
                                                            prodResponse.$resources[x].Prices.$resources.length &gt; 0) {
                                                                for (var j = 0; j &lt; prodResponse.$resources[x].Prices.$resources.length; j++) {
                                                                    if (prodResponse.$resources[x].Prices.$resources[j].UnitOfMeasure.$key === product.UnitOfMeasure.$key) {
                                                                        if (prodResponse.$resources[x].Prices.$resources[j].Price != null) {
                                                                            price = prodResponse.$resources[x].Prices.$resources[j].Price;
                                                                        }
                                                                        product.Price = price; // Required because of Sage.Utility.extend().
                                                                        soItem.Price = price;
                                                                        soItem.ExtendedPrice = price;
                                                                        soItem.CalculatedPrice = price;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            delete product.$key;
                                                            delete product.$name;
                                                            delete product.$url;
                                                            Sage.Utility.extend(true, newEntity, soItem, product);
                                                            arrItems.push(newEntity);
                                                            iCurrentCount++;
                                                            if (iCurrentCount === iTotalCount) {
                                                                grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        iTotalCount--;
                                                        if (iCurrentCount === iTotalCount) {
                                                            grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                                        }
                                                    }
                                                }
                                            },
                                            data: {},
                                            error: function (request, status, error) {
                                                if (iTotalCount &gt; 0) {
                                                    iTotalCount--;
                                                }
                                                var sError = dojo.string.substitute("There was an error opening ${0}. StatusText: ${1}; StatusCode: ${2}.", [sUrl, request.statusText, request.status]);
                                                if (dojo.isString(request.responseText)) {
                                                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                                        var oSDataError = dojo.fromJson(request.responseText);
                                                        if (dojo.isArray(oSDataError)) {
                                                            sError = dojo.string.substitute("There was an error opening ${0}. Severity: ${1}; SDataCode: ${2}; Message: ${3}; ApplicationCode: {4}; StatusText: ${5}; StatusCode: ${6}.",
                                        [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                                        }
                                                    }
                                                }
                                                Sage.UI.Dialogs.showError(sError);
                                            }
                                        })
                                    }
                                    else {
                                        var newEntity = {};
                                        var product = prod;
                                        //Insert mode check
                                        if (Sage.Utility.getModeId() === 'insert') {
                                            product.$cacheID = new Date().getTime();
                                        }
                                        else {
                                            soItem.SalesOrder = { $key: Sage.Utility.getCurrentEntityId() };
                                        }
                                        soItem.Product = {};
                                        delete product.index;
                                        Sage.Utility.extend(soItem.Product, product);
                                        soItem.Product.Family = product.Family;
                                        soItem.ActualId = product.ActualId;
                                        soItem.CommodityType = product.CommodityType;
                                        soItem.Discount = 0;
                                        soItem.Family = product.Family;
                                        soItem.ProductName = product.Name;
                                        soItem.Quantity = quantity;
                                        soItem.LineNumber = recordCount += 1;
                                        if (bIsICEnabled) {
                                            product.Price = 0; // Required because of Sage.Utility.extend().
                                            soItem.Price = 0;
                                            soItem.ExtendedPrice = 0;
                                            soItem.CalculatedPrice = 0;
                                        }
                                        else {
                                            soItem.Price = product.Price;
                                            soItem.ExtendedPrice = product.Price;
                                            soItem.CalculatedPrice = product.Price;
                                        }
                                        delete product.$key;
                                        delete product.$name;
                                        delete product.$url;
                                        Sage.Utility.extend(true, newEntity, soItem, product);
                                        arrItems.push(newEntity);
                                        iCurrentCount++;
                                        if (iCurrentCount === iTotalCount) {
                                            grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                        }
                                    }
                                }
                                else {
                                    if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                        for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                            var newEntity = {};
                                            var product = prodResponse.$resources[x];
                                            //Insert mode check
                                            if (Sage.Utility.getModeId() === 'insert') {
                                                product.$cacheID = new Date().getTime();
                                            }
                                            else {
                                                soItem.SalesOrder = { $key: Sage.Utility.getCurrentEntityId() };
                                            }
                                            soItem.Product = {};
                                            delete product.index;
                                            Sage.Utility.extend(soItem.Product, product);
                                            soItem.ActualId = product.ActualId;
                                            soItem.CommodityType = product.CommodityType;
                                            soItem.Discount = 0;
                                            soItem.Family = product.Family;
                                            soItem.ProductName = product.Name;
                                            soItem.Quantity = quantity;
                                            soItem.LineNumber = recordCount += 1;
                                            var price = 0;
                                            if (bIsICEnabled) {
                                                /* IC */
                                                soItem.UnitOfMeasure = product.UnitOfMeasure;
                                                product.Price = 0; // Required because of Sage.Utility.extend().
                                                soItem.Price = 0;
                                                soItem.ExtendedPrice = 0;
                                                soItem.CalculatedPrice = 0;
                                                soItem.Program = null;
                                                if (prodResponse.$resources[x].Prices != null &amp;&amp;
                                                            prodResponse.$resources[x].Prices.$resources != null &amp;&amp;
                                                            prodResponse.$resources[x].Prices.$resources.length &gt; 0) {
                                                    for (var j = 0; j &lt; prodResponse.$resources[x].Prices.$resources.length; j++) {
                                                        if (prodResponse.$resources[x].Prices.$resources[j].UnitOfMeasure.$key === product.UnitOfMeasure.$key) {
                                                            if (prodResponse.$resources[x].Prices.$resources[j].Price != null) {
                                                                price = prodResponse.$resources[x].Prices.$resources[j].Price;
                                                            }
                                                            product.Price = price; // Required because of Sage.Utility.extend().
                                                            soItem.Price = price;
                                                            soItem.ExtendedPrice = price;
                                                            soItem.CalculatedPrice = price;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                /* NON-IC */
                                                product.Price = 0; // Required because of Sage.Utility.extend().
                                                soItem.UnitOfMeasure = null;
                                                soItem.Price = 0;
                                                soItem.ExtendedPrice = 0;
                                                soItem.CalculatedPrice = 0;
                                                soItem.Program = null;
                                                if (prodResponse.$resources[x].ProductProgram != null &amp;&amp;
                                                            prodResponse.$resources[x].ProductProgram.$resources != null &amp;&amp;
                                                            prodResponse.$resources[x].ProductProgram.$resources.length &gt; 0) {
                                                    for (var j = 0; j &lt; prodResponse.$resources[x].ProductProgram.$resources.length; j++) {
                                                        /* Grab the price for the default program. */
                                                        if (prodResponse.$resources[x].ProductProgram.$resources[j].DefaultProgram) {
                                                            if (prodResponse.$resources[x].ProductProgram.$resources[j].Price != null) {
                                                                price = prodResponse.$resources[x].ProductProgram.$resources[j].Price;
                                                            }
                                                            product.Price = price; // Required because of Sage.Utility.extend().
                                                            soItem.Price = price;
                                                            soItem.ExtendedPrice = price;
                                                            soItem.CalculatedPrice = price;
                                                            soItem.Program = prodResponse.$resources[x].ProductProgram.$resources[j].Program;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            delete product.$key;
                                            delete product.$name;
                                            delete product.$url;
                                            Sage.Utility.extend(true, newEntity, soItem, product);
                                            arrItems.push(newEntity);
                                            iCurrentCount++;
                                            if (iCurrentCount === iTotalCount) {
                                                grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                            }
                                        }
                                    }
                                    else {
                                        iTotalCount--;
                                        if (iCurrentCount === iTotalCount) {
                                            grid.createItems(arrItems, function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack("MainContent", ""); } });
                                        }
                                    }
                                }
                            },
                            data: {},
                            error: function (request, status, error) {
                                if (iTotalCount &gt; 0) {
                                    iTotalCount--;
                                }
                                var sError = dojo.string.substitute("There was an error opening ${0}. StatusText: ${1}; StatusCode: ${2}.", [sUrl, request.statusText, request.status]);
                                if (dojo.isString(request.responseText)) {
                                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                        var oSDataError = dojo.fromJson(request.responseText);
                                        if (dojo.isArray(oSDataError)) {
                                            sError = dojo.string.substitute("There was an error opening ${0}. Severity: ${1}; SDataCode: ${2}; Message: ${3}; ApplicationCode: ${4}; StatusText: ${5}; StatusCode: ${6}.",
                                                            [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                        }
                                    }
                                }
                                Sage.UI.Dialogs.showError(sError);
                            }
                        })
                    }
                    var getTotalCount = function () {
                        var iResult = 0;
                        var i;
                        for (i = 0; i &lt; items.length; i += 1) {
                            var item = items[i];
                            if (item.ProdPackageKitType === 'PKG') {
                                for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                                    iResult++;
                                }
                            } else {
                                iResult++;
                            }
                        }
                        return iResult;
                    }
                    iTotalCount = getTotalCount();
                    var iCount = 0;
                    var i;
                    for (i = 0; i &lt; items.length; i += 1) {
                        var quantity = 1;
                        var item = items[i];
                        if (item.ProdPackageKitType === 'PKG') {
                            for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                                var prod = item.PackageKitChildViews.$resources[j];
                                prod.$key = item.PackageKitChildViews.$resources[j].ProductId;
                                if (prod.Quantity != null) {
                                    quantity = prod.Quantity;
                                }
                                iCount++;
                                addProduct(prod, true, quantity);
                            }
                        } else {
                            iCount++;
                            addProduct(item, true, quantity);
                        }
                    }
                }
                });
            }
        }</OnSelection>
              <AdditionalSelectFields>
                <string>ProductId</string>
                <string>ProdPackageKitType</string>
                <string>CommodityType</string>
                <string>Program</string>
                <string>AppId</string>
                <string>Quantity</string>
                <string>ActiveFlag</string>
              </AdditionalSelectFields>
              <ChildEntity>PackageKitChildViews</ChildEntity>
              <LookupResourceName>ProdPackageKitView</LookupResourceName>
              <ConditionalWhere>function () {
                var sCondition = '';
                var showError = function (msg) {
                    var msgService = Sage.Services.getService("WebClientMessageService");
                    if (msgService != null &amp;&amp; typeof msgService !== "undefined") {
                        msgService.showClientError(msg);
                    }
                    else {
                        alert(msg);
                    }
                }
                var service = Sage.Services.getService("IntegrationContractService");
                if (service != null &amp;&amp; typeof service !== "undefined") {
                    if (service.isIntegrationEnabled) {
                        var bFoundOperatingCompany = false;
                        var bFoundSlxPriceList = false;
                        var clientContextService = Sage.Services.getService("ClientContextService");
                        if (clientContextService != null &amp;&amp; typeof clientContextService !== "undefined") {
                            if (clientContextService.containsKey("OperatingCompany")) {
                                var sOperatingCompanyId = clientContextService.getValue("OperatingCompany");
                                bFoundOperatingCompany = (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12);
                                if (bFoundOperatingCompany) {
                                    sCondition = 'AppId eq "' + sOperatingCompanyId + '" ' + "And ActiveFlag eq true";
                                }
                            }
                            var sError = "";
                            if (!bFoundOperatingCompany) {
                                sError = "The Operating Company could not be determined.";
                                showError(sError);
                                throw new Error(sError);
                            }
                        }
                        else {
                            sError = "The ClientContextService is unavailable.";
                            showError(sError);
                            throw new Error(sError);
                        }
                    }
                }
                return sCondition;
            }
</ConditionalWhere>
              <ConditionalShow>function () {
            var oResult = { result: true, reason: '' };
            var service = Sage.Services.getService('IntegrationContractService');
            if (service != null &amp;&amp; typeof service !== 'undefined') {
                if (service.isIntegrationEnabled) {
                    var bFoundOperatingCompany = false;
                    var bFoundSlxPriceList = false;
                    var clientContextService = Sage.Services.getService('ClientContextService');
                    if (clientContextService != null &amp;&amp; typeof clientContextService !== 'undefined') {
                        if (clientContextService.containsKey('OperatingCompany')) {
                            var sOperatingCompanyId = clientContextService.getValue('OperatingCompany');
                            bFoundOperatingCompany = (dojo.isString(sOperatingCompanyId) &amp;&amp; String(sOperatingCompanyId).length == 12);
                        }
                        if (clientContextService.containsKey('SlxPriceList')) {
                            var sSlxPriceListId = clientContextService.getValue('SlxPriceList');
                            bFoundSlxPriceList = (dojo.isString(sSlxPriceListId) &amp;&amp; String(sSlxPriceListId).length == 12);
                        }
                        if (!bFoundOperatingCompany || !bFoundSlxPriceList) {
                            oResult.result = false;
                            oResult.reason = 'Products cannot be added to the Sales Order because the Accounting System or Price List is undefined.';
                        }
                    }
                    else {
                        oResult.result = false;
                        oResult.reason = 'The ClientContextService is unavailable.';
                    }
                }
            }
            return oResult;
        }</ConditionalShow>
            </LookupButton>
          </SDataGridAddRelationTool>
          <SDataGridDeleteTool>
            <Name>Delete</Name>
            <Image>[Localization!Global_Images:Delete_16x16]</Image>
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>After</MergePosition>
            <MergeControlId>btnRenumber</MergeControlId>
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridDeleteTool>
          <SDataGridCancelTool>
            <Name>Cancel</Name>
            <Image>[Localization!Global_Images:Reset_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>After</MergePosition>
            <MergeControlId>btnRenumber</MergeControlId>
            <OnClick>//default Cancel behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridCancelTool>
        </Tools>
      </QFSDataGrid>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnAddCustomProduct</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:add_custom_product_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnAddCustomProduct</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CodeSnippetActionItem, Sage.Platform.QuickForms">
            <CodeSnippetActionItem methodId="7d07e7b1-40e3-4f4b-860e-c3c20e506df3">
              <MethodName>btnAddCustomProduct_ClickAction</MethodName>
            </CodeSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>True</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnLockAll</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:lock_all_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnLockAll</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>LockPricingForSOItems</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnLockAll_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnUnlockAll</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:unlock_all_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnUnlockAll</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>UnLockPricingForSOItems</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnUnlockAll_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnRenumber</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:renumber_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnRenumber</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>ReAssignLineNumbers</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnRenumber_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>false</UseEntityNameAsTitle>
  <EntityTypeName>ISalesOrder</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>