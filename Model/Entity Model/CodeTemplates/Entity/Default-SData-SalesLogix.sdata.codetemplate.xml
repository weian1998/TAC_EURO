<?xml version="1.0"?>
<codeTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="bab54f5e-e03f-4eaf-8253-b05bdc80ef44" name="Default-SData-SalesLogix" entityType="Entity" templateType="sdata" templateEngineType="T4">
  <template>
  <![CDATA[<#@ template language="C#v4.0" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="Microsoft.Unity.dll" #>
<#@ assembly name="Sage.Common.Syndication.dll" #>
<#@ assembly name="Sage.Platform.dll" #>
<#@ assembly name="Sage.Platform.Orm.CodeGen.dll" #>
<#@ assembly name="Sage.Platform.Projects.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.Practices.Unity" #>
<#@ import namespace="Sage.Common.Syndication" #>
<#@ import namespace="Sage.Platform.Orm.CodeGen" #>
<#@ import namespace="Sage.Platform.Orm.Entities" #>
<#
var entity = (OrmEntity) Context["entity"];
var sdataExt = entity.ExtendedProperties.Get<OrmEntitySDataExtension>();
var generator = (SDataEntityCodeGenerator) Context["generator"];

var entityDisplayName = entity.DisplayName ?? entity.Name;

var parents = entity.ParentEntities.Where(relation => IsPropertyIncluded(relation.ChildProperty) &&
                                                      (IsEntityIncluded(relation.ParentEntity) || !IsPropertyIncluded(relation.Columns[0].ChildProperty))).ToList();
var children = entity.ChildEntities.Where(relation => IsPropertyIncluded(relation.ParentProperty) &&
                                                      (IsEntityIncluded(relation.ChildEntity) || (!IsPropertyIncluded(relation.Columns[0].ParentProperty) && relation.Cardinality != "1:M"))).ToList();
var extenders = entity.ExtensionEntities;
var includedParents = parents.Where(relation => IsEntityIncluded(relation.ParentEntity)).ToList();
var includedChildren = children.Where(relation => IsEntityIncluded(relation.ChildEntity)).ToList();
var includedExtenders = extenders.Where(extender => IsEntityIncluded(extender)).ToList();
var methods = entity.Methods
    .Where(method => IsTypeSupported(method.RuntimeReturnType) &&
                     method.MethodParameters.All(param => IsTypeSupported(param.RuntimeParamType)))
    .ToList();
var properties = OrmEntity.GetIncludedProperties(entity).OfType<OrmFieldProperty>()
    .Where(prop => prop.GetGenerate() && prop != sdataExt.UniqueIdentifierProperty)
    .ToList();
var customProperties = OrmEntity.GetIncludedCustomProperties(entity)
    .Where(prop => IsTypeSupported(prop.RuntimeReturnType))
    .ToList();
#>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// disable XML documentation warnings
#pragma warning disable 1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using NHibernate;
using NHibernate.SqlCommand;
using Sage.Common.Metadata;
using Sage.Common.Metadata.Model;
using Sage.Common.Syndication;
using Sage.Entity.Interfaces;
using Sage.Integration.Entity.Feeds;
using Sage.Integration.Messaging.Model;
using Sage.Integration.Presentation.Model;
using Sage.Platform;
using Sage.Platform.ComponentModel;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Interfaces;
using Sage.Platform.SData;

#region Adapter Related Classes

namespace Sage.Integration.Entity.Adapter
{
    [RequestPath(<#= entity.Name #>Feed.ResourcePath)]
    public class <#= entity.Name #>RequestHandler : RequestHandlerBase<<#= entity.Name #>Feed, <#= entity.Name #>Entry, global::Sage.Entity.Interfaces.<#= entity.InterfaceName #>>
    {
        public <#= entity.Name #>RequestHandler()
            : base(<#= entity.Name #>Feed.ResourceName, <#= entity.Name #>Feed.ResourcePath) {}

        internal <#= entity.Name #>RequestHandler(IRequestHandler parentRequest, string forwardPath, string backwardPath, bool isSingle)
            : base(<#= entity.Name #>Feed.ResourceName, <#= entity.Name #>Feed.ResourcePath, parentRequest, forwardPath, backwardPath, isSingle) {}

<# if (includedParents.Count > 0) { #>
        #region M:1 Relationships
<#  foreach (var relation in includedParents) { #>
<#   var propName = relation.ChildProperty.PropertyName; #>
<#   var backwardPath = IsPropertyIncluded(relation.ParentProperty) ? relation.ParentProperty.PropertyName : null; #>
<#   RequestRelatedHandler(propName, relation.ParentEntity.Name, propName, backwardPath, true); #>
<#  } #>
        #endregion
<# } #>

<# if (includedChildren.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in includedChildren) { #>
<#   var propName = relation.ParentProperty.PropertyName; #>
<#   var backwardPath = IsPropertyIncluded(relation.ChildProperty) ? relation.ChildProperty.PropertyName : null; #>
<#   RequestRelatedHandler(propName, relation.ChildEntity.Name, propName, backwardPath, relation.Cardinality != "1:M"); #>
<#  } #>
        #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
        #region 1:1 Parent Entity Extension
<#   var propName = parent.Name; #>
<#   RequestRelatedHandler(propName, propName, propName, entity.Name, true); #>
        #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
        #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
<#   var propName = child.Name; #>
<#   RequestRelatedHandler(propName, propName, propName, entity.Name, true); #>
<#  } #>
        #endregion
<# } #>

        #region Abstract Overrides

<# if (!sdataExt.CanPost || !sdataExt.CanPut) { #>
        protected override void SaveEntity(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity)
        {
<#  if (!sdataExt.CanPost && !sdataExt.CanPut) { #>
            throw new NotSupportedException("Insert and update not supported");
<#  } else if (!sdataExt.CanPost) { #>
            if (entity.PersistentState.HasFlag(PersistentState.New))
            {
                throw new NotSupportedException("Insert not supported");
            }
<#  } else { #>
            if (!entity.PersistentState.HasFlag(PersistentState.New))
            {
                throw new NotSupportedException("Update not supported");
            }
<# } #>
        }
<# } #>

<# if (!sdataExt.CanDelete) { #>
        protected override void DeleteEntity(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity)
        {
            throw new NotSupportedException("Delete not supported");
        }
<# } #>

        protected override IRequestHandler GetRelatedHandler(string path)
        {
            switch (path.ToLower())
            {
<# if (includedParents.Count > 0) { #>
                #region M:1 Relationships
<#  foreach (var relation in includedParents) { #>
                case "<#= relation.ChildProperty.PropertyName.ToLower() #>":
                    return <#= relation.ChildProperty.PropertyName #>RequestHandler;
<#  } #>
                #endregion
<# } #>

<# if (includedChildren.Count > 0) { #>
                #region 1:M Relationships
<#  foreach (var relation in includedChildren) { #>
                case "<#= relation.ParentProperty.PropertyName.ToLower() #>":
                    return <#= relation.ParentProperty.PropertyName #>RequestHandler;
<#  } #>
                #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
                #region 1:1 Parent Entity Extension
                case "<#= parent.Name.ToLower() #>":
                    return <#= parent.Name #>RequestHandler;
                #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
                #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
                case "<#= child.Name.ToLower() #>":
                    return <#= child.Name #>RequestHandler;
<#  } #>
                #endregion
<# } #>
                default:
                    return base.GetRelatedHandler(path);
            }
        }

        protected override JoinType GetRelatedJoinType(string path)
        {
            switch (path.ToLower())
            {
<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
                #region 1:1 Parent Entity Extension
                case "<#= parent.Name.ToLower() #>":
                    return JoinType.InnerJoin;
                #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
                #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
                case "<#= child.Name.ToLower() #>":
                    return JoinType.InnerJoin;
<#  } #>
                #endregion
<# } #>
                default:
                    return base.GetRelatedJoinType(path);
            }
        }

        protected override void BuildTemplateEntity(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity, InclusionNode include)
        {
<# if (includedParents.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in includedParents) { #>
<#   RequestBuildTemplateEntity(relation.ChildProperty.PropertyName, (int) relation.ChildProperty.DisplayCategory, false); #>
<#  } #>
            #endregion
<# } #>

<# if (includedChildren.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in includedChildren) { #>
<#   var isCollection = (relation.Cardinality == "1:M"); #>
<#   RequestBuildTemplateEntity(relation.ParentProperty.PropertyName, (int) relation.ParentProperty.DisplayCategory, isCollection); #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
            #region 1:1 Parent Entity Extension
<#   RequestBuildTemplateEntity(parent.Name, 3, false); #>
            #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
<#   RequestBuildTemplateEntity(child.Name, 3, false); #>
<#  } #>
            #endregion
<# } #>
        }

<# if (methods.Count > 0) { #>
        protected override void BuildServiceFeed(IFeed feed)
        {
<#  foreach (var method in methods) { #>
            AddService(feed, "<#= method.MethodName #>");
<#  } #>
        }

        protected override FeedEntry GetServiceTemplate(string path)
        {
            switch (path.ToLower())
            {
<#  foreach (var method in methods) { #>
                case "<#= method.MethodName.ToLower() #>":
                    return new <#= entity.Name #><#= method.MethodName #>Entry();
<#  } #>
                default:
                    return base.GetServiceTemplate(path);
            }
        }

        protected override void PostService(string path)
        {
            switch (path.ToLower())
            {
<#  foreach (var method in methods) { #>
                case "<#= method.MethodName.ToLower() #>":
                    var <#= method.MethodName #>Entry = GetRequestFeedEntry<<#= entity.Name #><#= method.MethodName #>Entry>();
                    PostService(
                        <#= method.MethodName #>Entry,
                        "<#= entity.Name #>.<#= method.MethodName #>",
                        () => new object[]
                            {
                                GetEntity(<#= method.MethodName #>Entry.Request.Entity ?? new <#= entity.Name #>Entry {Key = <#= method.MethodName #>Entry.Request.<#= entity.Name #>Id}),
<#   foreach (var param in method.MethodParameters) { #>
<#    if (param.RuntimeParamType.Namespace == "Sage.Entity.Interfaces") { #>
<#     if (IsEntityIncluded(OrmEntity.GetByName(method.Project, param.RuntimeParamType.Name.Substring(1)))) { #>
                                new <#= param.RuntimeParamType.Name.Substring(1) #>RequestHandler().GetEntity(<#= method.MethodName #>Entry.Request.<#= param.ParamName #>),
<#     } else { #>
                                EntityFactory.GetById<<#= param.ParamType #>>(<#= method.MethodName #>Entry.Request.<#= param.ParamName #>),
<#     } #>
<#    } else { #>
<#     var itemType = GetGenericCollectionItemType(param.RuntimeParamType); #>
<#     if (itemType != null) { #>
<#      if (itemType.Namespace == "Sage.Entity.Interfaces") { #>
<#       if (IsEntityIncluded(OrmEntity.GetByName(method.Project, itemType.Name.Substring(1)))) { #>
                                new List<<#= itemType.Name #>>(new <#= itemType.Name.Substring(1) #>RequestHandler().GetEntities(<#= method.MethodName #>Entry.Request.<#= param.ParamName #>)),
<#       } else { #>
                                new List<string>(<#= method.MethodName #>Entry.Request.<#= param.ParamName #>).ConvertAll(id => EntityFactory.GetById<<#= itemType.Name #>>(id)),
<#       } #>
<#      } else { #>
                                new List<<#= itemType.Name #>>(<#= method.MethodName #>Entry.Request.<#= param.ParamName #>),
<#      } #>
<#     } else { #>
                                <#= method.MethodName #>Entry.Request.<#= param.ParamName #>,
<#     } #>
<#    } #>
<#   } #>
                            },
                        result =>
                            {
                                <#= method.MethodName #>Entry.Request = null;
<#   if (method.RuntimeReturnType != typeof (void)) { #>
<#    if (method.RuntimeReturnType.Namespace == "Sage.Entity.Interfaces") { #>
<#     if (IsEntityIncluded(OrmEntity.GetByName(method.Project, method.RuntimeReturnType.Name.Substring(1)))) { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = new <#= method.RuntimeReturnType.Name.Substring(1) #>RequestHandler().CopyRelatedEntityToFeedEntry((<#= method.ReturnType #>) result, null, null)};
<#     } else { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = GenerateKey((<#= method.ReturnType #>) result)};
<#     } #>
<#    } else { #>
<#     var returnItemType = GetGenericCollectionItemType(method.RuntimeReturnType); #>
<#     if (returnItemType != null) { #>
<#      if (returnItemType.Namespace == "Sage.Entity.Interfaces") { #>
<#       if (IsEntityIncluded(OrmEntity.GetByName(method.Project, returnItemType.Name.Substring(1)))) { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = new <#= returnItemType.Name.Substring(1) #>RequestHandler().CopyRelatedEntitiesToFeedEntries((<#= method.ReturnType #>) result, null, null, null)};
<#       } else { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = GenerateKeys((<#= method.ReturnType #>) result)};
<#       } #>
<#      } else { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = new List<<#= returnItemType.Name #>>((IEnumerable<<#= returnItemType.Name #>>) result)};
<#      } #>
<#     } else { #>
                                <#= method.MethodName #>Entry.Response = new <#= entity.Name #><#= method.MethodName #>Entry.ServiceResponse {Result = (<#= method.ReturnType #>) result};
<#     } #>
<#    } #>
<#   } #>
                            });
                    break;
<#  } #>
                default:
                    base.GetServiceTemplate(path);
                    break;
            }
        }
<# } #>

        protected override void CopyFeedEntryToEntity(<#= entity.Name #>Entry entry, global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity, InclusionNode include)
        {
<# if (properties.Count > 0) { #>
            #region Properties
<#  foreach (var prop in properties) { #>
<#   if (!(prop.IsReadOnly || (entity.HasCompleteCompositeKeyRelationships && prop.IsKeyProperty))) { #>
<#    var name = prop.PropertyName; #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
<#    if (prop.DisplayCategory == DisplayCategory.Obsolete) { #>
#pragma warning disable 612,618
<#    } #>
                entity.<#= name #> = entry.<#= name #>;
<#    if (prop.DisplayCategory == DisplayCategory.Obsolete) { #>
#pragma warning restore 612,618
<#    } #>
            }
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (includedParents.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in includedParents) { #>
<#   var otherName = IsPropertyIncluded(relation.ParentProperty) ? relation.ParentProperty.PropertyName : null; #>
<#   var isCollection = (relation.Cardinality == "1:M"); #>
<#   RequestReferenceCopyFeedEntryToEntity(relation.ChildProperty.PropertyName, otherName, isCollection); #>
<#  } #>
            #endregion
<# } #>

<# if (includedChildren.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in includedChildren) { #>
<#   var name = relation.ParentProperty.PropertyName; #>
<#   if (relation.Cardinality == "1:M") { #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
                var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
                if (include != null && <#= name #>Include == null && entity.<#= name #> != null && entry.<#= name #>.Entries.Count > 0)
                {
                    <#= name #>Include = new InclusionNode(InclusionNode.InclusionLevel.Include);
                    include.SetChild("<#= name #>", <#= name #>Include);
                }
                <#= name #>RequestHandler.CopyRelatedFeedEntriesToEntities(entry.<#= name #>, entity.<#= name #>, <#= name #>Include);
<#    if (IsPropertyIncluded(relation.ChildProperty)) { #>
                foreach (var child in entity.<#= name #>)
                {
                    child.<#= relation.ChildProperty.PropertyName #> = entity;
                }
<#    } #>
            }
<#   } else { #>
<#    var otherName = IsPropertyIncluded(relation.ChildProperty) ? relation.ChildProperty.PropertyName : null; #>
<#    RequestReferenceCopyFeedEntryToEntity(name, otherName, false); #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
            #region 1:1 Parent Entity Extension
<#   RequestReferenceCopyFeedEntryToEntity(parent.Name, entity.Name, false); #>
            #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
<#   RequestReferenceCopyFeedEntryToEntity(child.Name, entity.Name, false); #>
<#  } #>
            #endregion
<# } #>
            base.CopyFeedEntryToEntity(entry, entity, include);
        }

        protected override void CopyEntityToFeedEntry(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity, <#= entity.Name #>Entry entry, InclusionNode include)
        {
<# if (properties.Count > 0) { #>
            #region Properties
<#  foreach (var prop in properties) { #>
<#   var name = prop.PropertyName; #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= (int) prop.DisplayCategory #>, true))
            {
<#    if (prop.DisplayCategory == DisplayCategory.Obsolete) { #>
#pragma warning disable 612,618
<#    } #>
                entry.<#= name #> = entity.<#= name #>;
<#    if (prop.DisplayCategory == DisplayCategory.Obsolete) { #>
#pragma warning restore 612,618
<#    } #>
            }
<#  } #>
            #endregion
<# } #>

<# if (customProperties.Count > 0) { #>
            #region Custom Properties
<#  foreach (var prop in customProperties) { #>
<#   var name = prop.PropertyName; #>
<#   var precedence = (int) prop.DisplayCategory; #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
<#   if (prop.RuntimeReturnType.Namespace == "Sage.Entity.Interfaces") { #>
<#    if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, prop.RuntimeReturnType.Name.Substring(1)))) { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = new <#= prop.RuntimeReturnType.Name.Substring(1) #>RequestHandler().CopyRelatedEntityToFeedEntry(entity.<#= name #>, entry.<#= name #>, <#= name #>Include);
            }
<#    } else { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = GenerateKey(entity.<#= name #>);
            }
<#    } #>
<#   } else { #>
<#    var returnItemType = GetGenericCollectionItemType(prop.RuntimeReturnType); #>
<#    if (returnItemType != null) { #>
<#     if (returnItemType.Namespace == "Sage.Entity.Interfaces") { #>
<#      if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, returnItemType.Name.Substring(1)))) { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = new <#= returnItemType.Name.Substring(1) #>RequestHandler().CopyRelatedEntitiesToFeedEntries(entity.<#= name #>, entry.<#= name #>, entry.Uri, <#= name #>Include);
            }
<#      } else { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = GenerateKeys(entity.<#= name #>);
            }
<#      } #>
<#     } else { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = new List<<#= returnItemType.Name #>>(entity.<#= name #>);
            }
<#     } #>
<#    } else { #>
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = entity.<#= name #>;
            }
<#    } #>
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (parents.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in parents) { #>
<#   var name = relation.ChildProperty.PropertyName; #>
<#   var precedence = (int) relation.ChildProperty.DisplayCategory; #>
<#   if (IsEntityIncluded(relation.ParentEntity)) { #>
<#    RequestReferenceCopyEntityToFeedEntry(name, precedence); #>
<#   } else { #>
<#    name += "Id"; #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = GenerateKey(entity.<#= relation.ChildProperty.PropertyName #>);
            }
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (children.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in children) { #>
<#   var name = relation.ParentProperty.PropertyName; #>
<#   var precedence = (int) relation.ParentProperty.DisplayCategory; #>
<#   if (relation.Cardinality == "1:M") { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = <#= name #>RequestHandler.CopyRelatedEntitiesToFeedEntries(entity.<#= name #>, entry.<#= name #>, entry.Uri, <#= name #>Include);
            }
            else if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = <#= name #>RequestHandler.CreateLinkFeed(entry.Uri);
            }
<#   } else if (IsEntityIncluded(relation.ChildEntity)) { #>
<#     RequestReferenceCopyEntityToFeedEntry(name, precedence); #>
<#   } else { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = GenerateKey(entity.<#= name #>);
            }
<#   } #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
            #region 1:1 Parent Entity Extension
<#  var name = entity.ExtendedEntity.Name; #>
<#  if (IsEntityIncluded(entity.ExtendedEntity)) { #>
<#   RequestReferenceCopyEntityToFeedEntry(name, 3); #>
<#  } else { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, 3, true))
            {
                entry.<#= name #> = GenerateKey(entity.<#= name #>);
            }
<#  } #>
            #endregion
<# } #>

<# if (extenders.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in extenders) { #>
<#   var name = child.Name; #>
<#   if (IsEntityIncluded(child)) { #>
<#    RequestReferenceCopyEntityToFeedEntry(name, 3); #>
<#   } else { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, 3, true))
            {
                entry.<#= name #> = GenerateKey(entity.<#= name #>);
            }
<#   } #>
<#  } #>
            #endregion
<# } #>
            base.CopyEntityToFeedEntry(entity, entry, include);
        }

        protected override void CalculateETagHash(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity, InclusionNode include, InclusionNode hashInclude, ref long hash)
        {
<# if (includedParents.Count > 0) { #>
            #region M:1 Relationships
<#  foreach (var relation in includedParents) { #>
<#   RequestCalculateETagHash(relation.ChildProperty.PropertyName, (int) relation.ChildProperty.DisplayCategory); #>
<#  } #>
            #endregion
<# } #>

<# if (includedChildren.Count > 0) { #>
            #region 1:M Relationships
<#  foreach (var relation in includedChildren) { #>
<#   RequestCalculateETagHash(relation.ParentProperty.PropertyName, (int) relation.ParentProperty.DisplayCategory); #>
<#  } #>
            #endregion
<# } #>

<# if (entity.IsExtension) { #>
<#  var parent = entity.ExtendedEntity; #>
<#  if (IsEntityIncluded(parent)) { #>
            #region 1:1 Parent Entity Extension
<#   RequestCalculateETagHash(parent.Name, 3); #>
            #endregion
<#  } #>
<# } #>

<# if (includedExtenders.Count > 0) { #>
            #region Child Extensions
<#  foreach (var child in includedExtenders) { #>
<#   RequestCalculateETagHash(child.Name, 3); #>
<#  } #>
            #endregion
<# } #>
            base.CalculateETagHash(entity, include, hashInclude, ref hash);
        }

<# if (entity.HasCompositeKey || generator.ToClrType(entity.KeyProperty) != "String") { #>
        protected override void ConvertKey(ref string name, ref object value)
        {
<# if (entity.HasCompositeKey) { #>
<#  if (entity.HasCompleteCompositeKeyRelationships) { #>
<#   foreach (var relation in entity.CompositeKeyRelationships) { #>
<#    var prop = relation.Columns[0].ChildProperty; #>
            if (string.Equals(name, "<#= prop.PropertyName #>", StringComparison.InvariantCultureIgnoreCase))
            {
                name = "<#= relation.ChildProperty.PropertyName #>.Id";
                value = ChangeType(value, typeof (<#= generator.ToClrType(prop) #>));
            }
<#   } #>
<#  } else { #>
<#   foreach (var key in entity.KeyProperties) { #>
            if (string.Equals(name, "<#= key.Reference.PropertyName #>", StringComparison.InvariantCultureIgnoreCase))
            {
                name = "<#= key.Reference.PropertyName #>";
                value = ChangeType(value, typeof (<#= generator.ToClrType(key.Reference) #>));
            }
<#   } #>
<#  } #>
<# } else { #>
            name = "Id";
            value = ChangeType(value, typeof (<#= generator.ToClrType(entity.KeyProperty) #>));
<# } #>
        }
<# } #>

<# if (entity.HasCompositeKey) { #>
        protected override IList<string> GetKeyNames()
        {
            return new[]
                       {
<#  foreach (var key in entity.KeyProperties.OrderByOrdinalPosition()) { #>
                           "<#= key.Reference.PropertyName #>",
<#  } #>
                       };
        }
<# } #>

<# if (sdataExt.UniqueIdentifierProperty != null && IsPropertyIncluded(sdataExt.UniqueIdentifierProperty)) { #>
        protected override string UniqueIdentifierName
        {
            get { return "<#= sdataExt.UniqueIdentifierProperty.PropertyName #>"; }
        }

        protected override Guid? GetUniqueIdentifier(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity)
        {
<#  var fieldProp = sdataExt.UniqueIdentifierProperty as OrmFieldProperty; #>
<#  if (fieldProp != null && fieldProp.IsDynamic) { #>
            return (Guid?) entity["<#= sdataExt.UniqueIdentifierProperty.PropertyName #>"];
<#  } else { #>
            return entity.<#= sdataExt.UniqueIdentifierProperty.PropertyName #>;
<#  } #>
        }
<#  if (fieldProp != null && !(fieldProp.IsReadOnly || (entity.HasCompleteCompositeKeyRelationships && fieldProp.IsKeyProperty))) { #>
        protected override void SetUniqueIdentifier(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity, Guid? uuid)
        {
<#   if (fieldProp.IsDynamic) { #>
            entity["<#= sdataExt.UniqueIdentifierProperty.PropertyName #>"] = uuid;
<#   } else { #>
            entity.<#= sdataExt.UniqueIdentifierProperty.PropertyName #> = uuid;
<#   } #>
        }
<#  } #>
<# } #>

<# if (sdataExt.LastUpdatedProperty != null && IsPropertyIncluded(sdataExt.LastUpdatedProperty)) { #>
        protected override DateTime? GetLastUpdated(global::Sage.Entity.Interfaces.<#= entity.InterfaceName #> entity)
        {
<#  var fieldProp = sdataExt.LastUpdatedProperty as OrmFieldProperty; #>
<#  if (fieldProp != null && fieldProp.IsDynamic) { #>
            return (DateTime?) entity["<#= sdataExt.LastUpdatedProperty.PropertyName #>"];
<#  } else { #>
            return entity.<#= sdataExt.LastUpdatedProperty.PropertyName #>;
<#  } #>
        }
<# } #>

        #endregion
    }
}

#endregion

#region Feed Related Classes

namespace Sage.Integration.Entity.Feeds
{
    public class <#= entity.Name #>Feed : Feed<<#= entity.Name #>Entry>
    {
        public const string DefaultTitle = "Sage SalesLogix | <#= sdataExt.PathName #>";
        public const string ResourceName = "<#= entity.Name #>";
        public const string ResourcePath = "<#= sdataExt.PathName #>";

        public <#= entity.Name #>Feed()
        {
            Title = DefaultTitle;
            SubTitle = "Provides a feed containing <#= entityDisplayName #> details";
            Version = "1.0";
            Generator.Version = Constants.FeedGeneratorVersion;
            Generator.Name = Constants.FeedGenerator;
            Author = new FeedAuthor {Name = Constants.FeedAuthor};
        }
    }

    [PresentationSchema("<#= entity.Name #>Overview", PresentationSchemaType.Content)]
    [PresentationSchema("<#= entity.Name #>Detailed", PresentationSchemaType.Alternate)]
    [ResourceManager(typeof (Resources))]
    [XmlType(<#= entity.Name #>Feed.ResourceName, Namespace = Constants.XmlNamespace)]
    [SMEResource(Path = <#= entity.Name #>Feed.ResourcePath, Label = "<#= entityDisplayName #>", PluralName = <#= entity.Name #>Feed.ResourcePath, Role = RoleType.ResourceKind,
                 CanGet = true, CanPost = <#= sdataExt.CanPost.ToString().ToLower() #>, CanPut = <#= sdataExt.CanPut.ToString().ToLower() #>, CanDelete = <#= sdataExt.CanDelete.ToString().ToLower() #>,
                 CanPagePrevious = true, CanPageNext = true, CanPageIndex = true,
                 BatchingMode = SyncModesType.SyncOrAsync, SupportsETag = true, HasTemplate = true,
                 HasUuid = <#= (sdataExt.UniqueIdentifierProperty != null && IsPropertyIncluded(sdataExt.UniqueIdentifierProperty)).ToString().ToLower() #>)]
    public class <#= entity.Name #>Entry : DynamicFeedEntry
    {
        private static readonly XmlSerializerNamespaces _serializerNamespaces = new XmlSerializerNamespaces(new[] {new XmlQualifiedName(Constants.XmlPrefix, Constants.XmlNamespace)});

        [XmlNamespaceDeclarations]
        [XmlIgnore]
        private static XmlSerializerNamespaces SerializerNamespaces
        {
            get { return _serializerNamespaces; }
        }

        public <#= entity.Name #>Entry()
        {
            base.Author = new FeedAuthor {Name = Constants.FeedAuthor};
        }

<# if (properties.Count > 0) { #>
        #region Properties
<#  foreach (var prop in properties) { #>
<#   var type = generator.ToClrType(prop); #>
<#   var readOnly = prop.IsReadOnly || (entity.HasCompleteCompositeKeyRelationships && prop.IsKeyProperty); #>
<#   var attr = generator.GetPropertySMEMetadataAttribute(prop); #>
<#   FeedEntryProperty(type, prop.PropertyName, readOnly, attr); #>
<#  } #>
        #endregion
<# } #>

<# if (customProperties.Count > 0) { #>
        #region Custom Properties
<#  foreach (var prop in customProperties) { #>
<#   string type; #>
<#   if (prop.RuntimeReturnType.Namespace == "Sage.Entity.Interfaces") { #>
<#    if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, prop.RuntimeReturnType.Name.Substring(1)))) { #>
<#     type = prop.RuntimeReturnType.Name.Substring(1) + "Entry"; #>
<#    } else { #>
<#     type = "String"; #>
<#    } #>
<#   } else { #>
<#    var returnItemType = GetGenericCollectionItemType(prop.RuntimeReturnType); #>
<#    if (returnItemType != null) { #>
<#     if (returnItemType.Namespace == "Sage.Entity.Interfaces") { #>
<#      if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, returnItemType.Name.Substring(1)))) { #>
<#       type = returnItemType.Name.Substring(1) + "Feed"; #>
<#      } else { #>
<#       type = "List<String>"; #>
<#      } #>
<#     } else { #>
<#      type = "List<" + returnItemType.Name + ">"; #>
<#     } #>
<#    } else { #>
<#     type = prop.ReturnType; #>
<#    } #>
<#   } #>
<#   var attr = generator.GetPropertySMEMetadataAttribute(prop); #>
<#   FeedEntryProperty(type, prop.PropertyName, true, attr); #>
<#  } #>
        #endregion
<# } #>

<# if (parents.Count > 0) { #>
        #region M:1 Relationships
<#  foreach (var relation in parents) { #>
<#   string type; #>
<#   string name = relation.ChildProperty.PropertyName; #>
<#   if (IsEntityIncluded(relation.ParentEntity)) { #>
<#    type = relation.ParentEntity.Name + "Entry"; #>
<#   } else { #>
<#    type = "String"; #>
<#    name += "Id"; #>
<#   } #>
<#   var attr = generator.GetPropertySMEMetadataAttribute(relation.ChildProperty); #>
<#   FeedEntryProperty(type, name, false, attr); #>
<#  } #>
        #endregion
<# } #>

<# if (children.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in children) { #>
<#   string type; #>
<#   if (IsEntityIncluded(relation.ChildEntity)) { #>
<#    type = relation.ChildEntity.Name + (relation.Cardinality == "1:M" ? "Feed" : "Entry"); #>
<#   } else { #>
<#    type = relation.Cardinality == "1:M" ? "List<String>" : "String"; #>
<#   } #>
<#   var attr = generator.GetPropertySMEMetadataAttribute(relation.ParentProperty); #>
<#   FeedEntryProperty(type, relation.ParentProperty.PropertyName, false, attr); #>
<#  } #>
        #endregion
<# } #>

<# if (entity.IsExtension) { #>
        #region 1:1 Parent Entity Extension
<#  var parent = entity.ExtendedEntity; #>
<#  string type; #>
<#  bool readOnly; #>
<#  if (IsEntityIncluded(parent)) { #>
<#   type = parent.Name + "Entry"; #>
<#   readOnly = false; #>
<#  } else { #>
<#   type = "String"; #>
<#   readOnly = true; #>
<#  } #>
<#  var attr = generator.GetPropertySMEMetadataAttribute(parent, true); #>
<#  FeedEntryProperty(type, parent.Name, readOnly, attr); #>
        #endregion
<# } #>

<# if (extenders.Count > 0) { #>
        #region Child Extensions
<#  foreach (var child in extenders) { #>
<#   string type; #>
<#   bool readOnly; #>
<#   if (IsEntityIncluded(child)) { #>
<#    type = child.Name + "Entry"; #>
<#    readOnly = false; #>
<#   } else { #>
<#    type = "String"; #>
<#    readOnly = true; #>
<#   } #>
<#   var attr = generator.GetPropertySMEMetadataAttribute(child, false); #>
<#   FeedEntryProperty(type, child.Name, readOnly, attr); #>
<#  } #>
        #endregion
<# } #>
    }

<# foreach (var method in methods) { #>
    [XmlType("<#= entity.Name #><#= method.MethodName #>", Namespace = Constants.XmlNamespace)]
    [SMEResource(Path = "<#= sdataExt.PathName #>/$service/<#= method.MethodName #>", CanPost = true,
        BatchingMode = SyncModesType.SyncOrAsync, HasTemplate = true, Role = RoleType.ServiceOperation)]
    public class <#= entity.Name #><#= method.MethodName #>Entry : FeedEntry
    {
        private static readonly XmlSerializerNamespaces _serializerNamespaces = new XmlSerializerNamespaces(new[] {new XmlQualifiedName(Constants.XmlPrefix, Constants.XmlNamespace)});

        [XmlNamespaceDeclarations]
        [XmlIgnore]
        private static XmlSerializerNamespaces SerializerNamespaces
        {
            get { return _serializerNamespaces; }
        }

        public <#= entity.Name #><#= method.MethodName #>Entry()
        {
            Author = new FeedAuthor {Name = Constants.FeedAuthor};
            Request = new ServiceRequest();
        }

        [XmlElement("request")]
        [SMERelationshipProperty(IncludeByDefault = true)]
        public ServiceRequest Request { get; set; }

        [XmlType("<#= entity.Name #><#= method.MethodName #>Request", Namespace = Constants.XmlNamespace)]
        [SMEResource(Role = RoleType.ServiceOperation)]
        public class ServiceRequest
        {
            [XmlNamespaceDeclarations]
            [XmlIgnore]
            private static XmlSerializerNamespaces SerializerNamespaces
            {
                get { return _serializerNamespaces; }
            }

            [SMERelationshipProperty(IncludeByDefault = true)]
            [XmlElement("entity")]
            public <#= entity.Name #>Entry Entity { get; set; }

            public string <#= entity.Name #>Id { get; set; }
<#   foreach (var param in method.MethodParameters) { #>
<#    if (param.RuntimeParamType.Namespace == "Sage.Entity.Interfaces") { #>
<#     if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, param.RuntimeParamType.Name.Substring(1)))) { #>
            [SMERelationshipProperty(IncludeByDefault = true)]
            public <#= param.RuntimeParamType.Name.Substring(1) #>Entry <#= param.ParamName #> { get; set; }
<#     } else { #>
            public string <#= param.ParamName #> { get; set; }
<#     } #>
<#    } else { #>
<#     var itemType = GetGenericCollectionItemType(param.RuntimeParamType); #>
<#     if (itemType != null) { #>
            [SMERelationshipProperty(IncludeByDefault = true)]
<#      if (itemType.Namespace == "Sage.Entity.Interfaces") { #>
<#       if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, itemType.Name.Substring(1)))) { #>
            public <#= itemType.Name.Substring(1) #>Feed <#= param.ParamName #> { get; set; }
<#       } else { #>
            public List<string> <#= param.ParamName #> { get; set; }
<#       } #>
<#      } else { #>
            public List<<#= itemType.Name #>> <#= param.ParamName #> { get; set; }
<#      } #>
<#     } else { #>
            public <#= param.ParamType #> <#= param.ParamName #> { get; set; }
<#     } #>
<#    } #>
<#   } #>
        }

<#  if (method.RuntimeReturnType != typeof (void)) { #>
        [XmlElement("response")]
        [SMERelationshipProperty(IncludeByDefault = true)]
        public ServiceResponse Response { get; set; }

        [XmlType("<#= entity.Name #><#= method.MethodName #>Response", Namespace = Constants.XmlNamespace)]
        [SMEResource(Role = RoleType.ServiceOperation)]
        public class ServiceResponse
        {
            [XmlNamespaceDeclarations]
            [XmlIgnore]
            private static XmlSerializerNamespaces SerializerNamespaces
            {
                get { return _serializerNamespaces; }
            }

<#   if (method.RuntimeReturnType.Namespace == "Sage.Entity.Interfaces") { #>
<#    if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, method.RuntimeReturnType.Name.Substring(1)))) { #>
            [SMERelationshipProperty(IncludeByDefault = true)]
            public <#= method.RuntimeReturnType.Name.Substring(1) #>Entry Result { get; set; }
<#    } else { #>
            public string Result { get; set; }
<#    } #>
<#   } else { #>
<#    var returnItemType = GetGenericCollectionItemType(method.RuntimeReturnType); #>
<#    if (returnItemType != null) { #>
            [SMERelationshipProperty(IncludeByDefault = true)]
<#     if (returnItemType.Namespace == "Sage.Entity.Interfaces") { #>
<#      if (IsEntityIncluded(OrmEntity.GetByName(entity.Project, returnItemType.Name.Substring(1)))) { #>
            public <#= returnItemType.Name.Substring(1) #>Feed Result { get; set; }
<#      } else { #>
            public List<string> Result { get; set; }
<#      } #>
<#     } else { #>
            public List<<#= returnItemType.Name #>> Result { get; set; }
<#     } #>
<#    } else { #>
            public <#= method.ReturnType #> Result { get; set; }
<#    } #>
<#   } #>
        }
<#  } #>
    }
<# } #>
}

#endregion
<#+
[Dependency]
public IDictionary Context { get; set; }
#>
<#+ private void RequestRelatedHandler(string propName, string entityName, string forwardPath, string backwardPath, bool isSingle) { #>
        private <#= entityName #>RequestHandler _<#= propName #>RequestHandler;
        private <#= entityName #>RequestHandler <#= propName #>RequestHandler
        {
            get { return _<#= propName #>RequestHandler ?? (_<#= propName #>RequestHandler = new <#= entityName #>RequestHandler(this, <#= forwardPath != null ? "\"" + forwardPath + "\"" : "null" #>, <#= backwardPath != null ? "\"" + backwardPath + "\"" : "null" #>, <#= isSingle.ToString().ToLower() #>)); }
        }
<#+ } #>
<#+ private void RequestBuildTemplateEntity(string name, int precedence, bool isCollection) { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
<#+  if (isCollection) { #>
                entity.<#= name #>.Add(<#= name #>RequestHandler.BuildTemplateEntity(<#= name #>Include));
<#+  } else { #>
                entity.<#= name #> = <#= name #>RequestHandler.BuildTemplateEntity(<#= name #>Include);
<#+  } #>
            }
<#+ } #>
<#+ private void RequestReferenceCopyFeedEntryToEntity(string name, string otherName, bool isCollection) { #>
            if (entry.IsPropertyChanged("<#= name #>"))
            {
                var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
                if (include != null && <#= name #>Include == null && entry.<#= name #> != null && entry.<#= name #>.GetChangedProperties().Length > 0)
                {
                    <#= name #>Include = new InclusionNode(InclusionNode.InclusionLevel.Include);
                    include.SetChild("<#= name #>", <#= name #>Include);
                }
                var parent = <#= name #>RequestHandler.CopyRelatedFeedEntryToEntity(entry.<#= name #>, entity.<#= name #>, <#= name #>Include);
                entity.<#= name #> = parent;
<#+  if (otherName != null && !isCollection) { #>
                if (parent != null)
                {
                    parent.<#= otherName #> = entity;
                }
<#+  } #>
            }
<#+ } #>
<#+ private void RequestReferenceCopyEntityToFeedEntry(string name, int precedence) { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                entry.<#= name #> = <#= name #>RequestHandler.CopyRelatedEntityToFeedEntry(entity.<#= name #>, entry.<#= name #>, <#= name #>Include);
            }
            else if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, true))
            {
                entry.<#= name #> = <#= name #>RequestHandler.CreateLinkEntry(entity.<#= name #>);
            }
<#+ } #>
<#+ private void RequestCalculateETagHash(string name, int precedence) { #>
            var <#= name #>Include = include != null ? include.GetChild("<#= name #>") : null;
            if (InclusionNode.IsIncluded(include, <#= name #>Include, <#= precedence #>, false))
            {
                var <#= name #>HashInclude = new InclusionNode(InclusionNode.InclusionLevel.Include);
                hashInclude.SetChild("<#= name #>", <#= name #>HashInclude);
                <#= name #>RequestHandler.CalculateRelatedETagHash(entity.<#= name #>, <#= name #>Include, <#= name #>HashInclude, ref hash);
            }
<#+ } #>
<#+ private void FeedEntryProperty(string type, string name, bool readOnly, string smeAttribute) { #>
        <#= type #> _<#= name #>;
<#+  if (!string.IsNullOrEmpty(smeAttribute)) { #>
        [<#= smeAttribute #>]
<#+  } #>
        public <#= typeof (FeedEntry).GetProperty(name) != null ? "new " : "" #><#= type #> <#= name #>
        {
            get { return _<#= name #>; }
            <#= readOnly ? "internal" : "" #> set { SetProperty("<#= name #>", ref _<#= name #>, value); }
        }
<#+ } #>
<#+ private static bool IsEntityIncluded(OrmEntity entity)
    {
        return entity.Package.Include && entity.Generate && !entity.IsDynamic && entity.GetGenerateFeed();
    } #>
<#+ private static bool IsPropertyIncluded(OrmEntityProperty prop)
    {
        return prop.Include && prop.GetGenerate();
    } #>
<#+ private static bool IsTypeSupported(Type type)
    {
        if (type == null)
        {
            return false;
        }

        if (type == typeof (string))
        {
            return true;
        }

        if (type.IsGenericType)
        {
            if (type.GetGenericTypeDefinition() == typeof (Nullable<>))
            {
                return IsTypeSupported(type.GetGenericArguments()[0]);
            }

            var itemType = GetGenericCollectionItemType(type);

            if (itemType != null)
            {
                return IsTypeSupported(itemType);
            }
        }
        else
        {
            if (type.IsValueType && type.Namespace == "System")
            {
                return true;
            }

            if (type.IsInterface && type.Namespace == "Sage.Entity.Interfaces")
            {
                return true;
            }
        }

        return false;
    } #>
<#+ private static Type GetGenericCollectionItemType(Type type)
    {
        if (type.IsGenericType)
        {
            var args = type.GetGenericArguments();
            if (args.Length == 1 &&
                typeof(ICollection<>).MakeGenericType(args).IsAssignableFrom(type))
            {
                return args[0];
            }
        }
        return null;
    } #>]]></template>
  <description>Default SalesLogix SData template</description>
</codeTemplate>
