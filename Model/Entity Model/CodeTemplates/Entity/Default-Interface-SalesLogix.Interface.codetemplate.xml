<?xml version="1.0"?>
<codeTemplate xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="5e8b7df7-0ec3-46b3-b8f4-f7bde7d5a6a3" name="Default-Interface-SalesLogix" templateType="Interface" templateEngineType="T4">
  <template><![CDATA[<#@ template language="C#v3.5" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="Microsoft.Unity.dll" #>
<#@ assembly name="Sage.Platform.dll" #>
<#@ assembly name="Sage.Platform.Orm.CodeGen.dll" #>
<#@ assembly name="Sage.Platform.Projects.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.Practices.Unity" #>
<#@ import namespace="Sage.Platform.Orm.CodeGen" #>
<#@ import namespace="Sage.Platform.Orm.DataTypes" #>
<#@ import namespace="Sage.Platform.Orm.Entities" #>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// disable XML documentation warnings
#pragma warning disable 1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using Sage.Platform.ComponentModel;
using Sage.Platform.Metadata;
using Sage.Platform.Orm;
using Sage.Platform.Orm.Attributes;
using Sage.Platform.Orm.Interfaces;
<#
var tools = (Tools) Context["tools"];
var entity = (OrmEntity) Context["entity"];
var generator = (EntityInterfaceGenerator) Context["generator"];
#>
<#
var parents = entity.ParentEntities.Where(relation => relation.ChildProperty.Include && IsEntityIncluded(relation.ParentEntity)).ToList();
var children = entity.ChildEntities.Where(relation => relation.ParentProperty.Include && IsEntityIncluded(relation.ChildEntity)).ToList();
var extenders = entity.ExtensionEntities.Where(extender => IsEntityIncluded(extender)).ToList();
var properties = OrmEntity.GetIncludedProperties(entity, true).OfType<OrmFieldProperty>().ToList();
var customProperties = generator.GetIncludedCustomProperties(entity).ToList();

//capture some global variables of entity state
var isHistory = (bool) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "IsHistoryTable");
string foreignPropertyName = null;
var isRelationProperty = false;
if (isHistory) {
    foreignPropertyName = (string) tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "ForeignIdProperty");
    var foreignProperty = entity.GetPropertyByPropertyName(foreignPropertyName);
    isRelationProperty = (foreignProperty.GetType().Name == "OrmRelationProperty");
}
var historyTypeName = tools.ExtendedProperty(entity, "{1589723D-0536-4BF3-BDD7-3F6F7FE165D0}", "HistoryTypeName");
var hasDisplayProperty = (entity.DisplayProperty != null);

//composite key constants
var ck_useRelationships = entity.HasCompleteCompositeKeyRelationships;
#>
<# if (entity.HasCompositeKey) { #>
// Generating relationships for composite entity: <#= ck_useRelationships #>
<# } #>
namespace Sage.Entity.Interfaces
{
    <#= generator.GetClassComments(entity) #>
<# if (isHistory) { #>
    [ExtendedMetadata("IsHistoryTable", true)]
    [ExtendedMetadata("IsRelationProperty", <#= isRelationProperty.ToString().ToLower() #>)]
    [ExtendedMetadata("ForeignPropertyName", "<#= foreignPropertyName #>")]
<# } #>
<# if (hasDisplayProperty) { #>
    [DisplayValuePropertyName("<#= entity.DisplayProperty.PropertyName #>")]
<# } #>
<# if (entity.LocalResources.ContainsResource(entity.DisplayNameKey)) { #>
    [Properties.SRDisplayName("<#= entity.DisplayNameKey #>")]
<# } #>
<# if (entity.LocalResources.ContainsResource(entity.DisplayNamePluralKey)) { #>
    [Properties.SRPluralDisplayName("<#= entity.DisplayNamePluralKey #>")]
<# } #>
    [TypeConverter(typeof(EntityReferenceConverter))]
    [ActiveRecord("<#= entity.TableName #>")]
    [Images("<#= entity.SmallImage #>", "<#= entity.LargeImage #>")]
    public interface <#= entity.InterfaceName #> : IPersistentEntity, IDynamicEntity<# if (!entity.HasCompositeKey) { #>, IComponentReference <# } else { #>, ICompositeKeyEntity <# } #>
    {
        #region Public Properties

        /// <summary>
        /// Gets the unique identifier for this instance
        /// </summary>
        Guid InstanceId{ get; }

        /// <summary>
        /// <c>true</c> if the current object is being created.
        /// </summary>
        [System.ComponentModel.Bindable(false)]
        bool Creating { get; }

        #region Key Properties
<# foreach (var key in entity.KeyProperties) { #>
<#  if (key.Reference.Include) { #>
        [Properties.ExtendedTypeInformationAttribute("<#= key.Reference.Entity.Name #>_<#= key.Reference.PropertyName #>", "<#= generator.GetDataTypeName(key.Reference) #>")]
<#   if (entity.HasCompositeKey) { #>
<#    var keyordinal = key.OrdinalPosition - 1; #>
        [CompositeKey(<#= keyordinal #>)]
<#   } #>
        <#= generator.ToClrType(key.Reference) #> <#= key.Reference.PropertyName #> { get;<# if (!ck_useRelationships) { #> set;<# } #> }
<#  } #>
<# } #>
        #endregion Key Properties

<# foreach (var prop in properties) { #>
        <#= generator.GetTypeConverterAttribute(prop) #>
<#  if (entity.LocalResources.ContainsResource(prop.DisplayNameKey)) { #>
        [Properties.SRDisplayName("<#= prop.DisplayNameKey #>")]
<#  } #>
        [Properties.ExtendedTypeInformationAttribute("<#= prop.Entity.Name #>_<#= prop.PropertyName #>", "<#= generator.GetDataTypeName(prop) #>")]
        [Field("<#= prop.ColumnName #>")]
        <#= generator.ToClrType(prop) #> <#= prop.PropertyName #> { get;<# if (!prop.IsReadOnly) { #> set;<# } #> }
<# } #>

<# if (customProperties.Count > 0) { #>
        #region Custom Properties
<#  foreach (var prop in customProperties) { #>
        <#= prop.ReturnType #> <#= prop.PropertyName #> {<# if (prop.HasGet) { #> get;<# } #> <# if (prop.HasSet) { #> set;<# } #> }
<#  } #>
        #endregion Custom Properties
<# } #>

<# if (parents.Count > 0) { #>
        #region M:1 Relationships
<#  foreach (var relation in parents) { #>
<#   if (entity.LocalResources.ContainsResource(relation.ChildProperty.DisplayNameKey)) { #>
        [Properties.SRDisplayName("<#= relation.ChildProperty.DisplayNameKey #>")]
<#   } #>
        [BelongsTo]
        <#= relation.ParentEntity.InterfaceName #> <#= relation.ChildProperty.PropertyName #> { get; set; }
<#  } #>
        #endregion M:1 Relationships
<# } #>

<# if (children.Count > 0) { #>
        #region 1:M Relationships
<#  foreach (var relation in children) { #>
<#   if (entity.LocalResources.ContainsResource(relation.ParentProperty.DisplayNameKey)) { #>
        [Properties.SRDisplayName("<#= relation.ParentProperty.DisplayNameKey #>")]
<#   } #>
<#   if (relation.Cardinality == "1:M") { #>
        ICollection<<#= relation.ChildEntity.InterfaceName #>> <#= relation.ParentProperty.PropertyName #> { get; }
<#   } else if (relation.Cardinality == "M:1") { #>
        [BelongsTo]
<#    if (relation.ParentProperty.IsNullable) { #>
        [IsNullable]
<#    } #>
        <#= relation.ChildEntity.InterfaceName #> <#= relation.ParentProperty.PropertyName #> { get; set; }
<#   } #>
<#  } #>
        #endregion 1:M Relationships
<# } #>

<# if (entity.IsExtension && IsEntityIncluded(entity.ExtendedEntity)) { #>
        #region 1:1 Parent Entity Extension

        [OneToOne]
        <#= entity.ExtendedEntity.InterfaceName #> <#= entity.ExtendedEntity.Name #> { get; set ; }

        #endregion 1:1 Parent Entity Extension
<# } #>

<# if (extenders.Count > 0) { #>
        #region Child extensions
<#  foreach (var child in extenders) { #>
        [OneToOne]
        <#= child.InterfaceName #> <#= child.Name #> { get; set; }
<#  } #>
        #endregion Child extensions
<# } #>

        #endregion Public Properties

<# var methods = entity.Methods; #>
<# if (methods.Count > 0) { #>
        #region Business Rule Methods
<#  foreach (var method in methods) { #>
        <#= generator.GetMethodComments(method) #>
        <#= method.ReturnType #> <#= method.MethodName #>(<#= tools.FormatParamDeclarationList(method) #>);
<#  } #>
        #endregion Business Rule Methods
<# } #>
    }

<# foreach (var prop in generator.GetEnumProperties(entity)) { #>
    [TypeConverter(typeof(EnumTypeConverter<<#= entity.Name #><#= prop.PropertyName #>>))]
<#  if (((EnumDataType) prop.DataType).MultiSelect) { #>
    [Flags]
<#  } #>
    public enum <#= entity.Name #><#= prop.PropertyName #>
    {
<#  foreach (var item in ((EnumDataType) prop.DataType).Items) { #>
<#   if (entity.LocalResources.ContainsResource(item.DisplayNameKey)) { #>
        [Properties.SRDisplayName("<#= item.DisplayNameKey #>")]
<#   } #>
<#   if (item.Code != null) { #>
        [EnumCode("<#= item.Code #>")]
<#   } #>
        <#= item.Name #> = <#= item.Value #>,
<#  } #>
    }
<# } #>
}
<#+
[Dependency]
public IDictionary Context { get; set; }
#>
<#+ private static bool IsEntityIncluded(OrmEntity entity)
    {
        return entity.Package.Include && entity.Generate && !entity.IsDynamic;
    } #>]]></template>
  <description>Default SalesLogix entity interface template</description>
</codeTemplate>